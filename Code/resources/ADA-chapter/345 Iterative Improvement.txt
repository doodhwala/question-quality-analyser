successful men success result steady accretion alexander graham bell greedy strategy considered preceding chapter constructs solution optimization problem piece adding locally optimal piece partially constructed solution chapter discuss approach designing algorithms optimization problems starts feasible solution satisfies constraints problem proceeds repeated applications simple typically involves small localized yielding feasible solution improved objective function improves objective function algorithm returns feasible solution optimal stops obstacles successful implementation idea initial feasible solution problems trivial solution approximate solution obtained greedy algorithm finding initial solution require effort solving problem feasible solution identified allowed feasible solution efficiently current solution locally optimal fundamental difficulty issue local global extremum maximum minimum problem finding highest hilly area map foggy day logical thing walking hill impossible direction lead reached local highest feasibility simple highest global maximum entire area fortunately important problems solved iterativeimprovement algorithms important linear programming encountered topic section simplex method classic algorithm linear programming discovered mathematician george dantzig algorithm proved consequential achievements history algorithmics section important problem maximizing network links capacities problem special case linear programming special structure makes solve problem algorithms efficient simplex method outline classic iterative improvement algorithm problem discovered american mathematicians ford fulkerson sections chapter deal bipartite matching problem finding optimal pairing elements disjoint sets examples matching workers jobs high school graduates colleges men women marriage section deals problem maximizing matched pairs section concerned matching stability discuss iterative improvement algorithms section approximation algorithms traveling salesman knap problems examples iterative improvement algorithms textbook moret shapiro mor books continuous discrete optimization nem literature heuristic mic simplex method encountered linear programming section general problem optimizing linear function variables subject set linear constraints maximize minimize cnxn subject ainxn mentioned important practical problems modeled instances linear programming researchers kantorovich soviet union dutch american koopmans awarded nobel prize contributions linear programming theory applications economics apparently nobel prize mathematics royal swedish academy sciences failed honor mathematician dantzig universally recognized father linear programming modern inventor simplex method classic algorithm solving problems geometric interpretation linear programming general method solving linear programming problems small fundamental prop erties problems linear programming problem vari ables maximize subject definition feasible solution problem satisfies constraints problem feasible region set feasible points instructive sketch feasible region cartesian plane recall equation coefficients equal defines straight line divides plane half planes points easy determine half planes line inequalities hold set points defined inequality comprises points line set points defined inequality comprises points line points feasible region constraints problem feasible region obtained intersection half planes quadrant cartesian plane defined nonnegativity constraints figure feasible region problem convex polygon vertices intersection lines obtained solving linear equations task optimal solution feasible region largest objective function feasible solutions objective function equals points objective function equal line common points george dantzig received honors national medal science presented president united states citation states national medal awarded inventing linear programming discovering methods led wide scale scientific technical applications important problems logistics scheduling network optimization computers making efficient mathematical theory figure feasible region problem feasible region figure posed infinitely feasible points objective function equal intersection points line feasible region lines slope line defined equation constant lines called lines objective function problem restated finding largest parameter line common feasible region line shifting line south west changing slope feasible region hits region shifting line north east hits feasible region means optimal solution linear programming problem maximal objective function equal maximize objective function problem line largest coincide boundary line segment slope lines draw line figure points line segment vertices optimal solutions yielding maximal objective function figure solving dimensional linear programming problem geometrically linear programming problem optimal solution vertex feasible region qualifications begin feasible region linear programming problem constraints contradictory requirements points problem feasible region linear programming problems feasible region called infeasible problems optimal solutions complication arise problem feasible region unbounded demonstrates reverse inequalities problem feasible region problem unbounded figure feasible region linear programming problem unbounded objective function attain finite optimal problem maximizing subject constraints optimal solution points feasible region making large problems called unbounded problem minimizing subject constraints optimal solution figure unbounded feasible region linear programming problem constraints lines function fortunately important features examples considered hold problems variables feasible region typical linear programming problem ways similar convex polygons dimensional cartesian plane specifically finite vertices mathematicians extreme points section optimal solution linear programming problem extreme points feasible region reiterate properties theorem extreme theorem linear programming problem nonempty bounded feasible region optimal solution timal solution extreme problem feasible region theorem implies solve linear programming problem case bounded feasible region finite degenerate instances maximizing subject linear programming problem unbounded feasible region optimal solution extreme feasible region points feasible region principle solve problem computing objective function extreme selecting major obstacles implementing lies mechanism generating extreme points feasible region straightforward algebraic procedure task discovered obstacle lies extreme points typical feasible region news bad extreme points grow exponentially size problem makes exhaustive inspection extreme points unrealistic linear programming problems nontrivial sizes fortunately turns exists algorithm typically inspects small fraction extreme points feasible region reaching optimal famous algorithm called simplex method idea algorithm geometric terms identifying extreme feasible region improved objective function adjacent extreme case current optimal case proceed adjacent extreme improved objective function finite steps algorithm extreme optimal solution occurs determine optimal solution exists outline simplex method task translate geometric description simplex method algorithmically precise language algebra begin apply simplex method linear programming problem represented special called standard requirements maximization problem constraints nonnegativity constraints linear equations nonnegative sides variables required nonnegative general linear programming problem standard constraints unknowns maximize cnxn subject ainxn written compact matrix notations maximize subject amn linear programming problem transformed equivalent problem standard objective function minimized replaced equivalent problem maximizing objective function coefficients replaced section general discussion transformations constraint inequality replaced equivalent equation adding slack variable representing difference sides original inequality inequalities problem transformed equations finally linear programming problems variables required nonnegative begin represent physical quantities case initial statement problem unconstrained variable replaced difference nonnegative variables problem standard linear programming problem variables maximize subject easy optimal solution problem optimal solution problem simply ignoring coordinates principal advantage standard lies simple mechanism identifying extreme points feasible region problem set variables straint equations linear equations unknowns solve general case problem equations unknowns variables set equations unknowns obtained unique solution nondegenerate linear equations equal unknowns basic solution coordinates set solving called nonbasic coordinates obtained solving called basic terminology linear algebra specifically rewrite constraint equations basis dimensional vector space composed vectors proportional basis chosen vector uniquely expressed sum multiples basis vectors basic nonbasic variables vectors included excluded basis choice coordinates basic solution nonnegative basic solution called basic feasible solution set variables solve resulting basic feasible solution set variables solve resulting basic solution feasible importance basic feasible solutions lies correspondence extreme points feasible region extreme feasible region problem figure projection plane incidentally natural starting simplex method application problem mentioned simplex method progresses series adjacent extreme points basic feasible solutions increasing values objective function represented simplex tableau table storing information basic feasible solution extreme simplex tableau problem presented general simplex tableau linear programming problem standard unknowns linear equality constraints rows columns rows table coefficients constraint equation column entry equation columns labeled names variables rows labeled basic variables basic feasible solution tableau represents values basic variables solution column columns labeled basic variables identity matrix row simplex tableau called objective row initialized coefficients objective function signs reversed columns objective function initial column subsequent iterations objective row transformed rows objective row simplex method current tableau represents optimal solution entries objective row possibly column nonnegative case negative entries nonbasic variable basic tableau criterion basic feasible solution represented tableau optimal negative column signals fact objective function increasing coordinate current basic feasible solution coefficient objective function positive larger function compensate adjusting values basic variables feasible case conditions satisfied means min largest adjacent extreme feasible region similarly negative column objective row signals fact objective function increasing coordinate initial basic feasible solution requires means min largest adjacent extreme negative entries objective row commonly select negative largest absolute motivated observation choice yields largest objective function unit variable feasibility constraints impose limits variables choice variable leads smaller objective function commonly select variable basic variable called entering variable column referred pivot column pivot column choose departing variable basic variable nonbasic tableau total basic variables basic solution equal equality constraints adjacent extreme larger objective function entering variable largest make basic variables preserving nonnegativity translate observation choosing departing variable simplex tableau positive entry pivot column compute ratio dividing row entry pivot column tableau ratios row smallest ratio determines departing variable nonbasic ties broken arbitrarily variable row departing variable called pivot row denote positive entries pivot column ratio computed problem unbounded algorithm stops finally steps transform current tableau transformation called pivoting similar principal gauss jordan elimination algorithm solving systems linear equations problem exercises entries pivot row pivot entry pivot column tableau rows objective row difference row entry pivot column tableau yields row simplex method transforms tableau represents basic feasible solution increased objective function equal optimal iteration good yields tableau represents basic feasible solution optimal entries objective row tableau nonnegative maximal objective function equal entry objective row summarize steps simplex method summary simplex method initialization linear programming problem stan dard set initial tableau nonnegative entries rightmost column columns composing identity matrix entries objective row disregarded verifying requirements columns define basic variables initial basic feasible solution labels tableau rows optimality entries objective row possibly rightmost column represents objective function nonnegative tableau represents optimal solution basic variables values rightmost column remaining nonbasic variables values zeros finding entering variable select negative entry elements objective row commonly select negative entry largest absolute ties broken arbitrarily column entering variable pivot column finding departing variable positive entry pivot column ratio dividing row entry column entry pivot column entries pivot column negative problem unbounded row smallest ratio ties broken arbitrarily row departing variable pivot row forming tableau entries pivot row entry pivot column rows objective row pivot row multiplied entry pivot column row make entries pivot column pivot row pivot row variable pivot column notes simplex method formal proofs validity simplex method steps books devoted detailed discussion linear programming dan important remarks method generally speaking iteration simplex method leads extreme problem feasible region greater objective function degenerate cases arise basic variables equal simplex method objective function extreme greater equal previous opens door possibility objective function values stall iterations row algorithm previously considered terminate phenomenon called cycling rarely practice specific examples problems cycling constructed simple modification steps simplex method called bland eliminates theoretical possibility cycling assuming variables denoted subscripted letter stated modified columns negative entry objective row select column smallest subscript modified resolve smallest ratios selecting row labeled basic variable smallest subscript caveat deals assumptions automat ically satisfied problem constraints imposed nonnegative variables inequalities ainxn adding nonnegative slack variable ith constraint equality ainxn quirements imposed initial tableau simplex method satisfied obvious basic feasible solution problem finding initial basic feasible solution nontrivial obstacle problems feasible region initial basic feasible solution exists algorithmic problems ways address issues exten sion classic simplex method called phase simplex method kol nutshell method adds set artificial variables equality constraints problem obvious basic fea sible solution solves linear programming problem minimizing sum artificial variables simplex method optimal solution problem yields initial tableau original problem feasible region original problem efficient simplex method algorithm progresses sequence adjacent points feasible region bad news extreme points grow exponentially problem size worst case efficiency simplex method shown exponential fortunately half century practical experience algorithm shown iterations typical application ranges operations iteration proportional numbers equality constraints variables discovery simplex method subject intensive study researchers worked improvements original algorithm details efficient implementation result efforts programs implementing simplex method polished large problems hundreds thousands constraints variables solved routine manner fact programs evolved sophisticated software packages enable user problem constraints solution user friendly tools investigating important properties solution sensitivity input data investigations important applications economics spectrum linear programming problems moderate size nowadays solved desktop standard spreadsheet facility taking advantage specialized software internet researchers algorithms solving linear programming problems polynomial efficiency worst case important mile stone history algorithms proof khachian kha showing ellipsoid method solve linear programming problem polynomial ellipsoid method slower simplex method practice worst case efficiency encouraged alternatives simplex method narendra karmarkar published algorithm polynomial worst case efficiency competitive simplex method empirical tests discuss karmarkar algorithm kar pointing based iterative improvement idea karmarkar algorithm generates sequence feasible solutions feasible region sequence adjacent extreme points simplex method algorithms called interior methods arb exercises version office location problem exercises integers representing coordinates villages located straight road location office minimizes average distance villages office required located villages devise iterative improvement algorithm problem efficient solve problem solve linear programming problems geometrically maximize subject maximize subject linear programming problem minimize subject real numbers equal coefficient values problem unique optimal solution coefficient values problem infinitely optimal solutions coefficient values problem optimal solution problem inequality constraints strict simplex method problem simplex method problem section implementations internet determine iterations simplex method solve problem maximize subject apply simplex method solve knapsack problem exam ple section good algorithm problem prove linear programming problem optimal solutions linear programming problem maximize subject aij considered primal dual defined linear programming problem minimize subject aij express primal dual problems matrix notations dual linear programming problem maximize subject solve primal dual problems optimal values objective functions maximum problem section important problem maximizing terial transportation network pipeline communication electrical distribution assume transportation network represented connected weighted digraph vertices numbered set edges properties vertex entering edges vertex called source assumed numbered vertex leaving edges vertex called sink assumed numbered weight uij directed edge positive integer called edge capacity represents upper bound material link represented edge digraph satisfying properties called network simply network small instance network figure assumed source sink source destination material vertices points redirected consuming adding material words total material entering intermediate vertex equal total material leaving vertex dition called conservation requirement denote edge xij intermediate vertex conservation requirement expressed equality constraint xji xij slightly general model network sources sinks capacities uij infinitely large figure network graph vertex numbers vertex names edge numbers edge capacities sums left sides express total inflow outflow entering leaving vertex material intermediate vertices network stands reason total material leaving source sink observation derived formally equalities task asked exercises equality quantity total outflow source equivalently total inflow sink called denote quantity maximize flows network feasible assignment real numbers xij edges network conservation constraints capacity constraints xij uij edge maximum problem stated formally optimization problem maximize subject xji xij uij edge solve linear programming problem simplex method algorithm general linear programming problems section special structure problem exploited design faster algorithms natural iterative improvement idea set xij edge network iteration path source sink additional path called augmenting path adjust edges path increased augmenting path augmenting path conclude current optimal general template solving maximum problem called augmenting path method ford fulkerson method ford fulkerson discovered actual implementation augmenting path idea straightforward network figure shown figure amounts edge separated edge capacities slashes notation examples natural flowaugmenting path source sink directed edges current xij edge capacity uij possibilities assume augmenting path maximum units smallest unused capacity edges shown figure simpleminded idea augmenting paths shown figure optimal increased path increasing edges decreasing edge obtained result augmentation shown figure maximal augmenting path paths source sink underlying undirected graph consecutive vertices connected directed edge positive unused capacity rij uij xij edge rij units connected directed edge positive xji decrease edge xji units edges kind called forward edges tail listed vertex defining path edges kind called backward edges tail listed path illustrate path forward edges backward edge augmenting path minimum unused capacities rij forward edges flows xji backward edges easy current forward edge decrease backward edge feasible figure illustration augmenting path method augmenting paths shown bold amounts edge capacities numbers slash units greater predecessor intermediate vertex augmenting path combinations forward backward edges incident vertex conservation requirement vertex hold adjustments edge arrows minimum positive unused capacities forward edges positive flows backward edges augmenting path capacity constraints finally adding edge augmenting path assumption edge capacities integers positive integer increases iteration augmenting path method maximum bounded sum capacities source edges augmenting path method finite iterations surprisingly final turns maximal irrespective sequence augmenting paths remarkable result stems proof max min cut theorem replicate section augmenting path method general specific generating augmenting paths bad sequence paths dramatic impact method efficiency network figure stands large positive integer augment path shown figure augmenting path figure selecting pair augmenting paths total iterations maximum figure maximum iterations augmenting initial path augmenting path dramatic difference iterations makes fortunately ways generate augmenting paths ficiently degradation performance illustrated previous simplest breadth generate augment ing paths edges section version augmenting path method called shortest augmenting path labeled scanned algorithm suggested edmonds karp edm labeling refers marking unlabeled vertex labels additional brought source vertex labeled vertex labeled reached left undefined source convenient vertex reached forward backward edge source labeled vertices labels computed capacity upper bounds irrational numbers augmenting path method terminate chv cleverly devised demonstrating situation limitation theoretical irrational numbers rational numbers transformed integers changing capacity measurement unit figure efficiency degradation augmenting path method unlabeled vertex connected vertex traversal directed edge positive unused capacity rij uij xij vertex labeled min rij unlabeled vertex connected vertex traversal directed edge positive xji vertex labeled min xji labeling enhanced traversal ends labeling sink current augmented sink augmentation performed augmenting path traced vertex labels sink source current quantities increased forward edges decreased backward edges path sink remains unlabeled traversal algorithm returns current maximum stops algorithm shortestaugmentingpath implements shortest augmenting path algorithm input network single source single sink positive integer capacities uij edges output maximum assign xij edge network source dequeue edge forward edges unlabeled rij uij xij rij min rij enqueue edge backward edges unlabeled xji min xji enqueue sink labeled augment augmenting path sink backwards labels source reached vertex xij vertex xji vertex erase vertex labels source reinitialize source current maximum application algorithm network figure illustrated figure optimality final obtained augmenting path method stems theorem relates network flows network cuts cut induced partitioning vertices network subset source complement sink set edges tail denote cut simply network figure cut stems property edges cut deleted network directed path source sink cut directed path source sink vertex path belongs set vertices augment sink path augment sink path augmenting path sink unlabeled current maximal figure illustration shortest augmenting path algorithm diagrams left current iteration begins diagrams results vertex labeling iteration augmenting path bold augmentation vertices deleted symbol sink source predecessor path belongs edge element cut proves property capacity cut denoted defined sum capacities edges compose cut examples cuts capacities equal cuts network nonempty finite exists minimum cut smallest capacity minimum cut network figure theorem establishes important relationship notions maximum minimum cut theorem max min cut theorem maximum network equal capacity minimum cut proof feasible cut capacity network cut defined difference sum flows edges sum flows edges intuitively formally derived equations expressing conservation requirement definition problem section exercises cut equal xij sum nonnegative xij edge exceed edge capacity uij equality implies xij uij feasible network exceed capacity cut network final obtained augmenting path method cut capacity equal conclude view inequality final maximal feasible flows cut capacity minimal cuts network iii maximum equal minimum cut capacity cut set vertices reached source undirected path composed forward edges positive unused capacities respect final backward edges positive flows set source sink augmenting path contradict assumption final cut definition set edge unused capacity xij uij edge applying equality final set defined xij xji uij proves theorem proof outlined accomplishes proving equality maximum minimum cut capacity implies augmenting path method terminates yields maximum mini mum cut labeling kind utilized shortest augmenting path algorithm minimum cut formed edges labeled unlabeled ver tices iteration method finally proof implies edges flows equal edge capacities edges unlabeled vertices labeled flows network figure algorithm finds cut minimum capacity edges required edmonds karp proved paper edm aug menting paths needed shortest augmenting path algorithm exceeds vertices edges required shortest augmenting path breadth networks represented adjacency lists efficiency shortest augmenting path algorithm efficient algorithms maximum problem monograph ahu chapters books cor kle implement augmenting path idea efficient manner based concept preflows preflow satisfies capacity constraints conservation requirement vertex allowed entering vertex leaving preflow algorithm moves excess sink conservation requirement reestablished intermediate vertices network faster gorithms kind worst case efficiency preflow algorithms fall iterative improvement paradigm generate sequence improving solutions constraints problem conclude section pointing initial studying network flows caused transportation applications model proved areas discuss section exercises maximum algorithms require processing edges directions convenient modify adjacency matrix representation network directed edge vertex capacity uij element ith row column set uij element row ith column set uij edge vertices elements set outline simple algorithm identifying source sink network presented matrix efficiency apply shortest augmenting path algorithm maximum minimum cut networks maximum problem unique solution networks capacities edges questions minimum cut problem finding cut smallest capacity network maximum problem network sources sinks transformed problem network single source single sink networks capacity constraints amounts intermediate vertices maximum problem network transformed maximum problem network edge capacity constraints network rooted tree root source leaves sinks edges directed paths root leaves design efficient algorithm finding maximum network efficiency algorithm prove equality prove network cut equal cut equality relationship property equality express maximum problem network figure linear programming problem solve linear programming problem simplex method alternative shortest augmenting path algorithm edmonds karp edm suggested maximum capacity augmenting path algorithm augmented path increases largest implement algorithms language choice empirical investigation relative efficiency write advanced maximum algorithm dinitz algorithm karzanov algorithm iii malhotra kamar maheshwari algorithm goldberg tarjan algorithm dining problem families dinner social interaction sit tables members family table seating arrangement meets objective prove arrangement exists maximum problem assume dinner contingent families ith family members assume tables table seating capacity ahu maximum matching bipartite graphs situations faced problem pairing elements sets traditional boys girls easily applications convenient represent elements sets vertices graph edges vertices paired matching graph subset edges property edges vertex maximum matching precisely maximum cardinality matching largest edges graph figure unique maximum matching problem finding maximum matching graph arbitrary graph difficult problem solved jack edmonds edm gal good survey recent references limit discussion section simpler case bipartite graphs bipartite graph vertices partitioned disjoint sets necessarily size edge connects vertex sets vertex set words graph bipartite vertices colored colors edge vertices colored colors graphs colorable graph figure bipartite difficult prove graph bipartite odd length assume rest section figure bipartite graph vertex set bipartite graph partitioned sets required definition problem exercises apply iterative improvement technique maximumcardinality matching problem matching bipartite graph matching edges vertex matched serves endpoint edge maximum matching chance improving current matching unmatched called free vertices incident edge matching graph figure vertices free vertices matched obvious observation immediately current matching adding edge free vertices adding matching graph figure yields larger matching figure matching larger matching vertex edge matching inclusion requires removal compensated inclusion matching shown figure general size current matching constructing simple path free vertex free vertex edges alternately edge path edge path called augmenting respect matching path augmenting path respect matching figure length augmenting path odd adding matching path edges odd numbered positions deleting path edges numbered positions yields matching edge matching adjustment called augmentation figure matching obtained augmentation matching augmenting path matching obtained augmentation matching augmenting path moving augmenting path matching figure adding edges deleting matching shown figure augmenting path augmenting path augmenting path maximum matching figure augmenting paths matching augmentations matching maximum matching perfect matching matches vertices graph discuss algorithm finding augmenting path issue nonexistence path means theorem discovered french mathematician claude berge means current matching maximal theorem matching maximum matching exists augmenting path respect proof augmenting path respect matching exists size matching increased augmentation prove difficult augmenting path respect matching exists matching maximum matching assume contrary case matching graph maximum matching assumption edges symmetric difference set edges assumption subgraph edges endpoints definition matching vertex incident edge vertices degree connected component path length alternating edges length alternating edges path alternating edges starts ends edge augmenting path matching contradicts assumption path exists discussion augmenting paths leads general method constructing maximum matching bipartite graph initial matching set augmenting path augment current matching path augmenting path terminate algorithm matching maximum specific algorithm implementing general template augmenting path matching bfs traversal graph starts simultaneously free vertices sets logical select smaller vertex sets observation pseudocode recall augmenting path exists odd length path connects free vertex free vertex consists single edge zigs vertex zags uniquely defined edge free vertex reached draw augmenting paths matchings figure candidate path edges alternate pattern motivates rules labeling vertices bfs traversal graph case vertex free vertex adjacent endpoint augmenting path labeling stops augmentation matching commences augmenting path obtained moving backward vertex labels alternately delete edges current matching free connected edge labeled case vertex case matched pseudocode algorithm entirety algorithm maximumbipartitematching finds maximum matching bipartite graph bfs traversal input bipartite graph output maximum cardinality matching input graph initialize set edges valid matching set initialize free vertices dequeue vertex adjacent free augment labeled vertex labels reinitialize free vertices break exit loop matched unlabeled enqueue matched enqueue current matching maximum application algorithm matching figure shown figure algorithm finds maximum matching differs figure augment maximum matching figure application maximum cardinality matching algorithm left column shows current matching initialized iteration column shows vertex labeling generated algorithm augmentation performed matching edges shown bold vertex labels vertices labeling discovered endpoint augmenting path shaded labeled clarity vertices deleted efficient maximum matching algorithm iteration matches previously free vertices sets total iterations exceed vertices graph spent iteration edges graph assumes information status vertex free matched vertex retrieved constant storing array efficiency algorithm hopcroft karp showed efficiency improved combining iterations single stage maximize edges added matching concerned section matching largest vertex pairs bipartite graph applications require taking quality cost matching pairs workers execute jobs efficiencies girls preferences potential partners natural model situations bipartite graphs weights assigned edges leads problem maxi mizing sum weights edges connecting matched pairs vertices problem called maximum weight matching encountered differ ent assignment problem section sophisti cated algorithms problem efficient exhaustive pap gal ahu leave discussion complexity general graphs exercises matching shown bold augmentation exists apply maximum matching algorithm bipartite graph largest smallest cardinality ing bipartite graph vertices vertex set edges largest smallest distinct solutions maximum cardinality matching problem bipartite graph vertices vertex set edges hall marriage theorem asserts bipartite graph matching matches vertices set subset set vertices adjacent vertex property graph devise algorithm returns matching bipartite graph matches vertices returns base algorithm checking condition hall marriage theorem committees composed persons committee members committee members committee members committee members committee members distinct representatives select representative committee selected persons distinct maximum cardinality matching problem bipartite graph reduced maximum problem discussed section greedy algorithm finding maximum matching bipartite graph sort vertices nondecreasing degrees scan sorted current matching initially edge free vertex adjacent free vertex lowest degree vertex matched adjacent free vertices vertex simply skipped algorithm maximum matching bipartite graph design linear algorithm finding maximum matching tree implement maximum matching algorithm section language choice experiment performance bipartite graphs vertices vertex sets randomly generated edges dense sparse modes observed running algorithm theoretical efficiency domino puzzle domino tile oriented hori zontally vertically tiling board composed squares covering dominoes overlap tile dominoes board unit squares diagonally corners stable marriage problem section interesting version bipartite matching called stable marriage problem set men set women preference ordering women potential marriage partners ties allowed similarly woman preference men ties examples sets lists figures information presented ranking matrix figure rows columns matrix represent men women sets cell row column rankings position ranking preference position ranking preference pair jim row ann column matrix figure ann jim choice jim ann ways represent information depends task easier sets elements ranking matrix preference lists efficient data structure implementing matching algorithm marriage matching set pairs members selected disjoint element sets fashion paired woman vice versa represent vertices bipartite graph edges connecting marriage partners marriage matching perfect matching graph men preferences women preferences ranking matrix ann lea sue bob lea ann sue ann jim tom bob jim lea sue ann lea tom bob jim tom sue lea ann sue jim tom bob tom figure data instance stable marriage problem men preference lists women preference lists ranking matrix boxed cells composing unstable matching pair blocking pair marriage matching woman matched mates bob lea blocking pair marriage matching bob ann jim lea tom sue figure matched bob prefers lea ann lea prefers bob jim marriage matching called stable blocking pair called unstable definition marriage matching figure unstable bob lea designated mates union stable marriage problem stable marriage matching men women preferences surprisingly problem solution instance figure algorithm stable marriage algorithm input set men set women rankings women rankings men woman ties allowed rankings output stable marriage matching men women free men arbitrarily select proposal selected free proposes woman preference highest ranked woman rejected response free accepts proposal matched free compares current prefers accepts proposal making free simply rejects proposal leaving free set matched pairs analyze algorithm input presented figure discuss properties stable marriage algorithm theorem stable marriage algorithm terminates iterations stable marriage output proof algorithm starts men total women ranking lists iteration makes proposal woman reduces total women men propose future proposes woman algorithm iterations ann lea sue free men bob proposed lea bob jim tom jim lea accepted tom ann lea sue free men bob jim proposed lea jim tom jim lea rejected tom ann lea sue free men bob jim proposed sue jim tom jim sue accepted tom ann lea sue free men bob tom proposed sue tom jim sue rejected tom ann lea sue free men bob tom proposed lea tom jim lea replaced bob tom ann lea sue free men bob proposed ann bob jim ann accepted tom figure application stable marriage algorithm accepted proposal boxed cell rejected proposal shown underlined cell prove final matching stable marriage matching algorithm stops men matched women thing proved stability contrary unstable exists blocking pair woman unmatched persons matched proposes woman ranking decreasing preference precedes proposed iteration refused proposal accepted replaced subsequent iteration higher ranked higher preference rankings men matched woman iteration algorithm contradicts assumption prefers final stable marriage algorithm notable shortcoming gender neutral presented favors men preferences women preferences easily tracing algorithm instance problem woman algorithm yields stable matching woman matching men matched choices case women prove algorithm yields stable matching optimal assigns highest ranked woman stable marriage gender bias reversed eliminated reversing roles played men women algorithm making women propose men proposals important corollary fact stable marriage algorithm yields gender optimal stable matching easy prove woman optimal matching unique set participant preferences algorithm output free men women make proposals data structure stack representing set impact algorithm outcome notion stable matching algorithm discussed introduced gale shapley paper titled college admissions stability marriage gal applications mentioned title important stability matching property desirable variety applications years united states matching medical school graduates hospitals residency training history application depth discussion stable marriage problem extensions monograph gusfield irwing gus exercises instance stable marriage problem ranking matrix marriage matchings stable unstable matchings blocking pair stable matchings optimal woman optimal assume greek roman letters denote men women design simple algorithm checking marriage matching stable determine efficiency class stable marriage matching instance problem apply ing stable marriage algorithm men proposing version women proposing version stable marriage matching instance defined ranking matrix determine efficiency class stable marriage algorithm worst case prove optimal stable marriage set unique true woman optimal stable marriage matching prove optimal stable matching woman worst partner stable marriage matching implement stable marriage algorithm section running run experiment ascertain average case efficiency write college admission problem residents hospitals assign ment generalizes stable marriage problem college proposals applicant problem roommates related difficult stable marriage problem boys pairs roommates set pairings called stable boys roommates actual roommates gal instance problem stable pairing summary iterative improvement technique involves finding solution timization problem generating sequence feasible solutions improving values problem objective function subsequent lution sequence typically involves small localized previous feasible solution improves objective function algorithm returns feasible solution optimal stops important problems solved iterative improvement algorithms linear programming maximizing network matching maximum vertices graph simplex method classic method solving general linear programming problem works generating sequence adjacent extreme points problem feasible region improving values objective function maximum problem asks maximum network weighted directed graph source sink ford fulkerson method classic template solving maximumflow problem iterative improvement approach shortestaugmenting path method implements idea labeling network vertices breadth manner ford fulkerson method finds minimum cut network maximum cardinality matching largest subset edges graph edges vertex bipartite graph sequence augmentations previously obtained matchings stable marriage problem stable matching elements nelement sets based matching preferences problem solution gale shapley algorithm