Horner's rule is an old but very elegant and efficient algorithm for evaluating a
          polynomial. It is named after the British mathematician W. G. Horner, who pub-
          lished it in the early 19th century. But according to Knuth [KnuII, p. 486], the
          method was used by Isaac Newton 150 years before Horner. You will appreciate
          this method much more if you first design an algorithm for the polynomial evalu-
          ation problem by yourself and investigate its efficiency (see Problems 1 and 2 in
          this section's exercises).
               Horner's rule is a good example of the representation-change technique since
          it is based on representing p(x) by a formula different from (6.1). This new formula
          is obtained from (6.1) by successively taking x as a common factor in the remaining
          polynomials of diminishing degrees:
                                 p(x) = (. . . (anx + an-1)x + . . .)x + a0.              (6.2)
For example, for the polynomial p(x) = 2x4 - x3 + 3x2 + x - 5, we get
                         p(x) = 2x4 - x3 + 3x2 + x - 5
                             = x(2x3 - x2 + 3x + 1) - 5
                             = x(x(2x2 - x + 3) + 1) - 5
                             = x(x(x(2x - 1) + 3) + 1) - 5.                       (6.3)
It is in formula (6.2) that we will substitute a value of x at which the polyno-
mial needs to be evaluated. It is hard to believe that this is a way to an efficient
algorithm, but the unpleasant appearance of formula (6.2) is just that, an appear-
ance. As we shall see, there is no need to go explicitly through the transformation
leading to it: all we need is an original list of the polynomial's coefficients.
The pen-and-pencil calculation can be conveniently organized with a two-
row table. The first row contains the polynomial's coefficients (including all the
coefficients equal to zero, if any) listed from the highest an to the lowest a0. Except
for its first entry, which is an, the second row is filled left to right as follows: the
next entry is computed as the x's value times the last entry in the second row plus
the next coefficient from the first row. The final entry computed in this fashion is
the value being sought.
EXAMPLE 1        Evaluate p(x) = 2x4 - x3 + 3x2 + x - 5 at x = 3.
coefficients  2          -1           3                 1                -5
x=3           2  3 . 2 + (-1) = 5  3 . 5 + 3 = 18  3 . 18 + 1 = 55  3 . 55 + (-5) = 160
Thus, p(3) = 160. (On comparing the table's entries with formula (6.3), you will
see that 3 . 2 + (-1) = 5 is the value of 2x - 1 at x = 3, 3 . 5 + 3 = 18 is the value of
x(2x - 1) + 3 at x = 3, 3 . 18 + 1 = 55 is the value of x(x(2x - 1) + 3) + 1 at x = 3,
and, finally, 3 . 55 + (-5) = 160 is the value of x(x(x(2x - 1) + 3) + 1) - 5 = p(x)
at x = 3.)
Pseudocode of this algorithm is the shortest one imaginable for a nontrivial
algorithm:
ALGORITHM        Horner(P [0..n], x)
//Evaluates a polynomial at a given point by Horner's rule
//Input: An array P [0..n] of coefficients of a polynomial of degree n,
//            stored from the lowest to the highest and a number x
//Output: The value of the polynomial at x
p  P [n]
for i  n - 1 downto 0 do
    p  x  p + P [i]
return p
     The number of multiplications and the number of additions are given by the
     same sum:
                                               n-1
                            M(n) = A(n) =           1 = n.
                                               i=0
     To appreciate how efficient Horner's rule is, consider only the first term of
     a polynomial of degree n: anxn. Just computing this single term by the brute-
     force algorithm would require n multiplications, whereas Horner's rule computes,
     in addition to this term, n - 1 other terms, and it still uses the same number of
     multiplications! It is not surprising that Horner's rule is an optimal algorithm for
     polynomial evaluation without preprocessing the polynomial's coefficients. But it
     took scientists 150 years after Horner's publication to come to the realization that
     such a question was worth investigating.
     Horner's rule also has some useful byproducts. The intermediate numbers
     generated by the algorithm in the process of evaluating p(x) at some point x0 turn
     out to be the coefficients of the quotient of the division of p(x) by x - x0, and the
     final result, in addition to being p(x0), is equal to the remainder of this division.
     Thus, according to Example 1, the quotient and the remainder of the division of
     2x4 - x3 + 3x2 + x - 5 by x - 3 are 2x3 + 5x2 + 18x + 55 and 160, respectively.
     This division algorithm, known as synthetic division, is more convenient than so-
     called long division.
