Assignment Problem
Let us illustrate the branch-and-bound approach by applying it to the problem of
assigning n people to n jobs so that the total cost of the assignment is as small
as possible. We introduced this problem in Section 3.4, where we solved it by
exhaustive search. Recall that an instance of the assignment problem is specified
by an n × n cost matrix C so that we can state the problem as follows: select one
element in each row of the matrix so that no two selected elements are in the
same column and their sum is the smallest possible. We will demonstrate how this
problem can be solved using the branch-and-bound technique by considering the
same small instance of the problem that we investigated in Section 3.4:
                           job 1  job 2  job 3  job 4
                                                   
                             9    2      7      8      person a
                     C  =    6    4      3      7      person b
                             5    8      1      8      person c
                             7    6      9      4      person d
How can we find a lower bound on the cost of an optimal selection without
actually solving the problem? We can do this by several methods. For example, it
is clear that the cost of any solution, including an optimal one, cannot be smaller
than the sum of the smallest elements in each of the matrix's rows. For the instance
here, this sum is 2 + 3 + 1 + 4 = 10. It is important to stress that this is not the cost
of any legitimate selection (3 and 1 came from the same column of the matrix);
it is just a lower bound on the cost of any legitimate selection. We can and will
apply the same thinking to partially constructed solutions. For example, for any
legitimate selection that selects 9 from the first row, the lower bound will be
9 + 3 + 1 + 4 = 17.
One more comment is in order before we embark on constructing the prob-
lem's state-space tree. It deals with the order in which the tree nodes will be
     generated. Rather than generating a single child of the last promising node as
     we did in backtracking, we will generate all the children of the most promising
     node among nonterminated leaves in the current tree. (Nonterminated, i.e., still
     promising, leaves are also called live.) How can we tell which of the nodes is most
     promising? We can do this by comparing the lower bounds of the live nodes. It
     is sensible to consider a node with the best bound as most promising, although
     this does not, of course, preclude the possibility that an optimal solution will ul-
     timately belong to a different branch of the state-space tree. This variation of the
     strategy is called the best-first branch-and-bound.
     So, returning to the instance of the assignment problem given earlier, we start
     with the root that corresponds to no elements selected from the cost matrix. As
     we already discussed, the lower-bound value for the root, denoted lb, is 10. The
     nodes on the first level of the tree correspond to selections of an element in the
     first row of the matrix, i.e., a job for person a (Figure 12.5).
     So we have four live leaves--nodes 1 through 4--that may contain an optimal
     solution. The most promising of them is node 2 because it has the smallest lower-
     bound value. Following our best-first search strategy, we branch out from that
     node first by considering the three different ways of selecting an element from the
     second row and not in the second column--the three different jobs that can be
     assigned to person b (Figure 12.6).
     Of the six live leaves--nodes 1, 3, 4, 5, 6, and 7--that may contain an optimal
     solution, we again choose the one with the smallest lower bound, node 5. First, we
     consider selecting the third column's element from c's row (i.e., assigning person c
     to job 3); this leaves us with no choice but to select the element from the fourth
     column of d's row (assigning person d to job 4). This yields leaf 8 (Figure 12.7),
     which corresponds to the feasible solution {a  2, b  1, c  3, d  4} with the
     total cost of 13. Its sibling, node 9, corresponds to the feasible solution {a  2,
     b  1, c  4, d  3} with the total cost of 25. Since its cost is larger than the cost
     of the solution represented by leaf 8, node 9 is simply terminated. (Of course, if
                                            0
                                            start
                          lb = 2+ 3+ 1+ 4 = 10
     1                 2                                  3            4
     a  1              a  2                              a  3          a  4
     lb = 9+3+1+4 =17  lb = 2+3+1 + 4 = 10     lb = 7+ 4+ 5+ 4 = 20    lb = 8+ 3 + 1+ 6 = 18
     FIGURE 12.5  Levels 0 and 1 of the state-space tree for the instance of the assignment
                  problem being solved with the best-first branch-and-bound algorithm. The
                  number above a node shows the order in which the node was generated.
                  A node's fields indicate the job number assigned to person a and the
                  lower bound value, lb, for this node.
                                         0
                                     start
                                    lb =10
   1                                 2                             3                  4
a     1                           a         2                   a      3           a           4
lb =17                              lb =10                      lb = 20            lb =18
                   5                 6                    7
                b     1           b         3        b       4
                lb =13              lb =14           lb =17
FIGURE 12.6     Levels 0, 1, and 2 of the state-space tree for the instance of the assignment
                problem being solved with the best-first branch-and-bound algorithm.
                                         0
                                     start
                                    lb =10
   1                                 2                             3                  4
a     1                           a         2                   a      3           a           4
lb =17                              lb =10                      lb = 20            lb =18
   X                                                               X                  X
                   5                 6                    7
                b     1           b         3        b  4
                lb =13              lb =14           lb =17
                                         X              X
         8                  9
      c      3           c     4
      d      4           d     3
      cost =13           cost = 25
      solution        inferior solution
FIGURE 12.7 Complete state-space tree for the instance          of the assignment  problem
                solved with the best-first branch-and-bound     algorithm.
its cost were smaller than 13, we would have to replace the information about the
best solution seen so far with the data provided by this node.)
   Now, as we inspect each of the live leaves of the last state-space tree--nodes
1, 3, 4, 6, and 7 in Figure 12.7--we discover that their lower-bound values are
not smaller than 13, the value of the best selection seen so far (leaf 8). Hence,
we terminate all of them and recognize the solution represented by leaf 8 as the
optimal solution to the problem.
     Before we leave the assignment problem, we have to remind ourselves again
     that, unlike for our next examples, there is a polynomial-time algorithm for this
     problem called the Hungarian method (e.g., [Pap82]). In the light of this efficient
     algorithm, solving the assignment problem by branch-and-bound should be con-
     sidered a convenient educational device rather than a practical recommendation.
