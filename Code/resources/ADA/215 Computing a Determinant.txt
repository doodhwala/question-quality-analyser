Another problem that can be solved by Gaussian elimination is computing a
determinant. The determinant of an n × n matrix A, denoted det A or |A|, is a
number whose value can be defined recursively as follows. If n = 1, i.e., if A consists
of a single element a11, det A is equal to a11; for n > 1, det A is computed by the
recursive formula
                                          n
                               det A =          sj a1j det Aj ,
                                          j =1
where sj is +1 if j is odd and -1 if j is even, a1j is the element in row 1 and column
j , and Aj is the (n - 1) × (n - 1) matrix obtained from matrix A by deleting its
row 1 and column j .
In particular, for a 2 × 2 matrix, the definition implies a formula that is easy
to remember:
det           a11       a12  = a11 det [a22] - a12 det [a21] = a11a22 - a12a21.
              a21       a22
In other words, the determinant of a 2 × 2 matrix is simply equal to the difference
between the products of its diagonal elements.
For a 3 × 3 matrix, we get
  a11              a12  a13  
det  a21           a22  a23 
  a31              a32  a33
= a11 det          a22  a23    - a12 det     a21  a23  + a13 det        a21  a22
                   a32  a33                  a31  a33                   a31  a32
= a11a22a33 + a12a23a31 + a13a21a32 - a11a23a32 - a12a21a33 - a13a22a31.
Incidentally, this formula is very handy in a variety of applications. In particular,
we used it twice already in Section 5.5 as a part of the quickhull algorithm.
But what if we need to compute a determinant of a large matrix? Although
this is a task that is rarely needed in practice, it is worth discussing nevertheless.
Using the recursive definition can be of little help because it implies computing the
sum of n!terms. Here, Gaussian elimination comes to the rescue again. The central
point is the fact that the determinant of an upper-triangular matrix is equal to the
product of elements on its main diagonal, and it is easy to see how elementary
operations employed by the elimination algorithm influence the determinant's
value. (Basically, it either remains unchanged or changes a sign or is multiplied by
the constant used by the elimination algorithm.) As a result, we can compute the
determinant of an n × n matrix in cubic time.
Determinants play an important role in the theory of systems of linear equa-
tions. Specifically, a system of n linear equations in n unknowns Ax = b has a
unique solution if and only if the determinant of its coefficient matrix det A is
     not equal to zero. Moreover, this solution can be found by the formulas called
     Cramer's rule,
                      x1   =   det A1 ,  .  .  .  ,  xj  =  det Aj   ,  .  .  .  ,  xn  =  det An ,
                                 det A                      det A                          det A
     where   det Aj  is   the  determinant           of  the    matrix        obtained     by     replacing  the  j th
     column of A by the column b. You are asked to investigate in the exercises whether
     using Cramer's rule is a good algorithm for solving systems of linear equations.
     Exercises 6.2
     1.  Solve the following system by Gaussian elimination:
                                                     x1 + x2 + x3 = 2
                                                     2x1 + x2 + x3 = 3
                                                     x1 - x2 + 3x3 = 8.
     2.  a.  Solve the     system  of    the         previous question              by     the  LU   decomposition
             method.
         b. From the standpoint of general algorithm design techniques, how would
             you classify the LU decomposition method?
     3.  Solve the system of Problem 1 by computing the inverse of its coefficient
         matrix and then multiplying it by the vector on the right-hand side.
     4.  Would it be correct to get the efficiency class of the forward elimination stage
         of Gaussian elimination as follows?
                                        n-1       n      n+1      n-1
                               C(n) =                         1=           (n + 2 - i)(n - i)
                                        i=1 j =i+1 k=i            i=1
                                        n-1
                                   =         [(n + 2)n - i(2n + 2) + i2]
                                        i=1
                                        n-1                     n-1                        n-1
                                   =         (n + 2)n -              (2n + 2)i +                i2.
                                        i=1                     i=1                        i=1
         Since    s1(n) =      ni=-11(n + 2)n            (n3),  s2(n) =                 in=-11(2n + 2)i   (n3),   and
         s3(n) =     n-1   i2    (n3), s1(n) - s2(n) + s3(n)                        (n3).
                     i=1
     5.  Write pseudocode for the back-substitution stage of Gaussian elimination and
         show that its running time is in                (n2).
     6.  Assuming that division of two numbers takes three times longer than their
         multiplication, estimate how much faster BetterForwardElimination is than
         ForwardElimination. (Of course, you should also assume that a compiler is
         not going to eliminate the inefficiency in ForwardElimination.)
7.   a.  Give an example of a system of two linear equations in two unknowns that
         has a unique solution and solve it by Gaussian elimination.
     b.  Give an example of a system of two linear equations in two unknowns that
         has no solution and apply Gaussian elimination to it.
     c.  Give an example of a system of two linear equations in two unknowns that
         has infinitely many solutions and apply Gaussian elimination to it.
8.   The Gauss-Jordan elimination method differs from Gaussian elimination in
     that the elements above the main diagonal of the coefficient matrix are made
     zero at the same time and by the same use of a pivot row as the elements below
     the main diagonal.
     a.  Apply the   Gauss-Jordan  method  to    the  system    of  Problem   1  of  these
         exercises.
     b. What general design strategy is this algorithm based on?
     c.  In general, how many multiplications are made by this method in solving
         a system of n equations in n unknowns? How does this compare with the
         number of multiplications made by the Gaussian elimination method in
         both its elimination and back-substitution stages?
9.   A system Ax = b of n linear equations in n unknowns has a unique solution if
     and only if det A = 0. Is it a good idea to check this condition before applying
     Gaussian elimination to the system?
10.  a.  Apply Cramer's rule to solve the system of Problem 1 of these exercises.
     b.  Estimate how many times longer it will take to solve a system of n linear
         equations in n unknowns by Cramer's rule than by Gaussian elimination.
         Assume that all the determinants in Cramer's rule formulas are computed
         independently by Gaussian elimination.
11.  Lights out      This one-person game is played on an n × n board composed
     of 1 × 1 light panels. Each panel has a switch that can be turned on and off,
     thereby toggling the on/off state of this and four vertically and horizontally
     adjacent panels. (Of course, toggling a corner square affects a total of three
     panels, and toggling a noncorner panel on the board's border affects a total
     of four squares.) Given an initial subset of lighted squares, the goal is to turn
     all the lights off.
     a.  Show that an answer can be found by solving a system of linear equations
         with 0/1 coefficients and right-hand sides using the modulo 2 arithmetic.
     b. Use Gaussian elimination to solve the 2 × 2 "all-ones" instance of this
         problem, where all the panels of the 2 × 2 board are initially lit.
     c.  Use Gaussian elimination to solve the 3 × 3 "all-ones" instance of this
         problem, where all the panels of the 3 × 3 board are initially lit.
     