We start this section with designing a dynamic programming algorithm for the
          knapsack  problem:    given   n  items  of    known      weights  w1, . . . , wn  and  values
          v1, . . . , vn and a knapsack of capacity W , find the most valuable subset of the
          items that fit into the knapsack. (This problem was introduced in Section 3.4,
          where we discussed solving it by exhaustive search.) We assume here that all the
          weights and the knapsack capacity are positive integers; the item values do not
          have to be integers.
               To design a dynamic programming algorithm, we need to derive a recurrence
          relation that expresses a solution to an instance of the knapsack problem in terms
of solutions to its smaller subinstances. Let us consider an instance defined by the
first i items, 1  i  n, with weights w1, . . . , wi, values v1, . . . , vi, and knapsack
capacity j, 1  j  W. Let F (i, j ) be the value of an optimal solution to this
instance, i.e., the value of the most valuable subset of the first i items that fit into
the knapsack of capacity j. We can divide all the subsets of the first i items that fit
the knapsack of capacity j into two categories: those that do not include the ith
item and those that do. Note the following:
1.  Among the subsets that do not include the ith item, the value of an optimal
    subset is, by definition, F (i - 1, j ).
2.  Among the subsets that do include the ith item (hence, j - wi  0), an optimal
    subset is made up of this item and an optimal subset of the first i - 1 items
    that fits into the knapsack of capacity j - wi. The value of such an optimal
    subset is vi + F (i - 1, j - wi).
    Thus, the value of an optimal solution among all feasible subsets of the first i
items is the maximum of these two values. Of course, if the ith item does not fit
into the knapsack, the value of an optimal subset selected from the first i items
is the same as the value of an optimal subset selected from the first i - 1 items.
These observations lead to the following recurrence:
        F (i, j ) =  max{F (i - 1, j ), vi + F (i - 1, j - wi)}    if j - wi  0,   (8.6)
                     F (i - 1, j )                                 if j - wi < 0.
It is convenient to define the initial conditions as follows:
             F (0, j ) = 0 for j  0           and     F (i, 0) = 0 for i  0.       (8.7)
Our goal is to find F (n, W ), the maximal value of a subset of the n given items
that fit into the knapsack of capacity W, and an optimal subset itself.
    Figure 8.4 illustrates the values involved in equations (8.6) and (8.7). For
i, j > 0, to compute the entry in the ith row and the j th column, F (i, j ), we
compute the maximum of the entry in the previous row and the same column
and the sum of vi and the entry in the previous row and wi columns to the left.
The table can be filled either row by row or column by column.
                           0           j ­wi          j            W
                     0     0           0              0            0
                     i ­1  0        F (i ­1, j ­ wi)  F (i ­1, j)
             wi, vi  i     0                          F (i, j)
                     n     0                                       goal
FIGURE  8.4  Table for solving the knapsack problem by dynamic     programming.
                                                capacity j
                              i  0       1      2           3   4   5
                              0  0       0      0           0   0   0
     w1 = 2, v1 = 12          1  0       0      12          12  12  12
     w2 = 1, v2 = 10          2  0       10     12          22  22  22
     w3 = 3, v3 = 20          3  0       10     12          22  30  32
     w4 = 2, v4 = 15          4  0       10     15          25  30  37
     FIGURE 8.5 Example of solving an instance  of the knapsack problem      by  the  dynamic
     programming algorithm.
     EXAMPLE 1         Let us consider the instance given by the following data:
                       item      weight         value
                       1         2              $12
                       2         1              $10         capacity W = 5.
                       3         3              $20
                       4         2              $15
     The dynamic programming table, filled by applying formulas (8.6) and (8.7),
     is shown in Figure 8.5.
     Thus, the maximal value is F (4, 5) = $37. We can find the composition of an
     optimal subset by backtracing the computations of this entry in the table. Since
     F (4, 5) > F (3, 5), item 4 has to be included in an optimal solution along with an
     optimal subset for filling 5 - 2 = 3 remaining units of the knapsack capacity. The
     value of the latter is F (3, 3). Since F (3, 3) = F (2, 3), item 3 need not be in an
     optimal subset. Since F (2, 3) > F (1, 3), item 2 is a part of an optimal selection,
     which leaves element F (1, 3 - 1) to specify its remaining composition. Similarly,
     since F (1, 2) > F (0, 2), item 1 is the final part of the optimal solution {item 1,
     item 2, item 4}.
     The time efficiency and space efficiency of this algorithm are both in           (nW ).
     The time needed to find the composition of an optimal solution is in O(n). You
     are asked to prove these assertions in the exercises.
