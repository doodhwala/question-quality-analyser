As we mentioned in the previous section, a graph is informally thought of as
    a collection of points in the plane called "vertices" or "nodes," some of them
    connected by line segments called "edges" or "arcs." Formally, a graph G =                V, E
    is defined by a pair of two sets: a finite nonempty set V of items called vertices
    and a set E of pairs of these items called edges. If these pairs of vertices are
    unordered, i.e., a pair of vertices (u, v) is the same as the pair (v, u), we say that
    the vertices u and v are adjacent to each other and that they are connected by the
    undirected edge (u, v). We call the vertices u and v endpoints of the edge (u, v)
    and say that u and v are incident to this edge; we also say that the edge (u, v) is
    incident to its endpoints u and v. A graph G is called undirected if every edge in
    it is undirected.
    If a pair of vertices (u, v) is not the same as the pair (v, u), we say that the
    edge (u, v) is directed from the vertex u, called the edge's tail, to the vertex v,
    called the edge's head. We also say that the edge (u, v) leaves u and enters v. A
    graph whose every edge is directed is called directed. Directed graphs are also
    called digraphs.
    It is normally convenient to label vertices of a graph or a digraph with letters,
    integer numbers, or, if an application calls for it, character strings (Figure 1.6). The
    graph depicted in Figure 1.6a has six vertices and seven undirected edges:
    V = {a, b, c, d, e, f }, E = {(a, c), (a, d), (b, c), (b, f ), (c, e), (d, e), (e, f )}.
    The digraph depicted in Figure 1.6b has six vertices and eight directed edges:
    V = {a, b, c, d, e, f }, E = {(a, c), (b, c), (b, f ), (c, e), (d, a), (d, e), (e, c), (e, f )}.
                  a    c    b                           a  c          b
                  d    e    f                           d  e          f
                       (a)                                 (b)
    FIGURE 1.6    (a)  Undirected graph. (b)  Digraph.
Our definition of a graph does not forbid loops, or edges connecting vertices
to themselves. Unless explicitly stated otherwise, we will consider graphs without
loops. Since our definition disallows multiple edges between the same vertices of
an undirected graph, we have the following inequality for the number of edges |E|
possible in an undirected graph with |V | vertices and no loops:
                              0  |E|  |V |(|V | - 1)/2.
(We get the largest number of edges in a graph if there is an edge connecting
each of its |V | vertices with all |V | - 1 other vertices. We have to divide product
|V |(|V | - 1) by 2, however, because it includes every edge twice.)
A graph with every pair of its vertices connected by an edge is called complete.
A standard notation for the complete graph with |V | vertices is K|V |. A graph
with relatively few possible edges missing is called dense; a graph with few edges
relative to the number of its vertices is called sparse. Whether we are dealing with
a dense or sparse graph may influence how we choose to represent the graph and,
consequently, the running time of an algorithm being designed or used.
Graph Representations Graphs for computer algorithms are usually repre-
sented in one of two ways: the adjacency matrix and adjacency lists. The adjacency
matrix of a graph with n vertices is an n × n boolean matrix with one row and one
column for each of the graph's vertices, in which the element in the ith row and
the j th column is equal to 1 if there is an edge from the ith vertex to the j th vertex,
and equal to 0 if there is no such edge. For example, the adjacency matrix for the
graph of Figure 1.6a is given in Figure 1.7a.
Note that the adjacency matrix of an undirected graph is always symmetric,
i.e., A[i, j ] = A[j, i] for every 0  i, j  n - 1 (why?).
The adjacency lists of a graph or a digraph is a collection of linked lists,
one for each vertex, that contain all the vertices adjacent to the list's vertex
(i.e., all the vertices connected to it by an edge). Usually, such lists start with a
header identifying a vertex for which the list is compiled. For example, Figure 1.7b
represents the graph in Figure 1.6a via its adjacency lists. To put it another way,
             a  b  c    d  e  f
        a    0  0  1    1  0  0                a             c       d
        b    0  0  1    0  0  1                b             c       f
        c    1  1  0    0  1  0                c             a       b    e
        d    1  0  0    0  1  0                d             a       e
        e    0  0  1    1  0  1                e             c       d    f
        f    0  1  0    0  1  0                f             b       e
                   (a)                                          (b)
FIGURE  1.7  (a) Adjacency matrix and  (b)  adjacency lists  of the graph in Figure  1.6a.
    adjacency lists indicate columns of the adjacency matrix that, for a given vertex,
    contain 1's.
    If a graph is sparse, the adjacency list representation may use less space
    than the corresponding adjacency matrix despite the extra storage consumed by
    pointers of the linked lists; the situation is exactly opposite for dense graphs. In
    general, which of the two representations is more convenient depends on the
    nature of the problem, on the algorithm used for solving it, and, possibly, on the
    type of input graph (sparse or dense).
    Weighted      Graphs  A  weighted  graph      (or  weighted  digraph)        is  a  graph  (or    di-
    graph) with numbers assigned to its edges. These numbers are called weights or
    costs. An interest in such graphs is motivated by numerous real-world applica-
    tions, such as finding the shortest path between two points in a transportation or
    communication network or the traveling salesman problem mentioned earlier.
    Both principal representations of a graph can be easily adopted to accommo-
    date weighted graphs. If a weighted graph is represented by its adjacency matrix,
    then its element A[i, j ] will simply contain the weight of the edge from the ith to
    the j th vertex if there is such an edge and a special symbol, e.g., , if there is no
    such edge. Such a matrix is called the weight matrix or cost matrix. This approach
    is illustrated in Figure 1.8b for the weighted graph in Figure 1.8a. (For some ap-
    plications, it is more convenient to put 0's on the main diagonal of the adjacency
    matrix.) Adjacency lists for a weighted graph have to include in their nodes not
    only the name of an adjacent vertex but also the weight of the corresponding edge
    (Figure 1.8c).
    Paths and Cycles Among the many properties of graphs, two are important for a
    great number of applications: connectivity and acyclicity. Both are based on the
    notion of a path. A path from vertex u to vertex v of a graph G can be defined as a
    sequence of adjacent (connected by an edge) vertices that starts with u and ends
    with v. If all vertices of a path are distinct, the path is said to be simple. The length
    of a path is the total number of vertices in the vertex sequence defining the path
    minus 1, which is the same as the number of edges in the path. For example, a, c,
    b, f is a simple path of length 3 from a to f in the graph in Figure 1.6a, whereas
    a, c, e, c, b, f is a path (not simple) of length 5 from a to f.
              5                 a      b       c  d
       a            b        a         5       1                 a         b, 5      c, 1
    1         7        4     b  5              7  4              b         a, 5      c, 7      d,  4
                             c  1      7          2              c         a, 1      b, 7      d,  2
       c      2     d        d         4       2                 d         b, 4      c, 2
            (a)                           (b)                              (c)
    FIGURE  1.8 (a) Weighted graph.  (b) Its weight    matrix.  (c) Its  adjacency lists.
                                        a                              f
                          b             c           e         g              h
                                        d                                 i
    FIGURE 1.9     Graph  that is  not  connected.
    In the case of a directed graph, we are usually interested in directed paths.
    A directed path is a sequence of vertices in which every consecutive pair of the
    vertices is connected by an edge directed from the vertex listed first to the vertex
    listed next. For example, a, c, e, f is a directed path from a to f in the graph in
    Figure 1.6b.
    A graph is said to be connected if for every pair of its vertices u and v there
    is a path from u to v. If we make a model of a connected graph by connecting
    some balls representing the graph's vertices with strings representing the edges,
    it will be a single piece. If a graph is not connected, such a model will consist
    of several connected pieces that are called connected components of the graph.
    Formally, a connected component is a maximal (not expandable by including
    another vertex and an edge) connected subgraph2 of a given graph. For example,
    the graphs in Figures 1.6a and 1.8a are connected, whereas the graph in Figure 1.9
    is not, because there is no path, for example, from a to f. The graph in Figure
    1.9 has two connected components with vertices {a, b, c, d, e} and {f, g, h, i},
    respectively.
    Graphs with several connected components do happen in real-world appli-
    cations. A graph representing the Interstate highway system of the United States
    would be an example (why?).
    It is important to know for many applications whether or not a graph under
    consideration has cycles. A cycle is a path of a positive length that starts and ends at
    the same vertex and does not traverse the same edge more than once. For example,
    f , h, i, g, f is a cycle in the graph in Figure 1.9. A graph with no cycles is said to
    be acyclic. We discuss acyclic graphs in the next subsection.
