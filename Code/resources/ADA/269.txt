Hashing
In this section, we consider a very efficient way to implement dictionaries. Recall
     that a dictionary is an abstract data type, namely, a set with the operations of
     searching (lookup), insertion, and deletion defined on its elements. The elements
     of this set can be of an arbitrary nature: numbers, characters of some alphabet,
     character strings, and so on. In practice, the most important case is that of records
     (student records in a school, citizen records in a governmental office, book records
     in a library).
     Typically, records comprise several fields, each responsible for keeping a
     particular type of information about an entity the record represents. For example,
     a student record may contain fields for the student's ID, name, date of birth, sex,
     home address, major, and so on. Among record fields there is usually at least one
     called a key that is used for identifying entities represented by the records (e.g.,
     the student's ID). In the discussion below, we assume that we have to implement
     a dictionary of n records with keys K1, K2, . . . , Kn.
     Hashing is based on the idea of distributing keys among a one-dimensional
     array H [0..m - 1] called a hash table. The distribution is done by computing, for
     each of the keys, the value of some predefined function h called the hash function.
     This function assigns an integer between 0 and m - 1, called the hash address, to
     a key.
     For example, if keys are nonnegative integers, a hash function can be of
     the form h(K) = K mod m; obviously, the remainder of division by m is always
     between 0 and m - 1. If keys are letters of some alphabet, we can first assign a letter
     its position in the alphabet, denoted here ord(K), and then apply the same kind
     of a function used for integers. Finally, if K is a character string c0c1 . . . cs-1, we
                                                   s-1
     can use, as a very unsophisticated option, (       or    d    (ci  ))  mod  m.  A  better        option
                                                   i=0
     is to compute h(K) as follows:2
             h  0;   for i  0 to s - 1 do h  (h  C + ord(ci)) mod m,
     where C is a constant larger than every ord(ci).
     In general, a hash function needs to satisfy somewhat conflicting require-
     ments:
     A hash table's size should not be excessively large compared to the number of
     keys, but it should be sufficient to not jeopardize the implementation's time
     efficiency (see below).
     A hash function needs to distribute keys among the cells of the hash table as
     evenly as possible. (This requirement makes it desirable, for most applications,
     to have a hash function dependent on all bits of a key, not just some of them.)
     A hash function has to be easy to compute.
2.   This can be obtained by treating ord(ci) as digits of a number in the C-based system, computing its
     decimal value by Horner's rule, and finding the remainder of the number after dividing it by m.
                                          Ki             Kj
                                  .    .  .              .   .  .
                              0               b                           m ­1
     FIGURE   7.4  Collision  of  two  keys in hashing:  h(Ki) = h(Kj ).
     Obviously, if we choose a hash table's size m to be smaller than the number
     of keys n, we will get collisions--a phenomenon of two (or more) keys being
     hashed into the same cell of the hash table (Figure 7.4). But collisions should be
     expected even if m is considerably larger than n (see Problem 5 in this section's
     exercises). In fact, in the worst case, all the keys could be hashed to the same cell
     of the hash table. Fortunately, with an appropriately chosen hash table size and a
     good hash function, this situation happens very rarely. Still, every hashing scheme
     must have a collision resolution mechanism. This mechanism is different in the
     two principal versions of hashing: open hashing (also called separate chaining)
     and closed hashing (also called open addressing).
