From a practical perspective, the first thing you need to do before designing an
     algorithm is to understand completely the problem given. Read the problem's
     description carefully and ask questions if you have any doubts about the problem,
     do a few small examples by hand, think about special cases, and ask questions
     again if needed.
     There are a few types of problems that arise in computing applications quite
     often. We review them in the next section. If the problem in question is one of
     them, you might be able to use a known algorithm for solving it. Of course, it
     helps to understand how such an algorithm works and to know its strengths and
     weaknesses, especially if you have to choose among several available algorithms.
     But often you will not find a readily available algorithm and will have to design
     your own. The sequence of steps outlined in this section should help you in this
     exciting but not always easy task.
     An input to an algorithm specifies an instance of the problem the algorithm
     solves. It is very important to specify exactly the set of instances the algorithm
     needs to handle. (As an example, recall the variations in the set of instances for
     the three greatest common divisor algorithms discussed in the previous section.)
     If you fail to do this, your algorithm may work correctly for a majority of inputs
     but crash on some "boundary" value. Remember that a correct algorithm is not
     one that works most of the time, but one that works correctly for all legitimate
     inputs.
     Do not skimp on this first step of the algorithmic problem-solving process;
     otherwise, you will run the risk of unnecessary rework.
