Closest-Pair Problem
The closest-pair problem calls for finding the two closest points in a set of n
          points. It is the simplest of a variety of problems in computational geometry that
          deals with proximity of points in the plane or higher-dimensional spaces. Points
          in question can represent such physical objects as airplanes or post offices as well
          as database records, statistical samples, DNA sequences, and so on. An air-traffic
          controller might be interested in two closest planes as the most probable collision
          candidates. A regional postal service manager might need a solution to the closest-
          pair problem to find candidate post-office locations to be closed.
          One of the important applications of the closest-pair problem is cluster analy-
          sis in statistics. Based on n data points, hierarchical cluster analysis seeks to orga-
          nize them in a hierarchy of clusters based on some similarity metric. For numerical
          data, this metric is usually the Euclidean distance; for text and other nonnumerical
          data, metrics such as the Hamming distance (see Problem 5 in this section's ex-
          ercises) are used. A bottom-up algorithm begins with each element as a separate
          cluster and merges them into successively larger clusters by combining the closest
          pair of clusters.
          For simplicity, we consider the two-dimensional case of the closest-pair prob-
          lem. We assume that the points in question are specified in a standard fashion by
          their (x, y) Cartesian coordinates and that the distance between two points pi(xi,
          yi) and pj (xj , yj ) is the standard Euclidean distance
                             d(pi, pj ) =    (xi - xj )2 + (yi - yj )2.
          The brute-force approach to solving this problem leads to the following ob-
          vious algorithm: compute the distance between each pair of distinct points and
          find a pair with the smallest distance. Of course, we do not want to compute the
          distance between the same pair of points twice. To avoid doing so, we consider
          only the pairs of points (pi, pj ) for which i < j .
Pseudocode below computes the distance between the two closest points;
getting the closest points themselves requires just a trivial modification.
ALGORITHM  BruteForceClosestPair(P )
//Finds distance between two closest points in the plane by brute force
//Input: A list P of n (n  2) points p1(x1, y1), . . . , pn(xn, yn)
//Output: The distance between the closest pair of points
d 
for i  1 to n - 1 do
for j  i + 1 to n do
          d  min(d, sqrt((xi - xj )2 + (yi - yj )2)) //sqrt is square root
return d
The basic operation of the algorithm is computing the square root. In the age
of electronic calculators with a square-root button, one might be led to believe
that computing the square root is as simple an operation as, say, addition or
multiplication. Of course, it is not. For starters, even for most integers, square roots
are irrational numbers that therefore can be found only approximately. Moreover,
computing such approximations is not a trivial matter. But, in fact, computing
square roots in the loop can be avoided! (Can you think how?) The trick is to
realize that we can simply ignore the square-root function and compare the values
(xi - xj )2 + (yi - yj )2 themselves. We can do this because the smaller a number of
which we take the square root, the smaller its square root, or, as mathematicians
say, the square-root function is strictly increasing.
Then the basic operation of the algorithm will be squaring a number. The
number of times it will be executed can be computed as follows:
                  n-1  n           n-1
          C(n) =              2=2       (n - i)
                  i=1 j =i+1       i=1
           = 2[(n - 1) + (n - 2) + . . . + 1] = (n - 1)n             (n2).
Of course, speeding up the innermost loop of the algorithm could only de-
crease the algorithm's running time by a constant factor (see Problem 1 in this
section's exercises), but it cannot improve its asymptotic efficiency class. In Chap-
ter 5, we discuss a linearithmic algorithm for this problem, which is based on a
more sophisticated design technique.
