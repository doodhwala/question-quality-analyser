Knapsack Problem
Here is another well-known problem in algorithmics. Given n items of known
     weights w1, w2, . . . , wn and values v1, v2, . . . , vn and a knapsack of capacity W ,
     find the most valuable subset of the items that fit into the knapsack. If you do not
     like the idea of putting yourself in the shoes of a thief who wants to steal the most
                              a                2            b
                              5                                3
                                      8               7
                              c                             d
                                               1
                    --To--ur                                      L--e--ng--th
        a  --->  b  ---> c ---> d     --->  a            I  = 2 + 8 + 1 + 7 = 18
        a  --->  b  ---> d    ---> c  --->  a            I  = 2 + 3 + 1 + 5 = 11  optimal
        a  --->  c  --->  b   ---> d  --->  a            I  = 5 + 8 + 3 + 7 = 23
        a  --->  c  --->  d   ---> b  --->  a            I  = 5 + 1 + 3 + 2 = 11  optimal
        a  --->  d  --->  b   ---> c  --->  a            I  = 7 + 3 + 8 + 5 = 23
        a  --->  d  --->  c   ---> b  --->  a            I  = 7 + 1 + 8 + 2 = 18
FIGURE  3.7 Solution to a small instance          of  the   traveling salesman problem by exhaustive
           search.
valuable loot that fits into his knapsack, think about a transport plane that has to
deliver the most valuable set of items to a remote location without exceeding the
plane's capacity. Figure 3.8a presents a small instance of the knapsack problem.
The exhaustive-search approach to this problem leads to generating all the
subsets of the set of n items given, computing the total weight of each subset in
order to identify feasible subsets (i.e., the ones with the total weight not exceeding
the knapsack capacity), and finding a subset of the largest value among them. As
an example, the solution to the instance of Figure 3.8a is given in Figure 3.8b. Since
the number of subsets of an n-element set is 2n, the exhaustive search leads to a
(2n) algorithm, no matter how efficiently individual subsets are generated.
Thus, for both the traveling salesman and knapsack problems considered
above, exhaustive search leads to algorithms that are extremely inefficient on
every input. In fact, these two problems are the best-known examples of so-
called NP-hard problems. No polynomial-time algorithm is known for any NP-
hard problem. Moreover, most computer scientists believe that such algorithms
do not exist, although this very important conjecture has never been proven.
More-sophisticated approaches--backtracking and branch-and-bound (see Sec-
tions 12.1 and 12.2)--enable us to solve some but not all instances of these and
     10
                       w1 = 7               w2 = 3    w3 = 4                 w4 = 5
                       v1 = $42         v2 = $12      v3 = $40               v4 = $25
             knapsack  item 1               item 2    item 3                 item 4
                                        (a)
                       Subset           Total weight  Total value
                                        0             $0
                       {1}              7             $42
                       {2}              3             $12
                       {3}              4             $40
                       {4}              5             $25
                       {1, 2}           10            $54
                       {1, 3}           11            not feasible
                       {1, 4}           12            not feasible
                       {2, 3}           7             $52
                       {2, 4}           8             $37
                       3, 4             9             $65
                       {1, 2, 3}        14            not feasible
                       {1, 2, 4}        15            not feasible
                       {1, 3, 4}        16            not feasible
                       {2, 3, 4}        12            not feasible
                       {1, 2, 3, 4}     19            not feasible
                                        (b)
     FIGURE  3.8  (a) Instance of the knapsack problem. (b) Its solution by  exhaustive search.
                  The information about the optimal selection is in bold.
similar problems in less than exponential time. Alternatively, we can use one of
many approximation algorithms, such as those described in Section 12.3.
