Selection Sort
We start selection sort by scanning the entire given list to find its smallest element
         and exchange it with the first element, putting the smallest element in its final
         position in the sorted list. Then we scan the list, starting with the second element,
         to find the smallest among the last n - 1 elements and exchange it with the second
         element, putting the second smallest element in its final position. Generally, on the
ith pass through the list, which we number from 0 to n - 2, the algorithm searches
for the smallest item among the last n - i elements and swaps it with Ai:
                    A0  A1  . . .  Ai­1  Ai, . . . , Amin, . . . , An­1
                    in their final positions             the last n ­ i elements
After n - 1 passes, the list is sorted.
Here is pseudocode of this algorithm, which, for simplicity, assumes that the
list is implemented as an array:
ALGORITHM       SelectionSort(A[0..n - 1])
//Sorts a given array by selection sort
//Input: An array A[0..n - 1] of orderable elements
//Output: Array A[0..n - 1] sorted in nondecreasing order
for i  0 to n - 2 do
        min  i
        for j  i + 1 to n - 1 do
             if A[j ] < A[min]        min  j
        swap A[i] and A[min]
As an example, the action of the algorithm on the list 89, 45, 68, 90, 29, 34, 17
is illustrated in Figure 3.1.
The analysis of selection sort is straightforward. The input size is given by the
number of elements n; the basic operation is the key comparison A[j ] < A[min].
The number of times it is executed depends only on the array size and is given by
the following sum:
                n-2  n-1              n-2                                     n-2
        C(n) =                 1=          [(n - 1) - (i + 1) + 1] =               (n - 1 - i).
                i=0 j =i+1            i=0                                     i=0
                      | 89            45      68     90     29     34     17
                               17  |  45      68     90     29     34     89
                               17     29   |  68     90     45     34     89
                               17     29      34  |  90     45     68     89
                               17     29      34     45  |  90     68     89
                               17     29      34     45     68  |  90     89
                               17     29      34     45     68     89  |  90
FIGURE  3.1  Example of sorting with selection sort. Each line corresponds to one
             iteration of the algorithm, i.e., a pass through the list's tail to the right
             of the vertical bar; an element in bold indicates the smallest element
             found. Elements to the left of the vertical bar are in their final positions and
             are not considered in this and subsequent iterations.
     Since we have already encountered the last sum in analyzing the algorithm of
     Example 2 in Section 2.3, you should be able to compute it now on your own.
     Whether you compute this sum by distributing the summation symbol or by
     immediately getting the sum of decreasing integers, the answer, of course, must
     be the same:
                                n-2  n-1            n-2                      (n  -  1)n .
                   C(n) =                     1  =       (n  -  1  -  i)  =      2
                                  i=0 j =i+1        i=0
     Thus, selection sort is a     (n2) algorithm on all inputs. Note, however, that the
     number of key swaps is only     (n), or, more precisely, n - 1 (one for each repetition
     of the i loop). This property distinguishes selection sort positively from many other
     sorting algorithms.
