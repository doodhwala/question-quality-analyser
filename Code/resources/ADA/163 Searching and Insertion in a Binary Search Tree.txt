Let us revisit the binary search tree. Recall that this is a binary tree whose nodes
contain elements of a set of orderable items, one element per node, so that for
every node all elements in the left subtree are smaller and all the elements in the
right subtree are greater than the element in the subtree's root. When we need to
search for an element of a given value v in such a tree, we do it recursively in the
following manner. If the tree is empty, the search ends in failure. If the tree is not
empty, we compare v with the tree's root K(r). If they match, a desired element
is found and the search can be stopped; if they do not match, we continue with
the search in the left subtree of the root if v < K(r) and in the right subtree if
v > K(r). Thus, on each iteration of the algorithm, the problem of searching in a
binary search tree is reduced to searching in a smaller binary search tree. The most
sensible measure of the size of a search tree is its height; obviously, the decrease in
a tree's height normally changes from one iteration to another of the binary tree
search--thus giving us an excellent example of a variable-size-decrease algorithm.
In the worst case of the binary tree search, the tree is severely skewed.
This happens, in particular, if a tree is constructed by successive insertions of an
increasing or decreasing sequence of keys (Figure 4.15).
Obviously, the search for an-1 in such a tree requires n comparisons, making
the worst-case efficiency of the search operation fall into         (n). Fortunately, the
average-case efficiency turns out to be in  (log n). More precisely, the number of
key comparisons needed for a search in a binary search tree built from n random
keys is about 2ln n  1.39 log2 n. Since insertion of a new key into a binary search
tree is almost identical to that of searching there, it also exemplifies the variable-
size-decrease technique and has the same efficiency characteristics as the search
operation.
                  a0                                                      a0
                      a1 . . .                                  ...  a1
                                an ­2                    an ­2
                                       an ­1      an ­1
                           (a)                                       (b)
     FIGURE 4.15  Binary search trees for (a) an  increasing sequence     of keys  and  (b)   a
                  decreasing sequence of keys.
