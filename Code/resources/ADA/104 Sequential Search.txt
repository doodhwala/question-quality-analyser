We have already encountered a brute-force algorithm for the general searching
          problem: it is called sequential search (see Section 2.1). To repeat, the algorithm
          simply compares successive elements of a given list with a given search key until
          either a match is encountered (successful search) or the list is exhausted without
          finding a match (unsuccessful search). A simple extra trick is often employed
          in implementing sequential search: if we append the search key to the end of
          the list, the search for the key will have to be successful, and therefore we can
          eliminate the end of list check altogether. Here is pseudocode of this enhanced
          version.
          ALGORITHM  SequentialSearch2(A[0..n], K)
          //Implements sequential search with a search key as a sentinel
          //Input: An array A of n elements and a search key K
          //Output: The index of the first element in A[0..n - 1] whose value is
          //        equal to K or -1 if no such element is found
          A[n]  K
          i0
          while A[i] = K do
                    ii+1
          if i < n return i
          else return -1
          Another straightforward improvement can be incorporated in sequential
          search if a given list is known to be sorted: searching in such a list can be stopped
          as soon as an element greater than or equal to the search key is encountered.
          Sequential search provides an excellent illustration of the brute-force ap-
          proach, with its characteristic strength (simplicity) and weakness (inferior effi-
          ciency). The efficiency results obtained in Section 2.1 for the standard version of
          sequential search change for the enhanced version only very slightly, so that the
          algorithm remains linear in both the worst and average cases. We discuss later in
          the book several searching algorithms with a better time efficiency.
