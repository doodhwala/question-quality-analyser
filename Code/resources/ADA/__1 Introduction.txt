two ideas lie gleaming on the jeweler's velvet. the first is the calculus the second the algorithm. the calculus and the rich body of mathematical analysis to which it gave rise made modern science possible but it has been the algorithm that has made possible the modern world. david berlinski the advent of the algorithm why do you need to study algorithms? if you are going to be a computer professional there are both practical and theoretical reasons to study algorithms. from a practical standpoint you have to know a standard set of important algorithms from different areas of computing in addition you should be able to design new algorithms and analyze their efficiency. from the theoretical standpoint the study of algorithms sometimes called algorithmics has come to be recognized as the cornerstone of computer science. david harel in his delightful book pointedly titled algorithmics the spirit of computing put it as follows algorithmics is more than a branch of computer science. it is the core of computer science and in all fairness can be said to be relevant to most of science business and technology. har p. but even if you are not a student in a computing related program there are compelling reasons to study algorithms. to put it bluntly computer programs would not exist without algorithms. and with computer applications becoming indispensable in almost all aspects of our professional and personal lives studying algorithms becomes a necessity for more and more people. another reason for studying algorithms is their usefulness in developing analytical skills. after all algorithms can be seen as special kinds of solutions to problems not just answers but precisely defined procedures for getting answers. consequently specific algorithm design techniques can be interpreted as problemsolving strategies that can be useful regardless of whether a computer is involved. of course the precision inherently imposed by algorithmic thinking limits the kinds of problems that can be solved with an algorithm. you will not find for example an algorithm for living a happy life or becoming rich and famous. on the other hand this required precision has an important educational advantage. donald knuth one of the most prominent computer scientists in the history of algorithmics put it as follows a person well trained in computer science knows how to deal with algorithms how to construct them manipulate them understand them analyze them. this knowledge is preparation for much more than writing good computer programs it is a general purpose mental tool that will be a definite aid to the understanding of other subjects whether they be chemistry linguistics or music etc. the reason for this may be understood in the following way it has often been said that a person does not really understand something until after teaching it to someone else. actually a person does not really understand something until after teaching it to a computer i.e. expressing it as an algorithm . . . an attempt to formalize things as algorithms leads to a much deeper understanding than if we simply try to comprehend things in the traditional way. knu p. we take up the notion of algorithm in section . . as examples we use three algorithms for the same problem computing the greatest common divisor. there are several reasons for this choice. first it deals with a problem familiar to everybody from their middle school days. second it makes the important point that the same problem can often be solved by several algorithms. quite typically these algorithms differ in their idea level of sophistication and efficiency. third one of these algorithms deserves to be introduced first both because of its age it appeared in euclid's famous treatise more than two thousand years ago and its enduring power and importance. finally investigation of these three algorithms leads to some general observations about several important properties of algorithms in general. section . deals with algorithmic problem solving. there we discuss several important issues related to the design and analysis of algorithms. the different aspects of algorithmic problem solving range from analysis of the problem and the means of expressing an algorithm to establishing its correctness and analyzing its efficiency. the section does not contain a magic recipe for designing an algorithm for an arbitrary problem. it is a well established fact that such a recipe does not exist. still the material of section . should be useful for organizing your work on designing and analyzing algorithms. section . is devoted to a few problem types that have proven to be particularly important to the study of algorithms and their application. in fact there are textbooks e.g. sed organized around such problem types. i hold the view shared by many others that an organization based on algorithm design techniques is superior. in any case it is very important to be aware of the principal problem types. not only are they the most commonly encountered problem types in real life applications they are used throughout the book to demonstrate particular algorithm design techniques. section . contains a review of fundamental data structures. it is meant to serve as a reference rather than a deliberate discussion of this topic. if you need a more detailed exposition there is a wealth of good books on the subject most of them tailored to a particular programming language. 