Informally, an NP-complete problem is a problem in NP that is as difficult as any
     other problem in this class because, by definition, any other problem in NP can
     be reduced to it in polynomial time (shown symbolically in Figure 11.6).
         Here are more formal definitions of these concepts.
     DEFINITION 5  A decision problem D1 is said to be polynomially reducible to
     a decision problem D2, if there exists a function t that transforms instances of D1
     to instances of D2 such that:
     1.  t maps all yes instances of D1 to yes instances of D2 and all no instances of D1
         to no instances of D2
     2.  t is computable by a polynomial time algorithm
         This definition immediately implies that if a problem D1 is polynomially
     reducible to some problem D2 that can be solved in polynomial time, then problem
     D1 can also be solved in polynomial time (why?).
     DEFINITION 6  A decision problem D is said to be NP-complete if:
     1.  it belongs to class NP
     2.  every problem in NP is polynomially reducible to D
         The fact that closely related decision problems are polynomially reducible to
     each other is not very surprising. For example, let us prove that the Hamiltonian
     circuit problem is polynomially reducible to the decision version of the traveling
                                     NP problems
                                     NP - complete problem
     FIGURE 11.6 Notion of an NP-complete problem. Polynomial-time reductions of NP
         problems to an NP-complete problem are shown by arrows.
    salesman problem. The latter can be stated as the existence problem of a Hamil-
    tonian circuit not longer than a given positive integer m in a given complete graph
    with positive integer weights. We can map a graph G of a given instance of the
    Hamiltonian circuit problem to a complete weighted graph G representing an in-
    stance of the traveling salesman problem by assigning 1 as the weight to each edge
    in G and adding an edge of weight 2 between any pair of nonadjacent vertices in
    G. As the upper bound m on the Hamiltonian circuit length, we take m = n, where
    n is the number of vertices in G (and G ). Obviously, this transformation can be
    done in polynomial time.
    Let G be a yes instance of the Hamiltonian circuit problem. Then G has a
    Hamiltonian circuit, and its image in G  will have length n, making the image a
    yes instance of the decision traveling salesman problem. Conversely, if we have a
    Hamiltonian circuit of the length not larger than n in G , then its length must be
    exactly n (why?) and hence the circuit must be made up of edges present in G,
    making the inverse image of the yes instance of the decision traveling salesman
    problem be a yes instance of the Hamiltonian circuit problem. This completes the
    proof.
    The notion of NP-completeness requires, however, polynomial reducibility of
    all problems in NP, both known and unknown, to the problem in question. Given
    the bewildering variety of decision problems, it is nothing short of amazing that
    specific examples of NP-complete problems have been actually found. Neverthe-
    less, this mathematical feat was accomplished independently by Stephen Cook
    in the United States and Leonid Levin in the former Soviet Union.2 In his 1971
    paper, Cook [Coo71] showed that the so-called CNF-satisfiability problem is NP-
    complete. The CNF-satisfiability problem deals with boolean expressions. Each
    boolean expression can be represented in conjunctive normal form, such as the
    following expression involving three boolean variables x1, x2, and x3 and their
    negations denoted x¯1, x¯2, and x¯3, respectively:
                         (x1  x¯2  x¯3)&(x¯1  x2)&(x¯1  x¯2  x¯3).
    The CNF-satisfiability problem asks whether or not one can assign values true and
    false to variables of a given boolean expression in its CNF form to make the entire
    expression true. (It is easy to see that this can be done for the above formula: if
    x1 = true, x2 = true, and x3 = false, the entire expression is true.)
    Since the Cook-Levin discovery of the first known NP-complete problems,
    computer scientists have found many hundreds, if not thousands, of other exam-
    ples. In particular, the well-known problems (or their decision versions) men-
    tioned above--Hamiltonian circuit, traveling salesman, partition, bin packing,
    and graph coloring--are all NP-complete. It is known, however, that if P = NP
    there must exist NP problems that neither are in P nor are NP-complete.
2.  As it often happens in the history of science, breakthrough discoveries are made independently and
    almost simultaneously by several scientists. In fact, Levin introduced a more general notion than NP-
    completeness, which was not limited to decision problems, but his paper [Lev73] was published two
    years after Cook's.
     For a while, the leading candidate to be such an example was the problem
     of determining whether a given integer is prime or composite. But in an im-
     portant theoretical breakthrough, Professor Manindra Agrawal and his students
     Neeraj Kayal and Nitin Saxena of the Indian Institute of Technology in Kanpur
     announced in 2002 a discovery of a deterministic polynomial-time algorithm for
     primality testing [Agr04]. Their algorithm does not solve, however, the related
     problem of factoring large composite integers, which lies at the heart of the widely
     used encryption method called the RSA algorithm [Riv78].
     Showing that a decision problem is NP-complete can be done in two steps.
     First, one needs to show that the problem in question is in NP; i.e., a randomly
     generated string can be checked in polynomial time to determine whether or not
     it represents a solution to the problem. Typically, this step is easy. The second
     step is to show that every problem in NP is reducible to the problem in question
     in polynomial time. Because of the transitivity of polynomial reduction, this step
     can be done by showing that a known NP-complete problem can be transformed
     to the problem in question in polynomial time (see Figure 11.7). Although such
     a transformation may need to be quite ingenious, it is incomparably simpler than
     proving the existence of a transformation for every problem in NP. For example,
     if we already know that the Hamiltonian circuit problem is NP-complete, its
     polynomial reducibility to the decision traveling salesman problem implies that
     the latter is also NP-complete (after an easy check that the decision traveling
     salesman problem is in class NP).
     The definition of NP-completeness immediately implies that if there exists a
     deterministic polynomial-time algorithm for just one NP-complete problem, then
     every problem in NP can be solved in polynomial time by a deterministic algo-
     rithm, and hence P = NP. In other words, finding a polynomial-time algorithm
                                        NP  problems
                                        known
                                        NP -complete
                                        problem         candidate for
                                                        NP -completeness
     FIGURE 11.7 Proving NP-completeness by reduction.
    for one NP-complete problem would mean that there is no qualitative difference
    between the complexity of checking a proposed solution and finding it in polyno-
    mial time for the vast majority of decision problems of all kinds. Such implications
    make most computer scientists believe that P = NP, although nobody has been
    successful so far in finding a mathematical proof of this intriguing conjecture. Sur-
    prisingly, in interviews with the authors of a book about the lives and discoveries
    of 15 prominent computer scientists [Sha98], Cook seemed to be uncertain about
    the eventual resolution of this dilemma whereas Levin contended that we should
    expect the P = NP outcome.
        Whatever the eventual answer to the P =? NP question proves to be, knowing
    that a problem is NP-complete has important practical implications for today. It
    means that faced with a problem known to be NP-complete, we should probably
    not aim at gaining fame and fortune3 by designing a polynomial-time algorithm
    for solving all its instances. Rather, we should concentrate on several approaches
    that seek to alleviate the intractability of such problems. These approaches are
    outlined in the next chapter of the book.
    Exercises 11.3
    1.  A game of chess can be posed as the following decision problem: given a
        legal positioning of chess pieces and information about which side is to move,
        determine whether that side can win. Is this decision problem decidable?
    2.  A certain problem can be solved by an algorithm whose running time is in
        O(nlog2 n). Which of the following assertions is true?
        a.  The problem is tractable.
        b. The problem is intractable.
        c.  Impossible to tell.
    3.  Give examples of the following graphs or explain why such examples cannot
        exist.
        a.  graph with a Hamiltonian circuit but without an Eulerian circuit
        b. graph with an Eulerian circuit but without a Hamiltonian circuit
        c.  graph with both a Hamiltonian circuit and an Eulerian circuit
        d. graph with a cycle that includes all the vertices but with neither a Hamil-
            tonian circuit nor an Eulerian circuit
3.  In 2000, The Clay Mathematics Institute (CMI) of Cambridge, Massachusetts, designated a $1 million
    prize for the solution to this problem.
     4.  For each    of the following graphs,   find  its  chromatic  number.
         a.  a         e              b.        a                     c.  a                f
                                          e                   b                d
             b         f                                                  b                g
                                             d             c                   e
             c         g                                                  c                h
             d         h
     5.  Design a polynomial-time algorithm for the graph 2-coloring problem: deter-
         mine whether vertices of a given graph can be colored in no more than two
         colors so that no two adjacent vertices are colored the same color.
     6.  Consider the following brute-force algorithm for solving the composite num-
         ber problem: Check successive integers from 2 to        n/2  as possible divisors of
         n. If one of them divides n evenly, return yes (i.e., the number is composite);
         if none of them does, return no. Why does this algorithm not put the problem
         in class P ?
     7.  State the decision version for each of the following problems and outline a
         polynomial-time algorithm that verifies whether or not a proposed solution
         solves the problem. (You may assume that a proposed solution represents a
         legitimate input to your verification algorithm.)
             a. knapsack problem             b. bin packing problem
     8.  Show that the partition problem is polynomially reducible to the decision
         version of the knapsack problem.
     9.  Show that the following three problems are polynomially reducible to each
         other.
         (i) Determine, for a given graph G =         V, E       and a positive integer m  |V |,
         whether G contains a clique of size m or more. (A clique of size k in a graph
         is its complete subgraph of k vertices.)
         (ii) Determine, for a given graph G =        V, E       and a positive integer m  |V |,
         whether there is a vertex cover of size m or less for G. (A vertex cover of size
         k for a graph G =  V, E      is a subset V    V such that |V | = k and, for each
         edge (u, v)  E, at least one of u and v belongs to V .)
         (iii) Determine, for a given graph G =       V, E       and a positive integer m  |V |,
         whether G contains an independent set of size m or more. (An independent
     set of size k for a graph G =  V, E  is a subset V   V such that |V | = k and
     for all u, v  V , vertices u and v are not adjacent in G.)
10.  Determine whether the following problem is NP-complete. Given several
     sequences of uppercase and lowercase letters, is it possible to select a letter
     from each sequence without selecting both the upper- and lowercase versions
     of any letter? For example, if the sequences are Abc, BC, aB, and ac, it is
     possible to choose A from the first sequence, B from the second and third, and
     c from the fourth. An example where there is no way to make the required
     selections is given by the four sequences AB, Ab, aB, and ab. [Kar86]
11.  Which of the following diagrams do not contradict the current state of our
     knowledge about the complexity classes P, NP, and NPC (NP-complete
     problems)?
         a.                               b.             P = NP
                 P = NP = NPC
                                                                 NPC
         c.            NP                 d.                     NP
                 P     NPC                               P       NPC
         e.            NP
                 P         NPC
12.  King Arthur expects 150 knights for an annual dinner at Camelot. Unfortu-
     nately, some of the knights quarrel with each other, and Arthur knows who
     quarrels with whom. Arthur wants to seat his guests around a table so that no
     two quarreling knights sit next to each other.
     a.  Which standard problem can be used to model King Arthur's task?
     b. As a research project, find a proof that Arthur's problem has a solution if
         each knight does not quarrel with at least 75 other knights.
     