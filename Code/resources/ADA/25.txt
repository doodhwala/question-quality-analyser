Linear Data Structures
The two most important elementary data structures are the array and the linked
     list. A (one-dimensional) array is a sequence of n items of the same data type that
    are stored contiguously in computer memory and made accessible by specifying a
    value of the array's index (Figure 1.3).
    In the majority of cases, the index is an integer either between 0 and n - 1
    (as shown in Figure 1.3) or between 1 and n. Some computer languages allow an
    array index to range between any two integer bounds low and high, and some even
    permit nonnumerical indices to specify, for example, data items corresponding to
    the 12 months of the year by the month names.
    Each and every element of an array can be accessed in the same constant
    amount of time regardless of where in the array the element in question is located.
    This feature positively distinguishes arrays from linked lists, discussed below.
    Arrays are used for implementing a variety of other data structures. Promi-
    nent among them is the string, a sequence of characters from an alphabet termi-
    nated by a special character indicating the string's end. Strings composed of zeros
    and ones are called binary strings or bit strings. Strings are indispensable for pro-
    cessing textual data, defining computer languages and compiling programs written
    in them, and studying abstract computational models. Operations we usually per-
    form on strings differ from those we typically perform on other arrays (say, arrays
    of numbers). They include computing the string length, comparing two strings to
    determine which one precedes the other in lexicographic (i.e., alphabetical) or-
    der, and concatenating two strings (forming one string from two given strings by
    appending the second to the end of the first).
    A linked list is a sequence of zero or more elements called nodes, each
    containing two kinds of information: some data and one or more links called
    pointers to other nodes of the linked list. (A special pointer called "null" is used
    to indicate the absence of a node's successor.) In a singly linked list, each node
    except the last one contains a single pointer to the next element (Figure 1.4).
    To access a particular node of a linked list, one starts with the list's first node
    and traverses the pointer chain until the particular node is reached. Thus, the time
    needed to access an element of a singly linked list, unlike that of an array, depends
    on where in the list the element is located. On the positive side, linked lists do
                  Item [0]       Item [1]                Item [n­1]
    FIGURE  1.3   Array of n  elements.
                  Item 0                      Item 1     Item n ­1 null
    FIGURE  1.4   Singly linked  list  of  n  elements.
null       Item 0          Item 1                                Item n­1 null
FIGURE 1.5 Doubly linked list of n elements.
not require any preliminary reservation of the computer memory, and insertions
and deletions can be made quite efficiently in a linked list by reconnecting a few
appropriate pointers.
We can exploit flexibility of the linked list structure in a variety of ways. For
example, it is often convenient to start a linked list with a special node called the
header. This node may contain information about the linked list itself, such as its
current length; it may also contain, in addition to a pointer to the first element, a
pointer to the linked list's last element.
Another extension is the structure called the doubly linked list, in which every
node, except the first and the last, contains pointers to both its successor and its
predecessor (Figure 1.5).
The array and linked list are two principal choices in representing a more
abstract data structure called a linear list or simply a list. A list is a finite sequence
of data items, i.e., a collection of data items arranged in a certain linear order. The
basic operations performed on this data structure are searching for, inserting, and
deleting an element.
Two special types of lists, stacks and queues, are particularly important. A
stack is a list in which insertions and deletions can be done only at the end. This
end is called the top because a stack is usually visualized not horizontally but
vertically--akin to a stack of plates whose "operations" it mimics very closely.
As a result, when elements are added to (pushed onto) a stack and deleted from
(popped off) it, the structure operates in a "last-in­first-out" (LIFO) fashion--
exactly like a stack of plates if we can add or remove a plate only from the top.
Stacks have a multitude of applications; in particular, they are indispensable for
implementing recursive algorithms.
A queue, on the other hand, is a list from which elements are deleted from
one end of the structure, called the front (this operation is called dequeue),
and new elements are added to the other end, called the rear (this operation is
called enqueue). Consequently, a queue operates in a "first-in­first-out" (FIFO)
fashion--akin to a queue of customers served by a single teller in a bank. Queues
also have many important applications, including several algorithms for graph
problems.
Many important applications require selection of an item of the highest pri-
ority among a dynamically changing set of candidates. A data structure that seeks
to satisfy the needs of such applications is called a priority queue. A priority
queue is a collection of data items from a totally ordered universe (most often,
    integer or real numbers). The principal operations on a priority queue are find-
    ing its largest element, deleting its largest element, and adding a new element.
    Of course, a priority queue must be implemented so that the last two operations
    yield another priority queue. Straightforward implementations of this data struc-
    ture can be based on either an array or a sorted array, but neither of these options
    yields the most efficient solution possible. A better implementation of a priority
    queue is based on an ingenious data structure called the heap. We discuss heaps
    and an important sorting algorithm based on them in Section 6.4.
