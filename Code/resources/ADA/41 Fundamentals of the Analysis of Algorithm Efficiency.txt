I often say that when you can measure what you are speaking about and
   express it in numbers you know something about it; but when you cannot
   express it in numbers your knowledge is a meagre and unsatisfactory
   kind: it may be the beginning of knowledge but you have scarcely, in your
   thoughts, advanced to the stage of science, whatever the matter may be.
                               --Lord Kelvin (1824­1907)
   Not everything that can be counted counts, and not everything that counts
   can be counted.
                               --Albert Einstein (1879­1955)
   This chapter is devoted to analysis of algorithms. The American Heritage Dic-
   tionary defines "analysis" as "the separation of an intellectual or substantial
   whole into its constituent parts for individual study." Accordingly, each of the prin-
   cipal dimensions of an algorithm pointed out in Section 1.2 is both a legitimate and
   desirable subject of study. But the term "analysis of algorithms" is usually used in
   a narrower, technical sense to mean an investigation of an algorithm's efficiency
   with respect to two resources: running time and memory space. This emphasis on
   efficiency is easy to explain. First, unlike such dimensions as simplicity and gen-
   erality, efficiency can be studied in precise quantitative terms. Second, one can
   argue--although this is hardly always the case, given the speed and memory of
   today's computers--that the efficiency considerations are of primary importance
   from a practical point of view. In this chapter, we too will limit the discussion to
   an algorithm's efficiency.
                                                                                           41
              We start with a general framework for analyzing algorithm efficiency in Sec-
         tion 2.1. This section is arguably the most important in the chapter; the funda-
         mental nature of the topic makes it also one of the most important sections in the
         entire book.
              In Section 2.2, we introduce three notations: O ("big oh"),  ("big omega"),
         and  ("big theta"). Borrowed from mathematics, these notations have become
         the language for discussing the efficiency of algorithms.
              In Section 2.3, we show how the general framework outlined in Section 2.1 can
         be systematically applied to analyzing the efficiency of nonrecursive algorithms.
         The main tool of such an analysis is setting up a sum representing the algorithm's
         running time and then simplifying the sum by using standard sum manipulation
         techniques.
              In Section 2.4, we show how the general framework outlined in Section 2.1
         can be systematically applied to analyzing the efficiency of recursive algorithms.
         Here, the main tool is not a summation but a special kind of equation called a
         recurrence relation. We explain how such recurrence relations can be set up and
         then introduce a method for solving them.
              Although we illustrate the analysis framework and the methods of its appli-
         cations by a variety of examples in the first four sections of this chapter, Section
         2.5 is devoted to yet another example--that of the Fibonacci numbers. Discov-
         ered 800 years ago, this remarkable sequence appears in a variety of applications
         both within and outside computer science. A discussion of the Fibonacci sequence
         serves as a natural vehicle for introducing an important class of recurrence rela-
         tions not solvable by the method of Section 2.4. We also discuss several algorithms
         for computing the Fibonacci numbers, mostly for the sake of a few general obser-
         vations about the efficiency of algorithms and methods of analyzing them.
              The methods of Sections 2.3 and 2.4 provide a powerful technique for analyz-
         ing the efficiency of many algorithms with mathematical clarity and precision, but
         these methods are far from being foolproof. The last two sections of the chapter
         deal with two approaches--empirical analysis and algorithm visualization--that
         complement the pure mathematical techniques of Sections 2.3 and 2.4. Much
         newer and, hence, less developed than their mathematical counterparts, these ap-
         proaches promise to play an important role among the tools available for analysis
         of algorithm efficiency.
    