The data structure called the "heap" is definitely not a disordered pile of items
          as the word's definition in a standard dictionary might suggest. Rather, it is a
          clever, partially ordered data structure that is especially suitable for implementing
          priority queues. Recall that a priority queue is a multiset of items with an orderable
          characteristic called an item's priority, with the following operations:
                   10                               10                        10
            5                   7        5                 7            5                       7
        4       2      1                       2        1          6       2      1
    FIGURE 6.9  Illustration    of  the  definition of heap: only the leftmost tree is a heap.
        finding an item with the highest (i.e., largest) priority
        deleting an item with the highest priority
        adding a new item to the multiset
        It is primarily an efficient implementation of these operations that makes
    the heap both interesting and useful. Priority queues arise naturally in such ap-
    plications as scheduling job executions by computer operating systems and traf-
    fic management by communication networks. They also arise in several impor-
    tant algorithms, e.g., Prim's algorithm (Section 9.1), Dijkstra's algorithm (Sec-
    tion 9.3), Huffman encoding (Section 9.4), and branch-and-bound applications
    (Section 12.2). The heap is also the data structure that serves as a cornerstone of
    a theoretically important sorting algorithm called heapsort. We discuss this algo-
    rithm after we define the heap and investigate its basic properties.
