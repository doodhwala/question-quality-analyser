The traveling salesman problem (TSP) has been intriguing researchers for the
     last 150 years by its seemingly simple formulation, important applications, and
     interesting connections to other combinatorial problems. In layman's terms, the
     problem asks to find the shortest tour through a given set of n cities that visits each
     city exactly once before returning to the city where it started. The problem can be
     conveniently modeled by a weighted graph, with the graph's vertices representing
     the cities and the edge weights specifying the distances. Then the problem can be
     stated as the problem of finding the shortest Hamiltonian circuit of the graph. (A
     Hamiltonian circuit is defined as a cycle that passes through all the vertices of the
     graph exactly once. It is named after the Irish mathematician Sir William Rowan
     Hamilton (1805­1865), who became interested in such cycles as an application of
     his algebraic discoveries.)
          It is easy to see that a Hamiltonian circuit can also be defined as a sequence of
     n + 1 adjacent vertices vi0, vi1, . . . , vin-1, vi0, where the first vertex of the sequence
     is the same as the last one and all the other n - 1 vertices are distinct. Further,
     we can assume, with no loss of generality, that all circuits start and end at one
     particular vertex (they are cycles after all, are they not?). Thus, we can get all
     the tours by generating all the permutations of n - 1 intermediate cities, compute
     the tour lengths, and find the shortest among them. Figure 3.7 presents a small
     instance of the problem and its solution by this method.
          An inspection of Figure 3.7 reveals three pairs of tours that differ only by
     their direction. Hence, we could cut the number of vertex permutations by half.
     We could, for example, choose any two intermediate vertices, say, b and c, and then
     consider only permutations in which b precedes c. (This trick implicitly defines a
     tour's direction.)
          This improvement cannot brighten the efficiency picture much, however.
     The  total  number  of  permutations  needed  is  still  1  (n  -  1)!,  which  makes         the
                                                              2
     exhaustive-search approach impractical for all but very small values of n. On the
     other hand, if you always see your glass as half-full, you can claim that cutting
     the work by half is nothing to sneeze at, even if you solve a small instance of the
     problem, especially by hand. Also note that had we not limited our investigation
     to the circuits starting at the same vertex, the number of permutations would have
     been even larger, by a factor of n.
