augmenting
spanning
warshall
pattern
hash
marriage
objective
huffman
dynamic
kruskal
dfs
hashing
conquer
shift
horspool
transitive
closure
simplex
greedy
decision
strassen
avl
tableau
bfs
floyd
matching
recurrence
rotation
dijkstra
boyer
moore
growth
codeword
bipartite
subarray
women
jim
sink
characters
gaussian
hull
suffix
bob
convex
fringe
quicksort
subproblems
priority
keys
external
topological
uij
enhancement
chips
unvisited
horner
straws
distribution
capacities
intermediate
elimination
feasible
symbols
winning
postorder
numbered
internal
triangular
denominations
tight
adversary
woman
gray
josephus
exhaustive
subarrays
inorder
fibonacci
hamiltonian
xij
matched
digraph
optimal
brute
polynomial
network
nondeterministic
floating
representative
knapsack
occurrence
nearest
union
higher
substring
pmax
region
traversals
xji
flows
errors
circuit
heapsort
coins
permutations
pivot
reducible
composite
truncation
quickhull
augmentation
unlabeled
preference
chaining
accesses
multiplications
weighted
records
encoding
framework
mergesort
sample
stored
shifts
cancellation
peg
scatterplot
piles
quickselect
frequencies
master
forest
rotations
additions
player
preorder
interpolation
collision
losing
preceded
abcbab
parted
probing
free
prefix
codewords
compression
robot
collection
completeness
deterministic
polynomially
subtractive
unbounded
preferences
proposal
dominance
lcm
connected
source
reflected
dmin
nlog
closer
orders
character
dead
picked
ranking
labeling
queens
traversal
nonrecursive
capacity
labeled
exponentiation
reduction
voronoi
barber
aligned
kid
conservation
cardinality
probabilities
overlapping
attaching
unseen
precision
coloring
shortest
mobile
tom
breadth
visualization
iterative
entry
maximize
tower
decrease
techniques
updated
fake
hamming
visited
analyzing
decomposition
establishing
tournament
ternary
halt
numerical
error
coin
mfknapsack
tik
tkj
ikj
rij
entering
members
halves
merging
inverse
bad
dag
russian
nonbasic
departing
committee
closest
cell
hanoi
crossed
crossover
dminsq
decagons
linked
hamburgers
determinant
programming
intractable
cnf
arthur
trapezoidal
parental
magic
labels
measuring
frequency
overwrite
trading
statues
hashed
pile
gcd
instructions
cents
expanding
makeset
encode
encoded
disks
scanning
computations
simplified
trial
peasant
unknowns
material
unused
maximizing
outcomes
disk
shorter
update
constraints
rectangle
job
marked
strongly
lexicographic
opponent
path
divisor
programs
coding
successfully
offs
removed
tetrominoes
articulation
jugs
ford
fulkerson
matchings
rankings
unstable
blocking
functions
assignment
stack
theorem
matrices
sieve
leaf
rightmost
memory
kth
expression
hulls
maze
ships
augment
river
presorting
stable
partitioning
paths
recursively
bring
boxed
greatest
boundary
intractability
halting
levin
satisfiability
knights
taylor
tij
optimalbst
dictionary
soldiers
shellsort
glasses
survivor
composition
principle
positions
coefficient
hoare
codes
multiplicative
animation
cells
runlength
cramer
panels
accumulator
wife
bonds
invested
ideally
cmerge
flag
bolts
leafcounter
conventional
submatrices
separating
newton
halts
lower
align
mismatch
patterns
resolution
reverse
afterward
prestructuring
indexing
farther
guided
baobab
retrieves
fields
collisions
addressing
birthday
notations
primes
eratosthenes
dictionaries
shifting
permutation
crossing
quarter
locally
maxval
rabbits
pseudorandom
coordinates
proposed
deletion
rumors
ecounter
singleton
weighings
eulerian
outcome
cook
coefficients
heaps
courses
edmonds
edm
prefers
rejected
roommates
constants
inserting
money
geometric
designing
complexity
understand
pointers
dark
broken
observed
digit
construction
modest
topologies
tetromino
gadget
battleship
rubber
impractical
alphametic
arithmetic
approximations
inserted
depth
minutes
bridges
bounds
spreadsheet
cubic
filling
abstract
reached
transformed
nonsingular
synthetic
minimization
pwgc
calls
recording
consistent
locker
cabbage
subtrees
recorded
tright
euclidean
office
definitions
substitutions
big
infinity
ratios
arguments
tractable
packing
underflow
converges
danger
prerequisites
excellent
lomuto
argument
guessing
pointer
spider
trotter
squashed
heappermute
bulb
switches
spoiled
pancakes
subtractions
combining
products
goat
unbalanced
theoretically
downto
maximization
stocks
tiles
occupied
clusters
popped
tromino
tlef
omega
dependence
factorial
gloves
neighborhood
binrec
celebrity
experimenter
distributed
seed
visualizations
digits
indispensable
issues
languages
null
nodes
texts
prime
rooted
identified
logarithmic
existence
produced
varieties
preprocess
facilitate
mismatching
reasoning
dna
attached
ordering
subsets
bridge
divisions
executions
entries
simplification
priorities
inclusion
representatives
assigning
unions
players
dividing
component
split
empirical
parameter
alphabet
significant
bellman
coinrow
backtracing
topdown
cij
inaccessible
rook
binomial
submatrix
subinstances
catalan
optimally
reachable
bitwise
dumped
enqueue
cuts
ainxn
basis
karp
improving
equations
balanced
matches
indices
access
pairing
slope
terminate
cycling
sinks
template
ahu
preflow
partners
persons
proposes
ranked
gender
proposals
college
polygon
candidates
acyclicity
domain
accepted
strings
majority
description
data
frequent
miracle
needing
nlogb
logarithms
skips
switching
cryptography
alogb
clogb
savings
width
efficientclosestpair
pmaxpn
correctness
prim
subgraph
backward
holds
evaluation
vector
equivalent
stacks
band
maximal
precompute
accelerate
percentage
pratt
aligning
shifttable
precomputed
failing
dbcbab
mismatched
appropriately
installed
addresses
distributes
clustering
extendible
probes
bucket
paradox
division
transform
current
optimality
boolean
person
organizing
learning
activity
route
approximation
respect
aspects
teaching
rework
conjunction
nigsberg
stroll
siblings
pennies
irrevocable
cheapest
czech
expands
earliest
vessels
messages
gnew
subgraphs
eik
roads
selects
decoding
answerable
deck
cards
spades
verification
heavier
absolute
studying
remainder
today
sentinel
visiting
engineering
arranged
retrieved
minimizing
transforming
dominated
substitute
domino
lengths
series
digraphs
removal
involves
combinatorial
innermost
genuine
modef
runvalue
boxes
forwardelimination
toggling
spaghetti
kettle
endowment
crossings
notation
stage
obtaining
integrals
undecidable
impossibility
hundreds
abc
decidable
breakthrough
factors
wolf
classical
professor
essentially
unsuccessful
suff
components
space
cbest
divided
encountering
splits
dutch
national
nuts
pencil
pointing
euclid
transformation
varies
iteratively
boys
neighbors
team
teams
prerequisite
johnson
button
halving
picture
partition
loop
arbitrarily
fixed
occurrences
body
neumann
recurrences
setting
benefits
inefficiency
uniformly
studied
wall
evenly
sparse
plane
ready
mesh
weighs
firm
opponents
metrics
tigers
nails
axioms
tours
cryptarithm
dudeney
restarted
solid
accompany
orderings
fewest
theta
measures
twofold
socks
scenario
grain
inspecting
monks
hamburger
homogeneous
inhomogeneous
unix
contained
davg
static
parameters
repetition
sorting
power
polynomials
lowest
comparisons
partially
assigns
knight
inequality
roots
unknown
scheme
consists
equality
multiplying
cworst
objects
listed
recursive
gal
string
reduced
extended
items
systems
collecting
dependencies
unlimited
denomination
descent
minval
jack
touching
units
quick
increased
weights
inaccurate
malevolent
cwbsorst
jigsaw
professionals
chromatic
reducibility
lowercase
npc
quarrel
conditioned
forsythe
areas
nonnegativity
dantzig
karmarkar
planes
shore
drink
kor
victory
popping
incoming
beneficial
johnsontrotter
lexicographicpermute
brgc
flipping
attraction
outright
addends
jewish
romans
surrender
pictures
lomutopartition
linearly
interactive
flipper
iterations
chocolate
processor
copied
reported
asymptotically
maximizes
pushed
swaps
putting
cluster
villages
connectivity
subtree
assigned
understanding
familiar
critical
generality
node
corner
practitioners
sibling
knew
failure
preprocessing
flexible
theoreticians
spaces
spool
distributing
deteriorates
page
traveling
salesman
theory
evaluating
determining
processed
accuracy
squaring
solvable
replaced
reasons
review
internet
columns
unique
interpreted
relating
tables
cost
cash
successively
professional
cornerstone
procedures
definite
recipe
nowadays
doors
designer
influential
opportunity
gpa
defining
dequeue
loops
relationship
rumor
subway
header
creates
mapping
counterexample
optimizes
variance
subproblem
assumes
height
median
infinitely
measured
multiplication
relation
world
informally
lighter
fastest
nonzero
conclude
thousands
consuming
inputs
answers
geometry
extension
partitioned
multiplied
queues
bank
identity
singular
mirror
drawbacks
games
filled
occurs
boat
correspondence
differs
directions
swap
localized
improves
feasibility
workers
graduates
awarded
nobel
economics
medal
hits
translate
slack
progresses
ellipsoid
inflow
outflow
degradation
reinitialize
terminates
families
seating
girls
unmatched
alternately
augmentations
contrary
gale
shapley
hospitals
proposing
alphabetical
children
trees
searching
introduction
von
minute
appendix
powers
room
versions
retrieve
algorithmics
steps
multiples
choices
spent
school
adjacent
proof
expressing
door
increases
ordered
asymptotic
learned
hungarian
circumference
detecting
exchanges
concepts
clique
pint
demonstrates
compares
jobs
greed
investigated
doubling
behavior
indicator
counts
systematically
linearithmic
fried
relative
inequalities
deleting
location
classes
initialized
stability
structures
gave
personal
happy
meant
agreed
unambiguous
favorite
lockers
procedural
capabilities
destined
capability
fish
strive
dialects
inconvenient
compromise
antoine
saint
exupe
perfection
peril
jon
talking
creative
summarized
attracted
mousetrap
alphabetically
strike
compiling
illustrations
icosian
rephrase
undoubtedly
plates
customers
distinction
constructs
circles
searched
quantities
richard
applicability
chessboard
changed
passes
triangle
cities
hit
constructing
machine
assertions
intersection
vectors
amounts
returns
fruitful
modevalue
bills
annxn
isaac
betterforwardelimination
pivotrow
determinants
panel
affects
balancing
black
rebalancing
newly
heapify
fft
byproducts
quotient
cupboard
investments
managers
pwc
pwg
jealous
husbands
husband
squares
analyze
multiple
symbol
technology
discriminant
challenges
models
transpose
winner
institute
gap
subtracting
approximating
limitations
completes
difficulties
knowing
outputs
shrink
cba
distance
worst
improvements
incremented
recursion
manipulation
accomplished
identifies
completely
facts
visits
interpretation
formula
challenging
exponents
shell
tiny
inversions
reversing
reversed
instructor
attractive
numbering
discern
incrementing
unprocessed
exemplifies
wins
arrays
nature
probability
designed
students
unordered
dense
weight
keeping
reaches
worthwhile
arises
plays
sending
derivation
exploits
locations
mechanism
unsatisfactory
counted
arguably
clocking
copc
caution
cancelled
fourfold
probabilistic
missed
invention
offered
grains
characterizes
embedded
scalar
cmm
cmn
caveats
repetitions
measurements
novices
tells
succinctness
mask
cubes
riddle
graphcomplete
frying
rabbit
female
stairs
stair
hypothesis
tstart
tfinish
register
ticks
misleading
congruential
convey
screens
evidence
strictly
subtraction
evaluate
substitution
anxn
approximately
uniqueness
belongs
titled
aware
eventually
vast
succinct
multiset
representations
legitimate
chapters
chip
operates
purposes
giving
initialization
graduate
overcome
destination
types
software
applies
derive
sequential
variables
constructed
played
technical
obstacles
obstacle
odd
actual
leaving
transformations
requency
pivoting
discoveries
sizes
exponential
web
divides
cavg
exchanging
scans
extreme
decimal
nondecreasing
notion
speed
auxiliary
reasonable
images
acyclic
create
symmetric
ghost
spoken
dickens
multistage
revisiting
beautiful
feel
temptation
succumb
producing
unusual
underlines
resizing
implying
countries
ndj
changemaking
mincoinchange
backtrace
nonexistent
robotcoincollection
setup
equilateral
apex
bino
prototype
precedence
odds
expresses
categories
unsatisfying
maintains
calculated
copies
recomputation
unattractive
subsequence
editing
triangulation
sketched
reconstruct
consulting
onenode
kmin
flavor
inheritance
redundancy
reflects
rewritten
avoiding
communications
precomputing
referenced
bernard
proceedings
wij
plastic
disturbing
indirectly
regionals
international
collegiate
contest
imposed
derived
accepts
signals
geometrically
cnxn
dominoes
aij
contradicts
uniquely
dramatic
proves
dinner
insertion
correctly
fails
storing
counterpart
highest
sqrt
started
forests
exhausted
manhattan
circuits
connects
field
frequently
java
primary
empirically
appearance
physical
informal
investigation
established
summation
comparison
minimal
scheduling
minimizes
assumed
prays
prayer
god
grant
ivan
turgenev
novelist
deserved
diagrammed
moment
reflection
prayers
goddess
suited
pairwise
accounts
drudgery
decreaseby
andconquer
divideand
merged
noteworthy
bookkeeping
complications
irrelevant
contexts
arising
translation
lucky
wonderful
career
knighted
services
stopping
decrementing
hoarepartition
unfortunate
utility
trickier
justifies
randomized
expert
february
physics
ieee
white
blue
widths
pseudocodes
notably
supports
equalize
deem
disparity
outperformance
multiplicands
smalltalk
anatoly
karatsuba
prevailing
opinion
progressively
coopersmith
winograd
subtle
carries
efficeint
updating
subsequently
advice
spends
resemblance
cite
polygonal
chains
concreteness
pmaxppn
concatenate
perimeter
analytically
fenced
preselected
resulting
delete
executed
longest
mercy
johann
wolfgang
burdening
widespread
highlights
facets
synonymously
preconditioning
confusingly
confusion
interplay
hugely
copying
productively
decremented
distributioncountingsort
reuse
ancestry
virtual
gallery
curator
toe
trials
bestknown
morris
knuthmorris
risking
safely
repetitive
punctuation
horspoolmatching
underscores
badsymbol
suffixes
alphabets
bess
baobabs
genes
chromo
tcctattctt
ttatagatctcgtattcttttatagatctcctattctt
leap
lookup
citizen
governmental
responsible
sex
entities
conflicting
jeopardize
ninth
inspected
gained
amazingly
wrapped
declare
unable
lazy
densely
populated
wrapping
coalesce
causing
probed
young
multivolume
knuiv
comprehensive
rehashing
relocated
competitor
preservation
queries
ibm
chances
unstruc
bayer
mcgreight
bay
permitting
interposed
structural
simplifications
percolate
prevalent
serves
strengths
availability
cutting
combine
entirety
temp
price
roy
david
recognized
treatise
universally
volumes
factorization
ancient
helps
arithmetical
perspective
specifies
closely
architecture
parallel
descriptions
shapes
proofs
mentioning
rigor
bentley
schedule
inventing
absence
flashlight
events
industry
doubly
anagrams
relations
primal
scan
study
eliminated
michael
douglas
gordon
gecko
street
subconsciously
cashiers
locale
nickel
penny
dimes
opening
paragraph
panding
globally
refrain
philosophical
hero
appealing
jumps
perpendicular
advances
matroid
archeology
biology
sociology
vojte
jarni
journal
inductive
coincides
traversed
negating
pursued
waiting
compatible
duration
averaging
vessel
spreading
sender
addressee
cups
kru
disconnectedness
progression
unites
unionfind
mapped
updates
merits
demerits
conduct
densities
steiner
packet
routing
multitudes
speech
document
formatting
tainment
pathfinding
impaired
popularity
edsger
mechanics
penultimate
deletemin
dags
ascii
samuel
morse
dashes
infrequent
associate
dad
decoded
toy
achieves
compressed
versatility
lempel
ziv
robust
compressions
abacabad
decode
transmission
deuces
threes
nines
draws
shuffled
efficiencies
original
combined
forces
implications
unresolved
discussing
minor
symbolically
impact
exhibit
hamil
tonian
oriented
leftmost
independently
insight
analytical
pay
justify
secret
tsort
stress
scaling
jordan
stages
lights
violated
shaded
initializes
equals
extremum
fractional
counting
notable
accurately
contiguous
subscript
adjust
fair
slowly
stick
mise
strategies
exchange
valuable
letter
improved
representing
limits
execution
assumptions
student
closed
beginning
knuth
things
human
sufficient
insertions
option
indexed
suggested
benefit
created
phenomenon
estimates
ideas
depicted
singly
cycles
represents
improvement
establish
longer
days
proven
carefully
speaking
attention
names
social
ancestors
descendants
illustrating
diagonally
composing
intervals
requiring
performing
card
emphasis
vary
analogous
analyses
outperform
existing
bars
excessively
extends
pages
dimensions
amortized
measurement
clarity
stirling
logb
amortize
consecutively
certainty
predict
poor
male
converge
game
textbooks
satisfied
checks
sword
crowbar
edward
lytton
leila
byrne
billiards
overlooked
unjustifiable
yardstick
afresh
unburdened
selectionsort
bubbling
sworst
crude
heard
topology
printers
supposed
tilings
counterfeit
interchange
porblem
incorporated
bruteforcestringmatch
headquarters
gadgets
repaired
gandhi
constitutes
substrings
cabaaxbya
diversion
zigzagging
boards
occupies
destroyer
submarine
cruiser
carrier
shooting
shot
displayed
proximity
airplanes
offices
samples
traffic
controller
postal
hierarchical
bruteforceclosestpair
starters
speeding
prominence
mars
rovers
accessibility
satellite
geographic
outliers
diameter
enthusiasm
barricading
sleeping
lively
fenceposts
erected
tamer
plywood
snap
snapped
addressed
frontal
dismayed
bruteforceclosestpoints
seminal
correcting
positioned
cream
hurls
layman
rowan
brighten
shoes
thief
steal
loot
remote
socalled
nphard
opting
unavoidable
tuples
assignments
egerva
hour
hours
puzzlist
henry
solver
cryptarithms
backing
dashed
classified
prestigious
brave
cautious
concentric
dotted
summarizes
supporting
sime
denis
poisson
jug
emptying
subpar
runs
calculus
wealth
gauss
expansion
opposed
colored
includes
paper
digital
replacing
interval
irrational
life
computational
impossible
continuous
scale
famous
importance
possibly
suggests
tasks
easier
choose
files
grows
scientists
item
tool
determines
modified
augmented
family
local
yielding
artificial
prize
paired
propose
experiment
investigate
previously
diagram
sorts
segments
achieved
wooden
combinatorics
groups
picks
depicts
charles
completing
wasteful
overwritten
fills
recompute
deriving
subin
viewed
picking
screen
aspect
recomputed
unrealistic
diagonals
affected
generation
stephen
freedom
loss
academy
restructure
east
acm
exceeding
implicitly
presence
formulation
weakness
developing
education
fourth
considerably
defines
strength
senseless
views
inescapable
instruments
sounding
necessitates
dustbin
celebrated
flying
discusses
intuition
directing
imposes
apples
oranges
fairer
intercity
plausible
deducing
uncertainty
realized
hostile
cheating
honest
malevolence
honesty
outputting
quotes
distinguished
configuration
tightness
extracted
inquire
lence
equivalence
informationtheoretic
redundant
acb
bca
terminal
reflecting
knockout
rounds
schemes
aro
invited
outset
indefinitely
garey
outstanding
lecture
historical
umbrella
striking
counterintuitive
gibberish
polynomialtime
cataloged
computable
bewildering
neverthe
leonid
conjunctive
negations
manindra
agrawal
neeraj
kayal
nitin
saxena
indian
kanpur
announced
factoring
transitivity
interviews
uncertain
dilemma
contended
gaining
fortune
legal
positioning
clay
cmi
cambridge
massachusetts
divisors
verifies
uppercase
expects
camelot
quarrels
guests
quarreling
clarification
nomena
everyday
approximated
overwhelming
mantissa
slows
phenomena
occurred
magnification
lowaccuracy
propagation
standpoints
propagate
highly
undesirable
instability
taught
difficultto
tolerance
menace
analyst
preface
denominator
calculating
kahan
overview
piqued
exclusively
esin
xdx
subintervals
guessed
inaccuracies
roundoff
dealt
iteration
implements
optimization
conditions
implemented
finds
plutarch
sertorius
horses
burly
hercules
tugged
weasel
plucked
hair
roars
laughter
cobham
brewer
fable
incremental
insertionsort
germane
albeit
rigorous
coupled
petitors
ferrying
detachment
rowboat
soldier
soda
insertsort
interleaving
sublists
stepping
differences
aforementioned
acronym
meaningless
drawn
visually
outgoing
cpm
methodologies
linkers
mutually
restarting
permuted
associating
horribly
fault
examined
frank
laboratories
reinvented
transmitting
baudot
telegraphy
reflexive
flexive
controlled
pushes
binarysearch
faces
tweaked
cayvegs
canvog
analogue
bisection
forgets
demand
nonorthodox
russe
parentheses
memorize
peasants
accord
visitors
nineteenth
flavius
historian
participated
chronicled
revolt
managed
fortress
jotapata
refuge
diehards
nearby
rebels
perish
dispatch
casting
contrived
surviving
prevailed
victim
grim
sole
gkp
interestingly
inches
notorious
prone
handles
overkill
rearrangement
shrinking
produces
poorly
brown
passing
practically
assessing
worthiness
wrote
edition
variablesize
randomness
hidden
gameplay
impartial
prototypical
deviation
recreational
authored
gaspar
aristocrat
hint
discarding
harvard
bouton
berlekamp
conway
guy
moldy
stacked
flip
biggest
miscellany
laa
additional
summarize
stops
lines
necessity
promised
inapplicable
residing
paradigms
separates
inversion
padded
answered
partitions
pivots
sedgewick
catchy
summing
simplify
greatly
avoids
bases
shaped
trominoes
overlaps
bubblesort
luck
assessment
hoa
duplicates
resume
advancing
persistent
refine
finishing
publication
society
suffices
tleft
hypothesize
correction
breaks
encouraged
surprised
superiority
disregard
exiting
usual
counterclockwise
excluded
farthest
examines
polygons
establishes
helped
investigating
ascertain
formulas
cartesian
networks
distances
business
exposition
intended
scientific
algorithmically
ingenuity
structuring
options
appeal
authors
generalized
exceptions
deletions
central
planning
sums
advent
donald
ularly
organization
sequentially
encounters
shifted
lost
comparisoncountingsort
circular
contiguously
concatenating
spectively
considers
aho
compilation
egyptian
recommended
unexpected
discovers
continued
differently
premium
sufficiently
ignoring
utilizing
signments
compact
erroneous
distribute
treating
treated
occupant
alleviate
scanned
video
implied
restriction
reside
generalizes
goal
distinguishes
tools
surprisingly
george
computationally
faced
secondary
knuiii
kar
concerned
stands
people
greater
history
commonly
sides
transportation
incident
alternating
bounded
computers
modification
composed
dual
adding
named
constitute
unsorted
reductions
elegant
diminishing
consult
perfectly
experiments
optimizing
expansions
disposal
verifications
compilers
robotics
passenger
station
washington
london
preliminary
balls
subsection
providing
subjected
intermixed
decreases
possession
bachet
introduces
rediscovered
parenthesized
generalization
falls
skipping
classification
airline
crew
dots
consciously
movie
prescription
nonadjacent
electrical
connections
contradiction
dura
revisited
pints
message
joseph
sponding
creation
animations
recognition
pioneer
commences
unspecified
spelled
adjustments
telegraph
huf
effectiveness
huff
eliminates
exploiting
fly
combinations
cave
diagonal
rearrange
pointed
thought
storage
exploited
randomly
alternatives
english
added
connecting
bold
half
address
counterparts
subject
steady
accretion
alexander
graham
hilly
foggy
hill
iterativeimprovement
colleges
moret
shapiro
heuristic
kantorovich
koopmans
apparently
royal
swedish
honor
father
instructive
quadrant
honors
president
citation
logistics
restated
south
qualifications
infeasible
attain
inspects
amn
minimized
unconstrained
nondegenerate
terminology
projection
adjusting
preserving
disregarded
notes
remarks
opens
bland
subscripted
phase
nutshell
intensive
worked
polished
evolved
packages
friendly
desktop
facility
khachian
kha
interior
pipeline
redirected
equivalently
separated
flowaugmenting
simpleminded
irrespective
replicate
chv
cleverly
demonstrating
shortestaugmentingpath
backwards
erase
relates
induced
accomplishes
utilized
preflows
reestablished
dinitz
karzanov
malhotra
kamar
maheshwari
goldberg
dining
interaction
meets
contingent
maximumcardinality
compensated
nonexistence
berge
zigs
zags
motivates
maximumbipartitematching
status
asserts
committees
skipped
response
rejects
underlined
refused
neutral
favors
bias
roles
participant
admissions
medical
residency
training
gusfield
irwing
gus
partner
admission
residents
applicant
pairings
maximumflow
shortestaugmenting
nelement
mathematicians
inefficient
desired
exponentially
elementary
rounded
ascertaining
intrinsic
appears
drastically
month
consumed
easiest
early
features
automatically
experience
avoided
tradition
product
precisely
illustrates
starting
amazing
unnecessary
exact
required
bits
manner
harel
sophistication
floor
programmed
aircraft
lesson
driven
tsp
acceptable
renowned
irish
nonnumerical
positively
fifo
backtracking
listing
glass
resolving
similarity
corresponds
target
built
boundaries
detection
incorporates
degenerates
intelligence
underlies
accrue
spots
kol
colorable
physicist
canonical
hierarchy
maps
intriguing
calculators
fight
verified
introducing
qualitatively
sequentialsearch
reveals
succeeds
embark
sleep
probable
statistical
predecessors
pool
tackle
forget
bubbles
circumvent
database
regional
service
manager
realize
evil
marks
degree
factor
efficiently
difficulty
written
endpoints
denote
constraint
news
proportional
arrangement
diagrams
quantity
user
gleaming
jeweler
velvet
berlinski
delightful
pointedly
spirit
fairness
compelling
bluntly
skills
inherently
living
preparation
aid
subjects
chemistry
linguistics
music
understood
formalize
comprehend
erybody
enduring
deliberate
tailored
wording
agreement
ubiquitous
nonambiguity
dramatically
alexandria
impressed
nostalgia
middleschool
qualify
unambiguously
teacher
nitpicking
ambiguity
rectify
greece
continuation
helping
daily
routines
ubiquity
fascinating
engines
khorezmi
khwarizmi
official
patent
patentable
country
driving
cooking
unequal
diophantine
hallway
fundamentals
reiterating
constructive
disciplines
readily
exciting
skimp
resembling
collaboration
burks
goldstine
essence
captured
concurrently
foreseeable
qualified
specification
imperative
extracting
unacceptably
contents
distill
utmost
guidance
caught
studies
categorize
intimately
proclaimed
wir
crucially
ambi
guity
skill
mixture
usage
dialect
declarations
indentation
dominant
flowchart
fed
converted
conclusively
beauty
beholder
undeniable
aes
judicious
unnatural
redesign
pilot
transition
incorrectly
inefficiently
debugging
safety
tricks
invariant
subexpressions
tuning
speedup
essay
essays
justifiably
pearls
wholeheartedly
writings
conclusion
emphasize
enjoyable
naming
joy
impatience
compromises
competing
ambiguously
unsolvable
misconception
mechanical
dull
truth
rewarding
riverbank
vegetarian
protected
species
rickety
party
crosses
walked
thrown
interviewers
seattle
interviewees
dispensing
mindistance
lya
reinforce
schools
holdings
companies
employees
grade
likened
admirable
embarrassment
riches
adapted
permits
plenty
spectacularly
conducive
databases
decades
intensified
oldest
economists
vlsi
fabrication
crystallography
genetic
scheduled
graphcoloring
unimaginable
disproved
greeks
triangles
unmarked
ruler
compass
intense
disappeared
resurrected
rulers
compasses
bytes
graphics
tomography
explanatory
focus
users
revolutionary
dominating
literate
rudimentary
swiss
islands
carved
vague
regions
months
accessed
textual
appending
reconnecting
flexibility
visualized
lifo
teller
dynamically
totally
universe
arcs
enters
disallows
compiled
adopted
expandable
interstate
highway
ticular
hierarchies
directories
organizational
charts
enterprises
excludes
inconvenience
effectively
membership
circumvented
intimate
reread
older
pascal
isolated
bracket
backlog
permuting
nonambiguous
adts
proving
seeks
seemingly
eliminating
restructuring
traverses
numerous
brought
remarkably
identification
accumulated
constrained
comprising
baa
selections
control
caveat
converse
heart
motion
rewrite
upper
purpose
identifying
account
circle
searches
predecessor
inferior
sketch
helpful
ancestor
global
stopped
individual
inventor
discrete
separately
rules
distinguish
schulz
cartoonist
creator
peanuts
amenable
conquering
elegance
concludes
radical
extensively
presortelementuniqueness
tscan
radix
accommodate
presortmode
tsearch
cumbersome
giants
chinese
europeans
augments
distorted
appends
unquestionably
reviewed
preventing
byproduct
commercial
proposition
tackles
inverses
reciprocals
overcoming
analogy
xnn
axj
basically
unchanged
noncorner
border
expended
degeneracy
tolerates
restructured
restore
admissible
adelson
velsky
landis
rotate
grandchild
relationships
abbreviation
reorganized
weird
balances
prevented
promoted
disordered
operating
management
nonincreasing
correspondingly
heapifies
headed
heapification
heapbottomup
sift
readers
sifted
swapped
heapified
sifting
williams
intentionally
handful
uncooked
rods
unorthodox
folklore
fourier
treatments
unpleasant
tworow
evaluates
realization
fades
processes
bixi
leftrightbinaryexponentiation
leftto
rightleftbinaryexponentiation
reliance
bruteforcepolynomialevaluation
tient
stove
seller
bookstore
sitting
kitchen
proceeded
approached
rene
descartes
divisible
factorizations
derivative
instructors
unintentionally
minds
bond
risky
moneys
dollars
exploration
refining
industrial
production
competitively
pgc
occupants
initialstate
appreciation
grand
married
couples
matters
rectangular
pips
embossed
arranging
rarely
worse
metric
doubts
inherent
arrived
academic
meaningful
vein
proverbial
proliferation
retrieval
describing
potentially
expressions
sharp
valued
conversely
ascending
tipping
staying
hardware
shrunk
purely
justified
normal
quoted
annual
worstcase
soviet
sensitivity
undefined
claims
lord
kelvin
rounding
triple
apparent
category
bins
ignores
cast
incomparably
unfortu
integral
squared
pun
discipline
toronto
prediction
concentrates
devices
weaknesses
machines
investigations
drawing
writer
discovering
substantially
multiway
received
skewed
fame
epigraph
executing
simultaneously
covers
returned
undo
modifications
sensitive
treatment
pad
decreased
chance
uniform
calculations
origins
bog
nonlinear
bugs
debug
convince
motivating
perseverance
interrelated
teach
wit
tailor
phrase
occasionally
outer
moderately
robin
sortable
restricted
exhibits
topologically
completion
instruction
cographic
inclusive
mile
calling
lighted
toggled
specifics
western
lots
inch
properly
expanded
swapping
blo
smith
severely
permitted
circled
appeared
claude
dud
eats
related
approximate
colors
color
infinite
nontrivial
taking
moving
standpoint
slower
continues
powerful
resources
designated
successor
referred
arrow
illustration
generates
organized
structured
handy
preferable
considerable
libraries
suitable
unsophisticated
removing
prepared
references
compres
useless
plea
library
entity
spend
counters
tured
exceeds
disadvantage
property
meagre
scarcely
thoughts
albert
einstein
heritage
separation
intellectual
constituent
narrower
quantitative
considerations
borrowed
simplifying
foolproof
relentless
technological
innovations
cache
diminished
inconsequential
contender
influenced
millisecond
extraneous
contributing
kernighan
pike
reliability
neatly
profound
significance
growing
slowest
instantaneously
astronomically
estimated
planet
earth
tremendous
react
eightfold
refuses
cooperate
neat
bounding
reasonableness
derivations
unequivocally
overly
pessimistic
readable
nontechnical
recapitulation
glove
drawer
yellow
green
disappearance
buying
legend
northwestern
wheat
comfortable
limn
preclude
anomalies
broader
aknk
facing
stretches
enables
maxelement
cai
uniqueelements
prematurely
predictable
matrixmultiplication
multiplies
designation
governed
machinations
caa
irregular
insur
mountable
halved
pertinent
bunched
mystery
enigma
grew
parlance
cellular
automata
tutorial
succeeded
emerging
disappointed
exerting
accumulates
realistically
generalizing
workhorse
mythical
slide
pegs
forbidden
agrees
stumble
smoothness
broad
refined
douard
lucas
mystical
brahma
prohibition
grill
executes
leonardo
population
predicting
prices
commodities
discernible
describes
generic
antiquity
pleasing
architects
sculptors
rapidly
warranted
embarking
rewriting
ahead
anticipated
manipulates
dedicated
newborn
fertile
climbing
climb
staircase
climbed
primitive
allocated
dissecting
dissect
analyzed
mathematically
imentation
mindful
accounted
ensure
fragment
currenttimemillis
remedy
sharing
cpu
defeats
environment
bottleneck
deliberation
profiling
environments
benchmark
decisions
trivially
adhere
nonrandom
atypical
cisions
shortage
averages
medians
generator
devil
recommendations
numerically
graphically
tabulated
careless
reacts
scat
terplot
concave
aggregate
scatterplots
differentiate
axis
plotted
resemble
predictions
extrapolation
unleashing
experimental
independence
plots
sortanalysis
milliseconds
watershed
happened
ronald
baecker
assistance
sherman
bae
convincing
demonstration
perennial
lends
sticks
rearranged
animated
supported
algovizproject
heavily
topics
expectations
uncover
contact
mcilroy
decisively
involvement
passive
exposure
successes
perception
fulfilled
contributes
grounded
computes
algebra
invented
processing
discovery
leading
merge
reader
allowing
signs
gain
literature
eventual
classify
predefined
caused
naturally
development
notions
showing
advanced
contributions
failed
possibilities
rational
manipulate
priate
statements
completed
popular
placement
extensive
parents
millions
lack
intuitively
connection
send
sites
nonnumeric
approaches
assertion
sense
sits
determined
performance
requirements
deleted
index
developed
slightly
unit
implementations
consideration
expense
reduces
feat
knowledge
occurring
comments
vehicle
timing
links
knuii
moved
fib
progress
inspect
induction
traditional
future
slashes
reaching
specialized
criterion
motivated
extensions
compensate
competitive
shortcoming
corollary
devised
achievements
narendra
tests
walking
consequential
spectrum
terial
slash
refers
complement
survey
modes
tiling
greek
roman
modern
middle
procedure
demonstrate
electronic
proceeds
educational
deserves
speeds
dozens
conjecture
hamilton
neighboring
dictated
precedes
brevity
clockwise
alternate
marking
hopcroft
clever
encryption
inspection
tarjan
intellect
mission
village
manhat
backs
dimensional
involved
devoted
fundamental
choosing
desirable
characteristic
map
applied
horizontally
algorithmic
indicating
monograph
degenerate
devise
expressed
mates
theoretical
stated
requirement
superior
initializing
modify
tracing
recent
equally
sought
fol
breaking
dij
crucial
checked
cesses
sciences
effort
ship
core
relevant
deeper
peared
shared
exercised
promotion
dish
briefly
newer
unimaginably
satisfactory
proverb
classifying
pinpoint
incorrect
eye
thetic
ultimately
cheap
advantages
disadvantages
boss
goals
exert
company
limitless
specially
scores
handling
economic
monographs
deb
accumulation
distort
leonhard
reservation
plate
forbid
accommo
rotating
universal
bag
answering
anagram
disjoint
area
kinds
role
quadratic
lives
huge
scope
rapid
magnitudes
manipulating
born
transforms
weighing
verifying
traced
evaluated
primality
university
concerns
showed
occasion
qualitative
aim
seat
achievement
nism
successful
noting
resolved
overhead
returning
figures
employed
coming
british
award
coincide
pure
creating
clidean
averagecase
carl
friedrich
glaring
moot
modulo
principally
utilize
splay
golden
impressive
buy
traf
occupy
dew
centuries
imaginable
convert
wanted
historic
stock
oil
underlie
extent
preserves
contradictory
mimics
multitude
maintaining
deep
india
bell
olden
nonre
reiterate
adjustment
convenience
exists
letters
american
statement
enhanced
playing
expected
neighbor
robert
accurate
parts
logarithm
cop
visual
states
thinking
partic
working
birth
context
increment
traversing
pursue
statistics
guarantees
explained
conveniently
gested
stone
perior
usefulness
prominent
reference
detailed
comment
device
testing
expensive
communication
euler
operate
validity
pieces
candidate
image
maintained
costs
performs
begins
resource
adds
impose
complication
abilities
spectacular
discard
productive
reward
centrates
utively
pital
disprove
proceeding
ranging
bering
eratos
thenes
vorite
catalog
content
project
break
successive
language
increasing
heights
fraction
nxn
denoted
alternatively
repeated
easily
degrees
united
reducing
preceding
turing
potential
seek
variations
french
ben
feature
permu
board
realistic
details
significantly
dot
paradigm
title
kle
routine
ranges
stall
excess
covering
corners
identical
false
theoretic
capable
repeatedly
exception
william
sheet
places
satisfying
road
ometry
orga
statisti
advantage
observations
finish
levels
group
repeating
strategy
puzzle
nth
researchers
formally
minimize
endpoint
extra
missing
systematic
incorporate
toggle
omit
tune
gri
regard
aha
nonnumer
gons
underline
noticed
calculator
major
complex
issue
model
arrows
drawback
implication
tually
proportion
variation
writing
incidentally
exclude
substituting
equiva
prisingly
cerned
phe
respec
direction
chain
comprises
practice
perfect
nonempty
sources
logical
tile
intersect
dix
calculation
essential
quo
accessible
restrict
boring
statistic
pares
priori
interesting
ingenious
wrong
ferent
gol
algebraic
geometri
presort
selecting
nut
numeric
widely
vertically
revisit
append
obvious
means
moves
segment
knu
home
knui
standing
azi
iterate
enable
earlier
initially
cyclic
partial
child
quote
washing
mixed
effective
reason
characteristics
modeling
impression
puzzles
essen
rank
communi
limitation
rich
textbook
applicable
tea
allowed
extremely
magnitude
included
shape
implementing
undirected
concept
moderate
north
automat
parent
resolve
john
engineer
sev
amin
nize
vides
turns
deals
action
event
primarily
loga
explicitly
involving
located
independent
depending
logic
chess
alan
trained
ker
recommend
night
atm
active
sized
reads
served
actions
loses
similarly
correspond
sections
aux
iliary
compiler
turned
auto
wil
anx
drastic
kel
transi
plain
poses
effect
equalities
contradict
contra
mecha
sequences
fits
modeled
lowing
maxima
maintain
knap
generalize
unsuc
speak
flo
ultimate
tails
sight
mutations
pressing
broke
shows
fall
coordinate
angle
altogether
efforts
questions
substantial
erality
assess
sage
die
bonacci
dictate
clock
graphic
initialize
insert
portion
ethe
boy
day
methods
hall
overlap
cup
impres
advance
ways
consecutive
subsequent
piece
specifically
sale
mizing
pap
stems
satisfies
tail
directly
multiplica
comprise
takes
finite
assumption
discovered
ending
nig
remarkable
combination
alytical
qualities
diminish
promi
rear
fore
outlined
comparing
mind
adt
asked
placing
plemented
mid
mathematics
immediately
zeros
compared
ficients
matically
accomplish
quality
situations
performed
fortunately
nificant
closes
precise
natorial
permuta
tioning
exponent
mined
cra
efficients
wise
visualiza
grams
presents
traverse
iii
fully
valid
careful
refer
optimiza
minima
enhance
properties
interested
generally
pie
estimate
complicated
oro
surprising
lot
story
merges
asser
joh
tribution
century
polynomi
dependent
modifica
forming
aug
nem
west
quirements
compose
research
cases
dealing
books
recall
orderable
necessarily
vertical
verify
achieve
proaches
retriev
suffi
hold
possibility
coef
rid
teristic
evalu
tinuous
transfor
thing
imation
nected
provided
dime
tionary
ulate
niques
nsf
topic
hard
asymp
totic
polyno
voted
assign
fashion
simpler
simplest
remains
dan
straint
link
ficiently
exit
zontally
timization
computation
site
computa
mial
proba
slight
tiplying
coo
coor
dinate
pirical
cessing
published
express
exceed
vice
rences
locate
clus
probabil
dictio
btree
appen
signing
plexity
complicate
sake
multipli
structing
funda
vations
tary
mentations
puters
manip
horizontal
changing
explicit
noted
sir
stem
grow
interpret
diction
lev
agr
ests
ton
researcher
cians
gar
rare
puts
timal
hori
plicable
clid
net
replac
nated
erty
ness
ade
charac
plete
exponentia
ago
fortunate
exploit
great
invest
analyz
quired
volved
exper
tend
formance
mental
consec
esting
avi
cessful
presenting
eliminate
joint
gon
exponenti
scientist
recur
forms
date
lose
sug
mem
inser
ery
publish
pur
origin
lecting
ease
quest
tall
parisons
isons
approx
ended
combi
lexi
cursive
seg
ematics
strict
mor
erties
ables
fea
menting
secutive
oretical
gramming
pler
pace
poly
izing
mented
rela
utive
prod
mathematical
analysis
science
practical
har
solutions
leads
choice
introduced
years
view
encountered
definition
illustrated
implies
implementation
works
nonnegative
terms
pseudocode
observation
checking
process
times
generating
starts
straightforward
ndo
basic
faster
implement
equation
read
instance
solves
instances
code
mathematician
random
execute
fast
opt
square
sophisticated
variety
key
akin
encounter
underlying
selected
simplicity
state
outline
making
formal
implemen
mode
constant
results
log
size
begin
root
binary
pol
sea
chosen
mention
edges
graphs
wide
directed
subset
mentioned
asks
position
draw
high
year
nent
depends
selection
leaves
adjacency
column
ends
bound
kind
implementa
straight
decreasing
short
forward
trivial
generated
generate
assuming
ros
hea
light
squar
phisticated
rows
senting
entire
win
sition
increas
raw
straightfor
practi
pan
elimina
pub
tac
ters
incre
nary
mediate
actor
corre
exten
sophisti
sue
ques
bac
sha
nately
tively
pare
obser
nen
nonneg
gre
pseudo
plies
riety
car
deal
construct
age
princi
pal
word
represented
negative
num
leave
maximum
gorithm
pro
effi
ciency
fine
gram
sets
eat
summary
yield
text
vertices
involve
lead
vertex
structure
appli
cations
par
red
pen
sec
cally
versa
indi
cate
prin
cipal
imply
repre
ment
exam
ple
dition
rest
sur
king
dic
gen
discov
ered
sentation
eral
elemen
ence
direc
col
ample
ative
rence
gra
pend
pos
itive
val
ues
uct
ences
coun
stand
sed
mod
information
limit
dis
eas
pre
typical
situation
plications
led
pose
met
direct
ation
ate
multi
plication
tech
nique
erage
tar
ratio
act
fic
impor
tant
lished
counter
ier
mar
mation
success
arbi
trary
tance
ring
rise
finally
computed
compute
math
bers
condition
arts
table
appro
ficiency
sim
posed
lies
tation
ming
cuss
final
rate
comput
base
average
class
ical
gene
ray
presentation
apply
shown
low
termi
der
struc
ture
applica
tions
cient
select
define
informa
tion
prop
computing
differ
arbitrary
illustrate
applying
proceed
sorted
needed
remaining
array
operations
run
true
representation
sort
ver
sion
formed
alternative
cor
mini
mum
mic
vari
stan
dard
ically
sible
arb
tices
gorithms
sit
maxi
ent
cated
lution
algo
rithms
range
classic
proved
result
similar
city
pairs
proper
term
venient
pert
stud
ied
ful
tained
previ
ous
erations
quire
cha
parti
ments
ties
mathemati
defined
good
application
previous
main
convenient
bit
line
men
ber
rithm
deter
inter
tial
air
rep
resented
sig
plying
compar
sequen
possi
ble
stance
ples
tioned
portant
rsa
riv
analy
sis
ger
specific
common
running
difference
technique
natural
cut
dif
cation
gin
ercises
vious
oper
ations
tan
cussion
vin
cian
special
examples
typically
real
discussion
integers
method
row
tations
lem
pri
struct
mit
ace
problems
solve
integer
prove
easy
requires
yields
represent
variable
prob
als
tic
tern
ity
stor
sidered
ory
simple
initial
hig
sive
ward
inte
gers
cal
mul
str
lems
ove
standard
addition
small
task
large
difficult
single
linear
cussed
stances
bility
eights
alues
war
write
considered
arise
det
imple
int
sequence
ann
lit
alg
version
art
obtained
values
total
smaller
words
discussed
principal
approach
tree
max
finding
fig
ure
func
presented
require
lists
minimum
ith
graph
proach
star
ing
make
ele
solving
larger
function
ram
determine
solved
points
matrix
sum
solu
applications
distinct
based
chapter
case
operation
edge
fined
rod
assume
left
pair
simply
bin
ill
abi
min
idea
positive
design
makes
fact
element
discuss
largest
solution
hor
smallest
efficient
output
length
lim
exercises
important
ord
input
bst
equal
elements
numbers
general
efficiency
called
set
algorithms
figure
nim
lea
section
problem
algorithm
augmenting path
dynamic programming
spanning tree
minimum spanning
warshall algorithm
hash table
prim algorithm
numbered higher
feasible region
moore algorithm
horspool algorithm
hash function
kruskal algorithm
stable marriage
lower bound
transitive closure
objective function
programming algorithm
decision problems
simplex method
linear programming
vertices numbered
greedy algorithm
boyer moore
optimal binary
topological sorting
decision tree
maximum matching
optimal subset
paths intermediate
solved polynomial
dijkstra algorithm
gaussian elimination
convex hull
lower bounds
characters pattern
shift pattern
intermediate vertices
shortest paths
shift table
memory function
feasible solution
floyd algorithm
character pattern
strassen algorithm
orders growth
input enhancement
bad symbol
good suffix
coin row
source shortest
basic feasible
pivot column
decision trees
avl tree
rightmost occurrence
objective row
marriage matching
optimal tree
vertex intermediate
bipartite graph
decrease conquer
programming problem
binary exponentiation
table size
decision problem
paths problem
weighted connected
gray code
upper triangular
huffman code
hamiltonian circuit
comparison based
maximum problem
input size
master theorem
inorder postorder
edge weights
single source
distribution counting
kth smallest
conquer technique
hull set
design techniques
size decrease
iterative improvement
lengths shortest
matching substring
row problem
vertex numbered
distance matrix
brute approach
extreme points
information theoretic
decrease constant
scanning indices
winning position
basic operation
algorithm visualization
conquer algorithm
pattern text
source sink
symbol table
keys stored
disk accesses
pattern characters
string matching
union size
length encoding
starting vertex
unvisited vertices
operation executed
variable size
avl trees
coefficient matrix
pairs shortest
intermediate vertex
bound tight
relative error
problem dynamic
design dynamic
path method
russian peasant
josephus problem
basic variables
augmenting paths
shortest augmenting
current matching
marriage problem
ann lea
marriage algorithm
inputs size
closest pair
relation key
upper hull
space offs
occurrence pattern
character rightmost
algorithm pattern
occurrence suff
preceded character
suffix table
insertion sort
optimal solution
problem feasible
tree vertices
recursive algorithms
fringe vertices
quick union
polynomial algorithm
recurrence relation
smaller subproblems
problem reduction
euclid algorithm
binary decision
polynomially reducible
subtractive cancellation
adjacent extreme
entry pivot
free vertices
free vertex
lea sue
free men
triangular matrix
parental dominance
binary reflected
reflected gray
algorithm basic
circuit problem
digit integers
left line
knapsack problem
dfs traversal
analysis algorithms
programming algorithms
index max
coins robot
item optimal
function method
trees keys
root optimal
root table
path intermediate
existence paths
higher shortest
minimum cut
character text
brute string
recurrence relations
empirical analysis
tree edges
tree vertex
connected graph
bit strings
external nodes
extended binary
digit multiplications
points array
ith vertex
transform conquer
single rotation
pattern barber
pattern abcbab
money parted
linear probing
inserting tree
knapsack capacity
men women
path augmenting
backward edges
matching bipartite
matching figure
bob jim
solutions smaller
elements matrix
overlapping subproblems
fibonacci numbers
establishing lower
trivial lower
nondeterministic algorithm
truncation error
yield optimal
algorithm kruskal
current tree
nearest vertex
nearest tree
graph minimum
subset representative
source vertices
huffman tree
coding tree
points feasible
sorting problem
strongly connected
position player
generating permutations
split position
multiplying matrices
analysis framework
constant multiple
row column
pattern length
problem types
data items
nth fibonacci
length shortest
left binary
vertices tree
ties broken
broken arbitrarily
convex hulls
convex set
unvisited vertex
bfs tree
selection sort
greatest common
numerical analysis
searching sorted
pair problem
programming technique
programming approach
memory functions
principle optimality
maximum coins
max index
coin optimal
minimum coins
bring cell
largest coins
cell adjacent
optimal path
capacity optimal
ith item
programming table
composition optimal
closure digraph
kth vertex
boxed row
column existence
efficiency warshall
network figure
path algorithm
decrease algorithm
departing variable
conservation requirement
matching graph
maximum cardinality
cardinality matching
matching maximum
ranking matrix
jim tom
sue free
men bob
stable matching
tower hanoi
natural language
insertion deletion
combining solutions
pivot left
left scan
nodes shown
external node
preorder inorder
points left
array points
nondecreasing coordinates
growth functions
size algorithm
paths lengths
items knapsack
instance knapsack
constructing optimal
path paths
points set
assignment problem
bound class
theoretic lower
problem lower
ternary decision
draw decision
proposed solution
problem polynomially
composite trapezoidal
floating numbers
significant digits
points convex
vertex reached
weight edge
counting algorithm
distribution values
trading space
pattern shift
barber text
pattern entire
entire length
symbol shift
suffix shift
suff preceded
table good
keys hashed
hashed cell
collision resolution
closed hashing
successful table
strings length
segment elements
partition based
nim sum
internal nodes
digit numbers
free tree
algorithm dijkstra
huffman codes
spanning trees
edges minimum
tree weighted
constructing minimum
minimum weight
vertex nearest
vertex added
vertices remaining
remaining vertices
design greedy
sequence union
nearest source
solve single
fixed length
alphabet symbols
frequencies symbol
symbol occurrences
huffman algorithm
huffman coding
weighted path
designing algorithm
space efficiency
ith row
table figure
comparisons worst
maximize subject
forward edges
pivot row
instance simplification
triangular coefficient
keys children
set points
brute algorithm
problem polynomial
vertex tree
huffman encoding
coin denominations
algorithm minimum
tree graph
connected weighted
instance size
algorithm multiplying
solve recurrence
matrix multiplication
selection problem
common divisor
problem solving
recursive calls
case efficiencies
extra space
application brute
closest points
hamming distance
depth traversal
vertex marked
dfs bfs
nonrecursive algorithms
case analysis
positive constant
loop variable
problem maximizing
ford fulkerson
region problem
function equal
problem unbounded
basic solution
simplex tableau
tableau represents
entries objective
entries pivot
edges vertex
edge positive
edge capacities
capacity constraints
xij edge
cut capacity
committee members
jim lea
blocking pair
tom jim
tom ann
computing greatest
middle school
weighted graph
shortest path
graph traversal
dfs forest
person job
job person
exhaustive algorithm
graph bipartite
programming problems
key node
polynomial evaluation
fake coin
combinatorial objects
initial conditions
adjacent cell
algorithm knapsack
algorithm pairs
square root
computational complexity
coins weighings
class decision
problems decision
halting problem
halt input
determine graph
size graph
decision version
decision traveling
cnf satisfiability
satisfiability problem
newton method
problems overlapping
recurrence relating
classic dynamic
dynamic ming
maximum money
derive recurrence
coins maximum
money picked
solving coin
recurrence min
coin cell
robot bring
values row
path dag
series games
winning game
pseudocode dynamic
problem memory
optimal bst
table root
algorithm optimalbst
means exists
exists path
higher equal
higher paths
negative length
straws connected
solution smaller
set subsets
digraph dfs
source removal
removal algorithm
minimal algorithm
mobile element
efficiency binary
peasant multiplication
people positions
instance chips
chips winning
pile nim
element ith
weight matrix
equations unknowns
sum numbers
large integers
multiplying digit
problem exhaustive
analyzing efficiency
set elements
times basic
child serves
state vertex
disjoint subsets
conquer approach
power recurrence
arrays worst
comparisons mergesort
theoretical minimum
pseudocode conquer
based conquer
encountering element
larger pivot
indices crossed
exchanging pivot
pivot selection
dutch national
national flag
postorder traversals
traversal root
root visited
length extended
numbers product
coordinates points
points closer
closer dmin
separating line
voronoi diagram
complexity theory
circuit graph
graph positive
algorithmic problem
left subtrees
additions subtractions
average comparisons
comparisons successful
comparison counting
shifts pattern
searching pattern
text character
character comparisons
decrease technique
digraph dag
dfs based
comparisons binary
initial position
idea preprocess
simplified version
space facilitate
facilitate faster
access data
set values
sorting distribution
language texts
pattern beginning
text starting
text horspool
pattern shifts
shift sizes
retrieve entry
pattern positions
suffix size
table shift
pattern baobab
text algorithm
algorithm retrieves
retrieves bad
called hash
function mod
cells hash
cell hash
hashing called
parted hash
table construction
storing large
insertion algorithm
study algorithms
sieve eratosthenes
combinatorial problems
pair vertices
union operations
efficiency sequence
set tree
locally optimal
path source
framework outlined
growth constant
method backward
disks peg
algorithm animation
data structures
matching algorithm
choice feasible
huffman trees
greedy manner
acyclic subgraph
smallest weight
weight tree
constructs minimum
single vertex
vertex selected
input weighted
adjacent tree
vertex smallest
added tree
demonstrates application
proof prim
graph priority
represented weight
bridge crossing
graph distinct
representative updated
resulting set
sequence unions
unions finds
called union
nonnegative weights
fringe vertex
algorithm compares
graph nonnegative
frequent symbols
prefix code
codeword symbol
bits symbol
symbol frequency
length codeword
codeword length
graph coloring
coloring problem
theoretical science
problem coins
problem input
algorithm yields
yields optimal
source vertex
elimination algorithm
problem reduced
key leaf
exponentiation algorithm
integer linear
hull problem
small instance
digraph vertices
algorithm generating
bit string
method classic
region linear
extreme feasible
equality constraints
initial basic
entering variable
row entry
edge capacity
xij uij
uij edge
unused capacity
positive unused
bipartite graphs
vertex set
respect matching
path respect
path matching
members committee
bob tom
optimal stable
recursive algorithm
efficiency algorithms
analysis algorithm
definition based
linked lists
set recurrence
abstract data
cost matrix
final positions
edges dfs
euclidean distance
distance points
bfs traversal
traversal graph
tree problem
general framework
solving recurrence
computing nth
bits binary
solve linear
constraints problem
feasible solutions
problem network
straightforward approach
brute strategy
based brute
approach problem
improved modest
modest effort
stack fake
fake coins
coins stacks
dark light
distinct points
definition convex
figure convex
rubber band
hull line
line convex
domain grows
problem assignment
impractical small
design exhaustive
queens row
magic squares
magic square
dfs breadth
breadth bfs
vertex visited
popped stack
previously visited
articulation points
breadth traversal
breadth forest
minimum edge
efficiency adjacency
sorting searching
main diagonal
unique solution
notion algorithm
person takes
string processing
numerical problems
data types
space efficiencies
figure application
equal length
set edges
vertex labels
heaps heapsort
array representation
equivalent upper
matrix inverse
elements main
classical binary
synthetic division
common multiple
lcm gcd
column matrix
encountered problem
class problems
problems called
design analysis
real world
graph problems
algorithm digraph
longest path
finding longest
matrix series
algorithm cubic
matrix equal
algorithm space
figure solving
coins denominations
prove efficiency
paths vertex
randomly ordered
points plane
convex polygon
initial condition
backward substitutions
algorithm problems
polynomial problem
establish lower
analysis science
input processed
theoretic argument
adversary method
consuming path
merging algorithm
array log
symmetric matrices
tight lower
bound log
sorting element
log positive
intractable problems
halts input
input halt
integer weights
bin packing
instance decision
verification stage
nondeterministic polynomial
reducible decision
reducible problem
instance hamiltonian
circuit eulerian
degree taylor
taylor polynomial
errors approximations
represented floating
significant decimal
higher precision
absolute error
error relative
floating arithmetic
large relative
relative errors
smaller problem
vertices adjacent
solved algorithm
eulerian circuit
based sorting
relationship solution
decrease algorithms
decrease half
variety decrease
varies iteration
application decrease
design decrease
power set
decreasing sequence
directions edges
digraph directed
algorithm topological
solve topological
digraph represented
insert left
johnson trotter
trotter algorithm
output permutations
permutations lexicographic
generating bit
light bulb
array half
coins piles
positions eliminated
partitioning element
algorithm quickselect
sequence keys
key binary
instance game
chips pile
pile chips
losing position
chips losing
instance nim
spoiled square
conquer algorithms
root subtree
presorting based
serves root
node key
construction algorithm
elements sorted
smallest key
subsets set
arrays sorted
ordered arrays
equal pivot
partition split
instances size
merging sorted
internal node
multiplication large
pencil algorithm
digits product
matrices multiplications
algorithm matrices
assume points
points sorted
big omega
efficiency nonrecursive
main tool
size input
higher growth
asymptotic notations
basic efficiency
set functions
comparing orders
functions orders
growth values
times comparison
neumann neighborhood
peg auxiliary
sample range
data obtained
uniformly distributed
linear equations
priority implemented
efficiency hashing
additional information
cyclic shift
identical searching
dictionary operations
keys node
pairs characters
characters text
starting character
text pattern
substring text
text characters
length pattern
key insertion
table average
tree constructed
positive decimal
efficiency analysis
fibonacci sequence
state space
log worst
root key
greedy approach
numbers assigned
figure demonstrates
connecting vertex
greedy technique
partially constructed
constructed solution
section greedy
tree minimum
union operation
edges labeled
sorted nondecreasing
implementing algorithm
richard bellman
subproblems typically
typically subproblems
subproblems arise
arise recurrence
subproblems solving
subproblems dynamic
programming suggests
suggests solving
solving smaller
recording results
table solution
technique illustrated
elements sequence
compute nth
application dynamic
variation dynamic
problem solutions
programming applications
row coins
coins values
group equal
equal nth
compute filling
filling row
table left
left manner
integers indicating
indicating coin
algorithm coin
denominations shown
maximum total
application formula
sum means
means coin
application recurrence
unlimited quantities
table entry
applies dynamic
instance considered
minimum produced
coin collecting
collecting problem
cells board
cell robot
left cell
cell left
moving upper
takes constant
path cell
optimal paths
efficiency solving
apply dynamic
board inaccessible
sale price
binomial coefficient
square submatrix
probability winning
games win
win series
subsets items
subsets ith
subset selected
entry previous
previous row
row columns
columns left
goal figure
figure table
solving knapsack
item weight
weight capacity
needed composition
combine strengths
method solves
entries initialized
table computed
method knapsack
integer indicating
apply memory
method instance
table generated
generated dynamic
false sequence
table knapsack
problem nondecreasing
probabilities figure
tree optimal
keys optimally
optimally arranged
tik tkj
min tik
min ikj
formula implies
table dynamic
searches optimal
roots optimal
tables main
main table
successful tree
finish computations
subtrees roots
set keys
warshall floyd
computing transitive
closure directed
recall adjacency
matrix information
graph matrix
matrix transitive
figure generate
specifically element
higher series
series starts
starts intermediate
matrix digraph
intermediate paths
compute elements
matrix predecessor
predecessor series
series element
path ith
higher intermediate
numbered vertices
element rij
application warshall
paths boxed
digraph shown
pseudocode warshall
algorithm warshall
traversal based
digraph weight
strings bitwise
bitwise operation
paths ith
application floyd
matrix sequence
written predecessor
cubic efficiency
apply warshall
algorithm transitive
jack straws
straws dumped
pairs straws
path edges
vertex free
vertex labeled
problem standard
optimal solutions
algorithm returns
values problem
problems solved
improved objective
matched pairs
improvement algorithms
figure feasible
maximal objective
set variables
values objective
labeled basic
row simplex
rows objective
variable basic
commonly select
select negative
basic variable
column tableau
initial tableau
rightmost column
negative entry
variable pivot
coefficient values
problem simplex
primal dual
sink source
total material
vertices network
flows network
called augmenting
fulkerson method
capacity uij
rij uij
uij xij
edges tail
backward edge
edge augmenting
unused capacities
edges positive
cut theorem
figure augmenting
edmonds karp
unlabeled vertex
path sink
edges unlabeled
capacity cut
capacities edges
cut network
maximum network
matching largest
vertex sets
edge matching
edge free
matching shown
matching path
augmentation matching
matches vertices
matching exists
alternating edges
matching set
adjacent free
ann jim
preference lists
women preferences
bob lea
lea ann
tom bob
lea tom
matching woman
problem stable
matching men
proposes woman
proposed lea
accepted tom
men matched
woman optimal
matching problem
segment endpoints
vertex adjacent
algorithm runs
hanoi puzzle
case inputs
case average
problem constraints
binary tree
subproblems ideally
ideally equal
solutions subproblems
problem conquer
dividing problem
problem smaller
case conquer
numbers simply
typical case
size divided
divided instances
recurrence running
size combining
recurrence additions
establish solution
application conquer
halves sorting
sorting recursively
recursively merging
array copied
recurrence cworst
growth solutions
version mergesort
board missing
design conquer
problem quicksort
input elements
array quicksort
algorithm quicksort
quicksort input
sophisticated method
selecting pivot
subarray elements
scan denoted
denoted index
index pointer
pointer starts
starts element
smaller pivot
subarray scan
scan skips
skips elements
pivot stops
stops encountering
indices pointing
pointing element
element pointing
pointing equal
subarray partitioned
subarray bounds
comparisons partition
cbest log
increasing arrays
subarrays elements
leftmost rightmost
small subarrays
science engineering
quicksort sort
prove scanning
input strictly
flag problem
nuts bolts
tree traversals
section conquer
applied binary
tree special
applying conquer
algorithm height
tree output
nodes binary
tree algorithms
replacing subtrees
shown squares
shown circles
node extended
tree internal
internal external
nodes internal
classic traversals
visited visiting
visiting left
postorder traversal
subtrees considered
tree preorder
classic traversal
traversals tree
internal path
sum lengths
nodes root
strassen matrix
multiplying integers
modern cryptography
numbers digits
product computed
product digits
product sum
sum digits
digits sum
sum apply
product halves
halves product
sum halves
halves sum
computing products
alogb clogb
digit additions
applying master
multipli cations
smaller crossover
principal insight
required brute
matrices strassen
additions numbers
matrices power
method strassen
multiplications strassen
additions strassen
brute method
ordered nondecreasing
nondecreasing coordinate
rectangle points
closer pair
width separating
dmin minimum
num dminsq
upper boundary
lower boundary
boundary called
hull sequence
sequence line
segments vertices
lower hull
hull entire
lower hulls
points pmaxpn
efficiency quickhull
pair algorithm
visualization algorithm
conquer sorting
solving systems
edge called
lists graph
representing graph
arbitrary vertex
traversal stack
depth dfs
dead ends
vertex unvisited
set convex
boundary convex
design brute
total weight
checking graph
traversal vertex
offs algorithm
design issue
issue theoreticians
theoreticians practitioners
practitioners computing
electronic computers
preprocess problem
input additional
information obtained
obtained accelerate
accelerate solving
problem afterward
section technique
technique exploits
exploits space
faster flexible
flexible access
situation arises
sparse matrices
zeros objects
makes key
small set
overwrite elements
array hold
hold sorted
counter initialized
initialized index
element initialized
write multiplying
multiplying sparse
problem string
matches pairs
mismatch occurs
comparisons pattern
random natural
actual pattern
pratt algorithm
pattern counterparts
counterparts text
left boyer
aligning pattern
version boyer
successfully matching
large shift
missing matching
size shift
shift character
text aligned
aligned character
pattern case
case character
counterpart pattern
case pattern
pattern letter
pattern aligned
aligned text
letter shift
characters letter
letter situation
similar case
finally character
shifts position
algorithm characters
encountered text
sizes computed
length characters
pattern distance
distance rightmost
rightmost characters
pattern left
table horspool
input pattern
pattern alphabet
alphabet characters
alphabet pattern
text construct
construct shift
beginning text
substring pattern
pattern reaches
reaches character
characters matched
matched mismatching
case retrieve
table text
table shifts
matched characters
english letters
letters spaces
hor spool
spool algorithm
matched successfully
shift size
shift reasoning
shift computed
characters failing
failing letter
pattern suffix
pattern dbcbab
abcbab pattern
table boyer
table earlier
pattern construct
character pairs
pairs matched
text mismatched
mismatched character
baobab text
successfully matches
failure comparison
comparison space
space character
pattern max
max iteration
leads farther
farther shift
simplified versions
apply horspool
gene segment
make character
make searching
table pattern
random binary
task space
records student
records keys
keys hashing
distributing keys
keys dimensional
key keys
keys cells
table evenly
figure collision
collision keys
larger problem
case keys
hashing scheme
resolution mechanism
mechanism principal
hashing chaining
hashing keys
stored linked
key word
word hash
table linked
key kid
function key
keys money
hash addresses
addresses money
figure hash
function distributes
distributes keys
size hash
table factor
computing hash
operations insertion
hashing addressing
cell unsuccessful
matching key
version hashing
state hash
probing sequence
large dictionaries
extendible hashing
hashing disk
input hash
mod construct
table largest
birthday paradox
operations benefit
benefit modification
case entry
index information
tree introduced
data records
children keys
equal smallest
total minimum
minimum keys
room leaf
split nodes
obtained inserting
considered tree
initially tree
binary trees
geometric problems
singly linked
null figure
ith element
directed edge
areas computing
applications indispensable
precisely defined
equality gcd
description algorithm
important set
school procedure
common elements
multiples eliminated
eliminated previous
algorithms today
algorithms data
algorithm simpler
set inputs
takes minutes
problems numerical
called vertices
called edges
elementary data
collection data
items called
path simple
sibling representation
unordered collection
collection items
remaining cents
prove greedy
problems greedy
suggests constructing
constructing solution
problem reached
sequence locally
optimal choices
choices yield
graph section
application huffman
greedy algorithms
corner board
chips board
board chips
chips adjacent
partition board
trees minimum
tree prim
subgraph tree
graph weights
tree spanning
trees graph
graph efficient
tree sequence
algorithm expands
tree greedy
weight ties
constructed algorithm
output set
edges composing
composing minimum
vertex minimum
edge edges
labels vertex
fringe unseen
tree adjacent
unseen vertices
finding vertex
simple task
task finding
arbitrarily identified
identified vertex
tree operations
edge current
update labels
application prim
algorithm specific
yield minimum
generated prim
assumption minimum
addition edge
weight equal
equal weight
correctness proof
matrix priority
implemented unordered
unordered array
delete minimum
priority min
vertices illustration
bold figure
element min
min size
lists priority
problem greedy
spent job
apply prim
priority fringe
applying prim
correctly graphs
graphs negative
negative edge
weights minimum
graph obtained
discovered algorithm
edges nondecreasing
nondecreasing weights
inclusion create
correctness kruskal
application kruskal
prim kruskal
kruskal algorithms
figure edge
forest consists
single tree
subsets union
union algorithms
operations union
elements entire
makeset creates
union disjoint
performing union
implementation makeset
makeset requires
representative array
operation initialization
initialization singleton
singleton subsets
representation subsets
arbitrarily size
size operations
updated resulting
log union
finds log
path compression
operation tree
version called
false minimum
weights connected
distinct graph
spanning forest
weights design
problem vertex
vertices important
paths leading
leading source
finds shortest
subtree vertices
algorithm selects
selects vertex
application dijkstra
vertex priority
compares path
lengths edge
vertices weighted
digraph variation
variation called
single pair
pair shortest
vertex source
solving single
encode text
text symbols
encoding assigns
shorter bit
symbols longer
codewords frequent
variable length
encoded text
ith symbol
prefix free
codeword prefix
prefix codeword
frequency symbols
tree weight
occurrence frequencies
frequencies text
codeword lengths
encoding alphabet
compression ratio
construct huffman
assigned leaves
root ith
ith leaf
minimum weighted
questions answerable
needed chosen
chosen probability
code data
data symbol
variance codeword
length frequent
function alphabet
alphabet size
english text
experiment encoding
english texts
algorithm greedy
smallest element
mathematical problems
solving equations
tree leaves
operations performed
geometric algorithms
matrix adjacency
rooted tree
tree rooted
ordered tree
algorithm brute
log algorithm
making problem
boolean matrix
function algorithm
efficiencies algorithm
subset items
prime factors
wolf goat
goat cabbage
determinant matrix
equal keys
paths length
algorithms generating
generating subsets
nonrecursive algorithm
algorithm running
tree algorithm
algorithm evaluating
spent sorting
distinct values
modef requency
runvalue runlength
design presorting
deter efficiency
original upper
solve gaussian
forward elimination
elimination matrix
stage gaussian
matrix nonsingular
apply gaussian
unknowns unique
elimination solve
ele ments
deletion log
tree avl
rotation avl
general rotation
performed key
key inserted
child tree
root insertion
left rotation
rotation figure
figure construction
height avl
key children
height nodes
largest keys
trees draw
priority queues
require key
essentially binary
node algorithm
dominance holds
deleting root
files integers
polynomial coefficients
term brute
applying horner
compute left
product accumulator
exponentiation algorithms
stocks bonds
invested stocks
domino set
points line
numerical algorithms
based algorithms
algorithms sorting
log lower
problem difficult
figure decision
solution solves
polynomial algorithms
searching element
algorithm definition
graph hamiltonian
partition problem
subtree keys
table entries
connected components
height binary
multiplication algorithm
input case
strictly increasing
set solve
tree recursive
pen pencil
algorithm points
algorithm closest
pair points
index figure
edges digraph
half size
factor algorithms
size reduction
figure digraph
generate subsets
key array
case recurrence
coin problem
elements greater
path problem
algorithm graph
analyzing algorithms
von neumann
analysis recursive
sample inputs
executed algorithm
multiplicative constants
elements fibonacci
formal definitions
integer definition
constant factor
systems linear
algorithm string
balanced trees
algorithm tree
design strategies
exhaustive brute
brute straightforward
statement definitions
concepts involved
strategies brute
encountered brute
brute proach
exchange element
element putting
putting smallest
element final
elements exchange
passes sorted
times executed
vertical final
positions considered
considered subsequent
key swaps
version sort
makes exchanges
exchanges sorted
approach results
algorithm improved
star fully
fully connected
connected mesh
weighs grams
light dark
key encountered
enhanced version
version sequential
characters representing
write solving
ships opponent
plane higher
higher dimensional
solution closest
points standard
problem leads
compute distance
smaller square
dimensional space
largest distance
sets depicted
triangle rectangle
rectangle generally
generally convex
points boundary
sets convex
segment connecting
connecting points
endpoints points
points solve
vertices polygon
set extreme
problem completely
hull boundary
exercises assuming
algorithm office
location minimizing
axioms distance
nearest neighbor
approach combinatorial
suggests generating
problem domain
constraints finding
finding desired
problem knapsack
circuit defined
presents small
vertex permutations
computing total
exhaustive leads
instance assignment
selected elements
permutations integers
exhaustive impractical
exhaustive applied
generating magic
algorithms exhaustive
letter represents
traversal arbitrary
visited iteration
adjacent unvisited
structure representing
dead vertex
component starting
vertex stack
stack dead
shown solid
traversal constructing
constructing called
forest unvisited
attached child
reached edge
leading previously
visited vertex
vertex predecessor
predecessor parent
parent tree
forest shown
depth algorithm
graph input
output graph
vertices marked
marked consecutive
marked dfs
path numbers
representation graph
forest undirected
previously unvisited
forest edges
reached pushed
stack vertices
applications dfs
finding articulation
vertices visited
added removed
bfs forest
bfs based
adjacent levels
levels bfs
fewest edges
main facts
facts depth
vertex alphabetical
false dfs
dfs forests
framework analyzing
big theta
section systematically
sum manipulation
efficiency recursive
efficiency called
parameter indicating
indicating input
size inputs
size bits
consuming operation
counting times
nonrecursive recursive
multiple large
algorithm efficiencies
values functions
factorial function
function log
inputs case
efficiency measured
growth algorithm
case scenario
multiple infinity
functions growth
notation definition
definition function
function denoted
denoted bounded
figure big
limit based
typical algorithms
loop body
general analyzing
calls algorithm
explicit formula
exponential algorithm
relation additions
physical running
executions basic
compute ratios
sample instances
pseudo random
random variable
variable uniformly
pseudorandom numbers
scatterplot points
static algorithm
algorithms computing
decimal integer
recurrence initial
tree height
edge connecting
vertex vertices
tree prove
efficiency operation
consists single
graphs represented
edge weight
salesman problem
binary representation
innermost loop
maximum minimum
problem maximize
average case
case input
line segment
simply weight
matrix called
path positive
positive length
digraph adjacency
relating solution
run faster
convenient define
key left
probabilities searching
sequence values
figure problem
length ith
selected items
subproblems problem
problem obtained
technique solving
results table
entry table
dimensional table
extra array
manner similar
figure yields
coin denomination
upper left
adjacent cells
figure shown
sum descent
capacity figure
solving instance
efficiency space
finding optimal
vertices paths
generating elements
column row
sparse graphs
matrix rows
paths subset
graph negative
matrix prove
edges vertices
depth breadth
integer output
efficiency classes
preceding chapters
modern computers
bounds efficiency
obtaining lower
needed solve
difficult task
trees technique
intractability problems
called computational
problems continuous
continuous mathematics
func tions
computing integrals
algorithm respect
respect algorithms
problem bound
algorithm lower
matching lower
bound lower
conclude algorithm
finding median
prove comparison
counting items
items problem
processed output
output items
items produced
permutations distinct
bound based
called information
log questions
leaves largest
method establishing
bounds based
based logic
logic malevolent
bound obtained
problem discussing
algorithm merging
bound key
reduction approach
bound problem
solve lower
reduction problem
multiplication matrices
euclidean minimum
multiplying arbitrary
problem multiplying
complexity classes
problem complexity
log weighings
weighings worst
multiplication squaring
case decision
largest leaves
array decision
outcomes sorting
arbitrary element
binary element
smallest comparisons
array comparisons
ternary tree
leaves log
bound binary
height leaves
design comparison
case draw
genuine fake
weighings extra
jigsaw puzzle
problems scientists
computing professionals
problems solvable
solvable polynomial
polynomial called
seeks classify
definition class
polynomial deterministic
polynomial important
series decision
alan turing
halt halts
completes proof
problems fall
packing problem
problem cycles
vertices hamiltonian
majority decision
checking proposed
takes input
nondeterministic guessing
guessing stage
string generated
true problem
decision versions
hundreds difficult
difficult combinatorial
proper subset
class definition
definition decision
problems polynomially
hamil tonian
circuit length
problem hamiltonian
image instance
notion completeness
polynomial reducibility
boolean expression
entire expression
expression true
deterministic polynomial
vertex size
independent set
king arthur
solving mathematical
fact numerical
continuous mathematical
replacing infinite
truncation errors
errors major
error smaller
range values
precision significant
error representing
subtracting equal
equal floating
ill conditioned
equation real
secondary school
initial approximation
decreasing converges
prove iterations
george forsythe
danger subtractive
digits approximation
iterations newton
called stable
row pivot
general linear
half planes
solution extreme
method called
based exploiting
exploiting relationship
relationship established
established exploited
variations decrease
conquer decrease
instance reduced
equal figure
obvious formula
figure decrease
examples decrease
compute instance
instance half
odd compute
conquer size
reduction pattern
pattern varies
technique sorting
subarray left
straight insertion
recursive idea
iteration insertion
sorted figure
good performance
fast average
marked neighbors
marked cells
increasing decreasing
graph directions
forest digraph
forest directed
directed digraph
starts listed
digraph representing
subscript numbers
solution digraph
directed cycles
solution topological
edge encountered
dfs stack
fig ure
vertex incoming
incoming edges
based direct
ordering generated
source determine
vertex digraph
called strongly
traversal digraph
set decrease
permutations smaller
elements permutation
permu tations
minimal requirement
left insert
figure generating
permutations generated
permutations elements
arrow points
permutation mobile
permutations input
initialize permutation
largest mobile
largest index
adding elements
subsets bit
generate bit
binary numbers
algorithm lexicographic
figure easy
string based
single bit
recursively algorithm
make bit
generate binary
binary searching
iteration binary
initial size
discuss continuous
piles coins
relation weighings
peasant method
odd values
person position
position numbering
person initial
position person
discern pattern
general validity
bit cyclic
shift left
minimum cuts
picture questions
algorithm fake
peasant algorithm
solution josephus
partition array
lomuto partitioning
elements indexed
solves selection
interpolation variable
interpolation binary
interpolation searching
searching named
index computed
random keys
insertion binary
game nim
played piles
piles chips
single pile
players turns
taking chip
player moving
winning strategy
winning losing
instance losing
player make
puts opponent
opponent winning
losing positions
positions player
pile sizes
sum nim
winning player
tree classify
algorithm variable
case outline
algorithm practical
integer multiplication
area triangle
minimum distance
geometry closest
element smaller
make set
elements larger
partition achieved
partitioning procedure
input subarray
subarray array
array defined
defined left
left indices
indices output
increasing array
inputs problem
conquer general
equal size
efficient brute
solution growth
elements arrays
mergesort worst
problem write
numbers set
key moves
comparisons case
running worst
computes recursively
tree input
input binary
tree comparison
height algorithm
lengths paths
log nlog
numbers decimal
matrices algorithm
products matrices
algorithm multiplications
figure idea
pairs points
points min
upper lower
algorithm identifies
edges tree
depth forest
exhaustive approach
computing square
efficiency brute
graph depth
problem points
tree edge
vertices connected
straight line
graph edges
figure adjacency
algorithm determines
fast memory
stored disk
positions sorted
counting input
letters alphabet
hashing section
array integers
parental nodes
trees section
smaller keys
key tree
middle key
node splits
keys tree
nodes keys
searching tree
final state
principal varieties
table numbers
array positions
string characters
characters called
pattern position
situation similar
pattern character
align pattern
text matching
mismatching pair
pair encountered
entry column
shifting pattern
counterpart text
dna sequence
searching patterns
patterns binary
binary text
text zeros
trees principal
main memory
idea tree
tree similar
leaf key
bound height
tree obtained
solves problem
case comparisons
connected edge
figure graph
sorted array
problem efficiency
matrix elements
tree key
paths vertices
left child
binary digits
numbers design
multiplications additions
beginning section
key values
polynomial degree
expressing algorithm
programming language
majority algorithms
divisor integers
gcd mod
integer checking
sorted lists
locker doors
sequence steps
roots quadratic
quadratic equation
problems geometric
large data
array linked
edge directed
depth vertex
child vertex
questions needed
people bridge
problem arises
element priority
edge connected
tree connected
path vertices
length simple
elements subset
collection disjoint
technique suggests
symbol alphabet
illustration figure
algorithm single
called single
tree construction
implementing priority
specific graph
vertices length
depends data
graduate student
path lengths
obtained solution
greedy strategy
obtained greedy
sum weights
weights edges
algorithm previous
mini mum
mum spanning
efficiency single
log quick
vertex algorithm
problem model
strings symbols
input positive
elements smaller
vertices points
times algorithm
graph figure
numbers represented
element uniqueness
uniqueness problem
exercises prove
problem class
equal elements
tree defined
solution original
algorithm mergesort
decimal digits
string representing
element node
quadratic worst
easier solve
important special
partial pivoting
solve systems
identity matrix
insert key
algorithm polynomial
lowest highest
binary expansion
instance linear
initial state
space graph
space graphs
positive integers
computed formula
smaller instance
size instance
size solution
algorithm searching
typically involves
involves small
small localized
improves objective
returns feasible
optimal stops
finding initial
maximizing network
special structure
efficient simplex
bipartite matching
pairing elements
school graduates
nobel prize
applications economics
feasible points
defined inequality
inequality comprises
obtained solving
largest objective
points objective
line common
national medal
shifting line
problems feasible
maximizing subject
constraints optimal
large problems
unbounded feasible
problems variables
variables feasible
region optimal
extreme problem
function extreme
points grow
grow exponentially
identifying extreme
current optimal
apply simplex
required nonnegative
equivalent problem
replaced equivalent
slack variable
nonnegative variables
solving called
nonbasic variables
solution set
variables solve
solve resulting
resulting basic
column entry
columns labeled
variables basic
values basic
column columns
current tableau
represents optimal
row possibly
negative entries
negative column
signals fact
fact objective
function increasing
solution coefficient
means min
min largest
largest adjacent
row commonly
variable called
variable nonbasic
positive entry
ratio dividing
dividing row
smallest ratio
row departing
column ratio
tableau rows
represents basic
tableau nonnegative
entry objective
steps simplex
variables values
smallest subscript
obvious basic
artificial variables
constraints variables
ellipsoid method
improvement idea
sequence feasible
minimize subject
subject aij
dual problems
assumed numbered
vertex leaving
simply network
material leaving
leaving vertex
vertex conservation
xji xij
network sources
sources sinks
capacities uij
total inflow
edge maximum
edge network
path called
general template
template solving
method ford
path idea
amounts edge
edges current
path maximum
capacity edges
connected directed
capacity rij
positive xji
edges kind
kind called
tail listed
edges flows
forward backward
requirement vertex
positive flows
edges augmenting
iteration augmenting
sum capacities
min cut
karp edm
labeled vertex
traversal directed
xij vertex
labeled min
min rij
xji vertex
min xji
augmentation performed
source current
current maximum
network single
source single
single sink
labels source
maximum application
final obtained
obtained augmenting
network flows
property edges
network directed
path belongs
augment sink
sink path
path augment
vertex labeling
bold augmentation
cuts network
cut smallest
smallest capacity
capacity minimum
capacity network
network cut
sum flows
flows edges
cut equal
edges required
uij element
set uij
network maximum
table seating
subset edges
figure bipartite
odd length
improvement technique
graph matching
matching edges
vertex matched
adding matching
larger matching
figure matching
matching vertex
numbered positions
matching obtained
obtained augmentation
matching augmenting
matching perfect
perfect matching
matching matches
length alternating
path exists
vertices sets
case vertex
endpoint augmenting
finds maximum
column shows
problem bipartite
hall marriage
marriage theorem
matching called
men set
set women
women preference
marriage partners
ties allowed
woman preference
matrix figure
position ranking
ranking preference
jim ann
men preferences
preferences women
ann sue
sue ann
tom sue
sue jim
tom figure
instance stable
pair marriage
women rankings
rankings men
highest ranked
ranked woman
accepts proposal
total women
woman algorithm
bob proposed
jim proposed
rejected tom
proposed sue
jim sue
tom proposed
matching stable
yields stable
gale shapley
matchings stable
class stable
matching instance
proposing version
generating sequence
improving values
vertices edges
input nonnegative
operation times
algorithm computes
algorithm correctly
data set
largest key
array values
searching insertion
algorithm left
algorithm yield
algorithm constructing
node tree
traveling salesman
comparison executed
root function
problem traveling
pushed stack
properties graphs
components graph
tree forest
sort selection
traversal vertices
vertices dead
ends popped
stack vertex
generating combinatorial
exponentially faster
solving puzzle
array characters
solved brute
brute algorithms
distance pair
points figure
class design
based problem
traverse graph
edge leading
person assigned
assigned job
job assigned
person cost
ith person
total cost
characters left
traversal starting
results algorithm
graph acyclic
applications finding
solve instances
subsequent iterations
vertices reached
connects vertex
bipartite vertices
make comparisons
acyclicity graph
visiting vertices
definitions concepts
elements key
probability successful
algorithms efficiency
algorithm convex
mod large
solving small
sort line
ring star
visited unvisited
forest tree
global variable
ties vertex
finding shortest
structure called
solution obtained
algorithm operations
definition illustrated
memory units
multiplicative constant
random numbers
entire algorithm
algorithm innermost
addition subtraction
specific values
digits binary
apply general
prove assertions
computing fibonacci
single operation
input matrices
information algorithm
lighter heavier
logarithm base
set sum
called algorithm
determine efficiency
vertices vertex
finding maximum
problem optimal
reasons study
practical standpoint
standard set
cornerstone science
algorithms applications
professional personal
studying algorithms
algorithms special
solutions problems
answers specific
person understand
understand teaching
algorithms leads
solved algorithms
issues related
designing analyzing
fundamental data
language algorithm
instructions solving
required output
input finite
diagram figure
represented ways
largest integer
integer divides
larger numbers
gcd euclid
observation integer
smaller iteration
problems algorithms
smaller numbers
algorithm presented
input numbers
procedure computing
common factors
legitimate algorithm
factorization steps
prime numbers
primes exceeding
eliminates multiples
numbers eliminated
eliminated remaining
divisor positive
implemented programs
precision required
algorithm description
lists numbers
numbers board
extended euclid
doors closed
problem practical
types problems
algorithm specifies
specifies instance
capabilities computational
computational device
understand problem
exact approximate
hungarian american
central assumption
ram model
parallel algorithms
techniques design
solved instances
algorithm sophisticated
problems algorithmically
algorithmically applicable
applicable variety
learning techniques
classify algorithms
algorithms underlying
underlying design
linked array
basic data
succinct description
geometric shapes
language pseudocode
algorithm correctness
desirable characteristic
characteristic algorithm
mathematical rigor
easier design
formula roots
divisor algorithm
antoine saint
saint exupe
jon bentley
figure good
result repeated
algorithm sorts
algorithm talking
computing solved
world puzzle
cabbage solve
minutes person
english pseudocode
attention researchers
types sorting
searching string
processing graph
piece information
sort student
students gpa
situations algorithms
sorted alphabetically
algorithms searching
string sequence
sequence characters
strings comprise
languages compiling
thought collection
collection points
connected line
segments called
section graphs
theoretical practical
difficulty stems
mentioned earlier
interested geometric
critical role
icosian game
problem combinatorial
combinatorial terms
color map
algorithms operate
operate data
arrays implementing
structures array
element located
string strings
pointers nodes
linked special
pointer element
item null
linked elements
elements null
doubly linked
insertions deletions
linked element
representing abstract
items collection
queues important
stack plates
elements added
adjacent connected
undirected edge
edge incident
directed vertex
vertices undirected
graph sparse
graphs weighted
figure weighted
simple length
model connected
subgraph graph
graph cycles
rooted trees
efficient access
access large
root vertex
called child
siblings vertex
vertex children
rooted vertex
defined ordered
implementation binary
parental vertex
computing purposes
nodes pointers
left pointer
child sibling
representation tree
set unordered
sets comprises
set represented
relationship data
efficient algorithmic
data adt
set abstract
priority dictionary
oriented languages
means classes
delete ith
lists represented
operation sequence
enqueue dequeue
weighted graphs
taking account
tech nique
section fact
items weights
row table
values knapsack
algorithm instance
algorithm exercises
vertices graph
connected component
edges path
problem efficient
method solve
solving linear
solution optimal
set vertices
idea transformation
idea differ
representation instance
instance representation
simplification variety
idea presorting
conquer strategy
simplification representation
simplest case
case trees
based representation
representation idea
variety transform
implemented arrays
requires log
computing mode
largest frequency
input bits
values encountered
runlength runvalue
runlength modevalue
searches needed
needed justify
algorithms dealing
class efficiency
problem quadratic
numbers boxes
maximum points
coefficients equation
nxn annxn
matrix zeros
isaac newton
arbitrary coefficient
solve upper
equation substitute
elementary operations
replacing equation
difference equation
multiple equation
elementary operation
matrix pivot
equations specifically
column vector
vector output
output equivalent
matrix values
exchange ith
coefficient ith
scaling factor
errors section
expensive addition
substitution stage
elimination stage
elimination yields
lower triangular
matrix solve
inverse matrix
diagonal elements
applying gaussian
computing determinant
det equal
simply equal
applications section
compute determinant
equal product
decomposition method
elimination linear
elimination method
panels toggling
affects total
problem panels
panels board
board initially
initially lit
height equal
good properties
efficiency dictionary
definition avl
difference heights
subtrees node
red black
requirement tree
called rotations
idea rebalancing
important trees
figure avl
figure insertion
tree rotation
rooted unbalanced
unbalanced node
node closest
closest newly
newly inserted
figure rotation
rotation called
rotation general
rotation performed
inserted left
subtree left
rotation mirror
inserted subtree
trees nodes
rotation left
rotation tree
tree shaded
shaded node
node inserted
constructing avl
insertion log
key deletion
kinds nodes
key root
tree leaf
inequality log
successively starting
starting tree
tree real
range difference
difference largest
smallest numbers
numbers tree
tree determine
write constructing
theoretically important
defined binary
shape property
positions array
parent key
checks parental
larger key
holds position
comparisons height
dominance requirement
efficiency deletion
stage algorithm
stage construction
stage maximum
maximum deletions
construction stage
investigate efficiency
finding deleting
spaghetti sort
heapsort horner
horner binary
wealth literature
literature subject
years horner
horner method
polynomial formula
highest lowest
entry row
filled left
entry computed
algorithm horner
polynomial horner
array coefficients
degree stored
stored lowest
highest output
output polynomial
polynomial downto
multiplications horner
horner optimal
optimal algorithm
horner byproducts
division algorithm
exploit binary
representation exponent
computing power
binary polynomial
representing exponent
exponentiation method
computes left
accumulator algorithm
product term
term product
lowest term
apply horner
horner evaluate
evaluate polynomial
division apply
apply left
kettle cupboard
professor kettle
alg problem
solving strategy
horner polynomial
points words
computing common
common prime
counting paths
directed equals
equals element
element adjacency
matrix square
numbers paths
function maximization
minimization problem
relationship minimization
minimization maximization
maximization problems
calculus procedure
finding extremum
extremum points
critical points
optimal decision
making reduced
reduced instance
linear inequalities
investments stocks
bonds cash
required integers
fraction item
continuous version
goal state
path initial
peasant wolf
labeled pwgc
river crossings
computing lcm
construct min
graph triangle
vertex coloring
edge coloring
tiles unordered
problem easier
representation problem
problems answers
legitimate input
section methods
equations evaluating
complexity problems
problem determining
real roots
important unresolved
equations systems
systems equations
arithmetic operations
distinct items
connectivity graph
scale sets
problem partition
fastest algorithm
bound algorithm
problem log
class problem
contributions theoretical
mathematics solving
arise naturally
trees figure
evaluation algorithm
classify problems
length vertices
based counting
algorithm class
worst cases
minimum numbers
tree element
element insertion
algorithm turns
leaves represent
exists algorithm
specific examples
graph subset
algorithm matching
evaluating func
algorithm consuming
distinct problem
comparing elements
complexity class
arbitrary square
sort element
heavier genuine
algorithms class
halts halt
represents solution
clique size
set size
major obstacle
numbers digital
num bers
array numbers
computational geometry
root left
figure standard
algorithms binary
multiplications algorithm
strictly decreasing
decreasing arrays
array real
satisfies recurrence
draw tree
single node
leaves binary
requires multiplications
algorithm outlined
entire set
distance closest
adjacency representation
matrix representation
grows exponentially
analyze efficiency
set algorithm
loses game
implementa tion
major variations
size obtained
size subproblem
subproblem size
solution subproblem
subproblem solution
based recursive
decreasing values
cworst worst
arrays key
array version
undirected graphs
graph vertex
edge digraph
sorting digraph
solution efficient
yields solution
left problem
determine vertex
generate permutations
single element
generating binary
element algorithm
index array
key compared
binary log
function grows
grows slowly
position figure
prove general
array assume
linear worst
wins game
classify algorithm
direct application
algorithm examples
simple path
computing gcd
previous section
approximation algorithm
remainder division
alphabet character
data compression
elements positions
implementing dictionaries
positions elements
node root
keys subtree
operations searching
parental node
index element
unsuccessful searches
express numbers
notations big
omega big
systematically applied
applied analyzing
algorithms main
setting sum
called recurrence
outline general
established tradition
measuring input
efficiency function
function parameter
elements matrices
size metric
size algorithms
input algorithms
units measuring
measuring running
approach dependence
efficiency metric
operations executed
algorithms basic
established framework
framework analysis
algorithm ficiency
running implementing
operations basic
input sizes
small inputs
function growth
functions important
inputs realistic
realistic sizes
exponential function
difference orders
log increases
quadratic function
algorithms running
input inputs
kind inputs
operation inputs
efficiency case
runs fastest
efficiency determine
analysis case
arrays algorithm
behavior typical
size sequential
probability occurring
occurring ith
general formula
algorithm inspect
elements inputs
investigation worst
probabilistic assumptions
run algorithm
entire sequence
measured counting
units consumed
distinguish worst
size infinity
distinct pairs
scenario pairs
prove formula
formula bits
addition sorting
function argument
inventor asked
square chessboard
operation principal
indicator algorithm
nonnegative functions
natural numbers
informal introduction
lower growth
notations formal
constant nonnegative
constants required
omega notation
bounded positive
executed parts
smaller growth
based definitions
lim limit
limit equal
log lim
exponential functions
values base
efficiencies large
large algorithms
fall classes
algorithm worse
cubic algorithm
algorithm asymptotic
running typically
typically characterizes
characterizes efficiency
algorithms embedded
embedded loops
loops section
algorithms generate
increasing growth
prove fact
array distinct
class entire
classes algorithms
door wall
analysis nonrecursive
algorithm loop
executed repetition
sum compute
analyzing nonrecursive
algorithms parameter
parameter parameters
parameters indicating
loop times
depends size
efficiencies investigated
investigated separately
separately set
sum expressing
rules sum
relation times
analyzing recursive
repetition innermost
variable limits
elements computed
computed scalar
scalar dot
executed counting
algorithm machine
output binary
alternative computing
minval maxval
maxval minval
questions problem
matrix real
cells von
neighborhood range
definition compute
total calls
multiplications needed
equation defines
relation initial
defined recurrence
recurrence solve
solve difficult
techniques solving
investigating recursive
larger disk
disk smaller
recursive solution
recursively disks
largest disk
disk directly
disk algorithm
mask inefficiency
inefficiency recursive
calls tower
calls recursive
algorithm binrec
recurrence recursive
advantage theorem
formula valid
sum cubes
version tower
disks moved
peg disk
disk peg
design recursive
hamburgers fried
algorithm hamburgers
applications fibonacci
sequence benefits
fibonacci rabbits
rectangle sides
nearest integer
computes nth
definition input
output nth
pair rabbits
male female
input sample
data observed
analyze data
hypothesis algorithm
operation physical
sample developed
instance sizes
sizes typically
range chosen
generated randomly
observed metric
experiment sample
size included
distributed interval
distributed integer
linear congruential
congruential method
sequence pseudorandom
quadratic cubic
convex shape
values sample
mathematical empirical
empirical analyses
analyses algorithms
applicability algorithm
logarithmic linear
counter inserted
scatterplot algorithm
algorithm scatterplot
davg algorithm
images convey
convey information
information algorithms
principal variations
variations algorithm
visualization static
visualization dynamic
dynamic algorithm
visualization called
representing item
initial final
final screens
screens typical
typical visualization
visualization sorting
existing visualizations
research education
software systems
tool analyzing
expressing executions
operation ascertain
subtree smaller
method solving
algorithm algorithms
algorithm euclid
consecutive integer
checking algorithm
vast majority
characters alphabet
searching problem
vertex called
trees important
positive numbers
vertices set
solve problems
algorithm depends
root element
tree equal
figure addition
problem weighted
algorithm prim
edges shown
changing element
adding edge
called quick
symbols symbol
application algorithm
table filled
sorted arrays
smaller equal
subsets element
square roots
problem problems
tree binary
cworst log
square matrices
computing product
finding minimum
pair integers
comparisons needed
binary digit
applied mathematics
polynomial anxn
directed graphs
algorithm apply
figure illustration
algorithm generate
outline algorithm
original problem
efficiency log
compute sum
asymptotic efficiency
points cartesian
cartesian plane
tree figure
worst case
important problems
idea ghost
ghost spoken
spoken charles
charles dickens
dickens dynamic
technique inter
inter esting
esting history
history invented
invented prominent
prominent mathematician
mathematician richard
bellman general
method optimizing
optimizing multistage
multistage decision
pro cesses
cesses word
word programming
technique stands
stands planning
planning refer
refer programming
programming proving
proving important
important tool
tool applied
mathematics dynamic
programming tually
tually considered
considered science
science circles
circles general
technique special
types optimization
problems view
nique dynamic
relating problem
solution solutions
solving overlapping
subproblems recording
obtained technique
illustrated revisiting
revisiting fibonacci
dis cussed
section read
read section
section discussion
discussion beautiful
beautiful topic
topic feel
feel temptation
temptation read
read succumb
succumb fibonacci
numbers elements
conditions recurrence
recurrence directly
directly compute
fibonacci recompute
recompute values
function times
times figure
computing expressed
expressed terms
terms smaller
smaller overlapping
subproblems computing
simply elements
elements dimensional
consecutive values
values starting
starting view
view initial
conditions equation
equation producing
producing elements
array single
single loop
loop pseudocode
fact extra
array accomplish
task recording
recording values
sequence problem
exercises phenomenon
phenomenon unusual
unusual counter
chapter straightforward
programming interpreted
interpreted special
special variety
variety space
space dynamic
algorithm fined
fined extra
space algorithms
fibonacci computing
computing preceding
based classic
approach solve
solve smaller
problem variation
seeks solving
solving unnecessary
unnecessary subproblems
subproblems technique
illustrated section
section exploits
exploits called
called memory
functions considered
considered variation
programming classical
version dynamic
programming variation
variation crucial
crucial designing
remains deriving
deriving recurrence
subproblems availability
availability equation
equation computing
fibonacci exceptions
exceptions majority
majority dynamic
deal optimiza
optimiza tion
problems mention
mention general
general principle
principle underlines
underlines applications
applications richard
bellman called
called principle
optimality terms
terms original
original formulation
formulation optimal
instance optimization
problem composed
composed optimal
solutions subin
subin stances
stances principle
optimality holds
holds rare
rare fails
fails finding
graph applicability
applicability problem
problem checked
checked principal
difficulty developing
developing dynamic
algorithm sections
exercises chapter
chapter standard
examples dynamic
fact invented
invented independently
independently discovery
discovery dynamic
programming viewed
viewed examples
examples technique
applications numerous
numerous applications
applications range
range optimal
optimal breaking
breaking text
text lines
lines baa
baa image
image resizing
resizing avi
avi variety
applications sophisticated
sophisticated engineering
engineering problems
problems ber
ber basic
basic examples
examples goal
goal section
section dynamic
programming typical
examples coin
values positive
distinct goal
goal maximum
money subject
constraint coins
coins adjacent
adjacent initial
initial row
row picked
picked maximum
maximum picked
picked row
coins derive
recurrence partition
partition allowed
allowed coin
coin selections
selections groups
groups coin
coin largest
largest group
nth coin
coin maximum
maximum group
equal definition
definition recurrence
subject obvious
max compute
similar nth
fibonacci algorithm
fib section
algorithm coinrow
coinrow applies
applies formula
formula maximum
picked coin
row picking
picking adjacent
adjacent coins
coins input
array positive
coin values
picked max
max application
row denominations
maximum pointing
pointing index
programming coin
row fact
fact solved
coins row
row maximum
total computations
computations possibilities
possibilities produced
produced maxima
maxima formula
formula application
solution moving
moving computing
computing maximum
maximum produced
produced sum
solution finally
finally maximum
maximum computing
computing produced
produced implying
implying coin
solution coin
solution repeating
repeating computations
computations backtracing
backtracing information
information terms
terms larger
larger recorded
recorded extra
values computed
computed coinrow
coinrow largest
largest money
picked coins
coins composing
composing optimal
set takes
takes space
space superior
superior alternatives
alternatives straightforward
straightforward topdown
topdown application
recurrence solving
exhaustive problem
exercises making
general instance
denominations coin
states countries
countries simple
simple efficient
chapter dynamic
assuming availability
availability unlimited
quantities coins
denominations minimum
values convenient
define obtained
adding coin
denomination denominations
denominations select
select minimizing
minimizing constant
constant smallest
smallest recurrence
min ndj
ndj compute
similar coin
entry requires
algorithm changemaking
changemaking applies
programming minimum
array increasing
increasing positive
denominations output
coins temp
temp min
min temp
temp application
algorithm denominations
yields coins
coins space
algorithm mincoinchange
mincoinchange coin
denominations coins
coins optimal
solution backtrace
backtrace computa
computa tions
denominations produced
produced minima
minima formula
formula instance
considered application
produced minimum
produced coin
denomination minimum
minimum coin
coin set
set coin
coins cells
board coin
robot located
located upper
cell board
board coins
coins bring
robot cell
cell current
current location
location robot
robot visits
visits cell
cell coin
coin picks
picks coin
coin design
robot path
path largest
cell ith
column board
board cell
left largest
numbers coins
coins brought
brought cells
cells adjacent
cells row
row adjacent
cells left
left cells
cells column
column cells
cells assume
assume equal
equal nonexistent
nonexistent neighbors
neighbors largest
cell maximum
numbers coin
words formula
max cij
cij coin
cell cij
cij formulas
formulas table
column typical
typical dynamic
algorithms involving
involving dimensional
dimensional tables
tables algorithm
algorithm robotcoincollection
robotcoincollection applies
programming compute
compute largest
robot board
board starting
starting moving
corner input
equal cells
cells coin
coin output
cell max
figure coin
coin setup
setup figure
computing formula
formula cell
table takes
efficiency tracing
tracing computations
computations backward
backward makes
makes optimal
path optimal
cell optimal
cell direction
direction yields
paths instance
figure ties
ties optimal
figure coins
coins dynamic
results paths
paths coins
coins exercises
exercises dynamic
programming common
common conquer
conquer principal
difference solve
instance coin
problem straight
straight forward
exponential efficiency
exhaustive exponential
exponential apply
algorithm solutions
solutions making
problem denominations
denominations modify
modify dynamic
problem cells
inaccessible robot
robot apply
algorithm board
inaccessible cells
cells shown
shown optimal
paths board
board rod
rod cutting
algorithm fol
lowing problem
total sale
price obtained
obtained cutting
cutting rod
rod units
units integer
length pieces
pieces sale
price piece
piece units
units space
path counting
counting chess
chess rook
rook horizontally
square row
column chessboard
chessboard shortest
paths rook
rook corner
corner chessboard
chessboard diagonally
corner length
path measured
measured squares
squares passes
passes squares
squares solve
algorithm elementary
elementary combinatorics
combinatorics minimum
descent positive
integers arranged
arranged equilateral
equilateral triangle
triangle numbers
base shown
problem smallest
descent triangle
triangle apex
apex base
base sequence
adjacent numbers
figure circles
circles design
efficiency binomial
coefficient design
computing bino
bino mial
coefficient multiplications
multiplications space
algorithm longest
dag design
finding length
dag problem
important prototype
prototype dynamic
applications determines
determines minimal
minimal needed
needed completing
completing project
project comprising
comprising precedence
precedence constrained
constrained tasks
tasks coin
dag maximum
maximum square
submatrix boolean
matrix largest
largest square
submatrix elements
zeros design
largest free
free square
square area
area screen
screen selecting
selecting construction
construction site
site world
world series
series odds
odds teams
teams playing
playing series
games teams
teams wins
wins games
games assume
assume probability
game equal
probability losing
losing game
game ties
ties probability
winning series
series set
relation dynamic
algorithm probability
probability team
team winning
game series
series proba
proba bility
bility winning
determine space
efficiencies knapsack
functions section
section designing
designing dynamic
discussed solving
solving exhaustive
assume weights
weights knapsack
capacity positive
integers item
item values
integers design
relation expresses
expresses solution
terms solutions
smaller subinstances
subinstances instance
defined items
instance valuable
capacity subsets
capacity categories
categories ith
item subsets
subset definition
definition subsets
subset optimal
items maximum
values ith
knapsack optimal
items optimal
items observations
lead recurrence
recurrence max
max convenient
define initial
conditions goal
goal maximal
subset figure
illustrates values
values involved
involved equations
equations compute
compute entry
entry ith
maximum entry
column sum
sum entry
left table
filled row
column goal
table solving
programming capacity
instance data
capacity dynamic
filled applying
applying formulas
formulas shown
maximal composition
subset backtracing
backtracing computations
computations entry
item included
included optimal
subset filling
filling remaining
remaining units
units knapsack
selection leaves
leaves element
remaining composition
composition similarly
similarly item
item final
final optimal
solution item
item efficiency
algorithm needed
solution asked
asked prove
assertions exercises
exercises memory
functions discussed
discussed beginning
chapter illustrated
illustrated subsequent
sections dynamic
programming deals
deals problems
relation overlapping
subproblems direct
approach finding
recurrence leads
solves common
common subproblems
subproblems inefficient
inefficient typically
typically exponential
worse classic
approach works
works fills
fills table
table solutions
solved unsatisfying
unsatisfying aspect
aspect approach
approach solutions
subproblems solution
problem drawback
drawback approach
approach natural
natural combine
strengths approaches
approaches goal
goal method
solves subproblems
subproblems method
method exists
exists based
based memory
functions method
problem manner
manner addition
addition maintains
maintains table
table kind
kind dynamic
algorithm initially
initially table
initialized special
special null
null symbol
symbol calculated
calculated method
method checks
checks entry
entry null
null simply
simply retrieved
recursive result
result recorded
recorded table
algorithm implements
idea knapsack
problem initializing
initializing table
table recursive
recursive function
called items
capacity algorithm
algorithm mfknapsack
mfknapsack implements
implements memory
indicating items
items considered
considered nonnegative
indicating knapsack
capacity output
output optimal
optimal feasible
items global
global variables
variables input
arrays eights
eights alues
initialized row
column initialized
initialized weights
weights mfknapsack
mfknapsack max
max mfknapsack
mfknapsack values
values mfknapsack
mfknapsack weights
weights apply
considered table
figure results
results nontrivial
nontrivial values
column computed
algorithm nontrivial
nontrivial entry
entry retrieved
retrieved recomputed
recomputed larger
larger instances
instances proportion
proportion entries
entries significantly
larger general
general constant
factor gain
gain memory
algorithm significant
significant improvement
improvement expected
expected dynamic
algorithms computation
computation takes
constant mind
mind memory
efficient version
optimal subsets
subsets instance
general table
subset knapsack
instance write
finds composition
subset table
efficiency needed
subset filled
filled dynamic
table true
row dynamic
nondecreasing true
column dynamic
nondecreasing design
problem unlimited
quantities copies
copies item
item kinds
problem entries
entries dynamic
computed memory
method retrieved
retrieved recomputation
recomputation prove
class memory
function approach
approach unattractive
unattractive problem
computing binomial
coefficient formula
formula write
write research
research applications
applications dynamic
programming finding
longest common
common subsequence
subsequence sequences
sequences optimal
optimal string
string editing
editing minimal
minimal triangulation
triangulation polygon
polygon optimal
tree important
structures science
science principal
dictionary set
elements operations
deletion probabilities
keys searching
searching elements
set accumulated
accumulated data
data searches
searches natural
natural pose
pose optimal
tree average
comparisons smallest
smallest simplicity
simplicity limit
discussion minimizing
successful method
method extended
extended unsuccessful
keys searched
searched probabilities
depicts binary
keys average
successful trees
fact optimal
optimal tiny
tiny optimal
tree generating
approach unrealistic
unrealistic total
total binary
nth catalan
catalan grows
grows infinity
infinity fast
exercises distinct
keys ordered
ordered smallest
largest probabilities
searching smallest
smallest average
successful binary
tree tij
tij keys
keys integer
integer indices
indices classic
approach values
problem interested
interested derive
recurrence underlying
underlying dynamic
ways choose
choose root
keys binary
subtree tik
tik keys
arranged subtree
subtree tkj
tkj optimal
bst figure
tree bst
bst root
binary subtrees
subtrees tik
tkj keys
arranged taking
advantage principle
optimality tree
starting make
comparison numbers
keys levels
levels recurrence
relation obtained
obtained min
tik ikj
ikj tkj
tkj min
tkj ikj
ikj min
ikj recurrence
ikj assume
assume formula
formula interpreted
interpreted comparisons
tree formula
implies node
tree goal
tree dimensional
shows values
values needed
formula row
row arrows
arrows pairs
pairs sums
computed smallest
smallest recorded
recorded suggests
suggests filling
filling table
table diagonals
diagonals starting
starting zeros
diagonal probabilities
probabilities moving
upper corner
corner algorithm
algorithm sketched
sketched computes
computes average
maintain dimensional
table minimum
minimum achieved
achieved table
table shape
shape table
figure filled
filled manner
manner starting
starting entries
filled entries
entries indices
indices roots
optimal subtrees
subtrees makes
makes reconstruct
reconstruct optimal
set illustrate
set beginning
section key
key probability
probability initial
initial tables
table compute
compute min
index average
tree finish
computations exercises
exercises final
final tables
comparisons optimal
key specific
specific structure
structure subtrees
roots consulting
consulting root
child root
root onenode
onenode tree
node optimal
tree entirety
entirety figure
tree pseudocode
optimalbst finds
finds optimal
tree dynamic
programming input
array probabilities
probabilities sorted
sorted keys
keys output
output average
bst table
table subtrees
bst diagonal
diagonal minval
minval kmin
kmin sum
sum minval
minval sum
sum algorithm
efficiency version
cubic careful
shows entries
entries root
table nondecreasing
nondecreasing row
column limits
limits values
range makes
makes running
exercises finish
computations started
started section
section constructing
optimalbst cubic
cubic space
optimalbst quadratic
quadratic write
pseudocode linear
generates optimal
table devise
devise compute
sums dynamic
tree constant
constant sum
sum true
false root
key highest
highest probability
probability construct
construct optimal
keys equally
equally searched
searched average
distinct binary
constructed set
orderable keys
keys satisfies
relation solution
recurrence catalan
catalan numbers
numbers verify
verify assertion
assertion growth
growth implication
implication exhaustive
generalize optimal
algorithm taking
account unsuc
unsuc cessful
searches write
pseudocode memory
function optimal
problem limit
limit function
function finding
successful matrix
matrix chain
chain multiplication
multiplication problem
minimizing total
matrices dimensions
dimensions assume
assume intermediate
intermediate products
computed brute
brute definition
multiplications differ
differ factor
factor ways
ways compute
matrices design
optimal multiplying
matrices warshall
floyd algorithms
algorithms warshall
graph floyd
based essentially
essentially idea
exploit relationship
problem simpler
simpler smaller
smaller version
version warshall
floyd published
published algorithms
algorithms mention
mention ing
algorithms dynamic
programming flavor
flavor considered
considered applications
applications tech
nique warshall
matrix aij
aij directed
graph boolean
matrix ith
column directed
vertex interested
interested matrix
information existence
existence directed
paths arbitrary
arbitrary lengths
lengths vertices
called transitive
determine constant
constant vertex
vertex reachable
reachable ith
vertex application
application examples
examples spreadsheet
spreadsheet cell
cell changed
changed spreadsheet
spreadsheet software
software cells
cells affected
affected spreadsheet
spreadsheet modeled
represent spreadsheet
spreadsheet cells
cells edges
edges cell
cell dependencies
dependencies transitive
closure information
information software
software engineering
engineering transitive
closure investigating
investigating data
data control
control dependencies
dependencies inheritance
inheritance testing
testing oriented
oriented software
software electronic
electronic engineering
engineering redundancy
redundancy identification
identification generation
generation digital
digital circuits
circuits definition
definition transitive
vertices defined
defined boolean
matrix tij
tij element
column exists
exists nontrivial
nontrivial path
vertex tij
tij digraph
closure figure
generate transitive
digraph depth
breadth performing
performing traversal
starting ith
ith figure
closure vertex
information vertices
vertices reachable
reachable columns
columns ith
row transitive
closure traversal
starting yields
yields transitive
closure entirety
entirety method
method traverses
traverses digraph
digraph times
algorithm exists
exists called
called warshall
algorithm stephen
stephen warshall
warshall discovered
discovered war
war convenient
assume digraph
vertices rows
matrix numbered
numbered warshall
constructs transitive
closure series
series boolean
boolean matrices
matrices information
information directed
digraph specifically
equal exists
paths adjacency
digraph recall
information edge
vertices information
information paths
intermediate freedom
freedom speak
speak general
general subsequent
subsequent matrix
series vertex
paths predecessor
predecessor matrix
series reflects
reflects paths
digraph intermediate
intermediate digraph
digraph transitive
closure central
central algorithm
equal means
higher figure
figure changing
changing zeros
zeros warshall
algorithm situations
situations path
path inter
vertices kth
equal possibility
possibility path
path kth
vertices loss
generality assume
assume occurs
occurs case
case create
create path
path property
property simply
simply eliminating
eliminating vertices
vertices occurrences
occurrences caveat
caveat path
path rewritten
rewritten vertices
numbered representation
representation means
higher means
higher proved
proved easy
easy converse
converse assertion
assertion true
true formula
formula generating
matrix formula
formula heart
heart warshall
implies generating
matrix convenient
convenient applying
applying warshall
rij remains
remains element
rij changed
changed element
row illustrated
figure existence
higher vertex
path boxed
paths figure
warshall implements
implements warshall
closure input
vertices output
output transitive
digraph observations
observations warshall
algorithm remarkably
remarkably succinct
succinct efficiency
fact sparse
lists traversal
matrix distance
section asymptotic
speed implementation
implementation warshall
inputs restructuring
restructuring innermost
loop problem
faster matrix
rows bit
operation modern
modern languages
languages space
similar computing
fibonacci dynamic
algorithms matrices
matrices recording
recording intermediate
fact unnecessary
unnecessary problem
asks avoiding
avoiding wasteful
wasteful memory
memory finally
finally underlying
idea warshall
algorithm applied
applied general
finding lengths
graphs floyd
directed pairs
asks distances
vertices variations
variations problem
problem involving
involving shortest
paths graphs
applications communications
communications transportation
networks operations
research studied
studied years
years recent
recent applications
applications pairs
problem precomputing
precomputing distances
distances motion
motion planning
planning games
games convenient
convenient lengths
paths matrix
called distance
element dij
dij ith
matrix length
generate distance
similar warshall
called floyd
inventor robert
robert floyd
floyd applicable
graphs provided
provided floyd
floyd explicitly
explicitly referenced
referenced warshall
warshall paper
paper presenting
algorithm flo
flo years
earlier bernard
bernard roy
roy published
published essentially
essentially algorithm
algorithm proceedings
proceedings french
french academy
sciences roy
roy negative
length distance
distance vertices
vertices arbitrarily
arbitrarily small
small repeating
algorithm enhanced
enhanced lengths
exercises floyd
matrix weighted
vertices series
series matrices
matrices lengths
paths constraints
constraints paths
paths considered
considered matrix
matrix specifically
paths simply
series lengths
vertices intermediate
intermediate distance
matrix sought
sought warshall
matrix means
means equal
higher partition
partition paths
paths disjoint
subsets kth
subset intermediate
shortest definition
definition matrices
matrices length
path subset
subset graph
length limit
attention paths
subset vertex
visiting path
length paths
numbered words
words paths
higher path
higher situation
situation depicted
depicted symbolically
intermediate figure
figure underlying
idea floyd
algorithm vertices
paths kth
equal taking
account lengths
subsets leads
min wij
wij element
column current
matrix replaced
replaced sum
elements row
sum smaller
smaller current
current application
pseudocode floyd
fact matrix
sequence written
algorithm floyd
floyd implements
implements floyd
length output
matrix shortest
lengths overwritten
overwritten min
efficiency floyd
chapter dijkstra
vertices simply
matrix lengths
shown updated
updated elements
elements shown
bold exercises
digraph fined
class warshall
algorithm inferior
inferior traversal
algorithm sparse
implement warshall
memory storing
algorithm intermediate
intermediate matrices
matrices restructure
restructure innermost
warshall make
make run
inputs rewrite
algorithm assuming
assuming matrix
rows represented
operation formed
formed warshall
determine digraph
graph good
idea apply
closure undirected
solve pairs
sequence floyd
algorithm written
predecessor graph
digraph negative
weights floyd
yield result
result enhance
enhance floyd
lengths jack
straws game
game jack
straws plastic
plastic wooden
wooden straws
dumped table
table players
players disturbing
disturbing straws
straws concerned
concerned pairs
path touching
touching straws
straws endpoints
endpoints straws
dumped large
large piece
paper determine
determine pairs
connected touching
touching connecting
connecting straws
connected indirectly
indirectly connected
connected straws
straws east
east central
central regionals
regionals acm
acm international
international collegiate
collegiate programming
programming contest
contest summary
summary dynamic
subproblem recording
obtained applicability
applicability dynamic
programming optimization
problem requires
requires problem
solution instances
instances optimal
solutions subinstances
subinstances problems
problems making
arbitrary coin
denominations solved
solved dynamic
programming solving
algorithm exemplifies
exemplifies application
application technique
technique difficult
optimization memory
function technique
technique seeks
seeks combine
strengths topdown
topdown approaches
solving fashion
fashion subproblems
problem recording
recording solutions
solutions table
programming constructing
keys probabilities
searching warshall
finding transitive
closure floyd
idea interpreted
section important
satisfies constraints
incident edge
edges connecting
elements sets
fortunately important
set men
vertices deleted
function problem
comprises points
matrix notations
largest absolute
solution linear
solution exists
max min
problems optimal
subject constraints
cnxn subject
subject ainxn
nonnegativity constraints
george dantzig
karmarkar algorithm
variables required
algorithm maximum
solution feasible
problem minimizing
total iterations
contradicts assumption
paths shown
improvement algorithm
disjoint sets
points defined
inequalities problem
bounded feasible
subject linear
called basic
increasing coordinate
column pivot
row smallest
method algorithm
problem minimize
problem unique
vertex traversal
column set
prove optimal
height tree
real numbers
algorithm worst
consecutive integers
smallest convex
problem statement
adjacent vertex
edge figure
connectivity acyclicity
path graph
vertex ancestor
vertices algorithm
representation adjacency
problem directly
directly based
game played
small instances
smallest elements
algorithm matrix
class brute
prob lems
triangle vertices
polygon vertices
design strategy
determine worst
office location
problem obvious
called tree
connected vertex
edge connects
problems examples
examples problems
vertices colored
edge path
action algorithm
recursive definition
algorithm average
based approach
assertions true
computing sum
additions algorithm
total multiplications
table values
large positive
mathematical analysis
operation algorithm
element set
graph represented
algorithm log
problem prove
prays miracle
miracle prayer
prayer reduces
reduces great
great god
god grant
grant ivan
ivan turgenev
turgenev russian
russian novelist
novelist short
short story
story writer
writer conquer
technique fame
fame catchy
catchy deserved
deserved efficient
algorithms specific
implementations general
strategy conquer
problem divided
divided subproblems
size subproblems
solved typically
typically recursively
recursively dif
ferent algorithm
algorithm employed
employed subproblems
subproblems small
small solutions
subproblems combined
combined solution
technique diagrammed
diagrammed figure
depicts case
case dividing
subproblems widely
widely occurring
occurring case
executed single
processor problem
problem instances
sum remaining
simply sums
computed applying
applying method
method recursively
recursively values
values sum
numbers moment
moment reflection
reflection efficient
brute summation
summation problem
figure conquer
technique typical
small summing
summing numbers
analysis common
common sense
sense compute
sums lead
lead negative
negative conquer
solution prayers
prayers goddess
goddess algorithmics
algorithmics chapter
epigraph answered
answered spent
spent executing
executing conquer
conquer turns
turns significantly
significantly smaller
smaller solving
problem method
method fact
fact conquer
yields important
algorithms science
classic examples
chapter sequential
algorithms keeping
mind conquer
technique ideally
ideally suited
suited parallel
parallel computations
computations subproblem
subproblem solved
solved simultaneously
simultaneously processor
processor conquer
called pairwise
pairwise summation
summation substantially
substantially accumulated
accumulated error
error sum
approximately digital
digital hig
hig mentioned
mentioned typical
size generally
generally instance
size needing
needing solved
solved constants
constants assuming
assuming size
size power
power simplify
simplify analysis
analysis recurrence
running function
function accounts
accounts spent
spent dividing
solutions sum
recurrence called
called general
general conquer
conquer recurrence
recurrence growth
solution depends
depends values
function efficiency
analysis conquer
algorithms greatly
greatly simplified
simplified theorem
theorem appendix
appendix master
recurrence log
log nlogb
nlogb analogous
analogous results
results hold
hold notations
notations recurrence
additions conquer
conquer sum
sum computation
computation algorithm
size nlogb
nlogb nlog
nlog solution
solution efficiency
class drudgery
drudgery solving
recurrence approach
approach establish
growth unknown
unknown multiplicative
constant solving
equation specific
specific initial
condition yields
exact powers
powers pointing
pointing recurrence
recurrence covers
covers decreaseby
decreaseby constant
previous chapter
chapter fact
fact people
binary degenerate
cases andconquer
andconquer subproblems
subproblems half
size solved
solved decrease
factor divideand
divideand conquer
design paradigms
paradigms mergesort
mergesort perfect
perfect successful
successful application
technique sorts
array dividing
dividing halves
merging smaller
smaller sorted
arrays single
mergesort sorts
recursive mergesort
mergesort input
nondecreasing mergesort
merge merging
arrays pointers
pointers array
array indices
indices initialized
arrays merged
merged elements
elements pointed
pointed compared
compared smaller
smaller added
added array
array constructed
constructed index
index smaller
element incremented
incremented successor
successor array
copied operation
repeated arrays
arrays exhausted
exhausted remaining
copied array
merge merges
merges sorted
sorted output
output sorted
figure mergesort
mergesort operation
operation efficient
efficient mergesort
mergesort assuming
assuming simplicity
simplicity power
comparisons cmerge
cmerge analyze
analyze cmerge
cmerge key
comparisons performed
performed merging
merging stage
stage comparison
comparison total
arrays needing
needing processed
processed reduced
reduced worst
case arrays
elements alternating
alternating arrays
case cmerge
cmerge recurrence
cworst master
theorem cworst
fact easy
easy exact
solution worst
case theoretical
minimum general
large comparisons
case turns
turns gon
gon log
log noteworthy
noteworthy advantage
advantage mergesort
quick sort
heapsort important
important advanced
discussed stability
exercises principal
principal short
short coming
coming mergesort
mergesort linear
storage algorithm
requires merging
merging resulting
algorithm complicated
complicated theoretical
theoretical main
main ideas
ideas leading
leading variations
variations mergesort
mergesort algorithm
algorithm implemented
implemented merging
merging pairs
elements merging
sorted pairs
pairs power
power slight
slight bookkeeping
bookkeeping complications
complications arise
arise avoids
avoids space
space overhead
overhead stack
stack recursive
calls sorted
sorted parts
parts sort
sort recursively
recursively merge
merge scheme
scheme sorting
sorting files
files residing
residing secondary
memory devices
devices called
multiway mergesort
finding sition
sition largest
output arrays
elements largest
finding values
exponenti ation
section theoretical
minimum log
chapter logarithm
logarithm bases
bases irrelevant
irrelevant contexts
contexts arising
arising analyzing
class true
true asser
asser tions
tions master
theorem logarithms
logarithms growth
solutions recurrences
recurrences apply
apply mergesort
mergesort sort
alphabetical mergesort
mergesort stable
assume set
mergesort case
inputs solve
moves version
taking key
moves account
account algorithm
numbers pair
pair inversion
inversion numbers
design log
counting inversions
inversions implement
implement version
mergesort language
choice tromino
tromino puzzle
puzzle tromino
tromino accurately
accurately tromino
tromino shaped
shaped tile
tile formed
formed squares
squares problem
problem chess
chess board
missing square
square trominoes
trominoes oriented
oriented arbitrary
arbitrary squares
missing overlaps
overlaps gol
gol design
quicksort important
approach mergesort
mergesort divides
divides input
quicksort divides
divides encountered
encountered idea
idea array
partition section
partition arrangement
arrangement array
equal partition
achieved final
sorting subarrays
subarrays left
left independently
independently method
method difference
difference mergesort
mergesort division
division problem
problem subproblems
subproblems entire
entire combining
solutions entire
entire division
division stage
stage required
required combine
combine solutions
subproblems pseudocode
pseudocode quicksort
quicksort algorithm
quicksort sorts
sorts subarray
subarray quicksort
output subarray
subarray sorted
nondecreasing partition
position quicksort
quicksort partition
partition discussed
section alternatively
alternatively partition
partition generally
subarray sophisticated
method suggested
suggested hoare
hoare prominent
prominent british
british scientist
scientist invented
invented quicksort
quicksort hoare
hoare age
age invented
invented algorithm
sort words
words machine
machine translation
translation project
project russian
russian english
english hoare
hoare thought
thought bubblesort
bubblesort amazing
amazing luck
luck thought
thought quicksort
quicksort hard
hard assessment
assessment lucky
lucky wonderful
wonderful career
career computing
computing discovering
discovering sorting
algorithm hoa
hoa years
years received
received turing
award fundamental
contributions definition
definition design
design programming
programming languages
languages knighted
knighted services
services education
education science
science selecting
element respect
respect subarray
subarray strategies
strategies selecting
pivot issue
issue analyze
efficiency simplest
simplest strategy
strategy selecting
selecting subarray
subarray element
scan subarray
subarray ends
ends comparing
comparing subarray
elements pivot
left subarray
element subarray
pivot subarray
pivot stopping
stopping scans
scans encountering
pivot yield
yield splits
splits arrays
arrays lot
lot duplicates
duplicates makes
faster array
elements split
split subarrays
subarrays sizes
sizes reducing
size scanning
array scans
scans situations
situations arise
arise depending
depending scanning
crossed scanning
crossed simply
simply exchange
exchange resume
resume scans
scans incrementing
incrementing decrementing
decrementing scanning
crossed partitioned
partitioned subarray
subarray exchanging
pivot finally
finally scanning
equal subarray
partitioned split
position combine
combine case
case crossed
crossed indices
indices exchanging
pivot pseudocode
algorithm hoarepartition
hoarepartition partitions
subarray hoare
position returned
returned function
function swap
swap undo
undo swap
swap index
index subarray
bounds pseudocode
pseudocode checking
checking possibility
possibility index
index incremented
incremented append
append array
array sentinel
sentinel index
index advancing
advancing position
position sophisticated
method pivot
selection mentioned
makes sentinel
sentinel unnecessary
unnecessary sorting
quicksort figure
figure discussion
efficiency noting
noting key
achieved scanning
indices coincide
coincide splits
splits middle
middle subarrays
subarrays case
case satisfies
recurrence cbest
cbest master
theorem cbest
log solving
solving yields
yields cbest
case splits
splits skewed
skewed extreme
extreme subarrays
subarrays size
size subarray
partitioned unfortunate
unfortunate situation
situation increasing
arrays inputs
solved strictly
array pivot
scan left
scan indicating
indicating split
figure quicksort
quicksort operation
operation array
array transformations
transformations pivots
pivots shown
bold tree
calls quicksort
input values
values subarray
bounds split
position partition
partition obtained
obtained making
making comparisons
partition exchanging
pivot algorithm
left strictly
sorting strictly
arrays diminishing
sizes processed
processed total
equal cworst
cworst utility
utility quicksort
case behavior
behavior cavg
cavg average
comparisons quicksort
quicksort randomly
size partition
comparisons achieve
partition left
left subarrays
elements assuming
assuming partition
position probability
probability recurrence
relation cavg
cavg solution
solution trickier
trickier worst
case analyses
analyses turns
turns cavg
average quicksort
quicksort makes
case innermost
loop efficient
efficient runs
faster mergesort
heapsort log
chapter randomly
arrays nontrivial
sizes justifies
justifies algorithm
inventor quicksort
quicksort importance
importance persistent
years refine
refine basic
improvements discovered
discovered researchers
researchers pivot
selection methods
methods randomized
randomized quicksort
quicksort random
random element
element median
median method
method median
median leftmost
rightmost middle
array switching
switching insertion
sort small
elements systems
systems sorting
sorting small
subarrays finishing
finishing algorithm
sort applied
applied entire
entire sorted
array modifications
modifications partitioning
partitioning algorithm
partition segments
segments smaller
pivot problem
exercises robert
sed world
world leading
leading expert
expert quicksort
quicksort improvements
improvements combination
combination cut
cut running
quicksort weaknesses
weaknesses stable
stable requires
requires stack
stack parameters
parameters subarrays
subarrays sorted
size stack
stack log
sorting smaller
smaller subarrays
subarrays obtained
obtained partitioning
partitioning worse
worse space
heapsort sophisticated
sophisticated ways
ways choosing
make quadratic
quadratic running
case eliminate
eliminate completely
completely performance
performance randomly
arrays sensitive
sensitive implementation
details algorithm
algorithm architecture
architecture data
data february
february issue
computing science
engineering joint
joint publication
publication american
american institute
institute physics
physics ieee
ieee society
society selected
selected quicksort
quicksort algorithms
algorithms greatest
greatest development
development practice
practice science
engineering century
century exercises
apply quicksort
alphabetical draw
calls partitioning
procedure outlined
section prove
equal prove
left pointed
pointed showing
showing quicksort
quicksort stable
algorithm array
elements sentinel
sentinel mentioned
mentioned text
text needed
needed single
single sentinel
sentinel suffices
suffices input
input version
version quicksort
quicksort section
section arrays
input quicksort
quicksort median
median pivot
selection strictly
increas ing
arrays estimate
faster quicksort
array random
numbers insertion
sort true
false element
element arrays
sorted faster
faster insertion
quicksort design
algorithm rearrange
rearrange elements
bers negative
negative elements
elements positive
positive elements
efficient dutch
rearrange array
characters red
red white
white blue
blue colors
colors dutch
flag dij
dij design
solution dutch
quicksort implement
implement quicksort
quicksort language
run sample
inputs verify
verify theoretical
theoretical assertions
assertions algorithm
efficiency nuts
bolts collection
collection bolts
bolts widths
widths nuts
nuts allowed
allowed nut
nut determine
determine nut
nut larger
larger smaller
smaller matches
matches nuts
bolts problem
problem nut
nut design
problem average
log raw
traversals related
related properties
properties section
technique applied
defined finite
set nodes
nodes consists
consists root
root disjoint
disjoint binary
root binary
case ordered
standard interpretation
interpretation alternative
alternative definition
definition binary
definition divides
divides binary
smaller structures
structures left
subtree problems
trees solved
solved applying
technique recursive
computing height
recall height
leaf computed
computed maximum
maximum heights
heights root
left tleft
tleft tright
tright figure
standard representation
representation binary
tree subtrees
subtrees account
account extra
extra root
root convenient
height computes
recursively height
output height
max height
height tlef
tlef height
height tright
tright problem
size nodes
comparisons compute
algorithm recurrence
relation tlef
tlef tright
tright solve
solution addition
addition frequently
checking typical
typical binary
algorithms tree
executed additions
additions single
comparison addition
addition numbers
numbers helps
helps analysis
analysis tree
algorithms draw
tree extension
extension replacing
subtrees special
special nodes
nodes extra
extra nodes
squares figure
called external
external original
original nodes
circles called
called internal
internal definition
definition extension
extension binary
tree single
single external
node easy
easy height
addition internal
extended tree
tree makes
comparison figure
left extension
extension internal
circles external
squares tree
node ascertain
ascertain algorithm
efficiency external
nodes extended
nodes checking
checking figure
similar examples
examples easy
easy hypothesize
hypothesize external
nodes prove
total nodes
root children
children internal
node equation
equation immediately
implies equality
equality applies
applies nonempty
nonempty binary
tree definition
definition node
children binary
tree denote
denote numbers
numbers parental
leaves returning
returning algorithm
height comparisons
tree additions
additions important
important conquer
trees classic
traversals preorder
traversals nodes
recursively visiting
visiting tree
subtrees differ
differ timing
timing root
root preorder
preorder traversal
visited left
subtrees visited
visited inorder
inorder traversal
subtree visiting
visiting subtree
subtree postorder
subtrees traversals
traversals illustrated
figure pseudocodes
pseudocodes straightforward
straightforward repeating
repeating descriptions
descriptions traversals
traversals standard
standard feature
feature data
structures textbooks
textbooks efficiency
analysis identical
identical analysis
analysis height
tree finally
finally questions
questions binary
trees require
require traversals
traversals left
subtrees insert
insert operations
operations binary
processing subtrees
applications conquer
conquer examples
technique preorder
postorder figure
traversals exercises
exercises design
computing levels
levels binary
trees efficiency
algorithm seeks
seeks compute
compute leaves
algorithm leafcounter
leafcounter computes
recursively leaves
output leaves
leaves leafcounter
leafcounter tlef
tlef leafcounter
leafcounter tright
tright algorithm
correction compute
compute height
tree asymptotic
asymptotic ficiency
stack explicitly
implicitly algorithm
altogether prove
equality mathematical
induction traverse
traverse binary
postorder write
pseudocode classic
algorithms preorder
preorder postorder
postorder binary
trees assuming
assuming algorithm
recur sive
calls classic
algorithms yields
yields sorted
sorted applied
prove property
property draw
nodes labeled
labeled inorder
yield lists
lists inorder
postorder permutations
permutations labels
labels inorder
traversal lists
constructs binary
tree lists
lists labels
labels generated
generated inorder
solution internal
paths internal
root internal
node similarly
similarly external
external path
paths external
root external
node prove
prove internal
write computing
computing internal
tree investigate
investigate empirically
empirically average
generated binary
tree chocolate
chocolate puzzle
puzzle chocolate
chocolate break
break pieces
pieces break
break straight
line broken
broken design
minimum breaks
breaks minimum
minimum justify
justify properties
properties binary
tree multiplication
integers strassen
section surprising
algorithms seemingly
seemingly straightfor
straightfor ward
ward tasks
tasks multiplying
integers multiplying
multiplying square
matrices achieve
achieve asymptotic
efficiency ingenious
ingenious application
technique multiplication
integers applications
applications notably
notably modern
cryptography require
require manipulation
manipulation inte
inte gers
gers decimal
digits integers
integers single
single word
word modern
modern require
special treatment
treatment practi
cal supports
supports investigations
investigations algorithms
efficient manipulation
manipulation large
integers section
outline interesting
multiplying numbers
numbers conventional
conventional pen
mul tiplying
integers digits
digits multiplied
multiplied digits
digits total
total digit
multiplications numbers
digits pad
pad shorter
shorter leading
leading zeros
zeros equalize
equalize lengths
lengths impossible
algorithm digit
digit multiplica
multiplica tions
turns case
case miracle
miracle conquer
conquer accomplish
accomplish feat
feat demonstrate
demonstrate basic
basic idea
case digit
integers numbers
represented formula
yields digit
multiplications pen
algorithm fortunately
fortunately compute
compute middle
middle term
term digit
digit multiplication
multiplication taking
advantage products
products computed
computed special
special numbers
numbers multiplied
multiplied pair
pair digit
formula product
apply multiplying
numbers middle
middle promised
promised advantage
advantage conquer
technique denote
denote half
half digits
digits half
half notations
notations implies
implies taking
advantage digit
products power
power recursive
integers pure
pure recursion
recursion stopped
stopped deem
deem small
numbers size
size directly
directly digit
make multiplica
multiplica tion
numbers requires
multiplications digit
numbers recurrence
multiplications solving
solving backward
substitutions yields
yields log
nlog advantage
advantage property
property logarithms
logarithms alogb
clogb additions
subtractions decreased
decreased num
ber multiplications
multiplications requiring
requiring operations
operations digit
subtractions executed
integers operations
operations needed
compute products
products digit
numbers formulas
formulas require
require additions
subtraction recurrence
recurrence applying
theorem stated
stated beginning
chapter nlog
nlog means
means total
subtractions asymptotic
cations asymptotic
asymptotic advantage
advantage algorithm
practical depends
depends quality
algorithm wide
wide disparity
disparity reported
reported results
results machines
machines conquer
algorithm reported
reported outperform
outperform conventional
conventional method
method numbers
digits run
faster numbers
digits area
area importance
importance modern
cryptography outperformance
outperformance crossover
crossover machine
machine switching
switching conventional
conventional algorithm
algorithm multiplicands
multiplicands smaller
crossover finally
finally oriented
language java
java smalltalk
smalltalk aware
aware languages
languages special
special classes
classes dealing
dealing large
integers discovered
discovered year
year russian
russian mathematician
mathematician anatoly
anatoly karatsuba
karatsuba conquer
proved wrong
wrong prevailing
prevailing opinion
opinion efficiency
efficiency integer
algorithm discovery
discovery encouraged
encouraged researchers
researchers asymptotically
asymptotically faster
algorithms algebraic
algebraic problems
section strassen
multiplication conquer
approach digit
multiplications multiplying
integers surprised
surprised similar
similar feat
accomplished multiplying
published strassen
strassen str
str principal
insight algorithm
algorithm lies
lies discovery
discovery product
multiplications opposed
opposed required
section accomplished
accomplished formulas
formulas matrices
subtractions brute
lead multiplying
algorithm importance
importance stems
stems asymptotic
asymptotic superiority
superiority matrix
matrix infinity
infinity matrices
power matrices
matrices padded
padded rows
columns zeros
zeros product
product submatrices
submatrices difficult
verify submatrices
submatrices numbers
computed strassen
strassen formulas
formulas numbers
replaced submatrices
submatrices products
computed recursively
recursively method
multiplication evaluate
evaluate asymptotic
relation log
nlog smaller
smaller required
algorithm savings
savings multiplications
multiplications achieved
achieved expense
expense making
making extra
extra additions
matrices make
make additions
subtractions matrices
matrices size
size additions
simply multiplied
multiplied observations
observations yield
yield recurrence
relation closed
exercises simply
simply establish
growth master
theorem nlog
nlog words
words additions
additions growth
growth multiplications
multiplications puts
puts strassen
algorithm nlog
nlog efficiency
strassen discovery
discovery algorithms
algorithms multiplying
matrices real
numbers progressively
progressively smaller
smaller constants
constants invented
invented fastest
algorithm coopersmith
coopersmith winograd
winograd coo
coo efficiency
efficiency decreasing
values exponents
exponents obtained
obtained expense
expense increasing
increasing complexity
complexity algorithms
algorithms large
large multiplicative
constants practical
practical interesting
interesting theoretical
theoretical view
view closer
closer theoretical
theoretical lower
bound matrix
multiplication multiplications
multiplications gap
gap bound
remains unresolved
unresolved matrix
multiplication computationally
computationally equivalent
equivalent important
equations discussed
exercises smallest
product decimal
integers compute
compute applying
text prove
equality alogb
clogb section
section nlog
nlog log
log closed
formula multiplications
addition assuming
assuming power
power sake
simplicity subtle
subtle assumption
assumption setting
setting recurrences
recurrences true
true final
final answers
answers assumption
assumption digit
additions pen
integers disregard
disregard potential
potential carries
carries verify
verify formulas
formulas underlying
underlying strassen
matrices apply
apply strassen
compute exiting
exiting recursion
recursion computing
matrices brute
additions required
required strassen
strassen algo
assume power
power pan
pan discovered
discovered conquer
conquer matrix
based multiplying
multiplications asymptotic
efficiency pan
pan algorithm
practical implementations
implementations strassen
method matrix
matrix sizes
crossover run
determine crossover
crossover closest
problems conquer
conquer section
solving classic
dimensional versions
versions problems
discuss sophisticated
sophisticated asymptotically
asymptotically efficient
problems based
technique closest
plane sake
points ordered
coordinate sort
sort efficeint
efficeint sorting
mergesort convenient
convenient points
coordinate denote
denote problem
solved obvious
obvious brute
points subsets
subsets points
points drawing
drawing vertical
vertical line
line median
median coordinates
line solve
idea conquer
problem rectangle
dmin recursively
recursively subsets
subsets smallest
smallest distances
distances pairs
min necessarily
necessarily smallest
distance pairs
pair sides
sides separating
line combining
subproblems points
points limit
attention points
points symmetric
symmetric vertical
vertical width
line distance
points width
line obtained
obtained ordered
nondecreasing coor
coor dinate
dinate scan
scan updating
updating information
information dmin
distance encounter
encounter closer
points initially
initially dmin
dmin subsequently
subsequently dmin
dmin chance
chance closer
dmin difference
difference coordinates
coordinates dmin
dmin geometri
geometri cally
cally means
means rectangle
rectangle shown
figure principal
insight exploited
exploited algorithm
algorithm observation
observation rectangle
points half
half left
left rectangle
rectangle distance
distance easy
prove total
total points
points rectangle
rectangle exceed
exceed prob
exercises careful
analysis reduces
reduces joh
joh algorithm
points moving
moving pseudocode
algorithm advice
advice section
roots innermost
algorithm efficientclosestpair
efficientclosestpair solves
solves closest
conquer input
plane sorted
coordinates array
coordinates output
output euclidean
points minimal
minimal distance
remaining points
array efficientclosestpair
efficientclosestpair min
min points
dminsq num
dminsq min
min dminsq
dminsq sqrt
sqrt dminsq
dminsq algorithm
algorithm spends
spends linear
linear dividing
problems half
combining obtained
obtained solutions
solutions assuming
assuming usual
usual power
theorem log
log necessity
necessity presort
presort input
points efficiency
class sorting
mergesort fact
class achieve
achieve proved
proved algorithm
log natural
natural assumptions
assumptions operations
pre convex
problem revisit
revisit convex
section smallest
plane conquer
called quickhull
quickhull resemblance
resemblance quicksort
quicksort set
plane assume
coordinates ties
ties resolved
resolved increasing
increasing coordinates
points involved
involved difficult
prove geometrically
geometrically obvious
obvious fact
fact leftmost
rightmost distinct
distinct extreme
hull figure
figure straight
points directed
line separates
separates points
points sets
line left
line directed
directed forms
forms counterclockwise
counterclockwise cite
cite analytical
analytical condition
condition based
checking determinant
determinant formed
formed coordinates
line extreme
hull excluded
excluded consideration
consideration boundary
hull polygonal
polygonal chains
chains upper
boundary lower
boundary upper
called upper
points lower
called lower
points fact
set composed
composed upper
hulls constructed
constructed independently
independently similar
similar fashion
fashion observation
observation exploited
exploited algorithms
problem concreteness
concreteness discuss
discuss quickhull
quickhull proceeds
proceeds construct
construct upper
hull lower
hull constructed
manner figure
figure upper
points pmax
pmax figure
idea quickhull
quickhull upper
hull simply
simply line
endpoints algorithm
identifies pmax
pmax farthest
farthest line
figure maximizes
maximizes angle
angle pmaxppn
pmaxppn selected
selected pmax
pmax maximizes
maximizes area
identifies points
set left
line pmax
pmax points
points make
line make
set difficult
prove pmax
pmax vertex
vertex upper
pmaxpn vertices
hull eliminated
eliminated consideration
consideration points
left lines
lines pmax
pmax algorithm
constructing upper
upper hulls
hulls pmax
pmax recursively
recursively simply
simply concatenate
concatenate upper
geometric operations
operations implemented
implemented fortunately
fortunately advantage
plane area
triangle equal
equal half
half magnitude
magnitude determinant
determinant expression
expression positive
line formula
formula constant
constant lies
lies left
line determined
determined points
points distance
line quickhull
quickhull worst
efficiency quicksort
quicksort problem
exercises average
algorithm benefit
benefit quicksort
quicksort savings
savings average
average balanced
balanced split
split problem
subproblems significant
significant fraction
fraction points
pmaxpn figure
figure eliminated
eliminated processing
processing natural
natural assumption
assumption points
points chosen
chosen randomly
randomly uniform
uniform dis
dis tribution
tribution convex
convex region
region circle
circle rectangle
rectangle average
quickhull turns
turns linear
linear ove
ove exercises
exercises dimensional
dimensional version
version closest
algorithm directly
technique determine
class good
prove conquer
problem examines
examines vertical
vertical figures
figures points
points encountered
encountered algorithm
version conquer
conquer dimensional
set simply
simply sort
sort sets
sets nondecreasing
coordinates recursive
recursive assuming
assuming sorting
mergesort set
relation running
case solve
solve implement
implement conquer
conquer closest
choice web
web visualization
visualization represent
represent voronoi
voronoi polygon
polygon set
defined perimeter
perimeter set
plane closer
closer union
union voronoi
voronoi polygons
polygons points
called voronoi
diagram voronoi
diagram set
points visualization
generating voronoi
diagram web
web study
examples diagrams
diagrams based
observations solution
previous generalized
case pmax
pmax quickhull
algorithm analytically
analytically case
quickhull specific
inputs make
make quickhull
quickhull run
run quadratic
quadratic implement
implement quickhull
quickhull language
choice creating
creating decagons
decagons points
plane line
line devise
construct decagons
decagons vertices
points decagons
decagons convex
convex simple
simple boundary
boundary decagons
decagons common
common shortest
path fenced
fenced area
area dimensional
dimensional clidean
plane shape
shape convex
points necessarily
necessarily points
max design
path oro
oro summary
summary conquer
technique solves
problem dividing
dividing smaller
size solving
solving recursively
recursively combining
technique inapplicable
inapplicable inferior
inferior simpler
simpler algorithmic
solutions running
running conquer
algorithms satisfies
recurrence master
establishes growth
solutions mergesort
mergesort conquer
works dividing
dividing input
array halves
sorted halves
halves original
log cases
cases key
comparisons theoretical
minimum principal
principal drawback
drawback significant
significant extra
storage requirement
requirement quicksort
quicksort conquer
works partitioning
partitioning input
elements relative
relative preselected
preselected element
element quicksort
quicksort noted
noted superior
superior efficiency
sorting randomly
arrays quadratic
traversals binary
postorder similar
similar algorithms
require recursive
recursive processing
processing left
examples conquer
technique analysis
analysis helped
helped replacing
subtrees tree
special external
nodes conquer
requires digit
multiplications matrices
matrices exploiting
exploiting conquer
multiplications conquer
technique successfully
successfully applied
root tree
path root
shown bold
write pseudocode
things mercy
mercy things
things johann
johann wolfgang
wolfgang von
von ethe
ethe space
computing problem
computing values
points domain
domain premium
premium precompute
precompute function
table human
human computers
computers advent
advent electronic
computers process
process burdening
burdening libraries
libraries volumes
volumes mathematical
mathematical tables
tables lost
lost appeal
appeal widespread
widespread electronic
computers underlying
idea proven
proven development
development important
terms idea
afterward approach
approach input
enhancement discuss
counting methods
methods sorting
section boyer
matching simplified
version sug
sug gested
horspool section
offs simply
simply extra
data approach
approach prestructuring
prestructuring highlights
highlights facets
facets variation
variation space
space processing
processing problem
standard terms
terms synonymously
synonymously technique
technique preprocessing
preprocessing preconditioning
preconditioning confusingly
confusingly terms
terms applied
applied methods
methods idea
idea preprocessing
preprocessing extra
space chapter
chapter confusion
confusion input
enhancement special
special space
space technique
solved input
enhancement variety
variety deals
deals access
access structuring
structuring illustrate
illustrate approach
approach hashing
section indexing
indexing trees
technique related
related space
space idea
idea dynamic
programming strategy
strategy based
based recording
solu tions
tions overlapping
solu tion
discuss developed
developed technique
technique separately
separately chapter
chapter final
final comments
comments interplay
interplay space
design resources
space design
design situations
situations fact
fact align
align bring
bring algorithmic
solution minimizes
minimizes running
running space
space consumed
consumed situation
arises algorithm
represent problem
input leads
problem traversing
traversing graphs
graphs efficiency
breadth depends
repre senting
senting graphs
numbers vertices
edges input
input graphs
graphs sparse
sparse edges
representation efficient
space running
running points
points view
view situation
arises manipulation
manipulation sparse
matrices sparse
sparse polynomi
polynomi als
als percentage
percentage zeros
objects sufficiently
sufficiently high
high space
space ignoring
ignoring zeros
objects representation
representation processing
processing discuss
discuss space
offs mentioning
mentioning hugely
hugely important
important area
area data
compression data
sion size
reduction goal
goal technique
discuss data
chapter reader
interested topic
topic wealth
wealth algorithms
algorithms books
books sorting
sorting counting
counting applying
applying input
enhancement technique
obvious idea
idea element
sorted total
element results
numbers positions
index counting
counting sorted
simply copying
copying elements
counting sort
array initially
initially final
sorting comparison
nondecreasing efficiency
algorithm considers
considers pairs
array formally
formally times
executed equal
sum encountered
encountered times
addition linear
space positive
positive algorithm
minimum key
moves placing
placing directly
directly final
counting idea
idea productively
productively situation
situation elements
sorted small
values assume
assume sort
sort values
values applying
applying general
general sorting
algorithm advantage
advantage additional
information values
simply make
make elements
equal remaining
equal generally
generally element
element values
integers lower
bound compute
compute frequency
frequency values
values array
sorted filled
filled positions
positions overwrite
elements realistic
realistic situation
situation sorting
sorting items
information keys
keys overwrite
elements values
values equal
equal lowest
lowest copied
copied elements
elements copied
copied positions
positions accumulated
accumulated sums
sums frequencies
frequencies called
called distribution
distribution statistics
statistics method
method distribution
counting sorting
values set
set overwritten
overwritten process
sorting frequency
frequency distribution
distribution arrays
values frequencies
frequencies distribution
values distribution
values proper
proper positions
positions rences
rences elements
elements final
final sorted
positions distribution
values reduced
reduced element
element positions
positions convenient
convenient process
process input
element distribution
distribution position
sorted decrease
decrease distribution
distribution proceed
proceed element
array entire
entire processing
processing depicted
counting distribution
values decremented
decremented shown
algorithm distributioncountingsort
distributioncountingsort sorts
range distribution
nondecreasing initialize
initialize frequencies
frequencies compute
frequencies reuse
reuse distribution
distribution downto
downto assuming
assuming range
values fixed
fixed linear
makes consecutive
consecutive passes
passes input
class efficient
heapsort encountered
encountered important
obtained exploiting
exploiting specific
specific nature
nature inputs
inputs sorting
counting works
works addition
addition trading
space exercises
exercises exchange
exchange numeric
numeric values
variables extra
storage comparison
correctly arrays
values assuming
assuming set
alphabetical distribution
algorithm distribution
stable design
size values
values distinct
integers ancestry
ancestry problem
asks determine
ancestor vertex
binary generally
generally rooted
rooted ordered
design input
enhancement algorithm
algorithm sufficient
sufficient information
information solve
pair tree
vertices constant
constant technique
technique virtual
virtual initialization
initialization efficient
efficient initialize
initialize elements
elements constant
constant initialized
initialized utilizing
utilizing variable
variable counter
auxiliary arrays
size defined
defined counter
counter indices
elements initialized
initialized kth
element counter
initialized sketch
sketch state
state arrays
arrays signments
signments general
general scheme
scheme initialized
initialized distance
distance sorting
sorting egyptian
egyptian stone
stone statues
statues standing
row art
art gallery
gallery hall
hall curator
curator statues
statues ordered
ordered height
height minimize
total distance
distance statues
statues moved
moved assume
simplicity statues
statues heights
heights azi
azi write
matrices matrix
matrix write
sparse polynomials
polynomials degrees
degrees good
idea write
write plays
plays classic
classic game
game tic
tic tac
tac toe
toe human
human user
user storing
storing positions
positions game
board input
enhancement string
matching section
technique input
enhancement applied
recall problem
matching requires
finding occurrence
occurrence string
pattern longer
longer string
text discussed
section simply
simply matches
text left
left mismatch
occurs shifts
position trial
trial maximum
maximum trials
trials worst
class average
shift random
texts average
turns faster
algorithms discovered
discovered exploit
exploit input
enhancement idea
preprocess pattern
pattern information
information table
table information
information actual
text idea
idea bestknown
bestknown algorithms
algorithms knuth
knuth morris
morris pratt
knu boyer
algorithm boy
boy principal
difference algorithms
algorithms lies
lies characters
text knuthmorris
knuthmorris pratt
left idea
idea leads
leads simpler
algorithms pursue
pursue boyer
starts aligning
beginning characters
text trial
trial fails
fails shifts
pattern comparisons
comparisons trial
trial algorithm
left starting
pattern underlying
simple actual
implementation working
working method
method discussion
discussion simplified
hor addition
addition simpler
simpler horspool
efficient boyer
random strings
strings horspool
starting pattern
pattern moving
characters successfully
substring stopped
stopped altogether
altogether continued
continued occurrence
pattern desired
desired mismatch
occurs shift
make large
shift risking
risking possibility
possibility missing
determines size
character matches
matches counterpart
pattern general
general possibilities
possibilities case
letter safely
safely shift
length shift
case occurrences
occurrences character
shift align
align rightmost
text case
pattern shifted
shifted entire
length case
case finally
case rightmost
occurrence characters
text examples
examples demonstrate
demonstrate left
left character
comparisons lead
lead farther
farther shifts
position brute
pattern trial
trial lose
lose superiority
superiority fortunately
fortunately idea
idea input
enhancement makes
makes repetitive
repetitive comparisons
comparisons unnecessary
unnecessary precompute
precompute shift
sizes table
table indexed
indexed characters
characters encountered
text natural
texts space
space punctuation
punctuation symbols
symbols special
characters information
information text
text eventual
eventual searching
searching required
required table
entries shift
barber table
entries equal
equal entries
entries simple
computing shift
initialize entries
entries pattern
length scan
scan pattern
left repeating
times character
pattern overwrite
overwrite entry
table character
character distance
distance character
scans pattern
left overwrite
overwrite character
occurrence algorithm
algorithm shifttable
shifttable fills
fills shift
horspool boyer
moore algorithms
algorithms input
characters output
output table
size indexed
indexed alphabet
characters filled
filled shift
formula size
size table
summarize algorithm
algorithm horspool
length alphabet
table align
column shift
character aligned
text pseudocode
pseudocode horspool
algorithm horspoolmatching
horspoolmatching implements
implements horspool
text output
left matching
substring matches
matches shifttable
shifttable generate
generate table
position pattern
pattern matched
characters table
table application
application horspool
comprises english
spaces denoted
denoted underscores
underscores shift
table mentioned
mentioned filled
filled character
character shift
shift actual
actual text
text proceeds
proceeds simple
demonstrate worst
exercises random
texts efficiency
class horspool
average brute
fact mentioned
mentioned efficient
efficient sophisticated
sophisticated predecessor
predecessor discovered
discovered boyer
moore boyer
outline boyer
comparison rightmost
rightmost character
text fails
algorithm thing
thing horspool
characters retrieved
table precomputed
precomputed explained
earlier algorithms
algorithms act
act differently
differently positive
positive pattern
successfully mismatch
mismatch encountered
pattern situation
situation boyer
determines shift
size quantities
quantities guided
guided text
character caused
caused mismatch
mismatch counterpart
pattern called
called badsymbol
badsymbol shift
reasoning shift
reasoning horspool
text conveniently
conveniently size
formula entry
entry precomputed
precomputed table
algorithm matched
letter text
positions formula
formula mismatching
mismatching character
text occurs
occurs pattern
pattern provided
provided pattern
positions shift
pattern negative
negative positions
positions fall
fall brute
brute thinking
thinking simply
simply shift
position summarize
summarize bad
computed boyer
algorithm quantity
quantity positive
negative expressed
expressed compact
compact formula
max shift
shift guided
guided successful
successful characters
pattern refer
refer ending
ending portion
portion pattern
size denote
denote suff
suff shift
shift good
shift apply
apply reasoning
reasoning guided
guided filling
filling bad
table based
based single
single alphabet
pattern suffixes
suffixes sizes
sizes good
table case
suff pattern
pattern accurate
accurate occurrence
occurrence useless
useless shift
pattern occurrence
character simply
simply failed
failed trial
trial case
occurrence preceded
suff rightmost
abcbab distances
distances pattern
abcbab occurrence
occurrence cases
cases shift
dbcbab shift
characters shifting
length occurrence
abcbab shifting
shifting matching
substring starts
starts text
aligned characters
dbcbab abcbab
substring prefix
prefix beginning
beginning pattern
suffix ending
ending pattern
pattern erroneous
erroneous shift
shift based
based suffix
size occurrence
pattern preceded
occurrence longest
longest prefix
prefix size
size matches
matches suffix
size prefix
prefix exists
exists shift
computed distance
distance prefix
prefix suffix
suffix set
set pattern
length values
values good
abcbab prepared
prepared summarize
summarize boyer
entirety boyer
construct bad
earlier pattern
construct good
earlier align
encountered character
successfully case
column bad
character retrieve
entry good
positions computed
max shifting
shifting maximum
maximum shifts
shifts log
log ical
ical shifts
shifts based
observations text
character matched
matched group
group pattern
pattern rightmost
characters imply
imply shifting
shifting characters
characters spectively
spectively lead
lead aligning
interested shifting
pattern missing
substring maximum
numbers searching
text english
spaces bad
baobab actual
text figure
figure proceeds
proceeds pattern
pattern fails
fails counterpart
shifts tern
tern max
max positions
positions successfully
characters failure
suffix leads
pattern successfully
matches pair
pair failure
shift max
figure string
matching boyer
iteration bad
symbol leads
pattern finds
finds matching
text successfully
matching characters
text searching
searching occurrence
pattern worst
ciency boyer
fast large
large alphabets
alphabets relative
relative length
pattern people
people simplified
versions horspool
algorithm dealing
dealing natural
language strings
strings exercises
text bess
bess knew
knew baobabs
baobabs problem
searching genes
genes dna
sequences hor
algorithm dna
sequence represented
represented text
text alphabet
segment pattern
segment chromo
chromo tcctattctt
tcctattctt apply
algorithm locate
locate pattern
pattern dna
sequence ttatagatctcgtattcttttatagatctcctattctt
ttatagatctcgtattcttttatagatctcctattctt character
comparisons horspool
zeros searching
searching text
length horspool
input horspool
algorithm discovers
discovers matching
substring large
shift make
comparisons boyer
zeros boyer
correctly bad
shifts boyer
correctly good
shifts characters
implement horspool
algorithm boyer
experiment efficiencies
efficiencies matching
matching random
binary patterns
patterns random
binary texts
texts random
language patterns
patterns natural
texts strings
characters establish
establish cyclic
shift plea
plea cyclic
shift leap
leap vice
versa formally
formally cyclic
shift obtained
obtained concatenating
concatenating character
character suffix
suffix character
character prefix
prefix design
design space
algorithm hashing
implement dictionaries
dictionaries recall
recall dictionary
searching lookup
lookup insertion
deletion defined
defined elements
set arbitrary
arbitrary nature
nature numbers
strings practice
practice important
records school
school citizen
citizen records
records governmental
governmental office
office records
records library
library typically
typically records
records comprise
comprise fields
fields responsible
responsible keeping
keeping information
information entity
entity represents
represents student
student fields
fields student
student date
birth sex
sex home
address major
major fields
fields called
key identifying
identifying entities
entities represented
represented records
student discussion
discussion assume
dictionary records
hashing based
idea distributing
table distribution
distribution computing
computing keys
keys predefined
predefined function
function assigns
assigns integer
hash address
address key
keys nonnegative
integers hash
division keys
assign letter
letter position
position alphabet
alphabet denoted
denoted ord
ord apply
apply kind
kind function
function integers
integers finally
string unsophisticated
unsophisticated option
option mod
mod option
option compute
compute ord
mod constant
constant larger
ord general
general hash
function conflicting
conflicting require
require ments
ments hash
size excessively
large compared
compared keys
keys sufficient
sufficient jeopardize
jeopardize implementation
implementation efficiency
function distribute
distribute keys
evenly requirement
requirement makes
makes desirable
desirable applications
applications hash
function dependent
dependent bits
key hash
function easy
easy compute
compute obtained
treating ord
ord digits
digits based
computing decimal
decimal horner
horner finding
finding remainder
remainder dividing
dividing figure
hashing choose
choose hash
size smaller
keys collisions
collisions phenomenon
phenomenon keys
figure collisions
collisions expected
expected considerably
considerably larger
fact worst
table fortunately
fortunately appropriately
appropriately chosen
chosen hash
size good
good hash
function situation
situation rarely
rarely hashing
scheme collision
principal versions
versions hashing
called chaining
chaining closed
called addressing
addressing hashing
chaining hashing
lists attached
attached cells
table keys
words money
function simple
function strings
strings mentioned
mentioned positions
positions word
word letters
alphabet compute
sum remainder
division table
table key
hash mod
mod key
word installed
installed ninth
ninth cell
cell mod
mod final
result process
process figure
keys mod
mod dictionary
implemented table
lists simply
simply applying
key procedure
procedure creating
creating table
table illustrate
illustrate key
kid hash
figure compute
compute hash
kid attached
attached cell
cell linked
linked key
key collisions
collisions case
case traverse
traverse linked
linked comparing
string kid
kid string
unsuccessful general
general efficiency
searching depends
depends lengths
lengths linked
lists dictionary
dictionary table
table sizes
sizes quality
quality keys
parted figure
construction chaining
chaining hash
function hash
evenly keys
keys ratio
ratio called
called factor
factor hash
table plays
plays crucial
crucial role
role efficiency
hashing average
average pointers
pointers chain
chain links
links inspected
inspected successful
searches turns
turns standard
assumptions searching
randomly selected
element hash
function distributing
keys uniformly
uniformly table
table cells
cells results
results natural
natural identical
searching sequentially
sequentially linked
linked gained
gained hashing
hashing reduction
reduction average
average size
factor size
factor small
small imply
imply lot
lot lists
lists inefficient
inefficient space
space large
large longer
longer times
times factor
factor amazingly
amazingly efficient
efficient scheme
key average
average price
price comparisons
comparisons true
true addition
addition comparisons
comparisons spend
spend computing
key constant
operation independent
independent remarkable
remarkable efficiency
result method
method ingenuity
ingenuity expense
expense extra
space dictionary
deletion identical
searching insertions
insertions problem
exercises modification
modification deletion
deletion performed
performed searching
deleted removing
removing efficiency
efficiency operations
operations identical
searching average
equal hash
size closed
addressing closed
stored hash
lists implies
implies table
large keys
keys strategies
strategies employed
employed collision
resolution simplest
simplest called
probing checks
checks cell
cell collision
collision occurs
occurs cell
cell key
key installed
installed cell
cell occupied
occupied availability
availability cell
cell successor
successor checked
checked hash
table reached
reached wrapped
wrapped beginning
beginning table
table treated
treated circular
circular array
array method
figure word
function illustrate
illustrate chaining
chaining key
key computing
function table
construction cell
unsuccessful cell
cell occupant
occupant equal
equal matching
key cell
cell manner
manner encounter
encounter matching
successful cell
unsuccessful word
word lit
lit table
figure lit
lit mod
mod cell
cell immediately
immediately kid
kid mod
mod kid
kid parted
parted declare
declare unsuccessful
unsuccessful insertion
insertion operations
operations straightforward
hashing deletion
deletion simply
simply delete
delete key
key state
figure unable
unable key
key afterward
afterward computing
algorithm location
location unsuccessful
unsuccessful result
result simple
simple solution
solution keys
parted money
money figure
construction linear
probing lazy
lazy deletion
deletion previously
previously occupied
occupied locations
locations special
symbol distinguish
distinguish locations
locations occupied
occupied mathematical
analysis linear
probing difficult
problem chaining
chaining simplified
versions results
results state
state average
average times
algorithm access
access hash
factor successful
searches accuracy
accuracy approximations
approximations increases
increases larger
larger sizes
sizes hash
numbers surprisingly
small densely
densely populated
populated tables
tables large
large percentage
percentage values
values hash
table closer
closer performance
performance linear
linear prob
prob ing
ing deteriorates
deteriorates phenomenon
called clustering
clustering cluster
cluster linear
sequence contiguously
contiguously occupied
occupied cells
cells wrapping
wrapping final
figure clusters
clus ters
ters bad
news hashing
hashing make
make dictionary
operations efficient
efficient clusters
clusters larger
larger probability
probability element
element attached
attached cluster
cluster increases
increases addition
addition large
large clusters
clusters probabil
probabil ity
ity clusters
clusters coalesce
coalesce key
insertion causing
causing clustering
clustering collision
resolution strategies
strategies suggested
suggested alleviate
alleviate problem
important hashing
scheme hash
function determine
fixed increment
increment probing
sequence collision
collision location
location mod
mod location
location table
table probed
probed sequence
sequence incre
incre ment
ment table
size prime
divisor condition
satisfied automatically
automatically prime
prime functions
functions recommended
recommended literature
literature mod
small tables
tables mod
mod larger
solved young
young graduate
student mathematics
mathematics named
named donald
knuth important
important scientists
scientists multivolume
multivolume treatise
treatise art
art programming
programming knui
knuiii knuiv
knuiv remains
remains comprehensive
comprehensive influential
influential algorithmics
algorithmics published
published mathematical
analysis hashing
hashing proved
difficult partial
partial results
results considerable
considerable practical
experience method
method good
good hashing
hashing functions
functions primary
primary secondary
secondary hashing
hashing perior
perior linear
probing performance
performance deteriorates
deteriorates table
table natural
natural solution
situation rehashing
rehashing current
table scanned
scanned keys
keys relocated
relocated larger
larger table
table worthwhile
worthwhile main
main properties
properties hashing
principal competitor
competitor implementing
dictionaries asymptotic
hashing searching
deletion implemented
implemented average
case balanced
trees average
average efficiencies
efficiencies log
cases ordering
ordering preservation
preservation balanced
trees hashing
hashing assume
assume existence
existence key
key ordering
ordering makes
makes hashing
hashing suitable
suitable applications
applications iterate
iterate keys
keys der
der require
require range
range queries
queries counting
counting keys
keys lower
bounds discovery
discovery ibm
ibm researchers
researchers hashing
hashing important
applications standard
standard technique
technique stor
stor ing
table symbols
symbols generated
generated compilation
compilation hashing
hashing handy
handy applications
applications checking
positions generated
generated chess
chess playing
playing sidered
sidered modifications
modifications proved
proved storing
dictionaries disks
disks variation
variation hashing
called extendible
disk access
access expensive
expensive compared
compared probes
probes performed
performed main
mem ory
ory preferable
preferable make
make probes
probes disk
accesses location
location computed
computed hash
function extendible
disk bucket
bucket hold
hold keys
key bucket
bucket identified
identified keys
keys read
read main
memory searched
searched key
key section
discuss trees
alternative storing
dictionaries exercises
exercises input
construct hash
table input
construct closed
closed hash
idea hash
function letter
letter natural
language word
word probability
probability keys
keys evenly
evenly cells
table birthday
paradox birthday
paradox asks
asks people
people room
room chances
chances birthday
birthday month
month day
day unexpected
unexpected problem
problem implication
implication hashing
hashing result
questions chaining
chaining version
hashing insert
insert keys
keys knew
knew keys
keys dictionary
dictionary distinct
distinct dictionary
modification keys
keys linked
linked sorted
sorted dictio
dictio nary
modification advantage
advantage keys
stored entire
entire table
table sorted
sorted hashing
hashing elements
distinct efficiency
efficiency application
application efficiency
section presorting
entry worst
entry efficiency
classes implementations
implementations adt
adt dictionary
dictionary unordered
unordered ordered
ordered binary
binary balanced
balanced array
array tree
tree hashing
hashing insertion
deletion discussed
discussed hashing
hashing context
context techniques
based space
offs takes
advantage general
strategy write
write hashing
hashing problem
text generate
generate distinct
distinct words
words occurrences
occurrences word
text insert
insert counters
counters pro
gram empirical
empirical efficiency
hashing theoretical
theoretical results
results figure
figure parental
trees idea
idea extra
faster access
large records
records stored
disk principal
principal device
device organizing
sets index
information location
location records
records key
values data
sets structured
structured records
records opposed
opposed unstruc
unstruc tured
tured data
data text
text images
images video
video important
important index
index organization
organization tree
introduced bayer
bayer mcgreight
mcgreight bay
bay extends
extends idea
section permitting
permitting single
tree version
version data
stored leaves
leaves increasing
increasing keys
keys parental
nodes indexing
indexing specifically
specifically parental
keys assumed
assumed sake
simplicity distinct
keys interposed
interposed pointers
equal smaller
key subtree
addition tree
tree structural
structural properties
properties root
leaf children
children node
leaves children
balanced leaves
leaves node
node depicted
nodes classic
section comprises
comprises nodes
figure searching
similar searching
root chain
chain pointers
pointers leaf
keys leaf
stored sorted
sorted parental
binary keys
node large
large make
make worthwhile
worthwhile key
comparisons concerned
concerned typical
application data
structure storing
data disk
disk nodes
correspond disk
disk pages
pages needed
access disk
disk page
page typically
typically orders
magnitude larger
larger needed
needed keys
keys fast
memory disk
accesses principal
indicator efficiency
efficiency similar
similar data
structures nodes
tree access
access key
tree estimate
estimate height
positive height
height root
key nodes
keys total
keys nodes
nodes children
children nodes
nodes total
general nodes
keys finally
finally leaf
leaf nodes
height inequality
inequality series
series standard
standard simplifications
simplifications problem
exercises inequality
inequality reduces
reduces yields
inequality immediately
implies searching
important ascertain
class actual
actual disk
accesses implied
implied formula
formula table
values estimates
estimates records
records typical
typical values
values tree
tree upper
bound mind
mind table
entries upper
upper estimates
estimates disk
accesses actual
applications rarely
rarely exceeds
exceeds tree
root nodes
nodes stored
stored fast
memory minimize
minimize disk
accesses operations
deletion straightforward
straightforward ing
outline insertion
algorithm deletion
deletion algorithm
algorithm references
references aho
aho cor
cor straightforward
algorithm inserting
insertion tree
tree outlined
procedure key
leaf room
leaf position
position keys
sorted room
leaf split
split half
half sending
sending half
half records
records node
node smallest
pointer inserted
parent immediately
immediately key
key pointer
pointer leaf
leaf recursive
recursive procedure
procedure percolate
percolate tree
created halves
halves root
keys split
split children
children root
shows result
result inserting
figure restriction
restriction leaves
leaves items
items aware
aware algorithms
algorithms implementing
implementing inser
inser tions
tree possibility
possibility recursive
nodes encountered
encountered searching
searching leaf
leaf possibility
possibility node
splits moving
moving key
node sibling
sibling inserting
figure moving
moving smallest
leaf sibling
sibling keys
keys replacing
replacing key
parent smallest
smallest figure
child modification
modification space
space expense
expense slightly
slightly complicated
complicated algorithm
tree indexing
indexing large
large considered
tree varieties
varieties types
trees btree
btree constructed
insertions data
records initially
tree considered
keys reside
reside leaves
leaves upper
upper levels
levels organized
organized tree
tree comprising
comprising index
index entire
entire structure
called fact
tree exercises
examples index
index real
applications involve
involve computers
computers prove
equality derivation
derivation upper
tree derivation
derivation inequality
inequality minimum
minimum tree
tree guarantees
guarantees disk
accesses searching
searching records
records exceed
exceed assume
assume root
root page
page stored
stored main
memory draw
assume leaf
leaf items
items outline
tree modifica
modifica tion
operation leaf
key encounters
encounters node
nodes sending
sending middle
node parent
root middle
key created
created construct
inserting keys
keys initially
advantage insertion
insertion procedure
procedure compared
compared trees
section disadvantage
disadvantage write
implementing key
visualization key
tree summary
summary space
technique trading
space prevalent
prevalent trading
space input
enhancement principal
varieties trading
afterward sorting
counting important
matching examples
technique distribution
counting special
special method
method sorting
sorting lists
lists elements
values horspool
matching considered
considered simplified
ideas input
enhancement left
left comparisons
characters algorithms
algorithms bad
moore table
table called
called good
table prestructuring
prestructuring technique
offs extra
data hashing
hashing trees
examples prestructuring
prestructuring hashing
hashing efficient
efficient approach
approach implementing
dictionaries based
idea mapping
mapping keys
size limitations
limitations table
table make
make collision
varieties hashing
chaining keys
lists hash
table closed
addressing keys
stored table
table enable
enable searching
deletion average
average tree
tree generalizes
generalizes idea
allowing multiple
multiple keys
node principal
tree keeping
keeping index
disk choosing
choosing tree
tree appropriately
appropriately implement
deletion disk
accesses extremely
problem instance
matrix graph
directed paths
directed path
tree set
undirected directed
version algorithm
solution recurrence
space efficient
underlying idea
algorithm shortest
weights values
ming algorithm
algorithms areas
finding greatest
factors prime
consecutive primes
algorithm sieve
required algorithm
integers euclid
divisions euclid
set instances
american mathematician
speed memory
algorithm important
definite integrals
problems involving
problems areas
designing algorithms
general techniques
review basic
algorithm designed
algorithm simplicity
algorithmic solutions
problems algorithm
finding real
eat goat
problems combinatorial
called key
generally speaking
world applications
graph algorithms
wide variety
transportation communication
algorithms graph
obvious applications
important elementary
called binary
linked node
operation called
vertices pair
edge graph
equal edge
edge ith
figure path
vertex listed
trees fact
longest simple
tree levels
tree representation
set defined
represented bit
implementation dictionary
stack operation
sequence starts
group algorithms
sequence adjacent
adjacency lists
greed lack
lack word
word good
good greed
greed works
works michael
michael douglas
douglas actor
actor role
role gordon
gordon gecko
gecko wall
wall street
street revisit
revisit making
problem faced
faced subconsciously
subconsciously millions
millions cashiers
cashiers world
world specific
specific coins
denominations locale
locale section
section assume
assume denominations
denominations ordered
ordered decreasing
decreasing widely
widely coin
states quarter
quarter dime
dime nickel
nickel penny
penny coins
denominations cents
cents quarter
quarter dimes
dimes pennies
pennies consciously
consciously logical
logical strategy
strategy making
making sequence
sequence choices
choices alternatives
alternatives coin
denominations greedy
greedy thinking
thinking leads
leads giving
giving quarter
quarter reduces
reduces remaining
cents coins
coins disposal
disposal quarter
quarter violated
violated problem
constraints selection
selection dime
dime reducing
reducing remaining
cents giving
giving dime
dime left
left cents
cents pennies
pennies solution
instance making
optimal fact
solution positive
integer coin
denominations easy
easy coin
denominations yield
solution amounts
amounts approach
approach applied
applied opening
opening paragraph
paragraph making
called greedy
greedy scientists
scientists general
technique fact
fact applicable
applicable optimization
approach suggests
steps panding
panding partially
reached central
central technique
technique choice
constraints locally
optimal local
local choice
feasible choices
choices irrevocable
irrevocable changed
changed subsequent
subsequent steps
algorithm requirements
requirements technique
suggests greedy
greedy alternative
alternative sequence
yield globally
globally optimal
solution entire
entire problem
problem refrain
refrain philosophical
philosophical discussion
discussion greed
greed good
good bad
bad movie
movie chapter
epigraph hero
hero algorithmic
algorithmic perspective
perspective greedy
strategy works
works problems
problems sequence
case problems
interested satisfied
satisfied approximate
solution sections
classic algorithms
algorithms minimum
problem prim
algorithm remarkable
remarkable algorithms
problem applying
applying greedy
approach ways
ways yield
solution section
section classic
devoted huffman
codes important
compression method
method interpreted
application greedy
technique finally
finally examples
examples approximation
approach discussed
algorithms intuitively
intuitively appealing
appealing simple
simple optimization
problem easy
proceed greedy
manner possibly
possibly small
solution common
common ways
ways illustrated
illustrated proof
section mathematical
induction partially
iteration extended
extended optimal
prove optimality
optimality greedy
algorithm advancing
advancing problem
problem goal
goal problem
minimum moves
needed chess
chess knight
knight corner
corner knight
knight moves
moves shaped
shaped jumps
jumps squares
squares horizontally
square perpendicular
perpendicular direction
direction greedy
greedy solution
solution goal
goal finish
finish squares
squares sequence
moves solves
problem advances
advances obtained
obtained equation
equation minimum
minimum solution
solution distance
distance goal
goal manhattan
distance sum
row numbers
difference column
column numbers
numbers squares
squares greedy
algorithm decreases
decreases knight
knight simply
simply final
result obtained
optimal based
output operates
operates problem
problem placing
placing maximum
adjacent vertically
horizontally diagonally
diagonally squares
squares prescription
prescription greedy
strategy chip
chip leave
leave squares
squares chips
chips starting
starting upper
chips shown
optimal partition
board squares
squares shown
figure impossible
impossible chip
chip squares
squares implies
implies total
total nonadjacent
nonadjacent chips
board exceed
exceed final
comment mention
mention sophisticated
sophisticated theory
theory developed
developed greedy
based abstract
abstract combinatorial
combinatorial structure
called matroid
matroid interested
reader books
cor variety
variety internet
internet resources
resources subject
subject figure
figure placement
placement chips
adjacent squares
squares partition
board proving
proving impossibility
impossibility placing
placing chips
chips graph
graph spanning
arises naturally
naturally practical
practical situations
situations points
points cheapest
cheapest path
path ery
ery pair
direct applications
design kinds
kinds networks
networks communication
communication transportation
transportation electrical
electrical providing
providing cheapest
cheapest achieve
achieve connectivity
connectivity identifies
identifies clusters
clusters points
points data
sets classification
classification purposes
purposes archeology
archeology biology
biology sociology
sociology sciences
sciences helpful
helpful constructing
constructing approximate
approximate solutions
solutions difficult
section represent
represent points
graph connections
connections graph
edges connection
connection costs
costs edge
weights posed
posed minimum
problem defined
defined formally
formally definition
definition spanning
undirected connected
presents simple
simple illustrating
illustrating notions
notions constructing
tree exhaustive
exhaustive obstacles
obstacles spanning
trees grows
exponentially graph
graph size
size dense
graphs generating
generating spanning
easy fact
difficult finding
outline prim
pri robert
robert prim
prim rediscovered
rediscovered algorithm
earlier czech
czech mathematician
mathematician vojte
vojte jarni
jarni czech
czech journal
journal prim
sequence expanding
expanding subtrees
subtrees initial
initial subtree
subtree sequence
sequence consists
selected arbitrarily
vertices iteration
expands current
manner simply
simply attaching
attaching nearest
tree nearest
edge smallest
arbitrarily algorithm
stops graph
vertices included
included tree
expands tree
vertex iterations
iterations total
iterations vertices
tree generated
obtained set
tree expansions
expansions pseudocode
vertices initialized
initialized vertex
edges nature
nature prim
makes vertex
vertex current
information shortest
information attaching
attaching labels
length weight
vertices indicating
indicating infinite
infinite distance
distance tree
vertices null
null nearest
vertex alternatively
alternatively split
split vertices
tree sets
sets fringe
unseen fringe
vertex candidates
candidates tree
selected unseen
called unseen
unseen affected
affected algorithm
algorithm labels
labels finding
added current
distance set
set ties
remaining vertex
connected shorter
shorter edge
distance update
labels weight
graph prim
prove induction
induction subtrees
subtrees generated
algorithm subgraph
subgraph minimum
tree immediately
implies tree
sequence minimum
graph basis
basis induction
induction trivial
trivial consists
tree inductive
inductive assume
assume minimum
prove generated
prove contradiction
contradiction assuming
assuming minimum
vertex prim
tree formed
formed figure
vertex coincides
coincides delete
edge spanning
entire graph
weight spanning
tree contradicts
tree completes
completes correctness
efficient prim
structures chosen
chosen graph
priority set
vertex priorities
priorities distances
distances nearest
vertices figure
set operates
operates priority
priority graph
running iterations
iterations array
array implementing
priority traversed
traversed delete
minimum update
update priorities
priorities remaining
vertices implement
implement priority
min mirror
image structure
structure discussed
fact plemented
plemented constructing
constructing negating
negating key
values min
equal implementation
implementation fringe
unseen split
split pursued
pursued unseen
adjacent moved
moved fringe
fringe tree
algorithm parenthesized
parenthesized labels
vertex middle
middle column
column nearest
selected vertices
figure correctness
algorithm children
children principal
principal properties
heaps valid
valid min
min heaps
heaps obvious
obvious modifications
modifications root
root min
min smallest
element deletion
deletion smallest
insertion element
log operations
operation changing
priority problem
priority plemented
plemented min
min running
performs deletions
deletions smallest
element makes
makes verifications
verifications possibly
possibly element
size exceeding
exceeding operations
operations noted
noted earlier
earlier log
operation running
running implementation
implementation prim
log connected
manner prim
pseudocode greedy
input efficiency
algorithm assignment
solution job
job scheduling
scheduling problem
problem scheduling
scheduling jobs
jobs dura
dura tions
execution single
processor jobs
jobs executed
executed job
job schedule
schedule minimizes
minimizes total
total spent
spent jobs
jobs spent
job sum
job waiting
waiting spent
spent execution
execution design
solution compatible
compatible intervals
line representing
representing times
times activity
activity requiring
requiring resource
resource task
task largest
largest intervals
intervals overlap
overlap investigate
investigate greedy
based earliest
earliest shortest
shortest duration
duration earliest
earliest finish
finish algorithms
solution counterexample
counterexample showing
showing case
case bridge
crossing revisited
revisited generalization
generalization bridge
exercises people
crossing times
times conditions
conditions problem
problem people
bridge speed
speed slower
slower flashlight
flashlight group
problem bridge
bridge algorithm
crossing instance
instance smallest
smallest people
people averaging
averaging identical
identical vessels
vessels pints
pints allowed
allowed operation
operation vessels
vessels split
split total
total equally
equally achieve
achieve minimum
minimum vessel
vessel initial
initial set
set sequence
operations rumor
rumor spreading
spreading people
people possession
possession rumor
rumor rumors
rumors sending
sending electronic
electronic messages
messages assume
assume sender
sender includes
includes rumors
rumors message
message addressee
addressee design
yields minimum
minimum messages
messages send
send rumors
rumors bachet
bachet problem
problem weights
weights optimal
set weights
weights scale
scale integer
integer largest
largest range
range provided
provided weights
weights free
free cup
cup scale
weights cups
cups scale
scale apply
priority vertices
tree apply
vertices current
vertex notion
notion minimum
tree applicable
applicable connected
connectivity applying
obtained prim
algorithm gnew
gnew graph
adding vertex
edges weights
weights connecting
vertices struct
struct minimum
tree gnew
gnew adding
edges prim
algorithm spanning
edges good
prove weighted
distinct weights
outline efficient
algorithm changing
section considered
considered greedy
algorithm grows
grows mini
greedy inclusion
inclusion nearest
tree remarkably
remarkably greedy
solution named
named kruskal
algorithm joseph
joseph kruskal
kruskal discovered
algorithm year
year graduate
student kru
kru kruskal
sum edge
weights smallest
smallest difficult
prove subgraph
tree expanding
expanding sequence
sequence subgraphs
subgraphs acyclic
acyclic necessarily
connected inter
mediate stages
stages algorithm
begins sorting
weights starting
starting subgraph
subgraph scans
scans sorted
sorted adding
current subgraph
subgraph inclusion
create simply
simply skipping
skipping edge
edge algorithm
sort nondecreasing
nondecreasing edge
weights ecounter
ecounter initialize
edges size
size initialize
initialize processed
processed edges
edges ecounter
ecounter eik
eik acyclic
acyclic eik
eik ecounter
ecounter correctness
proved repeating
repeating essen
essen tial
tial steps
steps proof
algorithm generally
generally acyclic
subgraph kruskal
turns obstacle
obstacle overcome
overcome figure
graph illustrating
illustrating prim
operations disconnectedness
disconnectedness intermediate
intermediate subgraphs
subgraphs applying
algorithms small
small graph
graph create
create impression
impression simpler
simpler impres
impres sion
sion wrong
wrong iterations
iterations kruskal
edges selected
selected create
create tree
edges sorted
sorted edges
edges illustration
selected edges
vertices create
create difficult
difficult created
created edge
connects vertices
component figure
component subgraph
subgraph generated
generated kruskal
tree cycles
cycles view
view observations
observations convenient
convenient slightly
slightly interpretation
interpretation kruskal
operations progression
progression series
series forests
forests vertices
edges initial
initial forest
consists trivial
trivial trees
trees comprising
comprising single
graph final
final forest
graph iteration
takes edge
edge sorted
sorted graph
edges finds
finds trees
trees vertices
vertices trees
trees unites
unites larger
larger tree
tree adding
edge fortunately
algorithms crucial
crucial vertices
called unionfind
unionfind algorithms
discuss subsection
subsection efficient
efficient union
union algorithm
running kruskal
dominated needed
needed sorting
sorting edge
weights graph
efficiency kruskal
log disjoint
algorithms kruskal
element collection
operations sequence
sequence bounded
bounded union
union increases
increases subset
subset size
set dealing
dealing abstract
data collection
subsets finite
operations makeset
creates element
set assumed
assumed operation
operation applied
applied elements
set returns
returns subset
subset union
union constructs
constructs union
subsets adds
adds collection
collection deleted
deleted makeset
creates set
set applying
applying operation
times initializes
initializes structure
structure collection
collection singleton
singleton sets
sets performing
union yields
yields union
subsets implementations
implementations abstract
data element
element disjoint
collection subset
representative implemen
implemen tations
tations impose
impose specific
specific constraints
constraints representative
representative requiring
requiring smallest
representative assumed
assumed set
elements mapped
mapped integers
alternatives implementing
implementing data
quick optimizes
optimizes efficiency
union optimizes
optimizes union
operation quick
quick array
array indexed
indexed elements
elements underlying
set array
values representatives
representatives subsets
subsets elements
subset implemented
implemented linked
linked header
header pointers
pointers elements
figure scheme
scheme implementation
requires assigning
assigning element
element representative
array initializing
initializing corre
corre sponding
sponding linked
linked single
node efficiency
subsets efficiency
efficiency retrieve
retrieve representative
array executing
executing union
union takes
longer straightforward
straightforward solution
solution simply
simply append
append update
update information
information representative
representative elements
subset representatives
representatives element
index representative
representative size
size null
figure linked
linked representation
subsets obtained
obtained quick
quick performing
union lists
size considered
considered deleted
deleted collection
collection delete
delete collection
collection easy
easy verify
verify algorithm
union runs
runs compared
compared alternatives
simple efficiency
operations append
append shorter
shorter lists
longer ties
size assumed
assumed storing
elements header
header modification
called figure
figure forest
subsets quick
union result
result union
single plication
plication union
operation worst
case running
running legitimate
legitimate sequence
operations turns
log proof
proof assertion
assertion element
set disjoint
subsets manipulate
manipulate times
times representative
updated sequence
operations large
elements representative
updated smaller
smaller subset
subset involved
involved computing
computing union
size subset
elements updated
elements general
general updated
updated times
times resulting
log total
total updates
updates representatives
representatives elements
elements exceed
exceed log
union principal
implementing disjoint
subsets represents
represents subset
subset rooted
tree subset
subset elements
elements node
element considered
considered subset
representative tree
directed children
children parents
parents figure
addition mapping
mapping set
elements tree
nodes implemented
array pointers
pointers maintained
maintained mapping
mapping shown
simplicity implementation
requires creation
creation single
tree operation
union implemented
implemented attaching
attaching root
tree deleting
deleting tree
tree collection
collection making
making pointer
pointer root
root null
null efficiency
operation specific
specific usefulness
efficiency mentioned
chapter figure
compression performed
performed pointer
element returned
returned subset
representative efficiency
tree representing
representing subset
subset degenerate
degenerate linked
nodes bound
bound improved
improved straightforward
straightforward union
operation attaching
attaching smaller
larger ties
tree measured
measured nodes
nodes version
size height
height version
union rank
rank options
options require
require storing
storing node
node descendants
descendants height
node easily
easily prove
prove case
case height
tree logarithmic
logarithmic making
making execute
execute log
union efficiency
obtained combining
combining variety
variety quick
union path
compression modification
makes node
node encountered
encountered execution
execution operation
figure sophisticated
analysis tar
tar similar
similar techniques
techniques efficiency
finds slightly
slightly worse
worse linear
linear exercises
apply kruskal
tree graphs
graphs statements
statements true
kruskal make
make minimum
forest arbitrary
forest trees
components kruskal
maximum spanning
weight weighted
graph rewrite
pseudocode kruskal
algorithm terms
terms operations
operations disjoint
subsets adt
adt prove
size version
union web
web sites
sites animations
animations kruskal
kruskal prim
prim algorithms
discuss merits
merits demerits
demerits design
design conduct
conduct experiment
experiment empirically
empirically efficiencies
efficiencies prim
algorithms random
random graphs
graphs sizes
sizes densities
densities steiner
steiner tree
tree villages
located vertices
vertices unit
square euclidean
plane asked
asked shortest
shortest network
network roads
roads path
pair villages
villages roads
roads network
network write
write generating
random maze
maze based
based prim
section single
source weighted
graph shortest
stress interested
interested single
single shortest
starts source
source visits
visits vertices
vertices difficult
discussed single
asks family
family paths
common variety
variety practical
applications shortest
problem popular
popular study
study obvious
obvious widely
widely applications
transportation planning
planning packet
packet routing
routing communi
communi cation
networks internet
internet multitudes
multitudes obvious
paths social
social networks
networks speech
speech recognition
recognition document
document formatting
formatting robotics
robotics compilers
compilers airline
scheduling world
world tainment
tainment mention
mention pathfinding
pathfinding video
video games
games finding
finding solutions
solutions puzzles
puzzles state
paths floyd
general pairs
called dijkstra
algorithm applicable
graphs nonnegative
weights plications
plications condition
satisfied limitation
limitation impaired
impaired popularity
popularity dijkstra
vertices distance
distance source
source finds
source edsger
edsger dijkstra
dijkstra noted
noted dutch
dutch pioneer
pioneer science
science industry
industry computing
computing discovered
mid dijkstra
posed solved
solved amazing
amazing thing
thing publish
publish amazing
amazing algorithms
considered scientific
scientific topic
topic figure
idea dijkstra
algorithm subtree
subtree shortest
bold nearest
selected comparing
comparing lengths
lengths subtree
subtree paths
paths increased
increased distances
distances vertices
adjacent subtree
nearest general
general ith
iteration commences
commences algorithm
algorithm identified
identified shortest
vertices nearest
vertices source
edges shortest
source subtree
subtree graph
weights nonnegative
nonnegative vertex
vertices referred
referred fringe
vertices candidates
candidates dijkstra
vertices treated
treated fringe
connected tree
edges infinitely
large weights
weights ith
ith nearest
computes fringe
vertex sum
sum distance
distance nearest
edge length
source previously
previously determined
determined algorithm
sum fact
fact suffices
suffices lengths
lengths special
special paths
paths central
central insight
insight dijkstra
algorithm facilitate
facilitate algorithm
operations vertex
labels numeric
numeric length
path parent
parent vertex
constructed left
unspecified source
adjacent current
labeling finding
finding nearest
vertex simple
finding fringe
smallest ties
operations fringe
fringe set
remaining fringe
weight update
labels figure
graph labeling
labeling mechanics
mechanics dijkstra
similar prim
construct expanding
expanding subtree
vertices selecting
selecting vertex
priority remaining
important solve
problems operate
operate priorities
priorities computed
computed manner
manner dijkstra
weights prim
compares edge
weights pseudocode
pseudocode dijkstra
algorithm spelled
spelled prim
section terms
terms explicit
explicit operations
operations sets
sets labeled
vertices shortest
path priority
vertices pseudocode
pseudocode source
vertex fringe
adjacent iteration
iteration completed
completed algorithm
paths input
weights vertex
vertex output
output length
path penultimate
penultimate vertex
vertex initialize
initialize priority
priority vertex
vertex null
null insert
insert initialize
priority decrease
decrease update
update priority
priority deletemin
deletemin delete
minimum priority
priority element
element vertex
adjacent decrease
decrease efficiency
efficiency dijkstra
priority representing
representing input
graph reasons
reasons explained
explained analysis
analysis prim
paths identified
identified nonnumeric
nonnumeric labels
labels backward
backward destination
destination vertex
column source
source lengths
lengths numeric
numeric labels
labels tree
closest vertex
vertex shown
bold graphs
array graphs
implemented min
min log
log upper
bound achieved
achieved prim
prim dijkstra
dijkstra algorithms
algorithms priority
implemented sophisticated
sophisticated data
called fibonacci
fibonacci cor
cor complexity
complexity considerable
considerable overhead
overhead make
improvement primarily
primarily theoretical
theoretical exercises
exercises adjustments
adjustments dijkstra
algorithm underlying
underlying graph
graphs shortest
vertex weighted
single destination
destination shortest
nonnegative numbers
path defined
sum vertex
path solve
instances single
source counterexample
counterexample shows
shows dijkstra
algorithm weighted
weights tree
constructed dijkstra
process solving
graph true
false spanning
tree true
pseudocode simpler
simpler version
version dijkstra
finds distances
paths shortest
correctness dijkstra
algorithm graphs
graphs positive
positive weights
problem dags
dags directed
lists minimum
descent problem
exercises solved
solved dijkstra
path modeling
modeling assume
assume model
model weighted
graph balls
representing vertices
connected strings
strings appro
priate lengths
lengths representing
edges solve
model solve
model revisit
revisit section
section determining
determining route
subway washington
london write
write task
task huffman
trees codes
codes encode
comprises symbols
alphabet assigning
assigning text
symbols sequence
sequence bits
bits called
called codeword
codeword fixed
assigns symbol
symbol bit
length log
log standard
standard ascii
ascii code
code coding
scheme yields
yields shorter
string average
average based
idea assigning
assigning shorter
shorter code
code words
words frequent
longer codewords
symbols idea
idea telegraph
telegraph code
code invented
invented mid
mid century
century samuel
samuel morse
morse code
code frequent
frequent letters
letters assigned
assigned short
short sequences
sequences dots
dots dashes
dashes infrequent
infrequent letters
letters longer
longer variable
assigns codewords
codewords lengths
lengths symbols
symbols introduces
introduces problem
problem fixed
encoding bits
bits encoded
text represent
represent generally
symbol complication
complication limit
limit called
called prefix
simply prefix
prefix codes
codes prefix
code codeword
symbol encoding
encoding simply
string group
group bits
bits codeword
symbol bits
symbol operation
operation bit
string reached
reached create
create binary
binary prefix
code alphabet
alphabet natural
natural associate
associate alphabet
symbols leaves
left edges
labeled edges
labeled codeword
symbol obtained
obtained recording
recording labels
labels simple
root symbol
symbol leaf
leaf simple
path leaf
leaf continues
continues leaf
leaf codeword
codeword tree
tree yields
yields prefix
code trees
manner alphabet
alphabet frequencies
occurrences construct
tree assign
assign shorter
strings high
high frequency
longer low
low frequency
symbols greedy
algorithm invented
invented david
david huffman
huffman graduate
student mit
mit huf
huf huffman
algorithm initialize
initialize node
trees symbols
symbols alphabet
alphabet frequency
frequency symbol
symbol tree
weight generally
generally weight
sum frequencies
frequencies tree
leaves operation
operation single
obtained trees
trees smallest
make left
weights root
called huffman
tree defines
defines manner
manner huffman
code symbol
alphabet occurrence
frequency huffman
construction input
input shown
figure constructing
constructing huffman
tree resulting
resulting codewords
codewords symbol
frequency codeword
codeword dad
dad encoded
encoded decoded
decoded bad
bad occurrence
frequencies codeword
lengths obtained
obtained average
average bits
symbol code
code fixed
alphabet bits
symbol toy
toy huffman
code achieves
achieves compression
ratio standard
standard compression
algorithm effectiveness
effectiveness words
words huffman
encoding text
text memory
memory fixed
encoding extensive
experiments huffman
codes shown
shown compression
ratio scheme
scheme typically
typically falls
falls depending
depending characteristics
characteristics text
text compressed
compressed huffman
encoding important
important compression
compression methods
methods addition
addition simplicity
simplicity versatility
versatility yields
optimal minimal
minimal length
encoding provided
provided frequencies
occurrences independent
independent advance
advance simplest
simplest version
version huffman
huffman compression
compression calls
calls fact
fact preliminary
preliminary scanning
scanning text
text frequencies
occurrences frequencies
frequencies construct
tree encode
text scheme
makes coding
coding table
table encoded
text make
make decoding
decoding drawback
drawback overcome
overcome dynamic
dynamic huffman
encoding coding
tree updated
updated symbol
symbol read
read source
source text
text modern
modern alternatives
alternatives lempel
lempel ziv
ziv algorithms
algorithms assign
assign codewords
codewords individual
individual symbols
symbols strings
symbols allowing
allowing achieve
achieve robust
robust compressions
compressions applications
applications huffman
compression positive
define weighted
length sum
leaf construct
construct binary
length general
problem huffman
solves coding
coding application
application length
codeword frequency
frequency ith
symbol problem
arises situations
situations involving
involving decision
making game
guessing chosen
possibilities integer
integer questions
answerable strategies
strategies playing
game modeled
modeled decision
trees depicted
equal questions
chosen represented
represented leaf
leaf chosen
probability sum
sum decision
trees guessing
guessing integer
leaf average
average questions
chosen game
game strategy
strategy represented
represented decision
numbers chosen
probability strategy
strategy successively
successively eliminate
eliminate half
half candidates
candidates binary
binary case
case arbitrary
arbitrary minimum
path tree
tree rightmost
rightmost figure
figure huffman
case encountering
encountering problem
problem structing
discussed problem
prob abilities
abilities assigned
section numbers
problem turns
turns easier
easier solved
solved greedy
algorithm solved
solved complicated
complicated dynamic
frequency encode
encode abacabad
abacabad code
code decode
decode code
data transmission
transmission purposes
purposes desirable
desirable code
code minimum
minimum variance
lengths codes
codes average
average length
length compute
average variance
length huffman
codes result
result breaking
breaking huffman
code construction
construction data
symbol probability
probability properties
properties true
true huffman
code codewords
symbols length
frequent symbol
symbol smaller
equal codeword
frequent maximal
maximal length
codeword huffman
symbols write
pseudocode huffman
constructing huff
huff tree
tree function
size huffman
constructed linear
linear alphabet
symbols sorted
sorted frequencies
frequencies huffman
algorithm codewords
codewords symbols
symbols efficiency
size generate
generate huffman
code explicit
explicit generation
generation huffman
write constructs
constructs huffman
code english
text encode
encode write
write decoding
decoding english
text encoded
encoded huffman
code experiment
encoding range
range typical
typical compres
sion ratios
ratios huffman
encoding english
texts words
words experiment
encoding sensitive
sensitive compression
compression ratios
ratios standard
standard estimates
estimates frequencies
frequencies actual
actual frequencies
occurrences english
texts card
card guessing
guessing design
strategy minimizes
minimizes expected
expected questions
asked game
game gar
gar deck
deck cards
cards consists
consists ace
ace spades
spades deuces
deuces spades
spades threes
threes nines
nines making
making cards
cards draws
draws card
card shuffled
shuffled deck
deck questions
answerable summary
summary greedy
steps expanding
expanding partially
reached choice
feasible locally
optimal irrevocable
irrevocable prim
graph works
works attaching
attaching previously
constructed subtree
vertex closest
closest vertices
tree kruskal
problem constructs
tree selecting
selecting edges
weights provided
provided inclusion
create checking
condition efficiently
efficiently requires
requires application
algorithms dijkstra
solves single
digraph works
works prim
edge lengths
lengths dijkstra
weights huffman
tree minimizes
minimizes weighted
leaves predefined
predefined weights
weights important
trees huffman
codes huffman
code optimal
optimal prefix
free variable
scheme assigns
assigns bit
symbols based
based frequencies
text accomplished
accomplished greedy
greedy construction
construction binary
represent alphabet
symbols edges
real life
reducing problem
algorithm tower
general comparison
set real
problem transformed
tonian circuit
algorithm requires
extra storage
sort alphabetical
stable sorting
defined sum
section discussed
taking advantage
definition implies
examples illustrate
product common
special cases
river boat
require extra
based representing
assign smallest
deleting element
item highest
unordered pair
property makes
array binary
smaller larger
tree requires
min max
special property
remarkable algorithm
algorithms mergesort
equal values
section problems
exercises estimate
quadratic efficiency
distinct integers
zeros main
yields upper
matrix column
ith column
computing matrix
matrix denoted
matrix obtained
matrix det
estimate faster
gauss jordan
tree perfectly
trees avl
tree numbers
node left
inserted leaf
mirror image
figure general
keys greater
node ordered
ordered keys
equal root
inserting key
leaf tree
leaf node
smallest keys
smaller tree
important class
coefficients polynomial
problem counting
graph undirected
maximization problem
decision making
optimizing linear
equations linear
instance general
item knapsack
bank river
comparison algorithm
correctness algorithm
large files
listed vertex
size compute
preceding elements
lists efficiency
small values
based technique
compared element
large values
approach solving
algorithm illustrated
problem determine
line points
vertex path
elements array
tree nodes
depicted figure
data sets
figure sorting
algorithm task
average worst
good idea
formula max
element array
algo rithms
analyzing algorithm
input algorithm
extra memory
important sorting
problem graph
graph connected
prove correctness
vertex connected
tree section
algorithm constructs
tree write
algorithm finds
makes important
arithmetical operations
algorithm execution
execute operations
runs space
algorithm set
representation positive
efficiency important
important analysis
listed increasing
task minimum
element numbers
standard approach
ith position
size computing
formal analysis
sum recurrence
values constants
relation multiplications
solve set
needed compute
difficult verify
false true
total running
summation formulas
formulas rules
loop executed
logarithmic algorithm
multiplication addition
functions defined
integer values
pointed section
straightforward algorithm
algorithm fib
fact prove
sequence operations
size efficiency
amortized efficiency
generating random
sophisticated software
algorithms fall
required definition
algorithms linear
matching elements
approach comparing
stirling formula
element comparisons
integer log
big notation
algorithms mathematical
large small
successive elements
defined set
possibility algorithm
integer algorithm
compute recursive
recursive version
shape figure
principal strength
figure initial
iteration algorithm
array sorted
smallest largest
shown figure
science removed
removed brute
brute sword
sword crowbar
crowbar edward
edward lytton
lytton leila
leila chapter
chapter thing
thing robert
robert byrne
byrne master
master pool
pool billiards
billiards player
player writer
writer introducing
introducing framework
analysis preceding
chapter ready
ready embark
strategies chapters
devoted design
strategy subject
chapter brute
brute important
case exhaustive
involved implied
implied strategy
strategy definition
definition intellect
intellect prescription
prescription brute
approach brute
strategy easiest
easiest apply
apply exponentiation
compute nonzero
nonzero nonnegative
trivial vehicle
vehicle illustrating
illustrating algorithm
brute computing
principal component
component leading
leading encryption
encryption algorithm
definition exponentiation
exponentiation times
times suggests
suggests simply
computing multiplying
times encountered
algorithms consecutive
gcd section
approach rarely
rarely source
source clever
clever efficient
proach overlooked
overlooked important
strategy strategies
brute applicable
applicable wide
wide riety
approach difficult
problems tackle
tackle impor
searching matrix
multiplication string
matching brute
reasonable algorithms
cal limitation
limitation instance
size expense
expense designing
designing efficient
algorithm unjustifiable
unjustifiable instances
instances acceptable
acceptable speed
speed fourth
fourth inefficient
inefficient general
general brute
problem finally
finally brute
theoretical educational
educational pur
pur pose
pose yardstick
yardstick efficient
efficient alternatives
alternatives solving
sorting orderable
items numbers
strings rearrange
rearrange nondecreasing
nondecreasing mentioned
section dozens
developed solving
problem learned
learned forget
forget problem
problem afresh
afresh mind
mind unburdened
unburdened previous
previous knowledge
knowledge sorting
solving sorting
problem reasonable
reasonable people
sort prime
candidates selection
sort scanning
entire smallest
element exchange
scan starting
starting element
position generally
ith algorithm
searches smallest
smallest item
item elements
elements swaps
swaps amin
amin final
elements passes
sorted pseudocode
simplicity assumes
assumes implemented
algorithm selectionsort
selectionsort sorts
array selection
nondecreasing min
min swap
swap min
min action
figure analysis
analysis selection
sort straightforward
straightforward input
elements basic
comparison min
depends array
size sum
sum figure
sorting selection
line corresponds
corresponds iteration
algorithm tail
tail vertical
vertical element
element bold
bold smallest
left vertical
iterations encountered
encountered sum
sum analyzing
sum distributing
distributing summation
summation symbol
symbol immediately
immediately sum
sum decreasing
decreasing integers
integers selection
inputs key
swaps precisely
precisely repetition
loop property
property distinguishes
distinguishes selection
sort positively
positively sorting
sort brute
brute application
problem adjacent
exchange repeatedly
repeatedly bubbling
bubbling largest
position bubbles
bubbles largest
element passes
sort represented
represented diagram
diagram final
algorithm bubblesort
bubblesort sorts
nondecreasing swap
swap action
sort version
obtained sum
sum identical
identical sum
sum selection
figure passes
passes sort
line shown
shown swap
swap elements
elements vertical
swaps depends
case decreasing
comparisons sworst
sworst case
case application
strategy version
obtained improved
effort specifically
specifically crude
crude version
sort exploiting
exploiting observation
observation makes
version runs
inputs worst
cases fact
fact elementary
sorting methods
sort inferior
inferior choice
choice catchy
catchy heard
heard general
general lesson
lesson learned
learned important
important repeating
repeating application
effort exercises
cation brute
computing function
integer circumvent
circumvent problem
large magnitude
magnitude algorithms
problems exercises
anxn determine
designed problem
linear efficiency
network topology
topology specifies
specifies computers
computers printers
printers devices
devices connected
connected network
illustrates common
common topologies
topologies networks
networks ring
mesh ring
mesh boolean
matrix supposed
supposed adjacency
graph modeling
modeling network
network topologies
topologies task
task determine
determine topologies
topologies matrix
matrix represents
represents design
task efficiency
class tetromino
tetromino tilings
tilings tetrominoes
tetrominoes tiles
tiles squares
squares types
types tetrominoes
tetrominoes shown
shown straight
straight tetromino
tetromino square
square tetromino
tetromino tile
tile overlaps
overlaps chessboard
chessboard straight
straight tetrominoes
tetrominoes square
square tetrominoes
tetrominoes stack
stacks identical
stacks counterfeit
counterfeit coins
stacks genuine
coin weighs
grams fake
fake weighs
grams analytical
analytical scale
scale determine
determine exact
exact weight
weight coins
coins devise
devise brute
coins determine
minimum weighings
needed stack
coins sort
alphabetical selection
definition stable
implement selection
sort linked
alphabetical sort
sort prove
prove sort
algorithm stopped
stopped write
pseudocode method
method incorporates
incorporates improvement
improvement prove
prove worst
improved version
version quadratic
stable alternating
alternating disks
disks row
row disks
disks colors
colors dark
light alternate
alternate dark
dark disks
disks light
light disks
disks left
left moves
moves allowed
allowed make
make interchange
interchange positions
positions neighboring
neighboring disks
disks design
puzzle determine
determine moves
moves takes
takes gar
gar sequential
sequential brute
matching previous
applications brute
approach sorting
sorting porblem
porblem discuss
applications strategy
searching deals
deals canonical
canonical problem
item deals
deals string
problem sequential
sequential encountered
general searching
simply compares
compares successive
encountered successful
successful exhausted
exhausted finding
finding unsuccessful
unsuccessful simple
simple extra
extra employed
employed implementing
implementing sequential
sequential append
append key
successful eliminate
eliminate altogether
altogether pseudocode
pseudocode enhanced
sequentialsearch implements
implements sequential
sequential key
key sentinel
sentinel input
element straightforward
straightforward improvement
improvement incorporated
incorporated sequential
sequential sorted
sorted searching
searching stopped
stopped element
encountered sequential
sequential excellent
excellent illustration
illustration brute
proach characteristic
characteristic strength
strength simplicity
simplicity weakness
weakness inferior
efficiency results
obtained section
section standard
standard version
sequential enhanced
version slightly
slightly algorithm
remains linear
cases discuss
discuss searching
recall string
section string
text matches
matches pattern
pattern precisely
precisely index
index leftmost
leftmost character
character matching
pattern matches
matches string
simply working
working entire
entire text
text exhausted
exhausted brute
obvious align
algorithm mismatching
position resume
resume character
comparisons starting
text position
position text
text beginning
beginning matching
substring provided
provided text
text positions
positions indexed
indexed position
position characters
characters entire
algorithm bruteforcestringmatch
bruteforcestringmatch implements
implements brute
representing text
text array
representing pattern
pattern output
index character
text starts
starts matching
substring unsuccessful
unsuccessful operation
pattern single
single character
comparison worst
case worse
comparisons shifting
pattern problem
asks specific
specific situation
situation worst
makes figure
figure brute
matching pattern
characters compared
compared text
text counterparts
counterparts bold
bold character
comparisons puts
puts class
class typical
typical word
word natural
text shifts
shifts comparisons
considerably worst
texts shown
shown linear
linear sophisticated
sophisticated efficient
string searching
searching widely
widely boyer
moore outlined
section simplification
simplification suggested
horspool exercises
exercises comparisons
comparisons sentinel
sequential worst
case probability
successful shown
shown section
sequential sentinel
sentinel standard
inputs formula
cavg probability
successful determine
fixed values
maximum cavg
cavg minimum
minimum cavg
cavg gadget
gadget testing
testing firm
firm determine
determine highest
highest floor
floor story
story headquarters
headquarters gadget
gadget fall
fall breaking
breaking firm
firm identical
identical gadgets
gadgets experiment
experiment broken
broken repaired
repaired experiment
experiment completed
completed remaining
remaining gadget
gadget design
class solve
determine character
pattern gandhi
gandhi text
text life
life increasing
increasing speed
speed assume
assume length
length text
characters starts
starts comparisons
unsuccessful brute
zeros text
length constitutes
constitutes worst
input brute
input solving
solving string
problem advantage
advantage comparing
comparing pattern
counting text
text substrings
substrings cabaaxbya
cabaaxbya design
problem gin
gin write
visualization brute
word popular
popular diversion
diversion united
word puzzles
puzzles player
player set
words square
square table
filled single
single letters
word read
read horizontally
horizontally left
left vertically
vertically degree
degree diagonal
diagonal directions
directions formed
formed consecutively
consecutively adjacent
table boundaries
boundaries read
read direction
direction zigzagging
zigzagging cell
table words
word cell
cell write
puzzle battleship
battleship game
based version
version brute
brute pattern
matching playing
game battleship
battleship rules
game opponents
opponents game
game case
case human
human player
played identical
identical boards
boards tables
tables squares
squares opponent
opponent places
places ships
opponent player
player ships
ships occupies
occupies squares
board destroyer
destroyer squares
squares submarine
submarine squares
squares cruiser
cruiser squares
squares battleship
battleship squares
squares aircraft
aircraft carrier
carrier squares
squares ship
ship horizontally
vertically ships
ships touching
touching game
played opponents
opponents taking
taking turns
turns shooting
shooting ships
ships result
result shot
shot displayed
displayed hit
hit case
case hit
hit player
player playing
playing missing
missing goal
goal sink
sink opponent
opponent ships
opponent succeeds
succeeds sink
sink ship
ship squares
squares occupied
occupied ship
ship hit
hit closest
problems brute
brute section
section straightforward
approach prob
dealing finite
plane problems
problems theoretical
theoretical arise
arise important
important applied
applied areas
areas computational
computational ometry
ometry operations
research closest
problem calls
calls finding
points simplest
simplest variety
geometry deals
deals proximity
proximity points
dimensional spaces
spaces points
points represent
physical objects
objects airplanes
airplanes offices
offices database
database records
records statistical
statistical samples
samples dna
sequences air
air traffic
traffic controller
controller interested
interested closest
closest planes
planes probable
probable collision
collision candidates
candidates regional
regional postal
postal service
service manager
manager solution
candidate office
office locations
locations closed
closed important
applications closest
problem cluster
cluster analy
sis statistics
statistics based
based data
points hierarchical
hierarchical cluster
cluster analysis
analysis seeks
seeks orga
orga nize
nize hierarchy
hierarchy clusters
clusters based
based similarity
similarity metric
metric numerical
numerical data
data metric
metric euclidean
distance text
text nonnumerical
nonnumerical data
data metrics
metrics hamming
distance problem
section ercises
begins element
element cluster
cluster merges
merges successively
successively larger
larger clusters
clusters combining
combining closest
pair clusters
clusters simplicity
simplicity dimensional
dimensional case
case closest
standard fashion
fashion cartesian
cartesian coordinates
standard euclidean
leads vious
vious algorithm
points pair
pair smallest
distance compute
points pairs
points pseudocode
pseudocode computes
points closest
points requires
requires trivial
trivial modification
modification algorithm
algorithm bruteforceclosestpair
bruteforceclosestpair finds
plane brute
brute input
points output
min sqrt
sqrt square
root basic
root age
age electronic
electronic calculators
calculators square
root button
button led
led computing
root simple
multiplication starters
starters integers
integers square
roots irrational
numbers approximately
approximately computing
computing approximations
approximations trivial
trivial fact
fact computing
roots loop
loop avoided
avoided realize
realize simply
simply square
root smaller
root mathematicians
mathematicians square
function strictly
increasing basic
algorithm squaring
squaring times
executed computed
computed speeding
speeding innermost
running constant
factor problem
exercises asymptotic
class chapter
discuss linearithmic
linearithmic algorithm
based sophisticated
sophisticated design
technique convex
computing convex
hull finding
finding convex
space important
important people
geometry prominence
prominence variety
solved larger
larger task
task sev
eral applications
applications based
based fact
hulls convenient
convenient approximations
approximations shapes
shapes data
sets imation
imation replacing
replacing objects
objects convex
hulls speeds
speeds collision
collision detection
detection idea
idea path
path planning
planning mars
mars mission
mission rovers
rovers convex
hulls computing
computing accessibility
accessibility maps
maps produced
produced satellite
satellite images
images geographic
geographic information
information systems
systems detecting
detecting outliers
outliers statisti
statisti cal
techniques efficient
computing diameter
diameter set
points largest
hull largest
distance extreme
points finally
finally convex
hulls important
important solving
problems extreme
set solution
solution candidates
candidates definition
points finite
infinite plane
called convex
convex points
set entire
entire line
endpoints belongs
set sets
convex straight
line triangle
polygon circle
circle entire
entire plane
plane sets
figure finite
set distinct
polygon circumference
circumference examples
convex ready
ready notion
notion convex
hull intuitively
intuitively convex
plane smallest
polygon boundary
boundary formulation
formulation enthusiasm
enthusiasm problem
problem barricading
barricading sleeping
sleeping tigers
tigers shortest
shortest length
length interpretation
interpretation harel
har lively
lively fenceposts
fenceposts erected
erected spots
spots tigers
tigers sleep
sleep tamer
tamer interpretation
interpretation notion
notion points
points represented
represented nails
nails driven
driven large
large sheet
sheet plywood
plywood representing
representing plane
plane rubber
band nails
nails snap
snap convex
hull area
area bounded
bounded snapped
snapped rubber
band figure
hull applicable
applicable arbitrary
arbitrary sets
line definition
points smallest
set smallest
smallest requirement
requirement means
means convex
hull subset
subset convex
set triangle
polygon region
boundary shape
convex sets
convex figure
figure rubber
band interpretation
interpretation convex
hull triangle
points farthest
farthest convex
hull larger
larger set
figure study
examples makes
makes theorem
theorem expected
expected result
result theorem
theorem convex
line polygon
polygon degenerates
degenerates line
vertices convex
constructing convex
solve points
polygon mathematicians
mathematicians vertices
polygon extreme
definition extreme
extreme convex
set middle
middle line
endpoints set
vertices extreme
circle points
points circumference
circumference extreme
figure extreme
points special
special properties
properties points
set exploited
exploited simplex
minimum maximum
maximum linear
sections general
interested extreme
points identification
identification solves
solves convex
completely bit
bit points
hull pairs
points connected
connected boundary
hull issue
issue addressed
addressed listing
listing extreme
points clockwise
counterclockwise solve
solve convex
problem brute
brute manner
manner frontal
frontal dismayed
dismayed convex
obvious algorithmic
simple inefficient
inefficient algorithm
observation line
segments making
making boundary
boundary points
set straight
points verify
verify property
figure repeating
repeating pair
points yields
yields line
segments make
make convex
boundary elementary
elementary facts
facts analytical
geometry needed
needed implement
equation line
line simply
simply expression
expression points
points leave
leave implementation
details efficiency
pairs distinct
points efficient
discuss exercises
assuming sqrt
sqrt takes
longer oper
oper ations
loop bruteforceclosestpoints
bruteforceclosestpoints assumed
assumed estimate
run improvement
improvement discussed
strategy solve
points real
line real
numbers representing
road office
office built
built villages
villages design
office design
minimizing maximum
maximum distance
village office
office sake
line modification
modification needed
needed general
case left
alternative ways
ways define
define distance
plane manhat
manhat tan
distance defined
defined prove
prove satisfies
satisfies axioms
distance function
points iii
iii sketch
sketch points
plane manhattan
distance origin
origin equal
equal euclidean
distance true
false solution
problem metrics
metrics euclidean
euclidean manhattan
manhattan hamming
distance strings
strings equal
length defined
defined positions
positions symbols
symbols named
named richard
richard hamming
hamming prominent
prominent american
scientist engineer
engineer introduced
introduced seminal
seminal paper
paper error
error detecting
detecting error
error correcting
correcting codes
codes hamming
distance axioms
distance metric
metric listed
listed problem
points strings
symbols distance
distance measured
measured hamming
distance odd
odd pie
pie fight
fight people
people positioned
positioned field
field euclidean
plane unique
unique nearest
neighbor person
person cream
cream pie
pie hurls
hurls pie
pie nearest
neighbor assuming
assuming odd
odd target
target true
false remains
remains person
person hit
hit pie
pie car
car closest
posed dimensional
space euclidean
defined efficiency
algorithm dimensional
hulls sets
sets extreme
segment square
square boundary
boundary square
square straight
line design
determine extreme
plane modification
modification brute
points straight
line write
implementing brute
subject sketch
sketch cartesian
plane problem
region defined
points satisfying
satisfying problem
constraints region
solve optimization
problem theorem
region solution
region exhaustive
exhaustive important
require finding
finding element
property domain
faster instance
size typically
typically problems
arise situations
situations involve
involve explicitly
objects permutations
set problems
problems optimization
problems element
element maximizes
maximizes minimizes
minimizes desired
desired characteristic
characteristic path
length assignment
assignment cost
cost exhaustive
exhaustive simply
simply brute
lems suggests
domain lecting
lecting constraints
element optimizes
optimizes objective
function idea
idea exhaustive
exhaustive straightforward
implementation typically
typically requires
objects dis
dis cussion
cussion algorithms
chapter assume
assume illustrate
illustrate exhaustive
exhaustive applying
applying important
tsp intriguing
intriguing researchers
researchers years
years seemingly
simple formulation
formulation important
applications interesting
interesting connections
connections combinatorial
problems layman
layman terms
asks shortest
shortest set
set cities
city returning
returning city
city started
started problem
problem conveniently
conveniently modeled
modeled weighted
vertices representing
representing cities
weights distances
distances problem
defined passes
graph named
named irish
william rowan
rowan hamilton
hamilton interested
interested cycles
cycles application
application algebraic
algebraic discoveries
discoveries easy
easy hamiltonian
vertices vin
vin vertex
assume loss
generality circuits
circuits vertex
vertex cycles
cycles tours
tours generating
permutations intermediate
intermediate cities
cities compute
compute lengths
shortest figure
solution method
method inspection
inspection figure
figure reveals
reveals pairs
pairs tours
tours differ
differ direction
direction cut
cut vertex
permutations half
half choose
choose intermediate
vertices permutations
permutations precedes
precedes implicitly
implicitly defines
defines direction
direction improvement
improvement brighten
brighten efficiency
efficiency picture
picture total
permutations needed
needed makes
approach impractical
values glass
glass half
half cutting
cutting half
half solve
problem investigation
investigation circuits
circuits starting
permutations larger
larger factor
factor knapsack
problem algorithmics
algorithmics items
knapsack idea
idea putting
putting shoes
shoes thief
thief steal
steal optimal
optimal figure
instance traveling
exhaustive valuable
valuable loot
loot fits
knapsack plane
plane valuable
valuable set
items remote
remote location
location exceeding
exceeding plane
plane capacity
leads generating
items computing
weight subset
subset feasible
subsets total
weight exceeding
exceeding knapsack
capacity finding
finding subset
subset largest
largest solution
figure subsets
set exhaustive
algorithm efficiently
efficiently individual
individual subsets
subsets generated
generated traveling
knapsack problems
problems considered
considered exhaustive
leads algorithms
inefficient input
input fact
examples socalled
socalled hard
hard problems
algorithm nphard
nphard problem
problem scientists
important conjecture
conjecture proven
proven sophisticated
sophisticated approaches
approaches backtracking
sections enable
enable solve
instances knapsack
knapsack item
subset total
weight total
total feasible
solution exhaustive
exhaustive information
information optimal
selection bold
bold similar
problems exponential
exponential alternatively
alternatively approximation
section assignment
solved exhaustive
exhaustive people
assignment minimum
cost small
entries representing
representing assignment
assignment costs
costs job
person easy
easy instance
completely cost
matrix terms
terms matrix
matrix problem
select element
matrix selected
elements columns
columns total
sum selected
elements smallest
smallest obvious
obvious strategy
strategy finding
solution works
works select
select smallest
column fact
fact smallest
entire matrix
matrix component
component optimal
solution opting
opting exhaustive
exhaustive unavoidable
unavoidable evil
evil feasible
solutions assignment
problem tuples
tuples ith
ith component
component column
element selected
selected ith
row job
assigned ith
matrix assignment
assignment person
job requirements
requirements assignment
problem imply
imply correspondence
correspondence feasible
feasible assignments
assignments permutations
integers exhaustive
approach assignment
require generating
integers computing
assignment summing
summing elements
elements cost
matrix finally
finally selecting
selecting smallest
sum iterations
iterations applying
applying algorithm
instance shown
figure asked
exercises cost
cost figure
figure iterations
iterations solving
permutations considered
considered general
case assignment
problem fortunately
called hungarian
hungarian method
method hungarian
hungarian mathematicians
mathematicians nig
nig egerva
egerva underlies
underlies method
kol good
news fact
faster necessarily
necessarily imply
imply efficient
solving fact
fact examples
examples exception
exception polynomial
problems domain
exponentially instance
size provided
provided solve
solve mentioned
mentioned algorithms
algorithms possibly
possibly exercises
assuming generated
generated constant
class exhaustive
text traveling
algorithm programmed
programmed makes
additions estimate
estimate maximum
maximum cities
solved hour
hour hours
hours iii
iii year
year century
outline exhaustive
algorithm hamiltonian
problem outline
determine connected
matrix eulerian
circuit efficiency
application exhaustive
exhaustive instance
instance assign
problem started
started text
text assignment
element cost
matrix partition
integers partition
minimize subsets
subsets algorithm
generate clique
clique problem
integer deter
deter graph
graph clique
size subgraph
applied sorting
algorithm queens
queens problem
classic puzzle
puzzle placing
placing queens
queens chessboard
chessboard queens
column diagonal
diagonal positions
positions queens
queens square
square queens
row queens
column estimate
estimate solutions
exhaustive based
based approaches
approaches capable
capable checking
positions magic
squares magic
square arrangement
arrangement integers
integers matrix
matrix occurring
occurring row
column main
diagonal sum
sum prove
prove magic
square exists
exists sum
equal design
squares internet
internet library
library algorithm
squares implement
exhaustive run
determine largest
largest algorithms
algorithms magic
square minute
minute famous
famous alphametic
alphametic puzzle
puzzle digits
digits mathematical
mathematical expression
expression sum
sum replaced
replaced letters
letters called
called cryptarithm
cryptarithm addition
addition puzzle
puzzle words
words make
make sense
sense alphametic
alphametic published
published renowned
renowned british
british puzzlist
puzzlist henry
henry dudeney
dudeney money
money conditions
conditions assumed
assumed correspondence
correspondence letters
letters decimal
digits letter
represents digit
digit dif
ferent letters
letters represent
represent digits
digit left
left digit
numbers solve
solve alphametic
alphametic means
means digit
digit letter
solution uniqueness
uniqueness assumed
assumed verified
verified solver
solver write
solving cryptarithms
cryptarithms exhaustive
assume cryptarithm
cryptarithm sum
sum words
words solve
solve dudeney
dudeney puzzle
puzzle expected
expected solved
solved published
published depth
breadth term
term exhaustive
algorithms systematically
systematically process
process vertices
bfs algorithms
proved applications
involving graphs
graphs artificial
intelligence operations
research addition
addition indispensable
efficient investigation
investigation fundamental
fundamental properties
graphs connectivity
connectivity presence
presence depth
depth starts
starts graph
vertex marking
marking visited
proceeds unvisited
vertices resolved
resolved arbitrarily
arbitrarily practical
practical adjacent
unvisited candidates
candidates chosen
chosen dictated
dictated data
graph examples
examples break
break ties
ties alphabetical
alphabetical vertices
vertices process
continues dead
vertices encountered
encountered dead
dead algorithm
algorithm backs
backs edge
visiting unvisited
eventually halts
halts backing
backing starting
vertex dead
dead vertices
vertices depth
depth restarted
restarted convenient
convenient stack
operation depth
reached figure
figure dfs
subscript vertex
visited pushed
dead popped
stack dfs
solid dashed
dashed lines
lines vertex
starts vertex
vertex ends
ends accompany
accompany depth
called depth
forest starting
traversal serves
reached attached
edge set
edges forms
forms forest
forest algorithm
algorithm encounter
encounter edge
ancestor parent
parent depth
stack depth
shown pseudocode
pseudocode depth
algorithm dfs
dfs implements
implements depth
integers encountered
encountered dfs
dfs visits
visits recursively
recursively unvisited
encountered global
variable vertex
adjacent marked
dfs brevity
brevity dfs
dfs pseudocode
pseudocode ease
ease formed
formed create
impression sophistication
sophistication algorithm
true power
power depth
algorithm action
action graph
graph diagram
diagram adjacency
figure smaller
efficient depth
depth difficult
difficult algorithm
fact efficient
efficient takes
takes proportional
proportional size
size data
representation traversal
traversal adjacency
forest obtained
obtained product
product dfs
traversal deserves
deserves comments
comments begin
begin forest
forest graph
edges classified
classified dfs
traversal disjoint
disjoint classes
classes tree
edges types
types dfs
traversal previously
edges class
class forest
vertices previously
vertices predecessors
predecessors traversal
ancestors forest
forest parents
parents dfs
traversal forest
pro vides
vides proved
proved extremely
extremely helpful
helpful development
development efficient
efficient gorithms
gorithms checking
checking important
graphs dfs
dfs yields
yields orderings
orderings vertices
stack orders
orders qualitatively
qualitatively applications
applications advantage
advantage important
elementary applications
dfs checking
connectivity checking
checking acyclicity
dfs halts
halts visiting
vertices discovery
discovery applications
important breakthrough
breakthrough achieved
achieved american
american scientists
scientists john
hopcroft robert
tarjan contributions
contributions turing
award prestigious
prestigious prize
prize computing
computing field
field tar
tar nected
path starting
vertex checking
connectivity dfs
algorithm halts
halts vertices
graph visited
visited graph
connected generally
generally dfs
dfs identifying
identifying connected
graph checking
checking presence
presence graph
graph advantage
advantage graph
representation dfs
acyclic edge
ancestor edge
graph comprises
comprises path
sequence tree
forest edge
edge applications
dfs sophisticated
sophisticated applications
graph included
included vertex
graph articulation
articulation removal
removal edges
incident breaks
breaks graph
graph disjoint
disjoint pieces
pieces breadth
breadth depth
traversal brave
brave algorithm
algorithm home
home breadth
traversal cautious
cautious proceeds
proceeds concentric
concentric manner
manner visiting
adjacent starting
algorithm restarted
restarted arbitrary
component graph
graph convenient
convenient difference
difference depth
depth operation
operation breadth
breadth initialized
initialized traversal
marked visited
identifies unvisited
vertex marks
marks visited
visited adds
adds vertex
vertex removed
removed similarly
similarly dfs
traversal accompany
accompany bfs
called breadth
forest traversal
vertex serves
vertex attached
tree encountered
encountered edge
edge noted
noted edge
figure breadth
traversal breadth
figure bfs
traversal numbers
indicating vertices
visited added
removed bfs
solid dotted
dotted lines
lines pseudocode
pseudocode breadth
breadth algorithm
algorithm bfs
bfs implements
implements breadth
integers visited
visited bfs
marked bfs
bfs visits
visits unvisited
numbers visited
visited global
variable initialize
marked vertex
illustration bfs
tree identifies
identifies minimum
breadth efficiency
efficiency depth
depth adjacency
representation depth
depth yields
yields single
single ordering
vertices fifo
fifo structure
structure vertices
vertices added
removed structure
structure bfs
graph kinds
kinds edges
edges previously
visited edges
tree bfs
bfs connectivity
graph essentially
essentially manner
manner dfs
dfs applicable
applicable straightforward
straightforward applications
points helpful
helpful situations
situations dfs
bfs finding
path fewest
reached simple
root bfs
path sought
sought path
figure fewest
edges paths
vertices correctness
correctness application
application appears
appears stem
stem immediately
immediately bfs
bfs operates
operates mathematical
proof validity
validity elementary
elementary cor
cor section
table summarizes
summarizes main
breadth table
table main
bfs dfs
bfs data
vertex orderings
orderings ordering
ordering edge
edge types
types undirected
edges applications
acyclicity articulation
points minimum
paths efficiency
lists exercises
graph write
write adjacency
assume matrix
columns vertices
lists alphabetical
alphabetical vertex
labels starting
vertex resolving
resolving ties
alphabetical traverse
depth construct
construct depth
depth tree
pushed traversal
stack define
define sparse
graphs implemen
tation dfs
dfs efficiency
efficiency graphs
edges true
forests traversals
traversals starting
forests tree
edges traverse
problem breadth
breadth construct
construct breadth
breadth tree
vertex resolve
resolve ties
alphabetical prove
prove edge
edge bfs
graph acyclicity
acyclicity breadth
breadth traversals
traversals dfs
bfs faster
faster case
case examples
examples supporting
supporting connected
breadth graph
subsets edge
called colorable
design dfs
bipartite design
design bfs
bipartite write
write graph
graph outputs
outputs vertices
component message
message graph
acyclic model
model maze
maze vertex
starting finishing
finishing dead
ends points
points maze
maze path
path connecting
paths maze
maze construct
construct graph
graph maze
maze traversal
traversal dfs
bfs maze
maze jugs
jugs sime
sime denis
denis poisson
poisson famous
famous french
cian physicist
physicist interested
interested mathematics
mathematics encountering
encountering version
version puzzle
puzzle pint
pint jug
jug jugs
jugs pint
pint capacity
capacity pints
pints jugs
jugs completely
completely filling
filling emptying
emptying jugs
jugs solve
solve puzzle
puzzle breadth
breadth summary
summary brute
involved principal
principal strengths
strengths brute
approach wide
wide applicability
applicability simplicity
simplicity principal
weakness subpar
subpar efficiency
effort noted
noted algorithms
examples brute
approach definition
multiplication selection
sort sequential
straightforward string
problems suggests
problem selecting
selecting constraints
desired traveling
solved theoretically
theoretically exhaustive
exhaustive algorithms
applied depth
bfs principal
principal graph
algorithms representing
forest investigation
investigation important
graph problem
sort array
solve instance
variables subject
prove algorithm
adjacent vertices
immediately implies
algorithms solving
algorithm solves
solving problems
implement algorithm
problem size
vertex edge
output maximum
problem set
definition problem
efficiency write
section general
method problem
general method
transportation network
prove equality
integers necessarily
problems solutions
algorithm recall
computing table
efficiency fact
values elements
output minimum
illustrate algorithm
algorithm extra
key set
fast problem
transportation networks
values output
problem good
special types
columns adjacency
graphs important
piece graph
figure root
levels starting
convenient assume
approaches solving
graph paper
digraph figure
modeled digraph
problem arbitrary
obtained figure
exists directed
path directed
paths subsets
digraph determine
algorithm speed
figure computing
recurrence subject
formula minimum
searches keys
fol lowing
vertices digraph
dag directed
subproblems solved
figure depicts
sums computed
input arrays
algorithm inventor
compute maximum
comparisons tree
tree design
beginning chapter
matrices computed
largest numbers
min figure
limit attention
careful analysis
algorithm applying
algorithm version
problem terms
integer array
method finding
problem row
matrix mentioned
prove matrix
numbers shown
keys root
tree efficiency
tree distinct
predecessor algorithm
formula sum
idea exploit
observations lead
multiplications computing
significantly larger
classical version
element remaining
bold pseudocode
requires finding
principal difference
repeating times
retrieved table
function called
cell words
applying key
keys equal
key figure
keys general
figure shows
decision pro
view tech
sequence defined
defined simple
simple recurrence
computing simply
accomplish task
straightforward application
algorithms compute
sequence section
section typical
typical algorithm
approach seeks
standard examples
technique applications
obvious initial
conditions max
optimal set
denominations united
denominations input
tions denominations
left corner
output largest
max algorithm
cell table
constant efficiency
path obtained
algorithm results
forward application
recurrence exponential
cutting problem
problem maximum
integer length
vertically square
minimum sum
numbers base
mial coefficient
elements zeros
equal probability
problem items
capacity valuable
exhaustive assume
algorithm derive
instance defined
feasible subsets
maximum values
maximal subset
column compute
data item
figure maximal
table item
capacity item
optimal selection
subsequent sections
solutions recurrence
direct approach
leads algorithm
implements idea
feasible subset
computed capacity
problem item
ming table
kinds efficiency
algorithm knap
knap problem
principal applications
applications implement
minimizing average
algorithm exhaustive
smaller instances
algorithm ways
node binary
column rows
tree maintain
entries table
tree entire
tree index
presents optimal
figure optimal
efficiency quadratic
values range
algorithm generates
trees constructed
tree generalize
binary algorithm
section algorithms
problem algorithms
relationship problem
ing dynamic
vertex information
vertex starting
paths digraph
edge paths
inter mediate
loss generality
algorithm formula
column element
element column
matrix boxed
algorithm situation
intermediate results
paths weighted
distances lengths
vertex figure
applicable undirected
directed weighted
presenting algorithm
academy sciences
vertex pairs
computes distance
vertex visiting
symbolically figure
leads recurrence
current distance
sum elements
row sum
figure illustrated
input weight
output distance
min efficiency
algorithm method
path figure
lists implement
storing elements
faster inputs
rewrite pseudocode
problem digraph
negative weights
connected path
smaller subproblem
problem principle
combinatorial optimization
interpreted application
important properties
algorithms problems
effi ciency
algorithms important
problems computational
exercises algorithm
sort input
edge vertex
operations research
output index
algorithm simply
final position
design linear
colored colors
sort stable
sections chapter
intellect distinguishes
distinguishes impossible
impossible reason
reason distinguishes
distinguishes senseless
senseless max
max born
born life
life views
views preceding
chapters encountered
encountered dozens
problems fair
fair assessment
assessment algorithms
solving tools
tools inescapable
inescapable powerful
powerful instruments
instruments executed
executed modern
computers power
power algorithms
algorithms unlimited
unlimited limits
limits subject
chapter problems
solved algorithmically
algorithmically polynomial
algorithms lower
methods obtaining
bounds estimates
estimates minimum
minimum needed
general obtaining
obtaining nontrivial
nontrivial lower
bound simple
simple sounding
sounding problem
task opposed
opposed ascertaining
task establish
establish limit
limit efficiency
algorithm unknown
unknown necessitates
necessitates careful
careful description
description operations
operations algorithms
algorithms allowed
allowed define
define carefully
carefully rules
game speak
speak claims
claims large
large dustbin
dustbin impossibility
impossibility related
related statements
statements celebrated
celebrated british
british physicist
physicist lord
kelvin heavier
heavier air
air flying
flying machines
machines impossible
impossible section
section discusses
discusses decision
applications establish
arrays result
mergesort binary
binary fastest
array intuition
intuition answers
answers questions
questions incidentally
incidentally decision
trees great
great vehicle
vehicle directing
directing solution
solution puzzles
puzzles coin
coin weighing
weighing problem
deals intractability
polynomial developed
developed area
area theoretical
science called
theory basic
basic elements
elements theory
theory discuss
discuss informally
informally fundamental
fundamental notions
notions problems
unresolved theoretical
science relationship
relationship problems
section chapter
deals numerical
science concerns
concerns algorithms
integrals nature
nature problems
problems imposes
imposes types
types limitations
limitations solved
solved solving
approximately requires
requires dealing
dealing numbers
rep resented
resented digital
digital precision
precision manipulating
manipulating approximate
approximate numbers
numbers proper
proper lead
lead inaccurate
inaccurate results
results solving
solving basic
basic quadratic
equation poses
poses sig
sig nificant
nificant difficulties
difficulties require
require modification
modification canonical
canonical formula
formula equation
equation roots
roots lower
bound arguments
arguments efficiency
ways establish
establish asymp
asymp totic
case class
class stands
stands respect
respect hierarchy
hierarchy efficiency
classes outlined
ple selection
quadratic fast
problem ficiency
ficiency exponential
exponential comparison
comparison akin
akin proverbial
proverbial comparison
comparison apples
apples oranges
oranges algorithms
algorithms solve
problems alternative
alternative possibly
possibly fairer
fairer approach
approach efficient
problem light
light selection
sort considered
considered log
turns fastest
fastest problem
solves ascertain
problem desirable
desirable efficiency
problem knowing
knowing lower
bound improvement
improvement achieve
achieve quest
quest algorithm
tight algorithm
class lower
bound constant
factor improvement
improvement gap
gap efficiency
efficiency fastest
bound door
door improvement
improvement remains
remains faster
bound proved
proved section
methods establishing
bounds illustrate
illustrate specific
examples analyzing
algorithms preceding
chapters distinguish
distinguish lower
minimum times
executed problem
difficult immediately
immediately conclude
numbers simple
simple prove
problem comparisons
odd trivial
bounds simplest
simplest method
method obtaining
class based
algorithm read
read items
items process
process write
write outputs
outputs yields
yields trivial
items size
size output
output bound
tight good
good algorithms
permutations spend
spend constant
initial section
anxn coefficients
coefficients easy
easy coefficients
coefficients processed
processed polynomial
case unprocessed
unprocessed coefficient
coefficient polynomial
polynomial nonzero
nonzero means
tight left
left evaluation
horner section
section linear
linear similar
vein trivial
bound computing
process elements
matrices generate
generate elements
product unknown
unknown bound
tight trivial
low trivial
trivial bound
bound traveling
input intercity
intercity distances
distances output
output cities
cities making
making optimal
optimal bound
bound useless
useless algorithm
running polynomial
polynomial function
function degree
degree obstacle
obstacle deriving
deriving meaningful
meaningful lower
bound method
method lies
lies determining
determining input
processed algorithm
processing elements
elements problem
determining connectivity
connectivity undirected
matrix plausible
plausible algorithm
algorithm existence
existence potential
potential edges
edges proof
proof fact
fact trivial
trivial information
theoretic arguments
arguments approach
approach outlined
outlined takes
account size
problem output
output information
information theoretical
theoretical approach
seeks establish
based information
game deducing
deducing positive
integer selected
questions answers
answers uncertainty
uncertainty algorithm
problem resolve
resolve measured
measured log
bits needed
needed possibilities
possibilities accurate
accurate yielding
yielding bit
bit information
output selected
selected algorithm
log steps
steps determine
determine output
output worst
case approach
approach exploited
exploited called
argument connection
connection information
information theory
theory proved
proved finding
bounds problems
involving comparisons
searching underlying
idea realized
realized precisely
precisely mechanism
mechanism decision
trees importance
importance technique
discuss separately
separately section
section adversary
adversary arguments
arguments revisit
revisit game
guessing idea
idea information
argument prove
questions worst
case playing
playing role
role hostile
hostile adversary
adversary make
algorithm questions
questions adversary
adversary starts
starts numbers
numbers potentially
potentially selected
selected cheating
cheating game
game concerned
concerned prove
assertion adversary
adversary leaves
numbers consistent
consistent previously
previously answers
answers strategy
strategy leaves
leaves half
half numbers
stops size
size set
set reduced
reduced adversary
adversary exhibit
exhibit legitimate
algorithm failed
failed simple
simple technical
technical log
log iterations
iterations shrink
shrink element
set halving
halving rounding
rounding size
remaining set
set log
asked algorithm
case illustrates
illustrates adversary
malevolent honest
honest adversary
adversary malevolence
malevolence makes
path honesty
honesty forces
forces consistent
consistent choices
choices lower
obtained measuring
measuring needed
needed shrink
shrink set
set potential
potential inputs
inputs single
single input
input consuming
problem merging
size single
size simplicity
assume distinct
solution encountered
discussing mergesort
section recall
recall merging
merging repeatedly
repeatedly comparing
elements remaining
remaining lists
lists outputting
outputting smaller
merging faster
faster turns
turns knuth
knuth knuiii
knuiii quotes
quotes adversary
method proving
proving lower
problem adversary
adversary true
true comparison
comparison merging
algorithm combined
combined consistent
consistent combined
algorithm explicitly
explicitly adjacent
adjacent pairs
elements comparisons
comparisons compared
compared transpose
transpose keys
keys consistent
consistent comparisons
comparisons distinguished
distinguished configuration
configuration lower
needed merging
reduction encountered
approach section
discussed algorithm
problem reducing
problem solvable
similar reduction
reduction idea
idea finding
finding lower
problem hard
bound words
words arbitrary
transformed efficient
efficient fashion
fashion instance
bound table
lists important
problems purpose
purpose table
table problems
problems establishing
bounds problem
bound tightness
tightness sorting
log searching
log multiplication
multiplication digit
integers unknown
unknown multiplication
matrices unknown
unknown establish
bounds sorting
searching sec
asks duplicates
duplicates numbers
problem sections
sections proof
proof lower
bound seemingly
analysis scope
scope pre
pre elementary
elementary exposition
exposition algebraic
lems table
table lower
bounds quoted
quoted trivial
trivial improved
improved remains
remains unknown
unknown establishing
bound reduction
reduction euclidean
plane construct
total length
bound element
transform set
plane simply
adding points
coordinate minimum
points shortest
edge checking
checking length
length edge
edge uniqueness
uniqueness numbers
numbers reduction
reduction implies
implies log
bound euclidean
final results
results complexity
problems reduction
technique relative
lems formulas
formulas problems
integers squaring
squaring digit
integer complexity
class seemingly
seemingly simpler
simpler similar
similar results
results matrix
matrix operations
operations multi
multi plying
plying symmetric
matrices turns
turns complexity
class multiplying
matrices result
result based
observation problem
matrices problem
multiplying symmetric
matrices transpose
transpose matrices
matrices stands
stands matrix
zeros needed
needed product
product easily
easily extracted
extracted true
true matrices
matrices original
original size
size minor
minor technical
technical complication
complication impact
impact complexity
classes results
results interesting
interesting encounter
encounter important
applications reduction
comparing problem
complexity section
solving alternating
disk puzzle
tight prove
prove classic
puzzle section
minimum disk
problems indi
cate bound
tight finding
array checking
checking completeness
completeness graph
matrix generating
set determining
determining real
numbers distinct
identifying lighter
lighter fake
coin identical
coins scale
scale information
argument text
text ques
ques tions
tions guessing
guessing game
game conclude
fake log
case tight
bound sorting
exchanging adjacent
elements adversary
adversary argument
argument proof
proof efficiency
checks connectivity
vertices provided
provided operation
operation allowed
allowed algorithm
algorithm inquire
inquire presence
graph lower
tight minimum
minimum comparisons
needed comparison
merge sorted
lists sizes
sizes elements
elements prove
validity product
matrices transformation
transformation product
product symmetric
matrices section
section formulas
formulas complexity
complexity equiva
equiva lence
lence multiplication
squaring integers
integers complexity
complexity equivalence
equivalence multiplication
squaring square
matrices reduced
reduced squaring
squaring matrix
matrix tight
numbers real
numbers tight
class placement
placement problem
exercises decision
searching comparing
comparing items
items inputs
inputs study
study performance
performance algorithms
algorithms device
device called
called decision
presents decision
numbers internal
tree represents
represents key
comparison node
subtree information
information subsequent
subsequent comparisons
comparisons subtree
subtree case
case sake
section input
input items
items distinct
distinct leaf
leaf represents
represents outcome
outcome algorithm
size leaves
leaves greater
greater outcomes
outcomes algorithms
algorithms outcome
outcome arrived
arrived chain
chain comparisons
figure important
important leaves
leaves large
large outcomes
outcomes algorithm
size traced
traced path
leaf decision
numbers run
run equal
path comparisons
case equal
algorithm decision
tree central
central idea
idea model
model lies
lies observation
observation tree
leaves dictated
dictated outcomes
outcomes tall
tall leaves
leaves specifically
specifically difficult
prove binary
leaves height
tree words
words immediately
implies inequality
inequality puts
puts lower
bound heights
heights binary
trees worst
bound called
called informationtheoretic
informationtheoretic lower
illustrate technique
technique important
trees sorting
algorithms comparison
based comparing
sorted studying
studying properties
properties decision
trees algorithms
algorithms derive
derive important
important lower
bounds efficiencies
efficiencies interpret
interpret outcome
outcome sorting
finding permutation
element indices
indices input
input puts
puts elements
elements ascending
ascending element
element orderable
items real
numbers strings
strings outcome
outcome obtained
obtained sorting
sorting figure
figure permutation
permutation general
general outcomes
sorting arbitrary
equal abc
abc cba
cba bac
bac cba
cba figure
element selection
sort triple
triple node
node state
sorted redundant
redundant comparisons
comparisons single
single outcome
outcome results
results previously
previously comparisons
comparisons inequality
inequality implies
implies height
case parisons
log cworst
log stirling
words log
mergesort makes
case asymptotically
asymptotically optimal
optimal implies
implies asymptotic
asymptotic lower
log tight
tight substantially
substantially improved
improved lower
log improved
improved values
log proved
proved comparisons
comparisons sufficient
sufficient sort
trees analyzing
analyzing average
efficiencies comparison
average depth
depth decision
leaves average
average path
leaves abc
abc bac
bac acb
acb bca
bca figure
sort decision
assumption outcomes
sorting equally
equally lower
bound average
cavg comparison
element proved
proved cavg
log earlier
earlier lower
log surprised
surprised lower
bounds average
cases identical
identical bounds
bounds obtained
obtained maximizing
maximizing compar
compar isons
cases sorting
efficiency significantly
efficiency decision
trees searching
array section
section decision
trees establishing
bounds key
problem binary
binary section
binary worst
case cwbsorst
cwbsorst formula
formula cwbsorst
cwbsorst log
log figure
figure ternary
trees determine
determine smallest
comparisons dealing
dealing comparisons
element natural
natural ternary
presents tree
tree case
case internal
key leaves
leaves matching
element case
successful interval
interval key
key belongs
belongs case
unsuccessful represent
represent algorithm
comparisons ternary
similar figure
elements decision
trees leaves
leaves successful
unsuccessful minimum
minimum height
height ternary
bound worst
bound smaller
binary large
prove lower
optimal turns
turns lower
binary ternary
figure internal
correspond comparisons
comparisons terminal
terminal nodes
nodes successful
searches leaves
represent unsuccessful
comparison decision
trees figures
figures illustrates
illustrates binary
simply ternary
tree middle
middle subtrees
subtrees eliminated
eliminated applying
applying inequality
inequality binary
trees immediately
immediately yields
yields cworst
inequality closes
closes gap
gap lower
bound worstcase
worstcase comparisons
log sophisticated
analysis knuiii
knuiii section
section shows
shows standard
assumptions searches
searches binary
binary makes
makes smallest
log successful
searches exercises
induction log
log ternary
median element
bound comparison
based gorithms
problem worst
algorithm greater
greater information
bound exists
prove impossibility
impossibility draw
cases element
element basic
basic sort
element enhanced
enhanced sort
sort stops
stops swaps
swaps design
comparisons design
sorted sequen
sequen tial
tial lower
bounds searching
integer information
bound finding
numbers comparison
algorithms bound
tight tournament
tournament tree
tree reflecting
reflecting results
results knockout
knockout tournament
tournament leaves
represent players
players entering
entering tournament
tournament internal
node represents
represents winner
winner played
played players
players represented
represented node
children winner
winner tournament
tournament represented
total games
games played
played tournament
tournament rounds
rounds tournament
tournament design
determine player
player information
information produced
produced tournament
tournament extra
extra games
games algorithm
require advanced
advanced fake
coins identical
identical appearance
appearance genuine
fake unknown
unknown fake
genuine scale
coins genuine
coin establish
establish lighter
genuine prove
weighings prove
prove exists
weighings draw
coin genuine
genuine draw
solves classic
classic version
extra coins
coins jigsaw
puzzle jigsaw
puzzle pieces
pieces section
section puzzle
puzzle set
set pieces
pieces connected
connected consists
consists connecting
connecting sections
algorithm minimize
minimize moves
moves required
required puzzle
puzzle problems
problems study
study computational
scientists computing
professionals problem
definition algorithm
efficiency belongs
belongs polynomial
notation problems
solvable logarithmic
logarithmic solvable
polynomial problems
called tractable
tractable problems
called intractable
intractable reasons
reasons drawing
drawing intractability
intractability line
line entries
table discussion
section imply
solve arbitrary
arbitrary instances
instances intractable
reasonable instances
instances small
small huge
huge difference
times polynomials
polynomials drastically
drastically degrees
degrees polynomial
algorithms degree
polynomial higher
higher addition
polynomials bound
bound running
large coefficients
polynomial functions
convenient properties
properties sum
sum composition
composition polynomials
polynomials fourth
fourth choice
choice class
class led
led development
development extensive
extensive theory
theory called
complexity seeks
problems inherent
inherent difficulty
difficulty theory
theory problem
problem intractability
intractability remains
remains principal
principal models
models computations
computations reasonable
reasonable input
input encoding
encoding schemes
schemes problem
problem consideration
consideration basic
basic notions
notions ideas
ideas complexity
theory section
section interested
interested formal
formal treatment
treatment theory
theory finding
finding wealth
wealth textbooks
textbooks devoted
devoted subject
subject aro
aro problems
product greatest
integers sorting
key pattern
string checking
graph finding
graph invited
invited examples
examples informally
informally problems
polynomial set
set science
science theoreticians
theoreticians formal
definition includes
includes decision
answers definition
deterministic algorithms
called polynomial
polynomial restriction
restriction decision
problems justified
justified reasons
reasons exclude
exclude problems
polynomial exponentially
exponentially large
large output
output problems
naturally generating
set permutations
items apparent
apparent outset
outset solved
problems natural
natural formulation
formulation reduced
reduced series
easier study
study minimum
minimum colors
colors needed
needed color
color vertices
color exists
exists coloring
vertices colors
colors called
called coloring
problem series
problem coloring
coloring solution
solves optimization
optimization version
version graph
natural decision
polynomial turns
turns fact
fact decision
called undecidable
undecidable opposed
opposed decidable
decidable problems
algorithm famous
famous undecidable
undecidable problem
problem alan
turing problem
called halting
input determine
determine halt
input working
working indefinitely
indefinitely surprisingly
surprisingly short
short proof
proof remarkable
remarkable fact
fact contra
contra diction
diction assume
assume algorithm
solves halting
input halts
output algorithm
pair construct
construct halts
input substituting
substituting halts
input contradiction
contradiction outcomes
outcomes completes
proof decidable
decidable intractable
examples surprisingly
small arise
naturally constructed
constructed sake
sake theoretical
theoretical argument
argument important
algorithm impossibility
impossibility algorithm
proved classic
classic monograph
monograph garey
garey johnson
johnson gar
gar problems
areas science
science mathematics
mathematics operations
research small
sample problems
category hamiltonian
vertex passes
vertices traveling
cities positive
integer distances
distances shortest
weights breakthrough
breakthrough contributions
science english
english mathematician
mathematician science
science pioneer
pioneer alan
turing recognition
recognition acm
acm principal
principal society
society computing
professionals researchers
researchers named
named award
award outstanding
outstanding contributions
science lecture
lecture occasion
occasion richard
richard karp
kar interesting
interesting historical
historical account
account development
development complexity
theory knapsack
problem valuable
items positive
knapsack positive
integer capacity
capacity partition
determine possi
possi ble
ble partition
items sizes
sizes positive
positive rational
bers larger
larger smallest
smallest bins
bins size
graph chromatic
chromatic smallest
colors assigned
assigned graph
vertices assigned
assigned color
color integer
minimum linear
integer valued
valued variables
subject finite
set constraints
linear equalities
inequalities problems
version counterparts
counterparts coloring
problems common
common exponential
worse growth
growth choices
choices function
fall umbrella
umbrella solved
polynomial eulerian
problem existence
existence traverses
traverses edges
graph solved
solved checking
checking addition
addition graph
degrees striking
striking counterintuitive
counterintuitive problem
cycles traversing
traversing edges
edges eulerian
eulerian circuits
circuits easier
easier seemingly
seemingly similar
cycles visiting
hamiltonian circuits
circuits common
common feature
feature vast
fact solving
computationally difficult
difficult checking
problem computationally
computationally easy
easy polynomial
polynomial proposed
solution randomly
generated leaving
leaving task
task verifying
verifying validity
validity easy
easy proposed
proposed vertices
distinct consecutive
edge general
observation decision
problems led
led scientists
scientists notion
notion nondeterministic
definition nondeterministic
algorithm stage
procedure takes
input instance
problem nondeterministic
stage arbitrary
arbitrary string
generated thought
thought candidate
candidate solution
instance gibberish
gibberish deterministic
deterministic verification
stage deterministic
deterministic algorithm
input outputs
outputs represents
instance algorithm
returns allowed
allowed halt
halt nondeterministic
solves decision
problem returns
returns execution
execution words
words require
require nondeterministic
algorithm capable
capable guessing
guessing solution
verify validity
validity output
output instance
instance finally
finally nondeterministic
algorithm nondeterministic
efficiency verification
stage polynomial
polynomial define
define class
problems definition
solved nondeterministic
called nondeterministic
polynomial decision
problems class
class includes
includes problems
problem deterministic
deterministic polynomialtime
polynomialtime algorithm
solves verification
stage nondeterministic
simply ignores
ignores string
generated nondeterministic
stage hamiltonian
problem decision
versions traveling
knapsack graph
coloring hundreds
problems cataloged
cataloged gar
gar halting
problem rare
rare examples
examples decision
problems leads
leads important
science proper
subset classes
classes fact
fact symbolically
symbolically imply
imply hundreds
combinatorial decision
algorithm scientists
scientists failed
failed algorithms
algorithms persistent
years decision
problems cast
cast doubts
doubts possibility
possibility problems
problems informally
informally problem
reduced polynomial
polynomial shown
shown symbolically
concepts definition
problem exists
exists function
function transforms
transforms instances
instances maps
maps instances
instances computable
computable polynomial
definition immediately
implies problem
polynomial definition
problem belongs
belongs class
reducible fact
fact closely
closely related
related decision
reducible surprising
surprising prove
prove hamiltonian
traveling problems
notion problem
polynomial reductions
reductions problems
problem shown
shown arrows
arrows salesman
stated existence
existence problem
problem hamil
circuit longer
longer positive
integer graph
weights map
graph instance
representing stance
problem assigning
assigning weight
edge adding
weight pair
pair nonadjacent
nonadjacent vertices
bound hamiltonian
vertices transformation
transformation polynomial
polynomial instance
circuit image
image length
length making
making image
problem conversely
conversely hamiltonian
length larger
larger length
length circuit
circuit edges
edges making
making inverse
inverse image
problem completes
proof notion
completeness requires
requires polynomial
reducibility problems
problems unknown
unknown problem
problem bewildering
bewildering variety
variety decision
problems short
short amazing
amazing specific
problems neverthe
neverthe mathematical
mathematical feat
accomplished independently
independently stephen
stephen cook
cook united
states leonid
leonid levin
levin soviet
union paper
paper cook
cook coo
coo showed
showed called
called cnf
problem cnf
deals boolean
boolean expressions
expressions boolean
expression represented
represented conjunctive
conjunctive normal
normal expression
expression involving
involving boolean
boolean variables
variables negations
negations denoted
denoted cnf
asks assign
assign values
values true
false variables
variables boolean
expression cnf
cnf make
make entire
true easy
easy formula
formula true
false entire
true cook
cook levin
levin discovery
discovery problems
scientists hundreds
thousands exam
exam ples
versions men
men tioned
tioned hamiltonian
circuit traveling
salesman partition
partition bin
packing graph
coloring problems
problems history
history science
science breakthrough
breakthrough discoveries
discoveries independently
independently simultaneously
simultaneously scientists
scientists fact
fact levin
levin introduced
introduced general
general notion
completeness decision
problems paper
paper lev
lev published
years cook
cook leading
leading candidate
candidate problem
integer prime
prime composite
composite portant
theoretical breakthrough
breakthrough professor
professor manindra
manindra agrawal
agrawal students
students neeraj
neeraj kayal
kayal nitin
nitin saxena
saxena indian
indian institute
institute technology
technology kanpur
kanpur announced
announced discovery
discovery deterministic
algorithm primality
testing agr
agr algorithm
solve related
related problem
problem factoring
factoring large
large composite
composite integers
integers lies
lies heart
heart widely
widely encryption
called rsa
algorithm riv
riv showing
showing decision
problem steps
steps problem
problem randomly
generated string
string checked
checked polynomial
polynomial determine
determine represents
problem typically
typically easy
problem reducible
polynomial transitivity
transitivity polynomial
polynomial reduction
reduction showing
showing problem
polynomial figure
transformation ingenious
ingenious incomparably
incomparably simpler
simpler proving
existence transformation
reducibility decision
problem implies
implies easy
easy decision
definition completeness
completeness immediately
implies exists
exists deterministic
deterministic algo
words finding
finding polynomial
candidate completeness
completeness figure
figure proving
proving completeness
completeness reduction
problem qualitative
difference complexity
complexity checking
finding polyno
polyno mial
mial vast
problems kinds
kinds implications
implications make
make scientists
scientists successful
successful finding
finding mathematical
proof intriguing
intriguing conjecture
conjecture sur
sur prisingly
prisingly interviews
interviews authors
authors lives
lives discoveries
discoveries prominent
scientists sha
sha cook
cook uncertain
uncertain eventual
eventual resolution
resolution dilemma
dilemma levin
levin contended
contended outcome
outcome eventual
eventual proves
proves knowing
knowing problem
practical implications
implications today
today means
means faced
problem aim
aim gaining
gaining fame
fame fortune
fortune designing
designing polynomial
solving instances
instances approaches
approaches seek
seek alleviate
alleviate intractability
problems approaches
approaches outlined
outlined chapter
exercises game
chess posed
posed decision
problem legal
legal positioning
positioning chess
chess pieces
pieces information
information determine
determine win
win decision
problem decidable
decidable problem
running nlog
nlog assertions
problem tractable
tractable problem
problem intractable
intractable impossible
impossible examples
examples graphs
graphs examples
examples graph
graph eulerian
circuit hamiltonian
graph includes
includes vertices
vertices hamil
circuit clay
clay mathematics
mathematics institute
institute cmi
cmi cambridge
cambridge massachusetts
massachusetts designated
designated prize
prize solution
problem graphs
graphs chromatic
chromatic design
design polynomial
deter vertices
graph colored
colors adjacent
color brute
solving composite
composite num
ber problem
problem successive
successive integers
integers divisors
divisors divides
evenly composite
composite algorithm
class state
state decision
version problems
problems outline
outline polynomial
algorithm verifies
verifies proposed
assume proposed
solution represents
represents legitimate
input verification
verification algorithm
problem bin
reducible determine
integer clique
size clique
vertices determine
integer vertex
size vertex
edge belongs
belongs iii
iii determine
integer independent
size independent
subset vertices
adjacent determine
determine problem
problem sequences
sequences uppercase
uppercase lowercase
lowercase letters
letters select
select letter
letter sequence
sequence selecting
selecting upper
upper lowercase
lowercase versions
versions letter
letter sequences
sequences abc
abc choose
choose sequence
sequence fourth
fourth make
make required
required selections
selections sequences
sequences kar
kar diagrams
diagrams contradict
contradict current
current state
state knowledge
knowledge complexity
classes npc
npc problems
problems npc
npc king
arthur expects
expects knights
knights annual
annual dinner
dinner camelot
camelot unfortu
unfortu nately
nately knights
knights quarrel
quarrel arthur
arthur quarrels
quarrels arthur
arthur seat
seat guests
guests table
table quarreling
quarreling knights
knights sit
sit standard
standard problem
model king
arthur task
task research
research project
project proof
proof arthur
arthur problem
solution knight
knight quarrel
quarrel knights
knights challenges
challenges numerical
algorithms numerical
science cerned
cerned algorithms
problems description
description important
important clarification
clarification problems
integrals opposed
opposed problems
problems discrete
mathematics dealing
dealing structures
structures graphs
graphs trees
trees permutations
combinations efficient
problems stems
arise models
models real
life phe
phe nomena
nomena natural
world social
social sciences
sciences fact
analysis main
main area
area research
research study
study application
application science
science rapid
proliferation computers
computers business
business everyday
everyday life
deal primarily
primarily storage
retrieval information
relative importance
importance numerical
analysis shrunk
shrunk years
years applications
applications enhanced
enhanced power
power modern
computers areas
areas fundamental
fundamental research
research technology
technology inter
inter ests
ests wide
wide world
world modern
modern computing
computing important
important understanding
understanding special
challenges posed
posed continuous
discuss variety
variety difficulties
difficulties posed
posed modeling
modeling task
task describing
describing real
life phenomenon
phenomenon mathematical
mathematical terms
terms assuming
assuming principal
principal obstacles
obstacles solving
problem major
obstacle fact
sis problems
approximately replacing
infinite finite
finite approximation
approximation computed
computed approximating
approximating infinite
infinite taylor
taylor series
series finite
finite sum
terms called
called nth
nth degree
polynomial definite
integral function
function approximated
approximated finite
finite weighted
weighted sum
sum values
values composite
trapezoidal calculus
calculus class
class figure
figure errors
approximations called
called truncation
major tasks
tasks numerical
analysis estimate
estimate magnitudes
magnitudes truncation
truncation solving
equations polynomial
evaluation discussed
sections rare
rare exceptions
exceptions figure
figure composite
trapezoidal errors
errors typically
typically calculus
calculus tools
tools elementary
elementary advanced
advanced approximation
approximation max
max segment
endpoints formula
formula makes
makes determine
determine degree
polynomial needed
needed predefined
predefined accuracy
approximation compute
compute formula
formula truncation
proceed estimate
estimate formula
max bound
bound desired
desired accuracy
accuracy solve
solve inequality
inequality compute
values smallest
smallest inequality
inequality holds
holds similarly
similarly approximation
approximation standard
standard bound
bound truncation
error inequality
inequality max
max interval
interval asked
asked inequality
inequality exercises
problems errors
errors called
called errors
errors caused
caused accuracy
accuracy represent
represent real
digital errors
errors arise
arise irrational
numbers definition
definition require
require infinite
infinite digits
digits exact
exact representation
representation rational
numbers overwhelming
overwhelming majority
majority situations
situations real
base unsophisticated
unsophisticated calculators
calculators digits
digits representing
representing fractional
fractional called
called mantissa
mantissa integer
exponent range
values approximately
approximately symmetric
symmetric accuracy
accuracy floating
floating representation
representation depends
depends significant
digits representation
representation computers
computers levels
levels precision
precision single
single precision
precision typically
typically equivalent
equivalent significant
digits precision
digits extended
extended precision
digits higher
precision arithmetic
arithmetic slows
slows computations
computations overcome
overcome problems
problems caused
caused errors
errors higher
precision algorithm
algorithm approximation
approximation kind
kind important
important distinguish
distinguish absolute
representing approximation
approximation absolute
error undefined
undefined large
arithmetic phenomena
phenomena called
called underflow
underflow respec
respec tively
tively arithmetic
operation yields
result range
range floating
numbers typical
examples arise
arise multiplication
numbers division
division small
small eliminate
eliminate problem
problem making
making simple
simple expression
expression evaluated
evaluated replacing
replacing expression
expression equal
equal computing
computing logarithm
logarithm expression
expression underflow
underflow occurs
occurs result
result operation
operation nonzero
nonzero fraction
fraction small
small magnitude
magnitude represented
represented nonzero
nonzero floating
floating underflow
underflow numbers
replaced special
special generated
generated hardware
hardware event
event occurred
occurred important
important addition
addition inaccurate
inaccurate representation
numbers arithmetic
performed exact
exact subtracting
numbers large
error phenomenon
called subtractive
cancellation irrational
numbers relative
approximations small
small relative
difference floating
floating representations
representations large
error accurate
accurate approximations
approximations significant
significant magnification
magnification error
error lowaccuracy
lowaccuracy difference
difference divisor
divisor encountered
discussing gaussian
elimination section
section solution
solution partial
pivoting numerical
involve thousands
thousands millions
millions arithmetic
algorithms propagation
propagation errors
major practical
theoretical standpoints
standpoints algorithms
algorithms errors
errors propagate
propagate algorithm
operations increasing
increasing effect
effect highly
highly undesirable
undesirable property
property numerical
called instability
instability problems
problems exhibit
exhibit high
high sensitivity
input impossible
design stable
called ill
conditioned linear
solution sensitive
sensitive small
small coefficient
matrix slightly
slightly values
values solution
previous coefficient
singular minor
minor coefficients
coefficients yield
yield solutions
solutions depending
depending values
values formal
formal detailed
discussion degree
degree ill
ill condition
condition coefficient
matrix numerical
analysis textbooks
textbooks ger
ger conclude
conclude problem
coefficients secondary
school algebra
algebra equation
roots discriminant
discriminant nonnegative
nonnegative roots
roots formula
solution posed
posed problem
problem mathematician
mathematician concerned
concerned solution
designer major
obstacle evaluating
evaluating square
root positive
integers irrational
irrational computed
approximately method
roots commonly
commonly taught
taught secondary
school ton
ton method
method generates
sequence approximations
approximations nonnegative
nonnegative formula
formula initial
approximation chosen
possibilities difficultto
difficultto prove
prove sequence
sequence decreasing
converges generating
elements difference
difference consecutive
elements predefined
predefined error
error tolerance
tolerance sufficiently
sufficiently approximation
approximation sequence
sequence converges
converges fast
needed scale
scale interval
interval formula
formula integer
integer apply
apply newton
newton algorithm
compute simplicity
simplicity scaling
scaling numbers
decimal places
places standard
standard numerical
analysis notation
notation offs
offs approximations
approximations exact
exact issue
roots squared
squared pun
pun intended
intended home
home free
free write
formula impact
impact errors
errors obstacles
obstacles faced
faced menace
menace subtractive
cancellation larger
root computed
error paper
paper george
forsythe equation
equation true
true roots
roots significant
digits george
forsythe noted
noted numerical
numerical analyst
analyst played
played leading
leading role
role establishing
establishing science
science academic
academic discipline
discipline united
states words
words epigraph
epigraph preface
preface formula
formula computations
computations decimal
decimal floating
arithmetic significant
digits relative
error approximating
approximating small
small root
large possibility
possibility subtractive
cancellation formula
obtained danger
cancellation denominator
denominator computed
computed standard
formula danger
danger cancellation
cancellation positive
positive case
case symmetric
symmetric formulas
formulas case
case considered
considered cases
cases obstacles
obstacles applying
formula related
related limitations
limitations floating
arithmetic small
small division
division fight
fight danger
cancellation computing
computing calculating
calculating precision
precision problems
problems overcome
overcome william
william kahan
kahan university
toronto algorithm
considered significant
significant achievement
achievement history
history numerical
analysis overview
overview piqued
piqued seek
seek information
information books
devoted exclusively
exclusively numerical
chapter classic
classic methods
unknown exercises
exercises textbooks
textbooks define
define significant
approximation largest
largest nonnegative
definition significant
approximation approximate
approximate absolute
error exceeding
exceeding range
range relative
approximations approximate
approximate obtained
obtained degree
polynomial compute
compute truncation
error approx
approx imation
imation result
result theoretical
theoretical prediction
prediction section
section derive
formula composite
trapezoidal composite
trapezoidal approximate
approximate definite
integrals truncation
error approximation
approximation pare
pare formula
formula esin
esin xdx
xdx computed
computed composite
trapezoidal large
large subintervals
subintervals truncation
equations ill
conditioned write
write solve
equation prove
prove nonnegative
nonnegative sequence
sequence newton
computing strictly
converges initial
approximation prove
method needed
needed apply
apply iterations
method compute
compute estimate
estimate absolute
absolute relative
errors approximation
approximation summary
summary class
bound efficiency
class trivial
produced information
obtained mecha
mecha nism
nism decision
technique comparison
searching specifically
specifically general
case general
case adversary
malevolent adversary
adversary forces
forces algorithm
path lower
bound established
established reduction
reduction reducing
theory seeks
complexity principal
principal split
split tractable
tractable intractable
polynomial purely
purely technical
technical reasons
reasons complexity
theory concentrates
concentrates decision
answers halting
problem undecidable
undecidable decision
polynomial class
problems randomly
randomly guessed
guessed solutions
solutions verified
verified polynomial
problems hamiltonian
problems reducible
polynomial proof
problem completeness
completeness published
published cook
cook cnf
subset important
science discovery
discovery polynomial
algorithm thousands
thousands problems
problems imply
imply numerical
science dealing
dealing solving
solving continuous
problems types
types errors
errors solving
solving majority
problems truncation
error truncation
errors stem
stem replacing
infinite objects
objects finite
finite approximations
approximations errors
errors inaccuracies
inaccuracies representing
representing numbers
digital subtractive
cancellation result
result subtracting
lead sharp
sharp relative
relative roundoff
roundoff error
error avoided
avoided changing
changing expression
expression higher
precision computing
difference writing
writing general
general solving
solving quadratic
quadratic equations
equations difficult
roots solved
solved utilizing
utilizing newton
problem subtractive
cancellation dealt
dealt formulas
formulas depending
depending coefficient
coefficient positive
negative computing
computing discriminant
discriminant precision
plutarch sertorius
sertorius teach
teach soldiers
soldiers perseverance
perseverance wit
wit brute
brute horses
horses brought
brought set
men tails
tails men
men burly
burly hercules
hercules tugged
tugged purpose
purpose sharp
sharp weasel
weasel faced
faced tailor
tailor plucked
plucked hair
hair roars
roars laughter
laughter left
left tail
tail cobham
cobham brewer
brewer dictionary
dictionary phrase
phrase fable
fable decrease
instance relationship
exploited leads
leads naturally
naturally recursive
recursive implementa
chapter ultimate
ultimate implementation
implementation nonrecursive
nonrecursive variation
variation implemented
implemented iteratively
iteratively starting
starting solution
smallest instance
called incremental
incremental approach
approach major
constant decrease
factor variable
constant variation
variation size
reduced constant
constant iteration
typically constant
constant equal
figure constant
constant size
size reductions
reductions occasionally
occasionally exponentiation
integer relationship
obtained obvious
formula function
technique multiplying
times brute
algorithm thought
thought process
process interesting
interesting examples
sections decrease
factor technique
suggests reducing
instance constant
applications constant
factor equal
equal algorithm
half idea
idea illustrated
figure revisit
revisit exponentiation
compute obvious
obvious relationship
relationship instances
instances integer
integer exponents
exponents odd
compute valued
valued exponents
exponents result
result summarize
summarize formula
formula problem
half conquer
technique positive
positive odd
compute recursively
recursively formula
formula algorithm
efficiency multiplications
iteration size
size reduced
reduced half
half expense
expense multiplications
multiplications examples
efficient examples
examples kind
kind finally
finally variable
decrease variety
divisor good
good situation
situation recall
formula gcd
mod argument
argument smaller
smaller left
left decreases
decreases constant
factor examples
section insertion
array technique
idea assume
assume smaller
array solved
solved sorted
size advantage
advantage solution
problem taking
account element
elements insert
insert scanning
scanning sorted
sorted subarray
equal encountered
encountered insert
insert element
element resulting
called straight
simply insertion
sort based
algorithm iteratively
iteratively shown
figure starting
starting ending
ending inserted
inserted elements
sorted selection
sort generally
generally final
algorithm insertionsort
insertionsort sorts
array insertion
nondecreasing smaller
equal greater
sort inserted
inserted proper
position preceding
elements previously
previously sorted
sorting insertion
sort vertical
vertical separates
separates sorted
element inserted
inserted bold
bold operation
figure basic
comparison faster
faster actual
implementation germane
germane algorithm
implementation sentinel
sentinel problem
exercises eliminates
eliminates altogether
altogether key
case executed
executed largest
largest times
fact ith
sort elements
elements preceding
input albeit
albeit sorted
sorted worst
words worst
array strictly
input cworst
case insertion
section case
executed iteration
iteration outer
loop input
nondecreasing makes
makes sense
sense case
solved case
case discussion
quicksort chapter
chapter sorted
comparisons cbest
cbest good
performance case
case sorted
arrays convenient
sorted files
files arise
arise variety
applications insertion
sort preserves
preserves excellent
excellent performance
performance inputs
inputs rigorous
rigorous analysis
efficiency based
based investigating
investigating element
element pairs
pairs problem
exercises shows
shows randomly
arrays insertion
makes average
half comparisons
comparisons decreasing
arrays cavg
cavg fast
performance coupled
coupled excellent
excellent efficiency
efficiency sorted
arrays makes
makes insertion
sort stand
stand principal
principal petitors
petitors elementary
addition extension
extension named
named shellsort
shellsort inventor
inventor shell
shell algorithm
sorting moderately
moderately large
files problem
exercises ferrying
ferrying soldiers
soldiers detachment
detachment soldiers
soldiers wide
wide deep
deep river
river bridge
bridge sight
year boys
boys playing
playing rowboat
rowboat shore
shore boat
boat tiny
tiny hold
hold boys
boys soldier
soldier soldiers
soldiers river
river leave
leave boys
boys joint
joint possession
possession boat
boat times
times boat
boat shore
shore alternating
alternating glasses
glasses standing
filled soda
soda drink
drink remaining
remaining glasses
glasses make
make glasses
glasses alternate
alternate filled
pattern minimum
minimum glass
glass moves
moves gar
gar solve
problem glasses
glasses drink
drink initially
initially random
random marking
marking cells
cells design
task cells
cells infinite
infinite sheet
sheet graph
paper marked
marked cell
cell odd
odd marked
neighbors cells
cells considered
considered neighbors
neighbors horizontally
vertically diagonally
diagonally marked
cells contiguous
contiguous region
region path
pair marked
cells sequence
sequence marked
neighbors kor
kor design
generating power
elements power
algorithm connectivity
algorithm connected
connected input
true connected
connected false
connected definition
definition connected
connected algorithm
correctly undirected
case team
team ordering
ordering results
results completed
completed robin
robin tournament
tournament teams
teams played
played game
game ended
ended victory
victory teams
teams design
algorithm lists
lists teams
teams sequence
sequence team
team lose
lose game
game team
team listed
listed immediately
immediately efficiency
apply insertion
alphabetical sentinel
sentinel element
sorted checking
checking bound
bound condition
condition iteration
iteration loop
loop insertion
sort sentinel
version efficiency
class original
version implement
implement insertion
sorting linked
version text
text implementation
implementation insertion
ver sion
algorithm insertsort
insertsort swap
swap efficiency
compared version
version section
sortable elements
elements simplicity
assume elements
called inversion
inversion arrays
largest inversions
inversions questions
questions smallest
smallest inversions
inversions average
comparisons insertion
sort formula
cavg shellsort
shellsort accurately
accurately shell
shell sort
works applying
applying insertion
sort interleaving
interleaving sublists
sublists formed
formed stepping
stepping increment
increment predefined
predefined decreasing
sequence sizes
sizes algorithm
works sequence
sequences yield
yield efficiency
sequence reverse
reverse purpose
purpose apply
apply shellsort
shellsort stable
implement shellsort
shellsort straight
choice performance
sizes increasing
sizes topological
graphs variety
involving prerequisite
prerequisite restricted
restricted tasks
tasks pose
pose problem
problem review
basic facts
facts directed
digraph short
short graph
lists principal
principal means
means representing
representing digraph
digraph notable
notable differences
differences undirected
graphs representing
representing adjacency
matrix directed
symmetric edge
nodes digraph
traversal started
started depth
breadth principal
algorithms traversing
traversing digraphs
digraphs structure
structure forests
forests complex
complex undirected
graphs simple
simple figure
figure exhibits
exhibits types
types edges
ancestors forward
vertices descendants
descendants tree
children edges
edges aforementioned
aforementioned types
types edge
edge dfs
parent case
case presence
digraph sequence
connected predecessor
predecessor edge
directed predecessor
predecessor successor
successor directed
figure conversely
conversely dfs
digraph edges
dag acronym
acronym directed
edge directions
directions lead
lead questions
questions digraphs
digraphs meaningless
meaningless trivial
trivial undirected
discuss motivating
motivating set
set required
required courses
courses student
student degree
degree courses
prerequisites met
met prerequisites
prerequisites requires
requires student
student term
term student
student courses
courses situation
situation modeled
represent courses
courses directed
edges prerequisite
prerequisite requirements
requirements figure
figure terms
terms digraph
edge starts
edge ends
ends ordering
ordering digraph
called topological
sorting posed
posed figure
representing prerequisite
prerequisite structure
structure courses
courses popping
popping topologically
topologically sorted
digraph topological
solved dfs
indicating popping
popping solution
arbitrary digraph
digraph easy
directed topological
dag turns
turns dag
dag sufficient
sufficient topological
cycles topological
algorithms verify
verify digraph
dag ordering
vertices solves
solves topological
simple application
popped traversal
stack reversing
reversing yields
problem provided
provided edge
encountered traversal
traversal edge
encountered digraph
dag topological
sorting vertices
vertices impossible
impossible algorithm
vertex popped
popped dfs
vertices popped
popped edge
listed popped
popped reversed
reversed figure
illustrates application
figure drawn
drawn edges
digraph left
statement requires
requires venient
venient visually
visually correctness
correctness solution
instance topological
problem delete
delete solution
illustration source
problem iteration
iteration vertex
edges deleted
deleted digraph
digraph algorithm
direct implementation
implementation decrease
technique repeatedly
repeatedly remaining
remaining digraph
digraph source
edges delete
edges outgoing
outgoing sources
sources break
break arbitrarily
exercises vertices
deleted yields
problem application
representing courses
courses figure
obtained source
obtained dfs
problem alternative
alternative solutions
solutions tiny
tiny size
size create
impression topological
large project
project construction
construction research
research software
software development
development involves
involves multitude
multitude interrelated
interrelated tasks
tasks prerequisites
prerequisites thing
thing situation
situation make
set prerequisites
prerequisites contradictory
contradictory convenient
convenient solve
problem project
project digraph
digraph thinking
thinking scheduling
scheduling tasks
tasks minimize
total completion
completion project
project require
require algorithms
general books
books operations
research special
special cpm
cpm critical
critical path
method pert
pert evaluation
evaluation review
review technique
technique methodologies
methodologies applications
applications topological
sorting science
science instruction
instruction scheduling
scheduling compilation
compilation cell
cell evaluation
evaluation ordering
ordering spreadsheet
spreadsheet formulas
formulas resolving
resolving symbol
symbol dependencies
dependencies linkers
linkers exercises
apply dfs
problem digraphs
digraphs prove
prove topological
solution dag
dag digraph
vertices largest
largest distinct
solutions topological
efficiency dfs
sorting modify
modify dfs
algorithm reversing
reversing vertex
generated dfs
dfs vertices
vertices pushed
pushed dfs
stack popped
popped solve
apply source
algorithm digraphs
digraphs problem
prove nonempty
nonempty dag
dag source
operation source
operation implement
implement source
lists running
implement topological
experiment running
times digraph
digraph called
distinct vertices
vertices exists
path general
general digraph
disjoint maximal
maximal subsets
subsets vertices
vertices mutually
mutually accessible
accessible directed
subsets called
components digraph
algorithms identifying
identifying strongly
components simpler
efficient dfs
ends reverse
reverse directions
digraph starting
starting restarting
restarting traversal
traversal highest
highest numbered
vertices strongly
vertices dfs
dfs trees
trees obtained
obtained traversal
traversal apply
determine strongly
components efficiency
algorithm answers
answers adjacency
representation input
input digraph
digraph strongly
components dag
dag spider
spider web
web spider
spider sits
sits web
web fly
fly sits
sits ways
ways spider
spider fly
fly moving
moving web
web lines
lines directions
directions arrows
arrows kor
kor algorithms
objects section
combi natorial
objects important
important types
types combinatorial
permuta tions
set typically
typically arise
arise problems
require consideration
consideration choices
choices encountered
encountered chapter
chapter discussed
discussed exhaustive
exhaustive combinatorial
objects stud
stud ied
ied discrete
mathematics called
called combinatorics
combinatorics mathematicians
mathematicians primarily
primarily interested
interested counting
counting formulas
formulas ful
ful formulas
formulas items
items generated
generated combinatorial
faster function
size primary
lies algorithms
objects counting
counting generating
permutations simplicity
assume underlying
elements permuted
permuted simply
simply set
set integers
integers generally
generally interpreted
interpreted indices
technique problem
problem generate
permutations assuming
assuming smaller
solved solution
solution larger
larger inserting
inserting positions
permutation elements
elements permu
tations obtained
obtained fashion
fashion distinct
distinct total
permutations insert
insert previously
previously generated
generated permutations
permutations left
left turns
turns beneficial
beneficial inserting
inserting moving
left direction
direction permutation
permutation processed
processed applying
applying approach
approach figure
figure advantage
advantage generating
permutations stems
fact satisfies
satisfies minimal
requirement permutation
permutation tained
tained predecessor
predecessor exchanging
exchanging elements
elements method
method discussed
discussed elements
elements adjacent
adjacent insert
left figure
generated figure
figure minimal
requirement beneficial
beneficial algorithm
speed applications
applications permutations
permutations section
section needed
needed permutations
permutations cities
cities solve
solve traveling
generated minimal
length predecessor
predecessor constant
constant linear
linear ordering
ordering permutations
elements explicitly
explicitly generating
smaller values
values associating
associating direction
direction element
element permutation
permutation direction
direction small
small arrow
arrow written
written element
element mobile
mobile arrow
arrow marked
marked permutation
permutation arrow
points smaller
smaller adjacent
adjacent permutation
mobile notion
notion mobile
element description
description johnson
permutations algorithm
algorithm johnsontrotter
johnsontrotter implements
implements johnson
permutations initialize
element largest
element swap
swap adjacent
element arrow
points reverse
reverse direction
direction elements
larger permutation
permutation application
algorithm largest
element shown
bold algorithm
efficient generating
permutations implemented
implemented run
run proportional
proportional permutations
permutations horribly
horribly small
values algorithm
algorithm fault
fault problem
simply asks
asks generate
generate items
items permutation
permutation ordering
generated johnsontrotter
johnsontrotter algorithm
algorithm natural
natural permutation
permutation case
case permutations
permutations listed
increasing called
called lexicographic
lexicographic der
der listed
listed dictionary
dictionary numbers
numbers interpreted
interpreted letters
alphabet generate
permutation lexi
lexi cographic
cographic case
case half
half permutations
permutations simply
simply transpose
transpose elements
permutation longest
longest decreasing
decreasing suffix
suffix exchanging
exchanging smallest
element suffix
suffix greater
greater reverse
reverse suffix
suffix increasing
increasing pseudocode
algorithm origins
origins century
century india
india algorithm
algorithm lexicographicpermute
lexicographicpermute generates
generates permutations
lexicographic input
lexicographic initialize
permutation consecutive
elements increasing
increasing largest
index largest
index swap
swap decreasing
decreasing reverse
reverse elements
elements inclusive
inclusive permutation
permutation generating
subsets recall
section examined
examined knapsack
asks valuable
capacity exhaustive
discussed based
based generating
items section
subsets abstract
abstract set
set mathematicians
mathematicians set
set power
decrease idea
idea immediately
immediately applicable
problem subsets
subsets divided
divided groups
group subsets
element obtained
adding subset
subset subsets
subsets adding
elements application
subsets illustrated
figure similarly
similarly generating
permutations generate
generate power
power sets
sets smaller
smaller sets
sets convenient
convenient solving
based correspondence
correspondence subsets
subsets figure
length easiest
easiest establish
establish correspondence
correspondence assign
assign subset
subset bit
string belongs
belongs subset
subset mentioned
mentioned idea
idea bit
bit vectors
vectors section
section bit
string correspond
correspond subset
set correspond
correspond set
represent correspondence
correspondence generate
length generating
generating successive
successive binary
numbers padded
padded leading
leading case
case bit
strings subsets
strings generated
lexicographic symbol
alphabet subsets
subsets natural
natural called
called squashed
squashed subset
subset involving
involving listed
listed subsets
subsets involving
involving case
case element
easy adjust
adjust bit
yield squashed
squashed ordering
ordering subsets
subsets involved
involved problem
exercises challenging
challenging exists
exists minimal
strings differs
differs predecessor
predecessor single
bit language
language subsets
subset differ
differ predecessor
predecessor addition
deletion single
strings called
code frank
frank gray
gray researcher
researcher bell
bell laboratories
laboratories reinvented
reinvented minimize
minimize effect
effect errors
errors transmitting
transmitting digital
digital signals
signals ros
ros years
earlier french
french engineer
engineer mile
mile baudot
baudot codes
codes telegraphy
telegraphy pseudocode
pseudocode generates
generates binary
code recursively
algorithm brgc
brgc generates
generates recursively
recursively binary
code input
output bit
length composing
composing gray
code make
strings generate
strings size
size calling
calling brgc
brgc reversed
reversed bit
string bit
string append
append correctness
algorithm stems
fact generates
generates bit
strings distinct
distinct assertions
assertions easy
easy mathematical
induction binary
code cyclic
cyclic bit
string differs
differs single
bit nonrecursive
code problem
exercises realistic
realistic implement
set generate
permutations minimal
algorithm johnson
lexicographic algorithm
apply lexicographicpermute
lexicographicpermute multiset
multiset generate
generate correctly
correctly permutations
lexicographic implementation
implementation algorithm
generating mutations
mutations discovered
discovered hea
hea algorithm
algorithm heappermute
heappermute implements
implements algorithm
integer global
global array
elements write
write heappermute
heappermute odd
odd swap
swap algorithm
efficiency heappermute
heappermute generate
set algorithms
algorithms outlined
simple make
subsets squashed
squashed write
pseudocode recursive
length write
write nonrecursive
length implements
implements bit
strings arrays
arrays binary
binary additions
additions generate
binary reflexive
reflexive gray
code nonrecursive
binary flexive
flexive gray
code bit
generate ith
ith bit
string flipping
flipping bit
bit previ
previ ous
ous bit
string position
position significant
significant binary
representation design
generating combinations
combinations items
items chosen
chosen element
algorithm minimal
algorithm gray
code tower
hanoi disk
moves classic
puzzle generating
code binary
code solving
solving tower
puzzle fair
fair attraction
attraction olden
olden days
days encounter
encounter attraction
attraction fair
fair light
bulb connected
connected switches
switches lighted
lighted switches
switches closed
closed controlled
controlled button
button pressing
pressing button
button toggled
toggled state
state light
bulb design
algorithm light
bulb minimum
minimum button
button pushes
pushes needed
needed worst
case switches
switches decrease
algorithms recall
recall introduction
chapter decrease
factor major
major variety
technique mentioned
mentioned exponentiation
exponentiation squar
squar ing
ing defined
defined formula
formula section
important binary
binary decrease
run logarithmic
logarithmic ing
efficient reduction
reduction factor
factor rare
rare binary
binary remarkably
remarkably efficient
array works
works comparing
comparing key
array middle
stops operation
repeated recursively
recursively half
half apply
array iterations
algorithm table
index iteration
binary based
idea easily
easily implemented
implemented nonrecursive
pseudocode nonre
nonre cursive
algorithm binarysearch
binarysearch implements
implements nonrecursive
nonrecursive binary
sorted ascending
ascending key
standard analyze
binary times
times key
array sake
simplicity called
called comparisons
comparisons assumes
assumes comparison
determine smaller
larger comparisons
make array
elements depends
depends specifics
specifics instance
problem key
inputs arrays
searches comparison
algorithm faces
faces situation
situation array
size recurrence
relation cworst
cworst convince
convince rounded
rounded initial
condition written
written encountered
encountered recurrence
condition section
section recurrence
solution initial
condition cworst
log similarly
similarly case
exercises solution
formula tweaked
tweaked solution
solution valid
integer cworst
log formula
formula deserves
deserves attention
attention implies
implies worst
log fully
fully expected
expected algorithm
simply reduces
reduces size
half iteration
iteration iterations
needed initial
size final
final size
log reiterate
reiterate section
slowly values
small large
comparisons element
element establish
establish element
comparisons sorted
size average
binary phisticated
shows average
binary slightly
smaller worst
case cavg
log accurate
accurate formulas
formulas average
unsuccessful cayvegs
cayvegs log
log canvog
canvog log
optimal searching
algorithm restrict
restrict erations
erations comparisons
comparisons keys
keys section
section searching
algorithms interpolation
interpolation section
section hashing
hashing quire
quire array
special calculations
calculations addition
addition key
comparisons finally
finally idea
idea binary
binary applications
applications searching
searching ben
ben addition
addition applied
applied solving
unknown discuss
continuous analogue
analogue binary
binary called
method bisection
bisection section
section fake
problem versions
versions fake
coin identification
identification problem
problem illustrates
illustrates decrease
factor strategy
strategy identical
fake scale
algorithm detecting
detecting fake
coin easier
easier version
discuss assumes
assumes fake
lighter genuine
genuine natural
natural idea
idea solving
coins leaving
leaving extra
coin odd
odd challenging
challenging version
version assumes
assumes additional
relative weights
weights fake
fake genuine
coins presence
presence fake
coin coins
coins pursue
pursue difficult
difficult version
version exercises
section piles
piles scale
scale piles
piles coin
coin fake
fake proceed
proceed manner
manner lighter
lighter pile
pile fake
coin easily
easily set
needed algorithm
recurrence familiar
familiar identical
identical worst
binary difference
difference initial
condition similarity
similarity surprising
technique halving
halving instance
recurrence weighings
weighings similar
similar binary
log elementary
elementary outright
outright boring
boring interesting
interesting fact
efficient coins
coins details
details precise
precise formulation
formulation developed
developed section
exercises instructor
instructor forgets
forgets demand
demand instructor
instructor assign
assign problem
problem weighing
weighing piles
piles instance
factor weighings
weighings log
log russian
multiplication nonorthodox
nonorthodox algorithm
multiplying positive
called multiplication
multiplication russe
russe russian
method positive
integers product
size deal
deal obvious
problem larger
smaller odd
odd slight
slight adjustment
adjustment formula
formula formulas
formulas trivial
trivial case
case compute
product recursively
recursively iteratively
iteratively computing
figure extra
extra addends
addends shown
shown parentheses
parentheses figure
rows odd
column product
product simply
column odd
odd column
column figure
algorithm involves
involves simple
simple operations
operations halving
halving doubling
doubling adding
adding feature
feature attractive
attractive figure
computing russian
method memorize
memorize table
table multiplications
multiplications feature
feature algorithm
algorithm attractive
attractive russian
russian peasants
peasants accord
accord ing
ing western
western visitors
visitors widely
widely nineteenth
nineteenth century
century method
named fact
fact method
method egyptian
egyptian mathematicians
mathematicians early
early cha
cha leads
fast hardware
hardware implementa
tion doubling
doubling halving
halving binary
numbers performed
performed shifts
shifts basic
operations machine
machine josephus
problem josephus
problem named
named flavius
flavius josephus
josephus famous
famous jewish
jewish historian
historian participated
participated chronicled
chronicled jewish
jewish revolt
revolt romans
romans josephus
josephus general
general managed
managed hold
hold fortress
fortress jotapata
jotapata days
days fall
fall city
city refuge
refuge diehards
diehards nearby
nearby cave
cave rebels
rebels voted
voted perish
perish surrender
surrender josephus
josephus proposed
proposed dispatch
dispatch neighbor
neighbor determined
determined casting
casting lots
lots josephus
josephus contrived
contrived draw
draw lot
lot surviving
surviving men
men cave
cave prevailed
prevailed intended
intended victim
victim surrender
surrender romans
romans people
people numbered
numbered stand
stand circle
circle starting
starting grim
grim person
person eliminate
eliminate person
person survivor
survivor left
determine survivor
survivor figure
figure people
eliminated circle
circle people
people initial
initial positions
eliminated leaving
leaving sole
sole survivor
survivor initial
position people
eliminated convenient
convenient people
positions convenience
convenience figure
figure instances
instances josephus
problem subscript
numbers person
position eliminated
eliminated solutions
solutions convenient
cases odd
odd separately
separately circle
circle yields
yields instance
problem half
half initial
size difference
difference position
numbering person
easy initial
person simply
simply position
position relationship
relationship hold
hold survivor
survivor case
odd eliminates
eliminates people
positions elimination
elimination person
left instance
position corresponds
corresponds position
numbering position
figure odd
values closed
solution case
subject initial
condition requires
requires ingenuity
ingenuity applying
applying backward
substitutions fact
fact solution
apply forward
forward substitutions
substitutions values
values discern
pattern prove
validity mathematical
induction leave
leave execution
execution exercises
exercises alternatively
alternatively gkp
gkp exposition
exposition josephus
problem interestingly
interestingly elegant
elegant closed
closed involves
involves binary
representation size
obtained bit
exercises cutting
cutting stick
stick inches
inches cut
cut inch
inch pieces
pieces outline
performs task
cuts pieces
pieces stick
stick cut
cut formula
cuts design
half algorithm
log determine
efficiency largest
keys array
require largest
comparisons searched
searched binary
binary average
binary successful
successful array
assume key
key searched
searched probability
probability average
binary unsuccessful
unsuccessful array
keys intervals
intervals formed
formed array
elements equally
equally estimate
average successful
successful sorted
elements binary
binary sequential
efficiency sequential
sequential implemented
linked true
true searching
sorted binary
binary design
design version
version binary
binary comparisons
comparisons implement
choice carefully
carefully debug
debug programs
programs notorious
notorious prone
prone bugs
bugs analyze
comparison version
version designed
designed picture
picture guessing
guessing version
version popular
popular problem
solving task
task involves
involves pre
senting people
people array
array pictures
pictures rows
rows pictures
pictures target
target picture
questions answered
answered people
people required
required picture
questions efficient
problem largest
largest questions
questions ternary
ternary algorithm
array simply
simply key
key single
array recursively
recursively comparing
comparing larger
larger determine
determine array
based set
recurrence key
assume solve
binary array
integers increasing
increasing integer
integer range
range missing
missing design
algorithm missing
missing integer
integer efficiency
algorithm handles
handles properly
properly values
values multiples
multiples set
weighings algorithm
solve large
values times
based dividing
dividing coins
piles apply
apply russian
compute standpoint
standpoint efficiency
efficiency russian
pseudocode russian
class russian
multiplication solution
power josephus
compute discern
pattern solutions
solutions values
validity prove
validity bit
representation variable
principal variety
divisor section
good kind
kind algorithm
section encounter
examples variety
variety computing
computing median
median selection
finding kth
called kth
kth statistic
statistic simply
scan smallest
element interesting
interesting case
asks element
element larger
larger half
smaller half
half middle
middle called
called median
median important
notions mathematical
mathematical statistics
statistics kth
element sorting
sorting selecting
selecting kth
element output
output sorting
fast sorting
mergesort discussed
log immediately
immediately sorting
sorting entire
entire overkill
overkill problem
asks entire
entire kth
element advantage
advantage idea
idea partitioning
element general
general rearrangement
rearrangement elements
left elements
pivot elements
equal principal
principal algorithmic
alternatives partition
array discuss
discuss lomuto
partitioning ben
ben hoare
chapter idea
idea lomuto
parti tioning
tioning helpful
helpful array
array generally
subarray consideration
consideration composed
composed contiguous
contiguous seg
seg ments
ments listed
listed pivot
pivot segment
smaller segment
equal segment
compared fig
ure segments
segments case
case segments
segments algorithm
starts starting
starting algorithm
scans subarray
left maintaining
maintaining structure
structure partition
achieved iteration
iteration pares
pares element
element unknown
unknown segment
segment pointed
pointed scanning
scanning index
figure pivot
pivot simply
simply incremented
incremented segment
equal shrinking
shrinking processed
processed segment
smaller expanded
expanded incrementing
incrementing index
illustration lomuto
element segment
segment swapping
swapping incrementing
incrementing element
element shrunk
shrunk unprocessed
unprocessed segment
segment unprocessed
unprocessed elements
algorithm swaps
swaps pivot
pivot achieve
partition sought
sought figure
algorithm lomutopartition
lomutopartition partitions
subarray lomuto
position pivot
pivot swap
swap advantage
advantage partition
partition kth
element assume
indexed starting
starting partition
element occupied
occupied pivot
pivot partitioning
partitioning pivot
pivot kth
element solves
problem kth
array kth
element left
left partitioned
partitioned array
element solve
problem outright
outright instance
instance smaller
smaller solved
solved approach
approach recursively
called quickselect
quickselect kth
quickselect algorithm
quickselect solves
recursive partition
elements integer
output kth
element lomutopartition
lomutopartition partition
quickselect fact
fact idea
idea implemented
implemented recursion
recursion nonrecursive
version adjust
adjust apply
apply partition
algorithm median
median fol
lowing numbers
numbers task
task smallest
array partitioning
partitioning showing
showing pivots
pivots bold
bold smaller
proceed array
array median
median greater
efficient quickselect
quickselect partitioning
array requires
requires key
comparisons produces
produces split
split solves
problem requiring
requiring iterations
iterations case
case cbest
extremely unbalanced
unbalanced partition
case iterations
iterations specific
specific worst
case strictly
array implies
implies cworst
cworst compares
compares poorly
poorly straightforward
straightforward sorting
approach mentioned
beginning selection
problem discussion
discussion usefulness
usefulness partition
depends algorithm
case fortunately
fortunately careful
careful mathematical
analysis shown
shown average
efficiency linear
linear fact
fact scientists
discovered sophisticated
sophisticated choosing
pivot quickselect
quickselect guarantees
guarantees linear
case blo
blo complicated
complicated recommended
recommended practical
applications noting
noting partition
solves general
identifying smallest
elements kth
element interpolation
called interpolation
binary compares
compares key
key middle
middle sorted
array reduces
size half
half interpolation
interpolation takes
account key
key sense
sense algorithm
algorithm mimics
mimics index
figure index
index computation
computation interpolation
named brown
brown middle
middle beginning
beginning action
action searching
named smith
smith precisely
precisely iteration
iteration dealing
dealing array
array portion
portion leftmost
leftmost element
element rightmost
rightmost element
algorithm assumes
assumes array
values linearly
linearly straight
points accuracy
accuracy assumption
assumption algorithm
efficiency correctness
correctness key
computed coordinate
coordinate straight
coordinate equal
figure writing
writing standard
standard equation
equation straight
line passing
passing points
points substituting
substituting solving
solving leads
formula logic
logic approach
approach straightforward
straightforward array
values increasing
increasing accurately
accurately decreasing
values increased
increased linearly
linearly simplest
simplest manner
manner index
formula expected
expected location
location array
equal formula
formula applied
applied comparing
comparing algorithm
stops equal
equal proceeds
proceeds searching
searching manner
manner elements
indexed depending
reduced priori
priori analysis
efficiency shows
shows interpolation
interpolation log
average searching
keys function
slowly comparisons
small constant
constant practically
practically feasible
feasible inputs
exercises worst
case interpolation
interpolation linear
linear considered
considered bad
bad performance
performance assessing
assessing worthiness
worthiness interpolation
binary robert
sedgewick wrote
wrote edition
edition algorithms
binary smaller
smaller files
files interpolation
interpolation large
files applications
applications comparisons
comparisons expensive
expensive access
access costs
costs high
high section
continuous counterpart
counterpart interpolation
tree revisit
revisit binary
recall binary
node elements
element tree
recursively manner
manner tree
tree ends
ends failure
failure tree
root desired
element stopped
stopped left
subtree iteration
tree reduced
reduced searching
searching smaller
smaller binary
tree size
height decrease
decrease tree
height iteration
tree giving
giving excellent
excellent variable
case binary
tree severely
severely skewed
skewed tree
insertions increasing
keys figure
comparisons making
making worst
operation fall
fall fortunately
fortunately average
log precisely
precisely key
needed binary
tree built
built random
keys log
log insertion
insertion key
tree identical
searching exemplifies
exemplifies variablesize
variablesize decrease
technique efficiency
characteristics operation
operation figure
trees increasing
increasing sequence
keys decreasing
keys game
nim games
games features
features players
players randomness
randomness hidden
hidden information
information permitted
permitted players
players information
information gameplay
gameplay game
game impartial
impartial player
player moves
moves game
game position
position finite
finite moves
moves leads
game ends
ends win
win players
players ties
ties winner
winner player
player prototypical
prototypical games
games nim
nim generally
generally game
pile version
version single
chips players
turns removing
removing pile
chips vary
vary lower
limits wins
game taking
chip player
moving players
players make
moves instance
game winning
player winning
strategy sequence
moves results
results victory
victory moves
moves opponent
opponent makes
makes instance
game losing
player leads
leads winning
position opponent
opponent standard
approach determining
determining positions
positions winning
losing investigate
investigate small
values logical
logical instance
losing player
make instance
player instance
losing taking
taking allowed
allowed chips
chips puts
position illustration
player leaves
leaves opponent
opponent chips
losing figure
illustration pile
nim maximum
chips numbers
numbers chips
pile losing
player circled
circled winning
winning moves
moves winning
winning positions
positions shown
bold position
position chips
position difficult
difficult pattern
pattern formally
formally proved
induction instance
player multiple
multiple winning
strategy mod
mod chips
chips deviation
deviation strategy
strategy puts
position pile
nim appeared
appeared summation
summation game
game published
published recreational
recreational mathematics
mathematics authored
authored claude
claude gaspar
gaspar bachet
bachet french
french aristocrat
aristocrat mathematician
mathematician player
player picks
picks positive
integer opponent
opponent turns
turns adding
adding integer
integer player
player winner
winner dud
dud general
general nim
nim played
chips sizes
sizes player
player chips
chips single
pile goal
goal player
make easy
figure wins
game hint
hint game
game instances
instances differs
differs solution
solution general
case nim
nim unexpected
unexpected based
based binary
representation pile
sizes pile
sizes binary
binary compute
compute binary
binary digital
digital sum
sum defined
sum binary
digits discarding
discarding words
words binary
digit sum
sum ith
position addends
addends odd
odd turns
turns instance
nim winning
player nim
nim instance
losing instance
sum zeros
zeros commonly
commonly played
played instance
sum instance
instance winning
moving winning
player bit
strings nim
sum difficult
difficult accomplish
accomplish chips
pile ingenious
ingenious solution
solution game
nim discovered
discovered harvard
harvard math
math ematics
ematics professor
professor bouton
bouton years
ago mathemati
mathemati cians
cians developed
developed general
general theory
theory games
games excellent
excellent account
account theory
applications specific
specific games
games monograph
monograph berlekamp
berlekamp conway
conway guy
guy ber
ber exercises
divisor size
decrease iteration
iteration euclid
decrease factor
factor successive
successive iterations
iterations euclid
apply quickselect
quickselect median
numbers write
pseudocode nonrecursive
nonrecursive implementation
implementation quickselect
quickselect derive
formula underlying
underlying interpolation
interpolation worst
input interpolation
interpolation algorithm
smallest log
log greater
greater determine
determine assertions
true log
log iii
iii log
algorithm deleting
deleting key
outline variable
constructing eulerian
circuit connected
degrees mise
mise pile
nim called
called mise
mise version
version pile
nim player
player taking
chip loses
game conditions
conditions game
game pile
chips player
player takes
takes chips
game moldy
moldy chocolate
chocolate players
turns breaking
breaking chocolate
chocolate spoiled
square break
break single
single straight
line cutting
cutting boundaries
boundaries squares
squares break
break player
player broke
broke eats
eats piece
piece spoiled
square player
player left
left spoiled
square loses
write interactive
interactive game
game make
make winning
position random
random legitimate
legitimate losing
position flipping
flipping pancakes
pancakes sizes
sizes stacked
stacked allowed
allowed flipper
flipper pancakes
pancakes flip
flip stack
stack flipper
flipper purpose
purpose pancakes
pancakes size
size biggest
biggest visualization
visualization puzzle
puzzle interactive
interactive mathematics
mathematics miscellany
miscellany puzzles
puzzles site
site bog
bog design
puzzle matrix
column sorted
increasing design
problem laa
laa summary
summary decrease
exploited recursively
recursively major
constant insertion
sort decrease
factor binary
binary variable
sort direct
cases fast
notable advantage
advantage good
performance sorted
arrays digraph
edges topological
asks vertices
digraph edge
digraph vertex
vertex points
graph directed
cycles algorithms
solving topological
based depth
depth based
technique decrease
technique natural
natural approach
approach developing
developing algo
generating elementary
elementary combinatorial
objects efficient
efficient class
algorithms minimal
minimal algorithms
ber combinatorial
objects grows
fast algorithms
algorithms practical
binary efficient
array principal
principal decrease
examples exponentiation
exponentiation squaring
squaring identifying
coin scale
scale russian
multiplication josephus
problem decrease
algorithms size
reduction varies
algorithms euclid
problem interpolation
tree nim
nim exemplifies
exemplifies games
games proceed
proceed series
series diminishing
diminishing instances
instances game
nodes tree
solution problem
keeping mind
remaining numbers
considered section
computing positive
based checking
discussed previous
algorithms designed
designed executed
sequential algorithms
section computing
algorithm improvements
problem rearrange
points called
polygon points
represented approximately
discuss chapter
define height
height defined
defined length
called multiway
lists binary
discussion quicksort
middle element
operation repeated
equal larger
recurrence problem
require special
surprising algorithms
position left
closed solution
hoare algorithm
generally subarray
achieve partition
pseudocode implementing
implementing partitioning
partitions subarray
lomuto algorithm
element pivot
pivot input
output partition
partition position
entire array
partition algorithm
choosing pivot
robert sedgewick
tree recall
tree recursively
problems binary
examples variable
algorithm partition
specific implementations
general strategy
dif ferent
single processor
numbers compute
sum efficient
efficient compute
algorithm necessarily
necessarily efficient
brute solution
chapter epigraph
approach yields
important efficient
conquer problem
dividing instance
size instances
growth solution
constants growth
growth function
theorem recurrence
recurrence equation
yields exact
people algorithms
degenerate cases
conquer design
single sorted
array recursive
initialized elements
elements operation
arrays element
algorithm large
advanced sorting
linear extra
pairs array
secondary memory
mergesort exercises
exercises write
arrays elements
largest set
values largest
integer set
mentioned chapter
mergesort section
section taking
class array
algorithm counting
squares board
position array
array partition
discussed selection
array sorting
algorithm lomuto
lomuto partition
turing award
fundamental contributions
pivot element
element lomuto
element elements
element greater
scanning entire
section makes
quicksort efficiency
diminishing sizes
comparisons equal
quicksort average
position comparisons
runs faster
mergesort heapsort
nontrivial sizes
persistent efforts
efforts years
basic algorithm
sedgewick sed
sorted size
log sorting
efficiency heapsort
pivot make
implementation details
issue computing
section definition
height max
tree comparisons
numbers additions
frequently executed
figure called
figure similar
equality total
nodes leaves
algorithm recursive
recursive node
section applications
node trees
prove make
make correction
algorithm stack
algorithm recur
tree yield
searching randomly
multiplication section
interesting algorithm
tiplying digit
impossible design
tions turns
integers positive
apply method
product digit
recurrence multiplications
digit decimal
decimal integers
total additions
asymptotic growth
growth multipli
quality implementing
oriented language
feat accomplished
algorithm published
makes multipli
numbers replaced
problems solving
chapter exercises
outlined text
large integer
algorithm additions
sizes smaller
experiment determine
hull problems
discussed brute
classic prob
problem dimensional
points distinct
distinct assume
solve closest
figure points
easy prove
distance brute
sorting log
fact efficiency
directed line
line set
fact convex
constructed manner
hulls set
line figure
hull points
vertices upper
algorithm geometric
fact analytical
geometry arbitrary
arbitrary points
positive left
distance line
performance algorithm
dimensional closest
algorithm presorting
presorting input
input set
sorting mergesort
study examples
based observations
solution previous
quickhull algorithm
devise algorithm
theorem establishes
original array
considered examples
integers requires
applied important
language choice
graph digraph
years ago
algorithm sequence
nonnegative integers
iterations algorithm
numbers equal
general design
variety problems
methods algorithm
algorithms natural
standard formula
algorithm analysis
character strings
set multiset
searching algorithms
directed edges
algorithms considered
smallest colors
problem mentioned
applications require
dimensional array
called edge
figure vertices
connecting vertices
matrix undirected
lists figure
vertices path
vertex edges
subtree rooted
length longest
trees called
set operations
general algorithm
figure binary
valuable subset
successful searches
product matrices
element row
subset item
donald knuth
partic ularly
ularly important
based ideas
mod remainder
integers output
straightforward version
design idea
longer linked
important efficiency
simpler algorithms
general terms
prime common
actual applications
case records
special characters
strings characters
word text
idea boyer
array counting
algorithm comparisoncountingsort
comparisoncountingsort sorts
game board
organizing data
data stored
information data
needed access
called linear
edges relative
relative vertices
special symbol
starting root
vertex binary
types trees
figure child
dictionary implemented
hashing balanced
dictionary abstract
implement operations
sorted elements
sort simply
comparisons selection
sort addition
standing row
filled pattern
principal traversal
indices elements
moving left
size factor
faster average
kth element
algorithm scans
position index
array called
constructed successive
efficiency turns
log outline
algorithm quadratic
scan compute
compute frequencies
bits key
elements auxiliary
values sorted
home address
date birth
explained earlier
perfectly balanced
node nodes
tree balanced
single key
node split
leaf parent
root created
key parent
parent node
height smallest
nodes figure
tree inserting
keys letters
nodes key
nodes height
node keys
leaf keys
tree starting
assume simplicity
nodes log
important case
key deleted
quicksort heapsort
integers range
operation important
compute simply
problems general
reader interested
key equal
tree allowing
function points
values table
gested horspool
discussed solved
recording solu
problem table
table solu
obtained discuss
space algo
resources space
efficient data
structure represent
leads faster
efficiency principal
algorithms depth
structure repre
graphs adjacency
representation numbers
compres sion
compression algorithm
sorted element
called comparison
state array
array figure
quadratic algorithm
operation comparison
makes minimum
sorted scan
bound upper
items information
process sorting
array left
range array
array efficiency
efficient sorting
values sort
vertices design
applied problem
matching recall
called pattern
called text
algorithm knu
algorithm suggested
suggested horspool
horspool hor
algorithm random
pattern make
entire pattern
formula pattern
entries initialize
pattern algorithm
table summarize
encountered case
index left
text comprises
simple demonstrate
efficiency hor
random texts
algorithm faster
algorithm comparison
fails algorithm
algorithm shifts
text shift
positive negative
case occurrence
case shift
pattern substring
size computed
algorithm entirety
pattern matching
text interested
iteration good
dna sequences
alphabet gene
table gene
text length
comparisons brute
pattern counterpart
section efficient
integer called
alphabet assign
ord mod
larger ord
excessively large
efficiency hash
obtained treating
based computing
exercises fact
simple function
comparing string
string unsuccessful
searches unsuccessful
lists longer
scheme makes
constant operation
efficiency result
method illustrated
surprisingly small
bad news
determine fixed
condition satisfied
mod small
knui knuii
knuii knuiii
practical experience
solution situation
current table
ing symbol
checking positions
main mem
cells table
result questions
nary operations
section table
problem natural
language text
set partic
set large
pointers node
called node
typical application
tree correspond
principal indicator
equal height
tree positive
log inequality
log operation
similar algorithm
section apply
apply procedure
keys sorted
node pointer
tions tree
fact tree
exercises examples
figure assume
insert operation
tree principal
write visualization
space algorithm
application called
algorithm efficiency
case efficiency
running times
problems arise
log binary
element sorted
log key
orderable items
method computing
key comparisons
edges graph
upper bound
algorithm based
important role
efficient implementation
ith iteration
version problem
product compute
values column
procedure algorithm
successive insertions
total key
draw binary
comparisons searching
analytical geometry
log sort
exercises asks
values variables
input matrix
linear algebra
times longer
root node
root keys
tree keys
equal log
section log
evaluating polynomial
algorithm binary
solving equation
function variables
constraints linear
problem special
version knapsack
problem assign
algorithm assumption
algorithm data
applications design
appro priate
algorithm selected
algorithms fact
applications transportation
solution graph
route subway
subway passenger
passenger designated
designated station
station developed
developed subway
washington london
string length
pointer chain
chain node
dense graphs
vertex weight
length figure
balls representing
representing edges
figure connected
connected acyclic
necessarily connected
vertex length
tree length
tree called
subtree vertex
vertex left
assigned vertices
linked nodes
large set
require dynamic
dynamic partition
partition element
set collection
subsets initialized
initialized collection
collection element
subsets collection
collection subjected
subjected sequence
sequence intermixed
intermixed union
algorithm applications
path pair
problem directed
algorithm vertex
arbitrarily problem
simply scan
elements figure
practical applications
element index
sequence moves
maximum chips
easy figure
prove instance
group design
sum spent
algorithm dominated
based greedy
edges common
intervals real
sum difference
modification called
vertically horizontally
structures implementing
height subtree
rooted node
extensive experiments
tree smallest
properties heaps
tree largest
previously constructed
root larger
exercises construct
tree sort
algorithm interested
interested reader
scan bit
graph paths
airline crew
crew scheduling
important stress
weight selected
modification makes
crossing puzzle
trees discussed
solution sequence
feasible problem
steps algorithm
problem case
approximate solution
fact solve
figure proceed
proof section
moves needed
board diagonally
manhattan distance
difference row
numbers difference
final comment
books cor
points direct
problems traveling
points vertices
tree undirected
weights assigned
graph easy
fact difficult
published years
arbitrarily set
set graph
tree information
shortest edge
tree simple
set vertex
figure set
exercises graph
algorithm making
minimum crossing
scale weights
adding edges
tree outline
subgraph edges
edges sum
algorithm begins
sorting graph
initialize set
fortunately efficient
integers principal
takes longer
alternatives simple
forest representation
large size
alternative implementing
edges directed
figure sake
usefulness amortized
sophisticated analysis
arbitrary graph
version quick
unit square
euclidean plane
called source
path starts
version traveling
paths edges
cation networks
algorithms finding
algorithm mid
source edges
left unspecified
vertices labeling
labeled vertices
initialize vertex
section tree
illustration shortest
make improvement
problem shortest
vertex numbers
numbers path
coding scheme
generally ith
free simply
subtree tree
tree sum
node define
sum length
game guessing
chosen possibilities
playing game
section figure
structing optimal
problem constructing
assigned node
leaves problem
compute average
questions asked
solution optimization
problem sequence
checking condition
length root
encoding scheme
times faster
log comparisons
discuss algorithms
stems fact
technique based
exponentiation problem
sort section
sort makes
arrays sizes
directed acyclic
elements left
algorithm works
numbers algorithm
algorithm inputs
algorithms discussed
sorts array
line segments
traversal algorithms
problem convex
sorted algorithm
design algorithm
figure tree
sorting array
computing algorithm
based idea
elements equal
successful men
men success
success result
result steady
steady accretion
accretion alexander
alexander graham
graham bell
bell greedy
strategy considered
considered preceding
chapter constructs
constructs solution
problem piece
piece adding
adding locally
optimal piece
piece partially
solution chapter
discuss approach
approach designing
algorithms optimization
problems starts
starts feasible
solution satisfies
problem proceeds
proceeds repeated
repeated applications
applications simple
simple typically
localized yielding
yielding feasible
solution improved
function improves
stops obstacles
obstacles successful
successful implementation
idea initial
initial feasible
problems trivial
trivial solution
solution approximate
initial solution
solution require
require effort
effort solving
solution identified
identified allowed
allowed feasible
solution efficiently
efficiently current
current solution
solution locally
optimal fundamental
fundamental difficulty
difficulty issue
issue local
local global
global extremum
extremum maximum
minimum problem
finding highest
highest hilly
hilly area
area map
map foggy
foggy day
day logical
logical thing
thing walking
walking hill
hill impossible
impossible direction
direction lead
lead reached
reached local
local highest
highest feasibility
feasibility simple
simple highest
highest global
global maximum
maximum entire
entire area
area fortunately
solved iterativeimprovement
iterativeimprovement algorithms
important linear
programming encountered
encountered topic
section simplex
programming discovered
dantzig algorithm
proved consequential
consequential achievements
algorithmics section
network links
links capacities
capacities problem
case linear
programming special
structure makes
method outline
outline classic
classic iterative
problem discovered
american mathematicians
mathematicians ford
fulkerson sections
deal bipartite
optimal pairing
elements disjoint
sets examples
examples matching
matching workers
workers jobs
jobs high
high school
graduates colleges
colleges men
women marriage
marriage section
maximizing matched
pairs section
section concerned
concerned matching
matching stability
stability discuss
discuss iterative
section approximation
knap problems
examples iterative
algorithms textbook
textbook moret
moret shapiro
shapiro mor
mor books
books continuous
continuous discrete
discrete optimization
optimization nem
nem literature
literature heuristic
heuristic mic
mic simplex
method encountered
encountered linear
programming section
subject set
set linear
constraints maximize
ainxn mentioned
mentioned important
practical problems
problems modeled
modeled instances
instances linear
programming researchers
researchers kantorovich
kantorovich soviet
union dutch
dutch american
american koopmans
koopmans awarded
awarded nobel
prize contributions
contributions linear
programming theory
economics apparently
apparently nobel
prize mathematics
mathematics royal
royal swedish
swedish academy
sciences failed
failed honor
honor mathematician
mathematician dantzig
dantzig universally
universally recognized
recognized father
father linear
programming modern
modern inventor
inventor simplex
geometric interpretation
interpretation linear
programming general
small fundamental
prop erties
erties problems
vari ables
ables maximize
subject definition
definition feasible
problem satisfies
points instructive
instructive sketch
sketch feasible
region cartesian
plane recall
recall equation
equation coefficients
equal defines
defines straight
points easy
easy determine
determine half
planes line
line inequalities
inequalities hold
hold set
region constraints
region obtained
obtained intersection
intersection half
planes quadrant
quadrant cartesian
defined nonnegativity
constraints figure
vertices intersection
intersection lines
lines obtained
equations task
task optimal
region largest
function feasible
solutions objective
function equals
equals points
equal line
common points
points george
dantzig received
received honors
honors national
medal science
science presented
presented president
president united
states citation
citation states
states national
medal awarded
awarded inventing
inventing linear
programming discovering
discovering methods
methods led
led wide
wide scale
scale scientific
scientific technical
technical applications
problems logistics
logistics scheduling
scheduling network
network optimization
optimization computers
computers making
making efficient
efficient mathematical
mathematical theory
theory figure
region figure
figure posed
posed infinitely
infinitely feasible
equal intersection
intersection points
line feasible
region lines
lines slope
slope line
line defined
equation constant
constant lines
lines called
called lines
lines objective
problem restated
restated finding
largest parameter
parameter line
common feasible
region line
line shifting
line south
south west
west changing
changing slope
slope feasible
region hits
hits region
region shifting
line north
north east
east hits
hits feasible
region means
means optimal
problem maximal
equal maximize
maximize objective
line largest
largest coincide
coincide boundary
boundary line
segment slope
slope lines
lines draw
draw line
segment vertices
vertices optimal
solutions yielding
yielding maximal
function figure
solving dimensional
dimensional linear
problem geometrically
geometrically linear
solution vertex
vertex feasible
region qualifications
qualifications begin
begin feasible
constraints contradictory
contradictory requirements
requirements points
region called
called infeasible
infeasible problems
solutions complication
complication arise
region unbounded
unbounded demonstrates
demonstrates reverse
reverse inequalities
unbounded figure
unbounded objective
function attain
attain finite
finite optimal
optimal problem
solution points
region making
making large
called unbounded
unbounded problem
minimizing subject
solution figure
figure unbounded
constraints lines
lines function
function fortunately
important features
features examples
considered hold
hold problems
region typical
typical linear
problem ways
ways similar
similar convex
convex polygons
polygons dimensional
dimensional cartesian
plane specifically
specifically finite
finite vertices
vertices mathematicians
mathematicians extreme
points section
section optimal
problem extreme
region reiterate
reiterate properties
properties theorem
theorem extreme
extreme theorem
solution timal
region theorem
theorem implies
implies solve
case bounded
region finite
finite degenerate
degenerate instances
instances maximizing
region points
region principle
principle solve
computing objective
extreme selecting
selecting major
major obstacles
obstacles implementing
implementing lies
lies mechanism
mechanism generating
generating extreme
region straightforward
straightforward algebraic
algebraic procedure
procedure task
task discovered
discovered obstacle
obstacle lies
lies extreme
points typical
typical feasible
region news
news bad
bad extreme
exponentially size
problem makes
exhaustive inspection
inspection extreme
points unrealistic
unrealistic linear
problems nontrivial
sizes fortunately
turns exists
typically inspects
inspects small
small fraction
fraction extreme
region reaching
reaching optimal
optimal famous
famous algorithm
geometric terms
terms identifying
region improved
function adjacent
extreme case
case current
optimal case
case proceed
proceed adjacent
extreme improved
function finite
finite steps
extreme optimal
solution occurs
occurs determine
determine optimal
exists outline
outline simplex
method task
task translate
translate geometric
geometric description
description simplex
method algorithmically
algorithmically precise
precise language
language algebra
algebra begin
begin apply
method linear
problem represented
represented special
special called
standard requirements
requirements maximization
constraints nonnegativity
equations nonnegative
nonnegative sides
sides variables
nonnegative general
standard constraints
constraints unknowns
unknowns maximize
maximize cnxn
ainxn written
written compact
compact matrix
notations maximize
subject amn
amn linear
transformed equivalent
standard objective
function minimized
minimized replaced
maximizing objective
function coefficients
coefficients replaced
replaced section
discussion transformations
transformations constraint
constraint inequality
inequality replaced
equivalent equation
equation adding
adding slack
difference sides
sides original
original inequality
inequality inequalities
transformed equations
equations finally
finally linear
nonnegative begin
begin represent
physical quantities
quantities case
case initial
initial statement
statement problem
problem unconstrained
unconstrained variable
variable replaced
replaced difference
difference nonnegative
variables problem
standard linear
problem variables
variables maximize
subject easy
easy optimal
simply ignoring
ignoring coordinates
coordinates principal
advantage standard
standard lies
simple mechanism
mechanism identifying
variables straint
straint equations
unknowns solve
problem equations
unknowns variables
variables set
set equations
unknowns obtained
obtained unique
solution nondegenerate
nondegenerate linear
equations equal
equal unknowns
unknowns basic
solution coordinates
coordinates set
set solving
called nonbasic
nonbasic coordinates
coordinates obtained
basic terminology
terminology linear
algebra specifically
specifically rewrite
rewrite constraint
constraint equations
equations basis
basis dimensional
dimensional vector
vector space
space composed
composed vectors
vectors proportional
proportional basis
basis chosen
chosen vector
vector uniquely
uniquely expressed
multiples basis
basis vectors
vectors basic
basic nonbasic
variables vectors
vectors included
included excluded
excluded basis
basis choice
choice coordinates
coordinates basic
solution nonnegative
nonnegative basic
solution called
feasible importance
importance basic
solutions lies
lies correspondence
correspondence extreme
figure projection
projection plane
plane incidentally
incidentally natural
natural starting
starting simplex
method application
application problem
mentioned simplex
method progresses
progresses series
series adjacent
points basic
solutions increasing
increasing values
function represented
represented simplex
tableau table
table storing
storing information
information basic
extreme simplex
tableau problem
problem presented
presented general
general simplex
tableau linear
standard unknowns
unknowns linear
linear equality
constraints rows
columns rows
rows table
table coefficients
coefficients constraint
constraint equation
equation column
entry equation
equation columns
labeled names
names variables
variables rows
rows labeled
solution tableau
represents values
variables solution
solution column
variables identity
tableau called
called objective
row initialized
initialized coefficients
coefficients objective
function signs
signs reversed
reversed columns
columns objective
function initial
initial column
column subsequent
iterations objective
row transformed
transformed rows
solution entries
possibly column
column nonnegative
nonnegative case
case negative
entries nonbasic
nonbasic variable
basic tableau
tableau criterion
criterion basic
solution represented
represented tableau
tableau optimal
optimal negative
column signals
coordinate current
current basic
coefficient objective
function positive
positive larger
larger function
function compensate
compensate adjusting
adjusting values
feasible case
case conditions
conditions satisfied
satisfied means
region similarly
similarly negative
column objective
row signals
coordinate initial
solution requires
requires means
extreme negative
negative largest
absolute motivated
motivated observation
observation choice
choice yields
yields largest
function unit
unit variable
variable feasibility
feasibility constraints
constraints impose
impose limits
limits variables
variables choice
choice variable
variable leads
smaller objective
function commonly
select variable
called entering
variable column
column referred
referred pivot
column choose
choose departing
nonbasic tableau
tableau total
total basic
solution equal
equal equality
constraints adjacent
extreme larger
larger objective
function entering
variable largest
largest make
make basic
variables preserving
preserving nonnegativity
nonnegativity translate
translate observation
observation choosing
choosing departing
variable simplex
tableau positive
tableau ratios
ratios row
ratio determines
determines departing
nonbasic ties
arbitrarily variable
variable row
called pivot
row denote
denote positive
positive entries
ratio computed
computed problem
unbounded algorithm
stops finally
finally steps
steps transform
transform current
tableau transformation
transformation called
called pivoting
pivoting similar
similar principal
principal gauss
equations problem
exercises entries
pivot entry
row difference
tableau yields
yields row
method transforms
transforms tableau
solution increased
increased objective
equal optimal
optimal iteration
good yields
yields tableau
optimal entries
row tableau
nonnegative maximal
equal entry
row summarize
summarize steps
method summary
summary simplex
method initialization
initialization linear
stan dard
set initial
nonnegative entries
entries rightmost
columns composing
composing identity
matrix entries
row disregarded
disregarded verifying
verifying requirements
requirements columns
columns define
define basic
variables initial
solution labels
labels tableau
rows optimality
optimality entries
column represents
represents objective
function nonnegative
nonnegative tableau
solution basic
values rightmost
column remaining
remaining nonbasic
values zeros
zeros finding
finding entering
variable select
entry elements
elements objective
entry largest
absolute ties
arbitrarily column
column entering
column finding
finding departing
variable positive
column entries
column negative
negative problem
unbounded row
ratio ties
arbitrarily row
row forming
forming tableau
tableau entries
row multiplied
multiplied entry
row make
make entries
row variable
column notes
notes simplex
method formal
formal proofs
proofs validity
validity simplex
method steps
steps books
devoted detailed
discussion linear
programming dan
dan important
important remarks
remarks method
method generally
speaking iteration
iteration simplex
method leads
leads extreme
region greater
greater objective
function degenerate
arise basic
variables equal
equal simplex
method objective
extreme greater
equal previous
previous opens
opens door
door possibility
possibility objective
values stall
stall iterations
iterations row
row algorithm
algorithm previously
previously considered
considered terminate
terminate phenomenon
called cycling
cycling rarely
rarely practice
practice specific
problems cycling
cycling constructed
constructed simple
simple modification
modification steps
called bland
bland eliminates
eliminates theoretical
theoretical possibility
possibility cycling
cycling assuming
assuming variables
variables denoted
denoted subscripted
subscripted letter
letter stated
stated modified
modified columns
columns negative
row select
select column
column smallest
subscript modified
modified resolve
resolve smallest
smallest ratios
ratios selecting
selecting row
row labeled
variable smallest
subscript caveat
caveat deals
deals assumptions
assumptions automat
automat ically
satisfied problem
constraints imposed
imposed nonnegative
variables inequalities
inequalities ainxn
ainxn adding
adding nonnegative
nonnegative slack
variable ith
ith constraint
constraint equality
equality ainxn
ainxn quirements
quirements imposed
imposed initial
tableau simplex
method satisfied
satisfied obvious
solution nontrivial
nontrivial obstacle
obstacle problems
region initial
exists algorithmic
problems ways
ways address
address issues
issues exten
exten sion
classic simplex
called phase
phase simplex
kol nutshell
nutshell method
method adds
adds set
set artificial
variables equality
basic fea
fea sible
minimizing sum
sum artificial
variables simplex
method optimal
yields initial
tableau original
region original
algorithm progresses
progresses sequence
adjacent points
region bad
news extreme
exponentially problem
efficiency simplex
method shown
shown exponential
exponential fortunately
fortunately half
century practical
experience algorithm
algorithm shown
shown iterations
iterations typical
application ranges
ranges operations
operations iteration
iteration proportional
proportional numbers
numbers equality
variables discovery
discovery simplex
method subject
subject intensive
intensive study
study researchers
researchers worked
worked improvements
improvements original
original algorithm
algorithm details
details efficient
implementation result
result efforts
efforts programs
programs implementing
implementing simplex
method polished
polished large
problems hundreds
thousands constraints
variables solved
solved routine
routine manner
manner fact
fact programs
programs evolved
evolved sophisticated
software packages
packages enable
enable user
user problem
constraints solution
solution user
user friendly
friendly tools
tools investigating
investigating important
properties solution
solution sensitivity
input data
data investigations
investigations important
economics spectrum
spectrum linear
problems moderate
size nowadays
nowadays solved
solved desktop
desktop standard
standard spreadsheet
spreadsheet facility
facility taking
advantage specialized
specialized software
software internet
internet researchers
researchers algorithms
important mile
mile stone
stone history
history algorithms
proof khachian
khachian kha
kha showing
showing ellipsoid
polynomial ellipsoid
method slower
slower simplex
method practice
practice worst
efficiency encouraged
encouraged alternatives
alternatives simplex
method narendra
karmarkar published
efficiency competitive
competitive simplex
tests discuss
discuss karmarkar
algorithm kar
kar pointing
pointing based
based iterative
idea karmarkar
solutions feasible
region sequence
points simplex
method algorithms
called interior
interior methods
methods arb
arb exercises
version office
exercises integers
integers representing
road location
location office
minimizes average
office required
required located
located villages
villages devise
devise iterative
efficient solve
problems geometrically
geometrically maximize
subject maximize
subject real
equal coefficient
unique optimal
problem infinitely
infinitely optimal
solutions coefficient
problem inequality
inequality constraints
strict simplex
section implementations
implementations internet
internet determine
determine iterations
iterations simplex
solve knapsack
ple section
prove linear
solutions linear
aij considered
considered primal
dual defined
defined linear
aij express
express primal
problems matrix
notations dual
dual linear
subject solve
solve primal
optimal values
objective functions
functions maximum
maximizing terial
terial transportation
network pipeline
pipeline communication
communication electrical
electrical distribution
distribution assume
assume transportation
network represented
represented connected
numbered set
edges properties
properties vertex
vertex entering
entering edges
source assumed
leaving edges
called sink
sink assumed
numbered weight
weight uij
uij directed
capacity represents
represents upper
bound material
material link
link represented
represented edge
digraph satisfying
satisfying properties
properties called
called network
network simply
network small
instance network
figure assumed
assumed source
source destination
destination material
material vertices
points redirected
redirected consuming
consuming adding
adding material
material words
words total
material entering
entering intermediate
equal total
vertex dition
dition called
called conservation
requirement denote
denote edge
edge xij
xij intermediate
requirement expressed
expressed equality
equality constraint
constraint xji
xij slightly
slightly general
general model
model network
sinks capacities
uij infinitely
large figure
figure network
network graph
numbers vertex
vertex names
names edge
edge numbers
numbers edge
capacities sums
left sides
sides express
express total
inflow outflow
outflow entering
entering leaving
vertex material
material intermediate
network stands
stands reason
reason total
leaving source
sink observation
observation derived
derived formally
formally equalities
equalities task
task asked
exercises equality
equality quantity
quantity total
total outflow
outflow source
source equivalently
equivalently total
inflow sink
sink called
called denote
denote quantity
quantity maximize
maximize flows
network feasible
assignment real
xij edges
edges network
network conservation
conservation constraints
constraints capacity
constraints xij
stated formally
formally optimization
subject xji
edge solve
section special
problem exploited
exploited design
design faster
natural iterative
idea set
set xij
network iteration
iteration path
sink additional
additional path
path adjust
adjust edges
path increased
increased augmenting
path conclude
conclude current
optimal general
solving maximum
fulkerson discovered
discovered actual
implementation augmenting
idea straightforward
straightforward network
figure amounts
edge separated
separated edge
capacities slashes
slashes notation
notation examples
examples natural
natural flowaugmenting
flowaugmenting path
sink directed
current xij
uij possibilities
possibilities assume
assume augmenting
maximum units
units smallest
smallest unused
figure simpleminded
simpleminded idea
idea augmenting
optimal increased
increased path
path increasing
increasing edges
edges decreasing
edge obtained
result augmentation
augmentation shown
maximal augmenting
paths source
sink underlying
underlying undirected
graph consecutive
consecutive vertices
edge rij
rij units
units connected
xji decrease
decrease edge
edge xji
xji units
units edges
vertex defining
called backward
listed path
path illustrate
illustrate path
path forward
edges backward
path minimum
minimum unused
capacities rij
rij forward
flows xji
xji backward
edges easy
easy current
current forward
edge decrease
decrease backward
edge feasible
illustration augmenting
method augmenting
bold amounts
capacities numbers
numbers slash
slash units
units greater
greater predecessor
predecessor intermediate
vertex augmenting
path combinations
combinations forward
incident vertex
vertex hold
hold adjustments
adjustments edge
edge arrows
arrows minimum
minimum positive
capacities forward
flows backward
path capacity
constraints finally
finally adding
path assumption
assumption edge
capacities integers
integer increases
increases iteration
method maximum
maximum bounded
bounded sum
capacities source
method finite
finite iterations
iterations surprisingly
surprisingly final
final turns
turns maximal
maximal irrespective
irrespective sequence
sequence augmenting
paths remarkable
remarkable result
result stems
stems proof
proof max
theorem replicate
replicate section
section augmenting
method general
general specific
specific generating
generating augmenting
paths bad
bad sequence
sequence paths
paths dramatic
dramatic impact
impact method
method efficiency
efficiency network
figure stands
stands large
integer augment
augment path
path shown
figure selecting
selecting pair
pair augmenting
paths total
iterations maximum
maximum figure
maximum iterations
iterations augmenting
augmenting initial
initial path
path dramatic
dramatic difference
difference iterations
iterations makes
makes fortunately
fortunately ways
ways generate
generate augmenting
paths ficiently
ficiently degradation
degradation performance
performance illustrated
illustrated previous
previous simplest
simplest breadth
breadth generate
generate augment
augment ing
edges section
section version
version augmenting
called shortest
path labeled
labeled scanned
scanned algorithm
suggested edmonds
edm labeling
labeling refers
refers marking
marking unlabeled
labels additional
additional brought
brought source
labeled reached
reached left
left undefined
undefined source
source convenient
convenient vertex
reached forward
edge source
source labeled
vertices labels
labels computed
capacity upper
bounds irrational
numbers augmenting
method terminate
terminate chv
chv cleverly
cleverly devised
devised demonstrating
demonstrating situation
situation limitation
limitation theoretical
theoretical irrational
numbers rational
numbers transformed
transformed integers
integers changing
changing capacity
capacity measurement
unit figure
figure efficiency
efficiency degradation
degradation augmenting
method unlabeled
rij unlabeled
xji labeling
labeling enhanced
enhanced traversal
traversal ends
ends labeling
labeling sink
sink current
current augmented
augmented sink
sink augmentation
performed augmenting
path traced
traced vertex
labels sink
current quantities
quantities increased
increased forward
edges decreased
decreased backward
sink remains
remains unlabeled
unlabeled traversal
returns current
maximum stops
stops algorithm
algorithm shortestaugmentingpath
shortestaugmentingpath implements
implements shortest
input network
sink positive
integer capacities
uij edges
edges output
maximum assign
assign xij
network source
source dequeue
dequeue edge
edge forward
unlabeled rij
xij rij
rij min
rij enqueue
enqueue edge
edge backward
unlabeled xji
xji min
xji enqueue
enqueue sink
sink labeled
labeled augment
augment augmenting
sink backwards
backwards labels
source reached
vertex xij
vertex xji
vertex erase
erase vertex
source reinitialize
reinitialize source
algorithm network
figure optimality
optimality final
method stems
stems theorem
theorem relates
relates network
network cuts
cut induced
induced partitioning
partitioning vertices
network subset
subset source
source complement
complement sink
sink set
tail denote
denote cut
cut simply
figure cut
cut stems
stems property
edges cut
cut deleted
deleted network
sink cut
cut directed
sink vertex
vertices augment
sink unlabeled
unlabeled current
current maximal
maximal figure
algorithm diagrams
diagrams left
left current
current iteration
iteration begins
begins diagrams
diagrams results
results vertex
labeling iteration
path bold
augmentation vertices
deleted symbol
symbol sink
source predecessor
predecessor path
belongs edge
edge element
element cut
cut proves
proves property
property capacity
cut denoted
denoted defined
edges compose
compose cut
cut examples
examples cuts
cuts capacities
capacities equal
equal cuts
network nonempty
nonempty finite
finite exists
exists minimum
figure theorem
establishes important
important relationship
relationship notions
notions maximum
theorem maximum
network equal
equal capacity
cut proof
proof feasible
feasible cut
cut defined
difference sum
edges intuitively
intuitively formally
formally derived
derived equations
equations expressing
expressing conservation
requirement definition
equal xij
xij sum
sum nonnegative
nonnegative xij
edge exceed
exceed edge
uij equality
implies xij
uij feasible
feasible network
network exceed
exceed capacity
network final
method cut
capacity equal
equal conclude
conclude view
view inequality
inequality final
final maximal
maximal feasible
feasible flows
flows cut
capacity minimal
minimal cuts
network iii
iii maximum
maximum equal
equal minimum
cut set
reached source
source undirected
undirected path
path composed
composed forward
capacities respect
respect final
final backward
flows set
set source
sink augmenting
path contradict
contradict assumption
assumption final
final cut
cut definition
edge unused
capacity xij
edge applying
applying equality
equality final
final set
defined xij
xij xji
xji uij
uij proves
proves theorem
theorem proof
proof outlined
outlined accomplishes
accomplishes proving
proving equality
equality maximum
capacity implies
implies augmenting
method terminates
terminates yields
cut labeling
labeling kind
kind utilized
utilized shortest
cut formed
formed edges
labeled unlabeled
unlabeled ver
iteration method
method finally
finally proof
proof implies
implies edges
flows equal
unlabeled vertices
labeled flows
finds cut
cut minimum
minimum capacity
required edmonds
karp proved
proved paper
paper edm
edm aug
aug menting
menting paths
paths needed
needed shortest
exceeds vertices
required shortest
breadth networks
networks represented
efficiency shortest
algorithms maximum
problem monograph
monograph ahu
ahu chapters
chapters books
cor kle
kle implement
implement augmenting
efficient manner
manner based
based concept
concept preflows
preflows preflow
preflow satisfies
satisfies capacity
constraints conservation
vertex allowed
allowed entering
entering vertex
leaving preflow
preflow algorithm
algorithm moves
moves excess
excess sink
sink conservation
requirement reestablished
reestablished intermediate
network faster
faster gorithms
gorithms kind
kind worst
efficiency preflow
preflow algorithms
fall iterative
improvement paradigm
paradigm generate
generate sequence
sequence improving
improving solutions
solutions constraints
problem conclude
conclude section
pointing initial
initial studying
studying network
flows caused
caused transportation
transportation applications
applications model
model proved
proved areas
areas discuss
exercises maximum
maximum algorithms
processing edges
edges directions
directions convenient
convenient modify
modify adjacency
representation network
vertex capacity
vertices elements
set outline
outline simple
identifying source
sink network
network presented
presented matrix
efficiency apply
apply shortest
cut networks
networks maximum
solution networks
networks capacities
edges questions
questions minimum
cut problem
finding cut
sinks transformed
sink networks
networks capacity
constraints amounts
amounts intermediate
vertices maximum
network transformed
transformed maximum
network edge
constraints network
network rooted
root source
source leaves
leaves sinks
sinks edges
paths root
leaves design
network efficiency
prove network
equal cut
cut equality
equality relationship
relationship property
property equality
equality express
express maximum
figure linear
method alternative
alternative shortest
algorithm edmonds
edm suggested
suggested maximum
maximum capacity
capacity augmenting
augmented path
path increases
increases largest
largest implement
choice empirical
empirical investigation
investigation relative
relative efficiency
write advanced
advanced maximum
maximum algorithm
algorithm dinitz
dinitz algorithm
algorithm karzanov
karzanov algorithm
iii malhotra
malhotra kamar
kamar maheshwari
maheshwari algorithm
algorithm goldberg
goldberg tarjan
tarjan algorithm
algorithm dining
dining problem
problem families
families dinner
dinner social
social interaction
interaction sit
sit tables
tables members
members family
family table
seating arrangement
arrangement meets
meets objective
objective prove
prove arrangement
arrangement exists
exists maximum
assume dinner
dinner contingent
contingent families
families ith
ith family
family members
members assume
assume tables
seating capacity
capacity ahu
ahu maximum
graphs situations
situations faced
problem pairing
sets traditional
traditional boys
boys girls
girls easily
easily applications
applications convenient
convenient represent
represent elements
vertices paired
paired matching
edges property
vertex maximum
matching precisely
precisely maximum
figure unique
unique maximum
graph arbitrary
solved jack
jack edmonds
edmonds edm
edm gal
gal good
good survey
survey recent
recent references
references limit
section simpler
simpler case
case bipartite
graphs bipartite
sets necessarily
necessarily size
size edge
sets vertex
words graph
graphs colorable
bipartite difficult
prove graph
bipartite odd
length assume
assume rest
rest section
set bipartite
graph partitioned
partitioned sets
sets required
apply iterative
technique maximumcardinality
maximumcardinality matching
problem matching
matched serves
serves endpoint
endpoint edge
matching chance
chance improving
improving current
matching unmatched
unmatched called
called free
vertices incident
vertices free
vertices matched
matched obvious
observation immediately
immediately current
matching adding
vertices adding
yields larger
matching larger
matching inclusion
inclusion requires
requires removal
removal compensated
compensated inclusion
inclusion matching
general size
size current
matching constructing
path free
edges alternately
alternately edge
augmenting respect
length augmenting
path odd
odd adding
edges odd
positions deleting
deleting path
edges numbered
positions yields
yields matching
matching edge
matching adjustment
adjustment called
called augmentation
augmentation figure
path moving
moving augmenting
figure adding
edges deleting
deleting matching
paths matching
matching augmentations
augmentations matching
graph discuss
finding augmenting
path issue
issue nonexistence
nonexistence path
path means
means theorem
theorem discovered
discovered french
mathematician claude
claude berge
berge means
means current
matching maximal
maximal theorem
theorem matching
exists augmenting
respect proof
proof augmenting
exists size
size matching
matching increased
increased augmentation
augmentation prove
prove difficult
difficult augmenting
exists matching
matching assume
assume contrary
contrary case
graph maximum
matching assumption
assumption edges
edges symmetric
symmetric difference
difference set
edges assumption
assumption subgraph
edges endpoints
endpoints definition
definition matching
vertex incident
degree connected
component path
edges length
path alternating
edges starts
ends edge
matching contradicts
assumption path
exists discussion
discussion augmenting
paths leads
method constructing
constructing maximum
graph initial
initial matching
set augmenting
augment current
path terminate
terminate algorithm
maximum specific
implementing general
template augmenting
matching bfs
graph starts
starts simultaneously
simultaneously free
sets logical
logical select
select smaller
smaller vertex
sets observation
observation pseudocode
pseudocode recall
recall augmenting
exists odd
path connects
connects free
vertex consists
single edge
edge zigs
zigs vertex
vertex zags
zags uniquely
uniquely defined
defined edge
reached draw
draw augmenting
paths matchings
matchings figure
figure candidate
candidate path
edges alternate
alternate pattern
pattern motivates
motivates rules
rules labeling
labeling vertices
graph case
adjacent endpoint
path labeling
labeling stops
stops augmentation
matching commences
commences augmenting
obtained moving
moving backward
backward vertex
labels alternately
alternately delete
matching free
free connected
edge labeled
labeled case
vertex case
case matched
matched pseudocode
entirety algorithm
algorithm maximumbipartitematching
maximumbipartitematching finds
traversal input
input bipartite
graph initialize
edges valid
valid matching
set initialize
initialize free
vertices dequeue
dequeue vertex
free augment
augment labeled
labels reinitialize
reinitialize free
vertices break
break exit
loop matched
matched unlabeled
unlabeled enqueue
enqueue matched
matched enqueue
enqueue current
matching differs
differs figure
figure augment
augment maximum
application maximum
shows current
matching initialized
initialized iteration
iteration column
shows vertex
labeling generated
algorithm augmentation
performed matching
bold vertex
labels vertices
labeling discovered
discovered endpoint
path shaded
shaded labeled
labeled clarity
clarity vertices
deleted efficient
efficient maximum
iteration matches
matches previously
previously free
iterations exceed
exceed vertices
graph spent
spent iteration
iteration edges
graph assumes
assumes information
information status
status vertex
free matched
matched vertex
vertex retrieved
retrieved constant
constant storing
storing array
algorithm hopcroft
hopcroft karp
karp showed
showed efficiency
improved combining
combining iterations
iterations single
single stage
stage maximize
maximize edges
edges added
added matching
matching concerned
concerned section
section matching
largest vertex
pairs bipartite
graph applications
require taking
taking quality
quality cost
cost matching
pairs workers
workers execute
jobs efficiencies
efficiencies girls
girls preferences
preferences potential
potential partners
partners natural
natural model
model situations
situations bipartite
graphs weights
edges leads
leads problem
maxi mizing
mizing sum
connecting matched
called maximum
maximum weight
weight matching
matching encountered
encountered differ
differ ent
section sophisti
efficient exhaustive
exhaustive pap
pap gal
gal ahu
ahu leave
leave discussion
discussion complexity
complexity general
general graphs
exercises matching
augmentation exists
exists apply
apply maximum
algorithm bipartite
graph largest
smallest cardinality
cardinality ing
ing bipartite
edges largest
smallest distinct
solutions maximum
edges hall
theorem asserts
asserts bipartite
subset set
vertex property
property graph
graph devise
returns matching
graph matches
vertices returns
returns base
base algorithm
condition hall
theorem committees
committees composed
composed persons
persons committee
members distinct
distinct representatives
representatives select
select representative
representative committee
committee selected
selected persons
persons distinct
distinct maximum
graph reduced
reduced maximum
graph sort
sort vertices
vertices nondecreasing
nondecreasing degrees
degrees scan
sorted current
matching initially
initially edge
vertex lowest
lowest degree
degree vertex
matched adjacent
simply skipped
skipped algorithm
matching tree
implement maximum
choice experiment
experiment performance
performance bipartite
graphs vertices
sets randomly
generated edges
edges dense
sparse modes
modes observed
observed running
algorithm theoretical
theoretical efficiency
efficiency domino
domino puzzle
puzzle domino
tile oriented
oriented hori
hori zontally
vertically tiling
tiling board
composed squares
squares covering
covering dominoes
dominoes overlap
overlap tile
tile dominoes
dominoes board
board unit
unit squares
squares diagonally
diagonally corners
corners stable
section interesting
interesting version
version bipartite
preference ordering
ordering women
women potential
potential marriage
partners ties
allowed similarly
similarly woman
preference men
men ties
ties examples
lists figures
figures information
information presented
presented ranking
represent men
women sets
sets cell
cell row
column rankings
rankings position
preference position
preference pair
pair jim
jim row
row ann
ann column
figure ann
jim choice
choice jim
ann ways
ways represent
represent information
information depends
depends task
task easier
easier sets
elements ranking
matrix preference
lists efficient
implementing matching
algorithm marriage
pairs members
members selected
selected disjoint
disjoint element
element sets
sets fashion
fashion paired
paired woman
woman vice
versa represent
represent vertices
vertices bipartite
connecting marriage
partners marriage
graph men
preferences ranking
matrix ann
sue bob
sue lea
figure data
data instance
men preference
lists women
lists ranking
boxed cells
cells composing
composing unstable
unstable matching
pair blocking
woman matched
matched mates
mates bob
lea blocking
matching bob
bob ann
sue figure
figure matched
matched bob
bob prefers
prefers lea
lea prefers
prefers bob
jim marriage
stable blocking
called unstable
unstable definition
definition marriage
figure unstable
unstable bob
lea designated
designated mates
mates union
union stable
preferences surprisingly
surprisingly problem
rankings women
men woman
woman ties
allowed rankings
rankings output
output stable
women free
men arbitrarily
arbitrarily select
select proposal
proposal selected
selected free
free proposes
preference highest
woman rejected
rejected response
response free
free accepts
proposal matched
matched free
free compares
compares current
current prefers
prefers accepts
proposal making
making free
simply rejects
rejects proposal
proposal leaving
leaving free
free set
set matched
pairs analyze
input presented
presented figure
discuss properties
properties stable
algorithm theorem
theorem stable
algorithm terminates
terminates iterations
iterations stable
marriage output
output proof
proof algorithm
starts men
men total
women ranking
ranking lists
lists iteration
iteration makes
makes proposal
proposal woman
woman reduces
reduces total
women men
men propose
propose future
future proposes
iterations ann
lea bob
lea accepted
lea jim
lea rejected
sue accepted
sue tom
sue rejected
lea replaced
replaced bob
proposed ann
ann bob
ann accepted
application stable
algorithm accepted
accepted proposal
proposal boxed
boxed cell
cell rejected
rejected proposal
proposal shown
shown underlined
underlined cell
cell prove
prove final
final matching
stops men
matched women
women thing
thing proved
proved stability
stability contrary
contrary unstable
unstable exists
exists blocking
pair woman
woman unmatched
unmatched persons
persons matched
matched proposes
woman ranking
ranking decreasing
decreasing preference
preference precedes
precedes proposed
proposed iteration
iteration refused
refused proposal
proposal accepted
accepted replaced
replaced subsequent
iteration higher
higher ranked
ranked higher
higher preference
preference rankings
matched woman
woman iteration
algorithm contradicts
assumption prefers
prefers final
final stable
notable shortcoming
shortcoming gender
gender neutral
neutral presented
presented favors
favors men
preferences easily
easily tracing
problem woman
woman matching
matched choices
choices case
case women
women prove
matching optimal
optimal assigns
assigns highest
woman stable
marriage gender
gender bias
bias reversed
reversed eliminated
eliminated reversing
reversing roles
roles played
played men
women algorithm
making women
women propose
propose men
men proposals
proposals important
important corollary
corollary fact
fact stable
yields gender
gender optimal
matching easy
prove woman
optimal matching
matching unique
unique set
set participant
participant preferences
preferences algorithm
output free
women make
make proposals
proposals data
stack representing
set impact
impact algorithm
algorithm outcome
outcome notion
notion stable
discussed introduced
introduced gale
shapley paper
paper titled
titled college
college admissions
admissions stability
stability marriage
marriage gal
gal applications
applications mentioned
mentioned title
title important
important stability
stability matching
matching property
desirable variety
years united
states matching
matching medical
medical school
graduates hospitals
hospitals residency
residency training
training history
history application
depth discussion
discussion stable
problem extensions
extensions monograph
monograph gusfield
gusfield irwing
irwing gus
gus exercises
problem ranking
matrix marriage
marriage matchings
stable unstable
unstable matchings
matchings blocking
pair stable
stable matchings
matchings optimal
optimal woman
optimal assume
assume greek
greek roman
roman letters
letters denote
denote men
women design
checking marriage
stable determine
apply ing
ing stable
algorithm men
men proposing
version women
women proposing
version stable
defined ranking
matrix determine
marriage set
set unique
unique true
true woman
matching prove
woman worst
worst partner
partner stable
implement stable
section running
ascertain average
write college
college admission
admission problem
problem residents
residents hospitals
hospitals assign
ment generalizes
generalizes stable
problem college
college proposals
proposals applicant
applicant problem
problem roommates
roommates related
related difficult
difficult stable
problem boys
boys pairs
pairs roommates
roommates set
set pairings
pairings called
stable boys
boys roommates
roommates actual
actual roommates
roommates gal
gal instance
stable pairing
pairing summary
summary iterative
technique involves
involves finding
solution timization
solutions improving
problem objective
function subsequent
subsequent lution
sequence typically
localized previous
previous feasible
solution improves
stops important
solved iterative
programming maximizing
network matching
graph simplex
solving general
problem works
works generating
region improving
function maximum
network weighted
weighted directed
sink ford
classic template
solving maximumflow
maximumflow problem
problem iterative
improvement approach
approach shortestaugmenting
shortestaugmenting path
method implements
idea labeling
labeling network
network vertices
vertices breadth
breadth manner
manner ford
method finds
finds minimum
largest subset
vertex bipartite
sequence augmentations
augmentations previously
previously obtained
obtained matchings
elements nelement
nelement sets
sets based
based matching
matching preferences
preferences problem
solution gale
shapley algorithm
prob lem
algorithm pseudocode
strictly speaking
simple algorithms
fact algorithm
algorithms sections
algorithms general
discrete mathematics
total elements
elements algorithm
closed formula
repetition loop
degree polynomial
values function
principal advantage
size elements
lists size
size worst
infinitely large
implement algorithms
rithm basic
typical input
trees binary
graph output
important algorithms
algorithms application
algorithm eventually
min times
prime candidates
chapter algorithms
called sequential
general approach
chapters devoted
results obtained
good news
problem tsp
cities visits
visits city
implicitly combinatorial
scientists algorithms
problem closest
algorithms developed
irish mathematician
mathematician sir
sir william
element special
plane called
graphs called
applications connectivity
defined sequence
vertex sequence
path sequence
backtracking bound
bound sections
indispensable efficient
property set
searching item
discuss applications
solutions problem
solving important
solution smallest
positions pseudocode
algorithm key
input worst
sentinel version
efficiency array
formula cavg
figure depth
vertices ancestors
stack subscript
numbers indicating
ordering vertices
problem large
pair distinct
combinations subsets
problems require
total permutations
exhaustive permutations
values formula
section average
weighings needed
elements column
problem selection
element entire
smaller efficient
desired element
figure instance
player game
vertex starts
coordinates distance
problems finding
exercises sections
algorithms brute
solution design
straightforward method
problems applied
takes times
john hopcroft
trees true
impor tant
process continues
algorithm proceeds
figure key
algorithm true
element smallest
computing polynomial
people important
computing mod
addition multiplication
data points
strategy problem
solving optimization
fact general
similar problems
artificial intelligence
points triangle
people assigned
assigned execute
jobs person
assigned person
cost accrue
accrue ith
job quantity
quantity pair
cost assignment
linear constraints
region set
line divides
divides plane
plane half
planes points
defined equation
theorem linear
problem nonempty
nonempty bounded
makes exhaustive
general discussion
represent physical
region extreme
method kol
exercises version
representing coordinates
coordinates villages
located straight
straight road
average distance
distance villages
villages office
feasible figure
reached vertex
belongs set
definition set
ver tices
path breadth
set words
colors graphs
colorable graph
vertices bfs
graph bfs
efficiency improved
matching pairs
examples sets
structure stack
assign ment
dozens algorithms
rules game
class minimum
numbers encountered
minimum total
problem trivial
adjacent elements
integer problem
algorithms extremely
checking connectivity
passes vertices
shortest hamiltonian
problem positive
partition disjoint
subsets sum
problems fact
vertices distinct
salesman knapsack
problem candidate
mathematical proof
subgraph vertices
permutations combinations
analy sis
method important
write based
algorithm considered
discussion algorithm
framework methods
depends input
sequential straightforward
algorithm searches
algorithm sequentialsearch
assumptions inputs
yields reasonable
comparisons sequential
efficiency considerably
discussion interested
american scientist
robert tarjan
sev eral
worse algorithm
executed depends
sum equal
row matrix
embark discussion
operation addition
extremely inefficient
simply computing
makes additions
function bits
algorithms proved
principal weakness
algorithms practi
rithms straightforward
section compute
sort algorithm
version arrays
methods sort
considered appli
compute mod
approach design
efficiency problem
stable definition
section implement
quadratic sort
inferior effi
characters algorithm
character comparison
algorithm word
states word
letters word
lems dealing
finds distance
simple operation
applications problem
cal techniques
set definition
harel har
points definition
points circle
clockwise counterclockwise
solution simple
algorithm straight
ations innermost
section design
distance village
set line
tan distance
combinatorial prob
element problem
cities edge
stated problem
solution small
item subset
problem select
cities problem
century outline
elements prob
problem classic
visited vertices
graph dfs
graph representation
points graph
dfs tree
graphs tree
graph assume
starting ver
tices trees
tree traversal
mathemati cian
combinatorial problem
problem typical
properties graph
subtree root
worst average
true false
problem solution
points problem
largest smallest
rows columns
classic algorithm
ideas gleaming
gleaming jeweler
jeweler velvet
velvet calculus
calculus algorithm
algorithm calculus
calculus rich
rich body
body mathematical
analysis gave
gave rise
rise modern
modern science
science algorithm
algorithm modern
modern world
world david
david berlinski
berlinski advent
advent algorithm
algorithms professional
professional practical
theoretical reasons
standpoint standard
computing addition
addition design
design algorithms
algorithms analyze
efficiency theoretical
stand study
called algorithmics
algorithmics recognized
recognized cornerstone
science david
david harel
harel delightful
delightful pointedly
pointedly titled
titled algorithmics
algorithmics spirit
spirit computing
computing algorithmics
algorithmics science
science core
core science
science fairness
fairness relevant
relevant science
science business
business technology
technology har
har student
student computing
computing related
related compelling
compelling reasons
algorithms bluntly
bluntly programs
programs algorithms
indispensable aspects
aspects professional
personal lives
lives studying
algorithms necessity
necessity people
people reason
reason studying
algorithms usefulness
usefulness developing
developing alytical
alytical skills
skills algorithms
special kinds
kinds solutions
answers precisely
defined procedures
procedures answers
techniques interpreted
interpreted problem
solving strategies
strategies involved
involved precision
precision inherently
inherently imposed
imposed algorithmic
algorithmic thinking
thinking limits
limits kinds
kinds problems
algorithm living
living happy
happy life
life rich
rich famous
famous required
required precision
precision important
important educational
educational advantage
advantage donald
knuth prominent
scientists history
algorithmics person
person trained
trained science
deal algorithms
algorithms construct
construct manipulate
manipulate understand
understand analyze
analyze knowledge
knowledge preparation
preparation writing
writing good
good programs
programs general
purpose mental
mental tool
tool definite
definite aid
aid understanding
understanding subjects
subjects chemistry
chemistry linguistics
linguistics music
music reason
reason understood
understood person
teaching person
teaching expressing
algorithm formalize
formalize things
things algorithms
leads deeper
understanding simply
simply comprehend
comprehend things
things traditional
traditional knu
knu notion
divisor reasons
reasons choice
choice deals
familiar erybody
erybody middle
school days
days makes
algorithms typically
typically algorithms
differ idea
idea sophistication
sophistication efficiency
algorithms deserves
deserves introduced
introduced age
age peared
peared euclid
euclid famous
famous treatise
treatise years
ago enduring
enduring power
power importance
importance finally
finally investigation
investigation algorithms
general observations
observations important
properties algo
general section
deals algorithmic
solving discuss
important issues
related design
algorithms aspects
aspects algorithmic
solving range
range analysis
analysis problem
problem means
means expressing
algorithm establishing
establishing correctness
correctness analyzing
section magic
magic recipe
recipe designing
algorithm arbitrary
arbitrary problem
problem established
established fact
fact recipe
recipe material
material section
section organizing
organizing designing
devoted problem
types proven
proven partic
important study
application fact
fact textbooks
textbooks sed
sed organized
organized problem
types hold
hold view
view shared
shared organization
organization based
techniques superior
superior case
important aware
aware princi
pal problem
types commonly
commonly encountered
types real
applications demonstrate
demonstrate algorithm
section review
review fundamental
structures meant
meant reference
reference deliberate
deliberate discussion
discussion topic
topic detailed
detailed exposition
exposition wealth
good books
subject tailored
tailored programming
algorithm universally
universally agreed
agreed wording
wording notion
notion general
general agreement
agreement concept
concept means
sequence unambiguous
unambiguous instructions
problem obtaining
obtaining required
output legitimate
finite definition
simple diagram
figure reference
reference instructions
instructions definition
implies thing
thing capable
capable understanding
understanding instructions
instructions keeping
mind electronic
electronic invented
invented word
word meant
meant human
human involved
involved ing
numeric calculations
calculations nowadays
nowadays computers
computers ubiquitous
ubiquitous electronic
electronic devices
devices indispensable
indispensable majority
algorithms intended
intended eventual
eventual implementation
implementation notion
assumption examples
examples illustrating
integers examples
illustrate important
important points
points nonambiguity
nonambiguity requirement
requirement algorithm
algorithm promised
promised range
range inputs
works carefully
carefully algorithm
algorithm represented
ways algorithms
output figure
ideas solve
problem dramatically
dramatically speeds
speeds recall
recall greatest
divisor nonnegative
denoted gcd
gcd defined
defined largest
evenly remainder
remainder euclid
euclid alexandria
alexandria century
century outlined
outlined algorithm
problem volumes
volumes elements
elements famous
famous systematic
systematic exposition
exposition geometry
geometry modern
modern terms
terms euclid
based applying
applying repeatedly
repeatedly equality
division mod
mod equal
equal gcd
gcd greatest
divisor initial
initial gcd
computed gcd
gcd impressed
impressed algorithm
divisor larger
exercises structured
structured description
gcd proceed
proceed assign
assign remainder
remainder assign
assign alternatively
alternatively express
express algorithm
euclid computes
computes gcd
output greatest
divisor mod
mod euclid
eventually observation
pair smaller
iteration negative
negative iteration
iteration mod
mod smaller
smaller integer
integer eventually
eventually algorithm
stops problems
divisor methods
methods problem
simply based
definition greatest
divisor largest
divides numbers
numbers evenly
evenly common
divisor greater
numbers denote
denote min
min checking
checking divides
divides simply
simply decrease
decrease process
process eventually
eventually numbers
algorithm reaches
reaches stops
stops consecutive
gcd assign
assign min
min remainder
division remainder
division proceed
proceed decrease
presented correctly
correctly input
numbers illustrates
illustrates important
inputs explicitly
explicitly carefully
carefully procedure
divisor familiar
familiar middle
school middle
gcd prime
factors common
prime expansions
expansions common
factor occurring
occurring times
times repeated
repeated min
factors greatest
divisor numbers
numbers gcd
gcd nostalgia
nostalgia days
days learned
learned method
method noting
noting procedure
procedure complex
complex slower
slower euclid
methods finding
finding comparing
comparing running
chapter addition
addition inferior
inferior efficiency
efficiency middleschool
middleschool procedure
procedure qualify
qualify presented
presented legitimate
algorithm prime
steps defined
defined unambiguously
unambiguously require
require prime
numbers strongly
strongly middle
school math
math teacher
teacher unnecessary
unnecessary nitpicking
nitpicking issue
issue resolved
resolved write
implementing procedure
procedure incidentally
incidentally defined
defined ambiguity
ambiguity easier
easier rectify
rectify factorization
steps common
lists simple
generating consecutive
exceeding integer
integer invented
invented ancient
ancient greece
greece sieve
eratosthenes algorithm
starts initializing
initializing prime
candidates consecutive
integers iteration
algorithm eliminates
multiples moves
moves item
item eliminates
multiples straightforward
version overhead
overhead numbers
eliminated needed
needed multiples
previous remaining
algorithm continues
continues fashion
fashion numbers
remaining integers
integers primes
primes needed
needed application
finding primes
exceeding passes
passes needed
needed eliminate
eliminate num
bers eliminated
previous iterations
algorithm remaining
numbers consecutive
primes equal
equal largest
largest multiples
multiples make
make iterations
algorithm multiples
eliminated current
current multiple
multiple smaller
smaller multiples
eliminated earlier
earlier passes
passes observation
observation helps
helps eliminating
eliminating greater
greater exceed
exceed rounded
rounded denoted
denoted called
called floor
floor function
function assume
assume pseudocode
pseudocode function
function computing
computing alternatively
alternatively inequality
inequality loop
loop continuation
continuation condition
sieve implements
implements sieve
eratosthenes input
array prime
equal ndo
ndo pseudocode
previous passes
passes element
element eliminated
array primes
primes incorporate
incorporate sieve
eratosthenes middle
procedure legitimate
integers special
exercised input
equal mathematicians
mathematicians prime
prime strictly
speaking method
method inputs
inputs leave
section comment
comment examples
section majority
today implemented
programs deal
deal mathematical
algorithms helping
helping daily
daily routines
routines professional
personal ubiquity
ubiquity algorithms
today world
world resolve
resolve fascinating
fascinating engines
engines information
information age
age exercises
exercises research
research khorezmi
khorezmi khwarizmi
khwarizmi word
word algorithm
algorithm derived
derived origins
origins words
words algorithm
algorithm algebra
algebra common
common official
official purpose
purpose patent
patent promotion
promotion arts
arts algorithms
algorithms patentable
patentable country
country write
write driving
driving directions
directions school
school home
home precision
description write
write recipe
recipe cooking
cooking favorite
favorite dish
dish precision
integer assignment
basic arithmetical
operations design
algorithm common
numbers lists
maximum comparisons
makes lengths
lengths lists
lists gcd
gcd applying
applying euclid
faster gcd
checking secutive
integers min
min gcd
gcd prove
mod pair
pair positive
integers smaller
smaller maximum
maximum times
execution input
input minimum
minimum divisions
inputs maximum
maximum divisions
presented euclid
euclid treatise
treatise subtractions
subtractions integer
integer divisions
divisions write
pseudocode version
version euclid
euclid game
game bog
bog starts
starts unequal
unequal positive
integers board
board players
write board
board positive
positive equal
board numbers
board player
player loses
game choose
choose game
game extended
determines greatest
necessarily positive
positive description
description extended
algorithm knui
knui implement
implement language
choice modify
modify integer
integer solutions
solutions diophantine
diophantine equation
equation set
integer coefficients
coefficients locker
doors lockers
lockers hallway
hallway numbered
numbered sequentially
sequentially initially
initially locker
closed make
make passes
passes lockers
lockers starting
starting locker
locker ith
ith toggle
toggle door
door ith
ith locker
door closed
closed locker
closed fundamentals
fundamentals algorithmic
solving reiterating
reiterating important
important introduction
algorithms procedural
procedural solutions
solutions answers
specific instructions
instructions answers
answers emphasis
emphasis precisely
defined constructive
constructive procedures
procedures makes
makes science
science distinct
distinct disciplines
disciplines distinguishes
distinguishes oretical
oretical mathematics
mathematics practitioners
practitioners typically
typically satisfied
satisfied proving
existence solution
problem possibly
possibly investigating
investigating solution
solution properties
properties briefly
briefly discuss
discuss sequence
typically designing
figure understanding
understanding problem
practical perspective
perspective thing
thing designing
algorithm understand
understand completely
completely problem
problem read
read problem
problem description
description carefully
carefully questions
questions doubts
doubts problem
small examples
examples special
cases questions
needed types
arise computing
computing applications
applications review
review section
solving helps
helps understand
understand algorithm
works strengths
weaknesses choose
choose algorithms
algorithms readily
readily algorithm
design sequence
steps outlined
section exciting
exciting easy
easy task
task input
solves important
instances algorithm
recall variations
variations set
instances greatest
divisor algorithms
correctly majority
majority inputs
inputs boundary
boundary algorithm
correctly legitimate
legitimate inputs
inputs skimp
skimp algorithmic
solving process
process run
run unnecessary
unnecessary rework
rework ascertaining
ascertaining capabilities
device completely
completely understand
problem ascertain
ascertain capabilities
device algorithm
algorithm intended
intended vast
majority understand
computational means
means exact
approximate solving
solving algorithm
technique design
correctness analyze
analysis process
process algorithms
today destined
destined programmed
programmed closely
closely resembling
resembling von
neumann machine
machine architecture
architecture outlined
outlined prominent
prominent hungarian
mathematician john
john von
neumann collaboration
collaboration burks
burks goldstine
goldstine essence
essence architecture
architecture captured
captured called
called random
random access
access machine
machine ram
ram central
assumption instructions
instructions executed
operation algorithms
executed machines
machines called
algorithms central
assumption ram
model hold
hold newer
newer computers
computers execute
operations concurrently
concurrently parallel
advantage capability
capability called
called parallel
algorithms studying
studying classic
classic techniques
algorithms ram
model remains
remains cornerstone
cornerstone algorithmics
algorithmics foreseeable
foreseeable future
future speed
memory disposal
disposal designing
algorithm scientific
scientific qualified
qualified section
section scientists
scientists study
algorithms terms
terms independent
independent specification
specification parameters
parameters designing
practical tool
tool problem
solve computers
computers today
today unimaginably
unimaginably fast
fast situations
situations task
complex nature
nature process
process huge
huge volumes
volumes data
data deal
deal applications
applications critical
critical situations
situations imperative
imperative aware
aware speed
memory choosing
choosing exact
approximate problem
solving principal
principal decision
decision choose
choose solving
approximately case
called exact
exact algorithm
called approximation
opt approximation
problems simply
simply solved
instances examples
examples extracting
extracting square
roots solving
evaluating definite
integrals algorithms
problem unacceptably
unacceptably problem
intrinsic complexity
involving large
large choices
choices examples
examples difficult
problems chapters
chapters approximation
sophisticated algorithm
techniques components
components algorithmic
solving design
problem main
main seeks
seeks teaching
teaching general
techniques algorithm
technique strategy
strategy paradigm
paradigm general
table contents
contents majority
majority chapters
devoted individual
individual design
techniques distill
distill key
key ideas
ideas proven
proven designing
algorithms learning
techniques utmost
utmost importance
importance reasons
reasons guidance
guidance designing
problems satisfactory
satisfactory algorithm
language famous
famous proverb
proverb learning
techniques akin
akin learning
learning fish
fish opposed
opposed fish
fish caught
caught true
true general
techniques necessarily
necessarily applicable
problem encounter
encounter constitute
constitute powerful
powerful collection
collection tools
tools handy
handy studies
studies algorithms
algorithms cornerstone
science interested
interested classifying
classifying principal
subject science
science exception
exception algorithm
techniques make
make classify
idea natural
natural categorize
categorize study
algorithms designing
techniques powerful
powerful set
set general
general proaches
proaches algorithmic
solving designing
problem challenging
challenging task
task design
techniques simply
simply inapplicable
inapplicable problem
problem techniques
techniques combined
combined algorithms
algorithms hard
hard pinpoint
pinpoint applications
technique plicable
plicable algorithm
requires nontrivial
nontrivial ingenuity
ingenuity algorithm
designer practice
practice tasks
tasks choosing
choosing general
techniques applying
applying easier
easier rarely
easy pay
pay attention
attention choosing
choosing data
structures appro
priate operations
eratosthenes introduced
implementation gorithm
techniques discussed
discussed chapters
chapters intimately
intimately structuring
restructuring data
data problem
instance years
ago influential
influential textbook
textbook proclaimed
proclaimed fundamental
fundamental importance
importance algo
rithms data
structures programming
programming title
title algorithms
structures programs
programs wir
wir world
world oriented
oriented pro
pro gramming
gramming data
structures crucially
crucially important
important design
algorithms review
structures section
designed algorithm
algorithm fashion
fashion section
section euclid
algorithm words
words free
free pseudocode
pseudocode options
options widely
widely nowadays
nowadays algorithms
language obvious
obvious appeal
appeal inherent
inherent ambi
ambi guity
guity natural
language makes
makes succinct
description algorithms
algorithms surprisingly
surprisingly difficult
difficult important
important skill
skill strive
strive process
process learning
algorithms pseudocode
pseudocode mixture
mixture natural
language programming
language constructs
constructs pseudocode
pseudocode precise
precise natural
language usage
usage yields
yields succinct
succinct algorithm
algorithm descriptions
descriptions surprisingly
surprisingly scientists
scientists agreed
agreed single
single pseudocode
pseudocode leaving
leaving textbook
textbook authors
authors design
design dialects
dialects fortunately
fortunately dialects
dialects familiar
familiar modern
modern programming
language understand
understand dialect
dialect selected
selected minimal
minimal difficulty
difficulty reader
reader sake
simplicity omit
omit declarations
declarations variables
variables indentation
indentation scope
scope statements
statements previous
section arrow
arrow assignment
assignment operation
operation slashes
slashes comments
comments earlier
earlier days
days computing
computing dominant
dominant vehicle
vehicle algorithms
algorithms flowchart
flowchart method
method expressing
algorithm collection
collection connected
connected geometric
shapes descriptions
descriptions algorithm
algorithm steps
steps representation
technique proved
proved inconvenient
inconvenient simple
algorithms nowadays
nowadays algorithm
algorithm books
books state
state art
art computing
computing reached
reached algorithm
description natural
pseudocode fed
fed electronic
electronic directly
directly converted
converted written
written language
algorithm preferable
preferable algorithm
implementation proving
proving algorithm
correctness prove
yields required
required result
result legitimate
finite correctness
correctness euclid
divisor stems
stems correctness
correctness equality
mod proof
simple observation
integer smaller
stops integer
proof correctness
correctness easy
easy complex
complex common
common technique
technique proving
proving correctness
correctness mathematical
iterations natural
natural sequence
steps needed
needed proofs
proofs mentioning
mentioning tracing
performance specific
inputs worthwhile
worthwhile activity
activity prove
correctness conclusively
conclusively algorithm
algorithm incorrect
incorrect instance
instance input
algorithm fails
fails notion
notion correctness
correctness approximation
algorithms straightforward
straightforward exact
exact algorithms
algorithms approximation
algorithm error
error produced
exceed predefined
predefined limit
limit examples
examples investigations
investigations chapter
chapter analyzing
algorithms qualities
qualities correctness
correctness important
fact kinds
efficiency indicating
indicating fast
space ficiency
ficiency indicating
indicating extra
memory general
framework specific
specific techniques
techniques analyzing
efficiency chapter
chapter desirable
simplicity effi
ciency precisely
defined investigated
investigated mathematical
rigor simplicity
simplicity beauty
beauty considerable
considerable degree
degree eye
eye beholder
beholder people
people euclid
simpler middle
gcd clid
simpler consecutive
simplicity important
algorithm characteristic
characteristic strive
strive sim
sim pler
understand easier
easier resulting
resulting programs
programs bugs
bugs undeniable
undeniable aes
aes thetic
thetic appeal
appeal simplicity
simplicity simpler
efficient complicated
complicated alternatives
alternatives true
true case
case judicious
judicious compromise
compromise desirable
algorithm generality
generality fact
fact issues
issues generality
generality problem
solves set
inputs accepts
accepts issue
issue easier
posed general
determining integers
integers prime
divisor equal
equal easier
integers solve
problem gcd
gcd situations
situations designing
designing general
algorithm unnecessary
unnecessary difficult
difficult impossible
impossible unnecessary
sort numbers
numbers median
median smallest
equation generalized
generalized polynomials
polynomials arbitrary
arbitrary degrees
degrees set
inputs main
main designing
inputs natural
natural problem
problem integers
integers equal
equal inputs
inputs greatest
algorithm unnatural
unnatural standard
equation holds
holds complex
complex coefficients
coefficients implement
implement generality
generality capability
capability explicitly
explicitly required
required satisfied
satisfied algorithm
efficiency simplicity
simplicity generality
generality drawing
drawing board
board redesign
redesign algorithm
fact evaluation
evaluation positive
positive searching
searching algorithmic
solutions recall
recall algorithms
algorithms previous
divisor generally
generally algorithm
tune algorithm
improvements implementation
implementation sieve
eratosthenes compared
compared initial
initial outline
outline section
section mind
mind observation
observation antoine
exupe french
french writer
writer pilot
pilot aircraft
aircraft designer
designer arrived
arrived perfection
perfection longer
longer coding
coding algorithm
algorithms destined
destined ultimately
ultimately implemented
implemented pro
pro grams
grams programming
algorithm presents
presents peril
peril opportunity
opportunity peril
peril lies
lies possibility
possibility making
making transition
transition algorithm
gram incorrectly
incorrectly inefficiently
inefficiently influential
influential scientists
scientists strongly
strongly correctness
correctness proven
proven mathematical
rigor considered
considered developed
developed special
special techniques
techniques proofs
proofs gri
gri power
power techniques
techniques formal
formal verification
verification small
small programs
programs practical
practical validity
validity programs
programs established
established testing
testing programs
programs art
art science
science books
devoted testing
testing debugging
debugging important
important debug
debug implement
assume inputs
algorithms sets
require verification
verification implementing
implementing algorithms
algorithms programs
programs actual
applications verifications
verifications implementing
correctly sufficient
sufficient diminish
diminish algorithm
algorithm power
power inefficient
inefficient implemen
tation modern
modern compilers
compilers safety
safety net
net regard
regard code
code optimization
optimization mode
mode aware
aware standard
standard tricks
tricks computing
computing loop
loop invariant
invariant expression
expression loop
loop collecting
collecting common
common subexpressions
subexpressions replac
replac ing
ing expensive
expensive operations
operations cheap
cheap ker
ker ben
ben good
good discussion
discussion code
code tuning
tuning issues
related algorithm
algorithm ming
ming typically
typically improvements
improvements speed
speed constant
make difference
running orders
selected speedup
speedup effort
effort design
design simplicity
simplicity essay
essay collection
collection jon
ben essays
essays deal
deal variety
variety issues
issues algorithm
design implementation
implementation justifiably
justifiably titled
titled programming
programming pearls
pearls wholeheartedly
wholeheartedly recommend
recommend writings
writings jon
bentley antoine
exupe working
working additional
additional opportunity
opportunity allowing
allowing pirical
analysis underlying
underlying algorithm
analysis based
based timing
timing inputs
analyzing results
cuss advantages
disadvantages approach
section conclusion
conclusion emphasize
emphasize main
main lesson
lesson process
process depicted
repeated effort
effort rework
rework fortunate
fortunate algorithmic
algorithmic idea
idea perfect
perfect improved
improved good
news makes
makes ultimate
result enjoyable
enjoyable naming
naming joy
joy algorithms
algorithms real
world project
project schedule
schedule impatience
impatience boss
boss perfection
perfection expensive
expensive fact
fact called
called designing
algorithm engineering
engineering activity
activity calls
calls compromises
compromises competing
competing goals
goals constraints
constraints resources
resources designer
designer resources
resources academic
academic world
world leads
leads interesting
interesting difficult
algorithm optimality
optimality efficiency
algorithm complexity
solves minimum
minimum effort
effort algorithm
algorithm exert
exert solve
array comparing
comparing values
size section
section seemingly
seemingly easy
easy problems
problems integer
multiplication scientists
scientists final
final important
issue algorithmic
talking problems
equation negative
negative discriminant
discriminant cases
cases output
output indicating
indicating problem
talking ambiguously
ambiguously stated
stated problems
problems unambiguous
unambiguous problems
problems simple
simple undecidable
undecidable unsolvable
unsolvable algorithm
problem appears
appears section
section fortunately
fortunately vast
problems practical
practical computing
algorithm leaving
leaving section
section misconception
misconception possibly
possibly caused
caused mechanical
mechanical nature
nature diagram
figure designing
algorithm dull
dull activity
activity truth
truth inventing
inventing discovering
discovering algorithms
algorithms creative
creative rewarding
rewarding process
process designed
designed convince
convince case
case exercises
exercises world
puzzle peasant
finds riverbank
riverbank wolf
problem peasant
peasant prove
solution peasant
peasant vegetarian
vegetarian cabbage
cabbage eat
problem wolf
wolf protected
protected species
species world
puzzle people
people rickety
rickety bridge
bridge begin
begin minutes
minutes night
night flashlight
flashlight maximum
maximum people
bridge party
party crosses
crosses people
people flashlight
flashlight walked
walked thrown
thrown person
minute bridge
bridge person
minutes pair
pair rate
rate slower
slower person
person pace
pace rumor
rumor internet
internet interviewers
interviewers software
software company
company located
located seattle
seattle problem
problem interviewees
interviewees formulas
formulas considered
considered algorithm
ing area
triangle lengths
lengths positive
numbers angle
sides aha
aha height
height base
roots equation
coefficients assume
assume availability
availability square
function sqrt
sqrt standard
finding binary
integer english
algorithm favorite
favorite atm
atm machine
machine dispensing
dispensing cash
cash description
description english
pseudocode convenient
convenient problem
problem internet
internet problem
closest elements
algorithm mindistance
mindistance input
distance elements
elements dmin
dmin make
make improvements
improvements algorithmic
altogether implementation
implementation influential
influential books
solving titled
titled solve
solve pol
pol written
written hungarian
george lya
lya summarized
summarized ideas
ideas summary
summary internet
internet outlined
section common
common important
types limitless
limitless sea
sea problems
problems encounters
encounters computing
computing areas
areas attracted
attracted attention
researchers large
large driven
driven problem
importance specific
specific characteristics
characteristics making
interesting research
research subject
subject fortunately
fortunately motivating
motivating forces
forces reinforce
reinforce cases
cases section
problems subsequent
chapters illustrate
techniques methods
analysis sorting
rearrange items
items nondecreasing
nondecreasing problem
problem meaningful
meaningful nature
nature items
items ordering
ordering mathematicians
mathematicians relation
relation total
total ordering
ordering practical
practical sort
strings important
important records
records similar
similar maintained
maintained schools
schools students
students libraries
libraries holdings
holdings companies
companies employees
employees case
records choose
choose piece
information sorting
sorting choose
choose sort
records alphabetical
alphabetical names
names student
student grade
grade average
average specially
chosen piece
information called
key scientists
scientists sorting
sorting keys
keys items
items records
records integers
integers sorted
sorted begin
begin sorted
sorted required
output task
task ranking
ranking internet
internet results
results ranking
ranking students
gpa scores
scores sorting
sorting makes
easier important
important searching
searching dictionaries
dictionaries books
books class
class lists
lists sorted
sorted examples
examples usefulness
usefulness presorting
presorting section
section similar
vein sorting
sorting auxiliary
auxiliary important
areas geometric
compression greedy
approach important
discussed requires
requires sorted
input scientists
discovered dozens
dozens sorting
fact inventing
inventing sorting
algorithm likened
likened designing
designing proverbial
proverbial mousetrap
mousetrap happy
happy sorting
sorting mousetrap
mousetrap continues
continues perseverance
perseverance admirable
admirable view
view facts
facts good
arbitrary array
sorts key
comparisons opposed
opposed comparing
comparing small
small pieces
keys substantially
substantially reason
reason embarrassment
embarrassment algorithmic
algorithmic riches
riches sorting
solution situations
simple faster
faster complex
complex randomly
ordered inputs
lists suitable
suitable lists
lists residing
residing fast
memory adapted
adapted sorting
sorting large
files stored
disk properties
properties sorting
special mention
mention sorting
stable preserves
preserves relative
relative equal
sorted positions
positions property
desirable students
students sorted
alphabetically sort
student gpa
gpa stable
yield students
gpa sorted
alphabetically generally
speaking algorithms
algorithms exchange
exchange keys
keys located
located stable
stable faster
faster general
general comment
comment applies
applies important
algorithms notable
notable feature
feature sorting
memory algorithm
memory possibly
possibly memory
units important
deals finding
multiset permits
permits elements
elements plenty
plenty searching
algorithms choose
choose range
range straightforward
straightforward sequential
sequential spectacularly
spectacularly efficient
efficient binary
binary algorithms
representing underlying
set conducive
conducive searching
algorithms importance
importance real
indispensable storing
storing retriev
retriev ing
information large
large databases
databases searching
searching single
single algorithm
algorithm fits
fits situations
algorithms faster
faster require
require memory
memory fast
fast applicable
applicable sorted
algorithms stability
problem issues
issues arise
arise specifically
specifically applications
applications underlying
underlying data
data frequently
frequently relative
relative searches
searching considered
considered conjunction
conjunction operations
deletion data
item situations
situations data
algorithms chosen
chosen strike
strike requirements
requirements operation
operation organizing
organizing large
sets efficient
efficient searching
searching poses
poses special
challenges important
important implications
implications real
applications string
processing recent
recent decades
decades rapid
proliferation applications
dealing nonnumer
nonnumer ical
data intensified
intensified researchers
researchers computing
computing practitioners
practitioners string
string handling
handling algorithms
alphabet strings
strings text
text strings
comprise letters
letters numbers
numbers special
characters bit
comprise zeros
zeros gene
gene sequences
sequences modeled
modeled strings
character alphabet
alphabet pointed
pointed string
processing algorithms
important science
science conjunction
conjunction languages
compiling issues
issues problem
searching word
text attracted
attracted special
special attention
researchers string
matching algorithms
algorithms exploit
exploit special
special nature
nature searching
searching invented
invented simple
based remarkable
remarkable idea
moore chapter
chapter graph
problems oldest
oldest interesting
interesting areas
areas algorithmics
algorithmics graph
algorithms informally
informally graph
graph thought
edges formal
definition section
graphs interesting
interesting subject
study theoretical
practical reasons
reasons graphs
graphs modeling
modeling wide
communication social
social economic
economic networks
networks project
project scheduling
scheduling games
games studying
studying technical
technical social
social aspects
aspects internet
internet active
active areas
areas current
current research
research involving
involving scientists
scientists economists
economists social
social scientists
scientists eas
eas basic
basic graph
algorithms points
points network
network shortest
path algorithms
algorithms route
route cities
cities topological
sorting graphs
edges set
set courses
prerequisites consistent
consistent contradictory
contradictory fortunately
fortunately algorithms
considered illustrations
illustrations general
techniques chapters
chapters graph
hard examples
examples traveling
tsp problem
city addition
addition obvious
involving route
route planning
planning arises
arises modern
modern applications
applications circuit
circuit board
board vlsi
vlsi chip
chip fabrication
fabrication ray
ray crystallography
crystallography genetic
genetic engineering
engineering graph
problem seeks
seeks assign
color problem
arises applications
applications event
event scheduling
scheduling events
events represented
represented vertices
edge events
events scheduled
scheduled solution
optimal schedule
schedule combinatorial
problems abstract
abstract perspective
perspective traveling
problem graphcoloring
graphcoloring problem
problem examples
examples combinatorial
problems explicitly
combinatorial permutation
permutation combination
combination subset
subset satisfies
constraints desired
desired combinatorial
combinatorial required
required additional
property maximum
minimum cost
cost generally
speaking combinatorial
computing theoretical
standpoint difficulty
stems facts
facts combinatorial
grows extremely
extremely fast
size reaching
reaching unimaginable
unimaginable magnitudes
magnitudes moderate
moderate sized
sized instances
instances algorithms
problems acceptable
acceptable scientists
algorithms conjecture
conjecture proved
proved disproved
disproved remains
remains important
section combinatorial
solved efficient
considered fortunate
fortunate exceptions
exceptions shortest
earlier exceptions
exceptions geometric
deal geometric
geometric objects
objects points
points lines
lines poly
poly gons
gons ancient
ancient greeks
greeks interested
interested developing
developing procedures
procedures algorithms
variety geometric
problems constructing
simple geometric
shapes triangles
triangles circles
circles unmarked
unmarked ruler
ruler compass
compass years
years intense
intense geometric
algorithms disappeared
disappeared resurrected
resurrected age
age computers
computers rulers
rulers compasses
compasses bits
bits bytes
bytes good
good human
human ingenuity
ingenuity today
today people
people interested
applications mind
mind graphics
graphics robotics
robotics tomography
tomography discuss
algorithms classic
classic problems
problem explanatory
explanatory points
plane closest
asks smallest
set interested
algorithms wealth
wealth material
material specialized
specialized monographs
monographs deb
deb oro
oro pre
pre numerical
problems large
large special
special area
area applications
applications problems
problems involve
involve mathematical
objects continuous
continuous nature
nature solving
equations computing
computing definite
integrals evaluating
evaluating functions
functions majority
majority mathematical
approximately principal
require manipulating
manipulating real
approximately large
large arithmetic
performed approximately
approximately represented
represented numbers
lead accumulation
error drastically
drastically distort
distort output
output produced
produced seemingly
seemingly algorithm
sophisticated algorithms
developed years
years area
area critical
role scientific
scientific engineering
engineering applications
years computing
computing industry
industry shifted
shifted focus
focus business
business applications
require primarily
primarily algorithms
information storage
retrieval transportation
networks presentation
presentation users
users result
result revolutionary
revolutionary numerical
analysis lost
lost dominating
dominating position
position industry
industry science
science programs
programs important
important literate
literate person
person rudimentary
rudimentary idea
idea numerical
discuss classical
classical numerical
problem sorts
counting elements
elements information
information element
orderable values
nondecreasing apply
stable algorithms
good succinct
algorithm english
english algorithms
algorithms opportunity
opportunity design
problem nigsberg
nigsberg bridges
bridges nigsberg
nigsberg bridge
bridge puzzle
puzzle universally
universally accepted
accepted problem
problem gave
gave birth
birth graph
graph theory
theory solved
solved great
great swiss
swiss born
born mathematician
mathematician leonhard
euler problem
problem asked
asked single
single stroll
stroll bridges
bridges city
city nigsberg
nigsberg starting
starting sketch
sketch river
river islands
islands bridges
bridges state
solution draw
draw stroll
stroll smallest
smallest bridges
bridges required
required make
make stroll
stroll icosian
game century
century euler
euler discovery
problem famous
famous puzzle
puzzle invented
invented renowned
renowned irish
william hamilton
hamilton presented
presented world
world icosian
board circular
circular wooden
wooden board
board graph
graph carved
carved hamiltonian
path visits
visits graph
vertices returning
returning starting
determine route
subway similar
similar cities
cities washington
london problem
statement vague
vague typical
typical real
life problems
reasonable criterion
criterion defining
defining route
route model
graph rephrase
rephrase traveling
terms rephrase
rephrase graph
terms map
map neighboring
neighboring regions
regions colored
map smallest
colors design
plane determine
determine circumference
circumference write
write reads
reads inputs
inputs coordinates
coordinates endpoints
endpoints line
segments determines
determines segments
segments common
common fundamental
structures vast
data ways
ways organizing
data critical
role design
structure defined
defined scheme
scheme organizing
organizing related
related data
items nature
nature data
items dictated
dictated problem
problem range
range elementary
types integers
integers characters
characters data
structures dimensional
array dimensional
dimensional arrays
implementing matrices
matrices data
structures proved
proved important
algorithms undoubtedly
undoubtedly familiar
familiar quick
quick review
review provided
provided linear
linear data
structures important
linked dimensional
array sequence
sequence items
items data
stored contiguously
contiguously memory
memory accessible
accessible array
figure majority
majority cases
cases index
index integer
integer shown
figure languages
languages array
index range
range integer
integer bounds
low high
high nonnumerical
nonnumerical indices
indices data
items months
months year
year month
month names
names element
array accessed
accessed constant
constant array
located feature
feature positively
positively distinguishes
distinguishes arrays
arrays linked
lists discussed
discussed arrays
implementing variety
variety data
structures promi
promi nent
nent string
alphabet termi
termi nated
nated special
character indicating
indicating string
strings composed
composed zeros
zeros called
binary strings
strings indispensable
pro cessing
cessing textual
textual data
data defining
defining languages
compiling programs
programs written
written studying
studying abstract
abstract computational
computational models
models operations
operations strings
differ typically
typically arrays
arrays numbers
computing string
length comparing
comparing strings
strings determine
determine precedes
precedes lexicographic
lexicographic alphabetical
alphabetical der
der concatenating
concatenating strings
strings forming
forming string
strings appending
appending linked
linked sequence
sequence elements
elements called
called nodes
kinds information
data links
links called
called pointers
nodes linked
special pointer
pointer called
called null
null absence
absence node
node successor
successor singly
single pointer
element figure
figure access
access node
node linked
linked starts
starts node
node traverses
traverses pointer
node reached
reached needed
access element
element singly
array depends
depends element
located positive
positive linked
lists item
item figure
elements item
figure singly
null item
figure doubly
require preliminary
preliminary reservation
reservation memory
memory insertions
deletions efficiently
efficiently linked
linked reconnecting
reconnecting pointers
pointers exploit
exploit flexibility
flexibility linked
linked structure
structure variety
variety ways
ways convenient
convenient linked
node called
called header
header node
node information
information linked
linked current
current length
length addition
addition pointer
element pointer
pointer linked
element extension
extension structure
called doubly
node pointers
pointers successor
successor predecessor
predecessor figure
linked principal
principal choices
choices representing
linear simply
simply finite
finite sequence
sequence data
items arranged
arranged linear
linear basic
structure searching
searching inserting
inserting deleting
types lists
lists stacks
stacks queues
important stack
stack insertions
deletions called
called stack
stack visualized
visualized horizontally
vertically akin
akin stack
plates operations
operations mimics
mimics closely
closely result
result elements
added pushed
stack deleted
deleted popped
popped structure
structure operates
operates lifo
lifo fashion
fashion stack
plates plate
plate stacks
stacks multitude
multitude applications
indispensable implementing
algorithms elements
elements deleted
deleted structure
called operation
called dequeue
dequeue elements
added called
called rear
rear operation
called enqueue
enqueue operates
operates fifo
fifo fashion
fashion akin
akin customers
customers served
served single
single teller
teller bank
bank queues
applications algorithms
require selection
selection item
priority dynamically
dynamically changing
changing set
set candidates
candidates data
structure seeks
seeks applications
applications called
called priority
priority collection
items totally
totally ordered
ordered universe
universe integer
integer real
numbers principal
principal operations
priority ing
element deleting
deleting largest
element adding
implemented operations
operations yield
yield priority
priority straightforward
straightforward implementations
implementations data
ture based
array options
options yields
yields efficient
solution implementation
priority based
based ingenious
ingenious data
called discuss
discuss heaps
based section
graphs mentioned
mentioned previous
section graph
graph informally
informally thought
vertices nodes
nodes connected
edges arcs
arcs formally
formally graph
defined pair
pair sets
pairs items
edges pairs
vertices unordered
connected undirected
vertices endpoints
endpoints edge
incident endpoints
endpoints graph
called undirected
edge undirected
undirected pair
pair edge
edge tail
tail vertex
edge leaves
leaves enters
enters graph
directed called
called directed
called digraphs
digraphs convenient
convenient vertices
digraph letters
letters integer
integer numbers
numbers application
application calls
calls character
strings figure
graph depicted
undirected edges
digraph depicted
vertices directed
figure undirected
digraph definition
graph forbid
forbid loops
loops edges
vertices explicitly
explicitly stated
stated graphs
graphs loops
loops definition
definition disallows
disallows multiple
multiple edges
graph inequality
inequality edges
edges undirected
vertices loops
loops largest
vertices product
product includes
includes edge
graph pair
standard notation
notation graph
edges missing
missing called
called dense
vertices called
called sparse
sparse dealing
dealing dense
graph choose
choose represent
represent graph
graph running
designed graph
graph representations
representations graphs
graphs algorithms
algorithms represented
ways adjacency
lists adjacency
vertices boolean
column graph
column equal
edge adjacency
symmetric adjacency
digraph collection
collection linked
lists vertex
edge lists
lists header
header identifying
identifying vertex
vertex compiled
compiled figure
figure represents
represents graph
lists columns
matrix vertex
sparse adjacency
representation space
space adjacency
matrix extra
storage consumed
consumed pointers
pointers linked
lists situation
situation dense
graphs general
general representations
convenient depends
solving possibly
possibly input
sparse dense
dense weighted
graph weighted
graph numbers
edges numbers
called weights
weights costs
costs graphs
graphs motivated
motivated numerous
numerous real
applica tions
points transportation
network traveling
earlier principal
principal representations
representations graph
graph easily
easily adopted
adopted accommo
accommo date
date weighted
element simply
edge special
symbol edge
edge matrix
called weight
matrix cost
matrix approach
approach illustrated
figure plications
convenient main
diagonal adjacency
lists weighted
nodes adjacent
figure paths
paths cycles
cycles properties
important great
great applications
acyclicity based
based notion
notion path
path vertex
ends vertices
path distinct
distinct path
path total
total vertices
sequence defining
length graph
connected case
case directed
interested directed
paths directed
vertices consecutive
listed directed
path make
make model
graph connecting
connecting balls
vertices strings
strings representing
edges single
single piece
connected model
connected pieces
pieces called
called connected
graph formally
formally connected
component maximal
maximal expandable
expandable vertex
connected subgraph
graph graphs
graphs figures
figures connected
vertices graphs
graphs connected
components real
cations graph
representing interstate
interstate highway
highway united
states important
applications graph
graph consideration
consideration cycles
cycles path
length starts
traverse edge
cycles acyclic
acyclic discuss
discuss acyclic
graphs subsection
subsection trees
tree accurately
accurately free
cycles necessarily
connected called
called forest
forest connected
components tree
figure subgraph
figure free
tree transformation
transformation rooted
graphs par
par ticular
ticular edges
demonstrates property
property suffi
suffi cient
cient graph
connected graphs
graphs sufficient
sufficient convenient
convenient checking
checking connected
graph rooted
important property
property trees
fact vertices
tree exists
exists simple
vertices property
makes select
select arbitrary
root called
called rooted
tree depicted
depicted placing
placing root
adjacent root
root vertices
edges root
presents transformation
transformation free
role science
science important
important free
free trees
fact sake
sake brevity
brevity referred
referred simply
simply trees
trees obvious
application trees
trees describing
describing hierarchies
hierarchies directories
directories organizational
organizational charts
charts enterprises
enterprises obvious
applications implementing
dictionaries efficient
sets section
data encoding
chapter trees
trees helpful
helpful analysis
algorithms finish
finish tree
tree applications
mention called
space trees
trees underline
underline important
techniques backtracking
sections vertex
vertices simple
called ancestors
ancestors vertex
vertex considered
considered ancestor
ancestor set
set ancestors
ancestors excludes
excludes vertex
vertex referred
referred set
set proper
proper ancestors
ancestors edge
edge simple
parent called
child vertices
vertices parent
parent siblings
children called
called leaf
leaf vertex
vertex child
child called
called parental
parental vertices
ancestor descendants
descendants proper
proper descendants
descendants exclude
exclude vertex
vertex descendants
descendants vertex
connecting subtree
vertices leaves
leaves vertices
vertices parental
parent children
children siblings
siblings vertices
vertices subtree
rooted depth
root height
leaf depth
figure height
root depth
simply tree
height maximum
vertices fact
fact authors
authors define
levels makes
makes height
tree larger
larger height
leaf ordered
ordered trees
trees ordered
children vertex
vertex ordered
ordered convenient
assume tree
tree diagram
diagram children
children ordered
ordered left
child designated
designated left
child parent
parent binary
recursively makes
involving binary
trees recursive
tree null
standard implementation
figure numbers
vertices binary
figure assigned
assigned parental
vertex larger
numbers left
numbers subtree
subtree trees
trees wide
science encounter
encounter binary
trees generalized
general types
multiway trees
trees indispensable
trees extensions
extensions depends
height fore
fore inequalities
inequalities height
nodes important
tree implemented
implemented computing
purposes collection
collection nodes
nodes vertices
node informa
informa tion
vertex assigned
assigned pointers
nodes representing
representing left
vertex spectively
spectively figure
illustrates implementation
figure representation
representation arbitrary
arbitrary ordered
simply providing
providing parental
vertex pointers
pointers equal
equal children
children representation
representation prove
prove inconvenient
inconvenient children
children varies
varies widely
widely nodes
nodes inconvenience
inconvenience nodes
pointers binary
trees left
pointer child
vertex pointer
pointer sibling
representation called
representation siblings
vertex linked
pointers singly
element pointed
pointed left
pointer parent
parent figure
illustrates representation
figure difficult
difficult representation
representation effectively
effectively transforms
transforms ordered
tree ordered
representation rotating
rotating pointers
pointers degrees
degrees clockwise
clockwise figure
figure sets
sets dictionaries
dictionaries notion
notion set
set plays
role mathematics
mathematics set
collection possibly
possibly distinct
called elements
set specific
specific set
defined explicit
explicit listing
listing elements
elements property
elements prime
prime smaller
smaller important
operations checking
checking membership
membership item
item set
set finding
union sets
comprises elements
elements finding
intersection sets
comprises common
sets implemented
implemented applications
applications ways
ways considers
considers sets
subsets large
set called
called universal
universal set
subset represented
string size
size called
called bit
vector ith
element included
included set
representing sets
sets makes
makes implement
implement standard
operations fast
fast expense
expense potentially
potentially large
large storage
storage common
common represent
represent set
set computing
purposes structure
structure set
elements option
option feasible
feasible finite
finite sets
sets fortunately
fortunately mathematics
mathematics kind
kind sets
sets applications
applications principal
principal points
points distinction
distinction sets
lists set
set identical
identical elements
elements requirement
requirement uniqueness
uniqueness circumvented
circumvented introduction
introduction multiset
multiset bag
bag unordered
items necessarily
distinct set
items changing
ordered collection
items important
theoretical distinction
distinction fortunately
applications mentioning
mentioning set
represented depending
depending application
application maintaining
maintaining sorted
sorted computing
computing operations
multiset searching
item adding
item deleting
item collection
structure implements
implements operations
operations called
called dictionary
dictionary relationship
searching mentioned
section dealing
dealing searching
searching dynamic
dynamic context
context efficient
dictionary strike
strike compromise
compromise efficiency
searching efficiencies
efficiencies operations
operations ways
ways dictionary
implemented range
range unsophisticated
unsophisticated arrays
sorted sophisticated
sophisticated techniques
techniques hashing
applications computing
computing require
operations problem
called set
union problem
discuss efficient
section conjunction
conjunction important
applications noticed
noticed review
structures mentioned
mentioned specific
specific operations
operations typically
typically performed
performed structure
structure intimate
intimate relationship
data operations
operations recognized
recognized scientists
scientists led
led idea
idea abstract
adt set
abstract objects
objects representing
representing data
collection operations
performed illustrations
illustrations notion
notion reread
reread definitions
definitions priority
types implemented
implemented older
older procedural
procedural languages
languages pascal
pascal aho
aho convenient
convenient oriented
languages java
java abstract
types means
classes exercises
exercises implement
operations array
array takes
takes array
size delete
array delete
sorted solve
solve searching
problem numbers
fact sorted
sorted answers
answers lists
represented arrays
arrays lists
represented linked
lists stack
starts stack
starts enqueue
dequeue enqueue
dequeue adjacency
graph prop
prop erty
erty matrix
graph loop
loop edge
vertex iii
iii graph
graph isolated
isolated vertex
incident questions
questions adjacency
representation detailed
detailed description
algorithm transforming
transforming free
prove inequalities
inequalities bracket
bracket height
vertices log
log adt
adt priority
dictionary small
size knew
knew elements
distinct names
names states
states united
states implementation
operation applications
applications data
structure answering
answering calls
calls priorities
priorities sending
sending backlog
backlog orders
orders customers
customers received
received implementing
implementing calculator
calculator computing
computing simple
simple arithmetical
arithmetical expressions
expressions anagram
anagram checking
checking design
checking words
words anagrams
anagrams word
word obtained
obtained permuting
permuting letters
letters words
words tea
tea eat
eat anagrams
anagrams summary
summary algorithm
sequence nonambiguous
nonambiguous instructions
problem finite
finite input
solves algorithms
pseudocode implemented
programs ways
ways classify
alternatives group
algorithms types
solve group
based important
techniques strategies
strategies paradigms
paradigms general
general approaches
computing designing
algorithm undoubtedly
undoubtedly creative
creative activity
activity sequence
sequence interrelated
interrelated actions
actions involved
involved process
process summarized
summarized figure
repeated efforts
efforts rework
rework problem
algorithm consecutive
algorithm middle
method enhanced
enhanced sieve
eratosthenes generating
generating primes
primes algorithms
data makes
makes issue
issue data
data structuring
structuring critical
critical efficient
linked representing
structures stack
stack graph
abstract collection
collection objects
objects operations
performed called
called abstract
adt stack
stack priority
dictionary important
examples abstract
types modern
modern oriented
languages implementation
implementation adts
adts means
algorithm sorting
principal difficulty
sections exercises
apply algorithm
vertex equal
necessarily distinct
implement dictionary
examples chapter
matrix algorithm
input adjacency
solved problem
pseudocode simple
items fits
obtained adding
years earlier
analysis shows
make algorithm
figure pseudocode
algorithm element
mentioned beginning
game write
compute sums
efficient space
algorithm remains
array consecutive
distinct keys
case assuming
finding smallest
takes advantage
min binary
vertices adjacency
values integers
max figure
problem important
typical examples
subject constraint
yields maximum
problem general
diagonally corner
smallest sum
exponential worse
table algorithm
alues table
algorithm optimal
limit discussion
values smaller
make comparison
needed comput
left column
subtree key
mediate vertices
exercises make
algorithm similar
figure length
graph solve
greater equal
input graph
algorithm checking
set figure
average cases
finite set
linear function
secret life
life charles
charles schulz
schulz american
american cartoonist
cartoonist creator
creator peanuts
peanuts chapter
deals group
design methods
methods based
transformation general
technique transform
conquer methods
methods stage
stage procedures
procedures transformation
transformation stage
stage problem
instance modified
modified reason
reason amenable
amenable solution
solution conquering
conquering stage
stage solved
solved major
variations idea
differ transform
transform instance
transformation simpler
simpler convenient
convenient instance
simplification transformation
transformation representation
representation transformation
transformation instance
reduction sections
chapter encounter
examples instance
variety section
deals simple
simple fruitful
fruitful idea
presorting algorithmic
solve input
input sorted
sorted benefits
benefits sorting
sorting compensate
compensate simpler
simpler instance
problem representation
representation solution
strategy spent
spent dealing
dealing unsorted
unsorted input
input directly
directly section
section introduces
introduces important
algorithms applied
mathematics gaussian
equations transforming
transforming special
makes finding
solution easy
easy section
section ideas
ideas instance
representation applied
applied trees
trees results
results avl
trees multiway
multiway balanced
trees simplest
section presents
presents heaps
heapsort familiar
familiar important
structure application
sorting benefit
benefit light
light transform
design section
discuss horner
horner remarkable
evaluating polynomials
polynomials algorithm
algorithm hall
hall fame
fame horner
horner candidate
candidate induction
induction based
algorithm elegance
elegance efficiency
efficiency interesting
interesting algorithms
idea chapter
chapter concludes
concludes review
review applications
applications variety
reduction variety
variety considered
considered radical
radical problem
reduced transformed
problem powerful
powerful idea
idea extensively
extensively complexity
theory chapter
chapter application
application designing
designing practical
practical algorithms
algorithms trivial
trivial problem
transformed make
make transformation
transformation algorithm
efficient compared
compared algorithmic
alternatives examples
examples discuss
case mathematical
mathematical modeling
modeling expressing
expressing problem
terms purely
purely mathematical
objects variables
variables functions
functions equations
equations presorting
presorting idea
idea science
science fact
fact sorting
algorithms significant
significant degree
degree fact
fact questions
easier sorted
sorted efficiency
involve sorting
sorting efficiency
algorithm sake
section lists
lists implemented
easier implement
implement array
representation discussed
discussed elementary
sort quadratic
cases advanced
advanced algorithms
mergesort log
log quicksort
case quadratic
case faster
algorithms stated
stated section
case result
result holds
holds average
efficiency examples
illustrate idea
presorting examples
exercises checking
checking element
uniqueness array
unique ness
familiar considered
considered brute
section brute
compared pairs
elements pairs
pairs left
left worst
efficiency alternatively
alternatively sort
pair vice
versa algorithm
algorithm presortelementuniqueness
presortelementuniqueness solves
solves element
true equal
elements false
false sort
array false
true running
algorithm sum
sorting spent
spent checking
checking consecutive
elements requires
sorting determine
quadratic sorting
brute good
entire presorting
log tsort
tsort tscan
tscan log
log computing
mode occurs
occurs numbers
numbers mode
mode values
values considered
considered mode
mode brute
mode scan
frequencies distinct
frequency sorting
called radix
radix sorts
sorts linear
linear terms
terms total
total input
bits algorithms
comparing individual
individual bits
bits pieces
keys entirety
entirety running
running algorithms
algorithms proportional
proportional input
bits essentially
essentially log
algorithms bits
key log
log accommodate
accommodate distinct
keys input
input implement
implement idea
idea values
encountered frequencies
frequencies iteration
iteration ith
element original
original compared
compared values
encountered traversing
traversing auxiliary
auxiliary matching
matching frequency
frequency incremented
incremented current
current element
element added
added distinct
values frequency
frequency difficult
difficult worst
algorithm equal
elements ith
compared elements
auxiliary distinct
values added
added frequency
frequency result
result worst
algorithm creating
creating frequency
frequency additional
additional comparisons
needed largest
frequency aux
aux iliary
iliary quadratic
algorithm alternative
alternative sort
values adjacent
adjacent compute
compute mode
mode longest
longest run
run adjacent
adjacent equal
algorithm presortmode
presortmode computes
computes mode
mode array
array mode
mode sort
array current
current run
run begins
begins position
position modef
requency highest
highest frequency
frequency runlength
runlength modef
requency modef
requency runlength
modevalue runvalue
modevalue analysis
analysis similar
similar analysis
analysis running
dominated spent
sorting remainder
remainder algorithm
takes linear
linear log
sort method
method worst
efficiency asymptotic
asymptotic class
sortable items
items brute
solution sequential
sorted apply
binary requires
assuming efficient
efficient log
sort total
running searching
case tsort
tsort tsearch
tsearch log
log inferior
inferior sequential
sequential true
true averagecase
efficiency spent
sorting justified
justified problem
asks estimate
estimate minimum
minimum searches
justify presorting
presorting finish
finish discussion
discussion presorting
presorting mention
mention geometric
dealing sets
points presorting
presorting points
sorted coordinates
line angle
angle presorting
presorting conquer
algorithms closest
problems directed
graphs solved
solved easily
easily topologically
topologically sorting
digraph problems
longest shortest
paths digraphs
digraphs exercises
sections illustrate
illustrate finally
finally algorithms
technique subject
chapter require
require presorting
presorting inputs
inputs intrinsic
intrinsic operations
operations exercises
exercises problem
numbers array
numbers distance
distance numbers
numbers computed
computed design
exercises sets
sets numbers
iii conquer
estimate searches
justify spent
spent presorting
presorting array
elements sorting
mergesort searching
binary assume
searches elements
problems determine
class bills
bills checks
checks pay
pay bills
bills assuming
assuming numbers
numbers written
written checks
checks failed
failed pay
pay simplicity
assume written
written covers
covers student
records indicating
indicating student
student home
address date
birth students
students states
states set
plane simple
simple polygon
polygon closed
closed path
segments polygon
polygon edges
edges intersect
intersect neighboring
neighboring edges
common vertex
vertex problem
problem indi
numbers integer
elements sum
sum array
efficiency intervals
line interval
interval comprises
points strictly
strictly endpoints
endpoints maximum
maximum intervals
intervals common
common intervals
intervals maximum
maximum design
efficiency placement
placement distinct
integers sequence
sequence boxes
boxes pre
pre set
set inequality
inequality signs
signs inserted
inserted design
rithm places
places numbers
boxes inequalities
inequalities numbers
boxes shown
shown maxima
maxima cartesian
plane dominated
dominated inequalities
inequalities strict
strict set
points maximum
maximum set
set dominated
dominated set
points circled
circled design
plane efficiency
algorithm real
algorithm anagram
anagram detection
detection design
finding sets
sets anagrams
anagrams large
large dictionary
dictionary english
english words
words ben
ben eat
eat ate
ate tea
tea set
set write
elimination familiar
familiar systems
unknowns recall
recall coefficients
equation proportional
proportional coef
coef ficients
ficients unique
solution standard
standard method
solution equation
equation express
express variables
variables function
function substitute
substitute result
equation yield
yield ing
equation solution
solution variable
variable applications
applications solve
solve equations
unknowns nxn
annxn large
large theoretically
theoretically solve
general izing
izing substitution
substitution method
equations general
based resulting
extremely cumbersome
cumbersome fortunately
fortunately elegant
elegant algorithm
called gaussian
elimination idea
idea gaussian
elimination transform
transform linear
unknowns equivalent
equivalent solution
diagonal method
gauss giants
giants history
history mathematics
mathematics isaac
newton leonhard
euler numerous
numerous fundamental
theoretical computational
computational mathematics
mathematics method
method chinese
chinese years
years europeans
europeans rediscovered
rediscovered nxn
annxn matrix
notations write
write ann
ann added
added primes
primes matrix
elements sides
sides stress
stress values
values differ
differ counterparts
counterparts original
matrix arbitrary
matrix easily
easily solve
matrix substitutions
substitutions immediately
immediately equation
substitute equation
substitute values
variables equation
matrix equivalent
series called
called elementary
operations exchanging
exchanging equations
equations replacing
equation nonzero
nonzero multiple
multiple replacing
equation sum
equation multiple
equation elementary
operation solution
obtained series
series operations
operations solution
make coefficients
coefficients zeros
zeros equations
specifically equation
equation difference
equation multiplied
multiplied equation
coefficient fourth
fourth finally
finally nth
nth equation
equation multiples
multiples equation
equation makes
makes coefficients
equation rid
rid coefficients
coefficients subtracting
subtracting multiple
equation equations
equations repeating
repeating elimination
elimination variables
variables ultimately
ultimately yields
matrix gaussian
elimination operate
operate coefficient
matrix augmented
augmented column
column equations
equations values
values words
words write
write explicitly
explicitly variable
variable names
names equality
equality signs
signs solve
elimination row
row solution
solution substitutions
substitutions pseudocode
pseudocode stage
stage called
algorithm forwardelimination
forwardelimination applies
applies gaussian
matrix coefficients
coefficients augmented
augmented vector
vector values
values input
column augments
augments matrix
matrix important
important observations
observations make
make pseudocode
pseudocode ith
pivot ith
case advantage
advantage elementary
operation exchange
row nonzero
nonzero coefficient
column unique
solution normal
normal case
case systems
systems consideration
consideration row
row prepared
prepared possibility
possibility row
row exchanges
exchanges potential
potential difficulty
difficulty possibility
possibility small
small scaling
factor large
large distorted
distorted error
error caused
caused subtraction
subtraction numbers
numbers greatly
greatly magnitudes
magnitudes problem
absolute coefficient
column exchange
iteration pivot
pivot modification
called partial
pivoting guarantees
guarantees magnitude
magnitude scaling
factor exceed
exceed observation
observation fact
fact innermost
loop written
written glaring
inefficiency checking
checking pseudocode
pseudocode incorporates
incorporates partial
pivoting eliminates
eliminates inefficiency
inefficiency algorithm
algorithm betterforwardelimination
betterforwardelimination implements
implements gaussian
elimination partial
pivoting input
column appends
appends column
column pivotrow
pivotrow swap
swap pivotrow
pivotrow temp
temp efficiency
loop consists
single line
line temp
temp discuss
discuss errors
section multiplication
multiplication subtraction
subtraction computers
multi plication
plication unquestionably
unquestionably expensive
multiplication quoted
quoted algorithm
operation standard
standard summation
rules reviewed
reviewed section
section appen
dix helpful
helpful derivation
derivation substitution
elimination asked
exercises running
running dominated
dominated cubic
cubic elimination
stage making
making entire
cubic theoretically
theoretically gaussian
equations unique
solution discovers
discovers solution
exists case
case solutions
infinitely practice
practice solving
systems significant
significant size
size method
method straightforward
lead principal
difficulty lies
lies preventing
preventing accumulation
accumulation errors
section consult
consult textbooks
textbooks numerical
analysis analyze
analyze implementation
implementation issues
issues great
great decomposition
decomposition gaussian
elimination interesting
interesting byproduct
byproduct called
called composition
composition coefficient
matrix fact
fact modern
modern commercial
commercial implementa
implementa tions
tions gaussian
elimination based
based decomposition
decomposition basic
outlined beginning
section applied
applied gaussian
section computers
multiplication necessarily
necessarily expensive
subtraction algorithm
algorithm moot
moot simply
simply times
times innermost
executed multiplications
multiplications subtractions
subtractions lower
matrix main
diagonal row
row multiples
multiples forward
elimination process
process upper
matrix result
result elimination
elimination turns
turns product
matrices equal
equal matrix
matrix pair
pair verify
verify fact
fact direct
direct multiplication
multiplication general
general proposition
proposition proof
proof omit
omit solving
solving equivalent
equivalent solving
solving solved
solved denote
denote solve
solve easy
easy lower
matrix beginning
solve solution
solution solving
solving means
means solving
solving solution
solution decomposition
decomposition matrix
systems vectors
vectors distinct
distinct advantage
advantage classic
classic gaussian
elimination discussed
discussed earlier
earlier decomposition
decomposition require
memory nonzero
nonzero upper
triangular main
diagonal nontrivial
nontrivial main
diagonal computing
inverse gaussian
algorithm tackles
tackles important
equations fact
fact gaussian
elimination applied
applied problems
algebra computing
denoted identity
elements square
square matrix
inverse exists
exists inverse
inverse unique
unique matrix
inverse called
called singular
singular prove
singular rows
rows linear
linear combination
combination sum
multiples rows
rows convenient
convenient matrix
nonsingular apply
diagonal matrix
nonsingular singular
singular special
special situation
situation square
matrices inverses
inverses theoretically
theoretically inverse
inverse matrices
matrices important
role reciprocals
reciprocals matrix
matrix algebra
algebra overcoming
overcoming absence
absence explicit
explicit division
division operation
operation matrices
matrices analogy
analogy linear
equation unknown
unknown solution
solution written
written express
express solution
solution equations
unknowns nonsingular
nonsingular vector
vector definition
definition inverse
nonsingular matrix
matrix compute
compute numbers
xij ann
ann xnn
xnn unknowns
unknowns solving
equations coefficient
matrix vector
vector unknowns
unknowns column
column inverse
inverse vector
vector column
column identity
matrix axj
axj solve
systems applying
matrix aug
aug mented
mented identity
matrix forward
forward elimina
elimina tion
tion decomposition
decomposition solve
systems explained
earlier computing
determinant problem
solved gaussian
elimination computing
recursively consists
equal det
det computed
matrix definition
implies formula
formula easy
det words
words determinant
matrix simply
difference products
products diagonal
det incidentally
incidentally formula
formula handy
handy variety
section quickhull
determinant large
large matrix
matrix task
task rarely
rarely needed
needed practice
practice discussing
discussing recursive
implies computing
terms gaussian
elimination central
central fact
fact determinant
determinant upper
diagonal easy
easy elementary
operations employed
employed elimination
algorithm determinant
determinant basically
basically remains
remains unchanged
unchanged multiplied
multiplied constant
constant elimination
result compute
matrix cubic
cubic determinants
determinants important
role theory
theory systems
specifically linear
solution determinant
determinant coefficient
equal solution
solution formulas
formulas called
called cramer
cramer det
det determinant
obtained replacing
replacing column
column asked
asked investigate
investigate exercises
exercises cramer
cramer good
equations exercises
solve previous
previous decomposition
method standpoint
standpoint general
techniques classify
classify decomposition
computing inverse
inverse coefficient
matrix multiplying
multiplying vector
vector efficiency
class forward
elimination write
pseudocode substitution
elimination running
running assuming
assuming division
division numbers
numbers takes
longer multiplication
multiplication estimate
faster betterforwardelimination
betterforwardelimination forwardelimination
forwardelimination assume
assume compiler
compiler eliminate
eliminate inefficiency
inefficiency forwardelimination
forwardelimination linear
unknowns infinitely
solutions apply
elimination gauss
method differs
differs gaussian
elimination elements
diagonal coefficient
row elements
diagonal apply
apply gauss
jordan method
exercises general
strategy algorithm
based general
general multiplications
multiplications method
unknowns multiplications
multiplications gaussian
method elimination
elimination substitution
substitution stages
stages linear
solution det
det good
idea condition
condition applying
elimination apply
apply cramer
cramer solve
longer solve
unknowns cramer
cramer gaussian
elimination assume
assume determinants
determinants cramer
cramer formulas
formulas computed
computed independently
independently gaussian
elimination lights
lights person
person game
played board
composed light
light panels
panels panel
panel turned
turned toggling
toggling state
state vertically
horizontally adjacent
adjacent panels
toggling corner
corner square
square affects
total panels
toggling noncorner
noncorner panel
panel board
board border
border affects
total squares
squares initial
initial subset
subset lighted
lighted squares
squares goal
goal lights
lights solving
equations coefficients
coefficients sides
sides modulo
modulo arithmetic
arithmetic gaussian
lit gaussian
lit balanced
trees sections
sections discussed
discussed binary
cipal data
dictionaries binary
root elements
greater transformation
transformation set
set binary
nique gain
gain transformation
transformation compared
compared straightforward
dictionary array
array gain
gain efficiency
log erage
case operations
operations tree
tree degenerate
degenerate severely
severely unbalanced
unbalanced height
equal scientists
scientists expended
expended lot
lot effort
effort structure
structure preserves
preserves good
properties classical
tree principally
principally logarithmic
logarithmic efficiency
sorted avoids
avoids worst
case degeneracy
degeneracy approaches
approach instance
variety unbalanced
unbalanced binary
tree transformed
transformed balanced
called balancing
balancing specific
implementations idea
differ definition
requires difference
heights left
node exceed
exceed red
black tree
tree tolerates
tolerates height
subtree large
large subtree
subtree node
node insertion
deletion node
node creates
creates tree
tree violated
violated requirement
tree restructured
restructured family
family special
special transformations
transformations called
rotations restore
restore required
required section
discuss avl
trees information
information types
types binary
trees utilize
utilize idea
rebalancing rotations
rotations red
black trees
trees splay
splay trees
trees references
references cor
cor sed
sed tar
tar approach
approach representation
representation variety
variety element
tree specific
specific cases
cases trees
general important
differ elements
elements admissible
admissible single
balanced discuss
discuss simplest
section leaving
leaving discussion
discussion trees
trees chapter
chapter avl
trees invented
invented russian
russian scientists
scientists adelson
adelson velsky
velsky landis
landis ade
ade data
structure named
named figure
numbers nodes
nodes factors
factors definition
tree factor
factor node
node defined
heights node
subtrees height
defined factor
factor computed
computed difference
numbers levels
levels height
height difference
difference node
insertion node
node makes
makes avl
tree unbalanced
unbalanced transform
transform tree
tree local
local transformation
transformation subtree
nodes rotate
rotate tree
leaf types
types rotations
rotations fact
fact mirror
mirror images
images simplest
simplest rotations
rotations shown
rotation rotating
rotating edge
connecting root
child binary
presents single
insertion symmetric
symmetric single
single left
image single
subtree child
insertion asked
asked draw
draw diagram
diagram general
case single
rotation exercises
exercises figure
rotation types
types avl
nodes single
rotation single
rotation fact
fact combination
combination rotations
rotations rotation
root rotation
rooted figure
figure performed
insertion single
inserted rotation
root grandchild
grandchild left
image rotation
exercises rotations
rotations trivial
trivial transformations
transformations fortunately
fortunately constant
constant resulting
resulting tree
balanced basic
basic requirements
requirements binary
tree initial
initial tree
figure keys
subtree relationships
relationships key
values hold
hold balanced
construction avl
tree successive
insertions parenthesized
parenthesized rotation
rotation abbreviation
abbreviation root
tree reorganized
reorganized constructing
operations mind
mind nodes
nodes rotation
leaf efficient
efficient avl
tree critical
critical charac
charac teristic
teristic tree
height turns
turns bounded
bounded logarithmic
logarithmic functions
functions specifically
specifically height
nodes satisfies
satisfies inequalities
inequalities log
log weird
weird constants
constants offs
offs irrational
numbers related
related fibonacci
numbers golden
ratio section
section inequalities
inequalities immediately
immediately imply
imply operations
case exact
formula average
average height
constructed random
random lists
lists keys
keys proved
difficult extensive
experiments log
small knuiii
knuiii searching
searching avl
requires average
binary operation
deletion avl
tree considerably
difficult insertion
insertion fortunately
turns efficiency
class insertion
insertion logarithmic
logarithmic impressive
impressive efficiency
characteristics price
price drawbacks
drawbacks avl
trees frequent
frequent rotations
rotations maintain
maintain balances
balances nodes
nodes drawbacks
drawbacks prevented
prevented avl
trees standard
standard structure
dictionaries underlying
rebalancing binary
tree rotations
rotations proved
proved fruitful
fruitful led
led discoveries
discoveries interesting
interesting variations
variations classical
trees mentioned
section idea
idea balancing
balancing tree
tree simplest
simplest implementation
idea trees
trees introduced
introduced scientist
scientist john
hopcroft tree
children left
keys child
greater words
words node
node kind
kind node
node classical
children leftmost
leftmost child
keys middle
middle child
keys rightmost
rightmost child
figure requirement
leaves words
words tree
perfectly height
height balanced
balanced length
leaf property
property buy
buy allowing
allowing key
tree straightforward
straightforward root
node act
act binary
left node
node figure
figure kinds
comparisons stopped
stopped equal
root subtrees
subtrees continued
continued inserting
leaf performing
performing leaf
node insert
key depending
larger node
split leaf
leaf smallest
leaf largest
leaf middle
key promoted
promoted leaf
parent leaf
created middle
key promotion
promotion middle
node lead
lead node
splits chain
chain leaf
leaf ancestors
ancestors tree
construction figure
operations depends
height upper
bound tree
nodes final
final tree
nodes inequality
log tree
children tree
construction tree
bounds height
log imply
imply efficiencies
efficiencies searching
important generalization
generalization trees
called trees
exercises binary
nodes requirement
requirement avl
smallest nodes
nodes trees
draw diagrams
diagrams single
general lists
lists construct
construct avl
inserting ele
ments successively
efficiency true
false smallest
keys avl
integers construct
tree alphabetical
alphabetical letters
letters insert
insert successively
tree assuming
assuming probabilities
searching keys
letters largest
largest average
searches tree
tree classical
constructed keys
keys inserted
inserted trees
false searching
key takes
takes key
computing range
constructing tree
tree integers
integers heaps
heapsort data
called disordered
disordered pile
pile items
items word
word definition
definition standard
standard dictionary
dictionary clever
clever partially
partially ordered
ordered data
structure suitable
suitable implementing
queues recall
recall priority
priority multiset
multiset items
items orderable
orderable characteristic
characteristic called
item priority
priority operations
operations figure
illustration definition
definition leftmost
leftmost tree
finding item
highest largest
largest priority
priority deleting
priority adding
item multiset
multiset primarily
primarily efficient
implementation operations
makes interesting
interesting priority
queues arise
naturally plications
plications scheduling
job executions
executions operating
operating systems
systems traf
traf fic
fic management
management communication
communication networks
networks arise
algorithms prim
section dijkstra
section bound
bound applications
structure serves
serves cornerstone
cornerstone theoretically
called heapsort
heapsort discuss
rithm define
define investigate
investigate basic
basic properties
properties notion
notion definition
definition defined
keys assigned
assigned nodes
node provided
provided conditions
conditions met
met shape
property binary
tree essentially
essentially simply
simply plete
plete levels
levels possibly
rightmost leaves
leaves missing
missing parental
dominance property
property key
node greater
children condition
condition considered
considered auto
auto matically
matically satisfied
satisfied leaves
leaves trees
tree shape
property violated
violated parental
dominance fails
fails node
values ordered
ordered sequence
values path
leaf decreasing
decreasing nonincreasing
nonincreasing equal
keys allowed
allowed left
left key
values authors
authors require
node equal
children variation
variation min
min array
representation index
index parents
parents leaves
leaves figure
representation relationship
relationship key
values nodes
tree generally
generally left
node important
heaps difficult
prove properties
properties figure
figure exists
exists essentially
log root
root largest
node considered
considered descendants
descendants implemented
array recording
recording elements
left fashion
fashion convenient
convenient elements
array leaving
leaving unused
unused putting
putting sentinel
sentinel greater
element representation
representation parental
keys positions
array leaf
keys occupy
occupy positions
positions children
array parental
parental position
position positions
positions correspondingly
correspondingly parent
key position
position define
define array
position half
array greater
positions max
max satisfied
satisfied ideas
ideas majority
dealing heaps
heaps easier
understand heaps
heaps binary
trees actual
actual implementations
implementations simpler
efficient arrays
arrays construct
construct keys
alternatives construction
figure initializes
initializes essentially
nodes placing
placing keys
keys heapifies
heapifies tree
starting parental
parental figure
construction headed
headed arrows
arrows key
comparisons verifying
verifying parental
holds key
algorithm exchanges
exchanges node
key larger
children checks
position process
continues parental
dominance satisfied
satisfied eventually
eventually holds
holds automatically
automatically key
leaf completing
completing heapification
heapification subtree
rooted current
current parental
proceeds node
node predecessor
stops root
algorithm heapbottomup
heapbottomup constructs
constructs elements
items output
output downto
downto false
false children
children true
true efficient
simplicity tree
largest nodes
nodes occurs
occurs height
tree property
property heaps
heaps beginning
log specific
leaf worst
case construction
algorithm moving
moving requires
comparisons larger
larger child
child determine
determine exchange
exchange required
required total
comparisons involving
involving key
key total
log keys
keys validity
validity equality
equality proved
proved closed
sum appendix
appendix mathematical
size constructed
constructed comparisons
comparisons alternative
alternative efficient
constructs successive
insertions key
key previously
constructed people
people construction
leaf existing
existing sift
sift parent
key greater
equal structure
structure swap
swap keys
parent swapping
swapping continues
continues greater
greater parent
parent reaches
reaches root
root illustrated
operation require
efficiency insertion
log delete
delete item
item important
case deleting
key leaving
leaving deleting
deleting arbitrary
arbitrary key
key exercises
exercises authors
authors textbooks
textbooks things
things readers
readers deleting
key algorithm
figure inserting
key constructed
constructed figure
key sifted
sifted swap
swap parent
parent larger
larger parent
parent root
figure deleting
deleted swapped
swapped key
key smaller
tree heapified
heapified exchanging
exchanging key
children parental
requirement satisfied
satisfied maximum
maximum key
deletion exchange
exchange root
key decrease
decrease size
size heapify
heapify smaller
tree sifting
sifting tree
algorithm verify
verify parental
holds swap
swap larger
larger children
children operation
operation parental
dominance condition
condition holds
position efficiency
deletion determined
determined key
needed heapify
heapify tree
tree swap
swap size
tree decreased
decreased require
height efficiency
log heapsort
heapsort interesting
interesting sorting
algorithm discovered
discovered williams
williams wil
wil stage
works stage
construct array
array stage
deletions apply
apply root
root deletion
deletion operation
times remaining
remaining result
result array
elements eliminated
eliminated decreasing
implementation heaps
heaps element
element deleted
deleted resulting
resulting array
array original
increasing heapsort
heapsort traced
traced specific
input figure
figure input
input stage
deletions figure
array heapsort
heapsort figure
figure intentionally
intentionally tree
array implementations
implementations construction
algorithm construction
algorithm investigate
efficiency stage
stage key
needed eliminating
eliminating root
keys heaps
heaps diminishing
sizes inequality
means log
log stage
stage heapsort
heapsort stages
stages log
log detailed
shows efficiency
heapsort fact
fact log
cases heapsort
heapsort efficiency
efficiency falls
falls class
class mergesort
heapsort require
storage timing
timing experiments
experiments random
random files
files heapsort
heapsort runs
slowly quicksort
quicksort competitive
competitive mergesort
construct algorithm
construct successive
successive key
key insertions
insertions algorithm
true algorithms
yield input
input outline
checking array
array determine
efficiency smallest
keys height
height prove
prove height
nodes equal
equality section
log design
smallest determine
efficiency design
classes main
main operations
lists heapsort
heapsort array
representation heaps
heaps increasing
increasing alphabetical
alphabetical heapsort
heapsort stable
algorithm variety
technique heapsort
heapsort repre
repre sorting
algorithm heapsort
heapsort priority
implement advanced
heapsort language
choice investigate
investigate performance
performance arrays
sizes randomly
generated files
range increasing
increasing files
integers decreasing
decreasing files
integers spaghetti
sort handful
handful uncooked
uncooked spaghetti
spaghetti individual
individual rods
rods lengths
represent numbers
numbers sorted
sorted outline
outline spaghetti
advantage unorthodox
unorthodox representation
representation science
science folklore
folklore dew
dew topic
chapter general
general heapsort
exponentiation section
discuss problem
anxn important
computing polynomials
polynomials constitute
constitute important
class functions
functions wealth
properties approximating
approximating types
types functions
functions problem
problem manipulating
manipulating polynomials
polynomials efficiently
efficiently important
important centuries
centuries discoveries
discoveries years
years important
important fast
fast fourier
fourier transform
transform fft
fft practical
importance remarkable
representing polynomial
polynomial values
values specially
chosen points
points people
important algorithmic
algorithmic discoveries
discoveries relative
complexity discuss
discuss fft
fft algorithm
reader wealth
subject accessible
accessible treatments
treatments textbooks
textbooks kle
kle cor
cor horner
horner elegant
elegant efficient
polynomial named
named british
british mathematician
mathematician horner
horner pub
pub lished
lished early
early century
century knuth
knuii method
method isaac
newton years
method design
evalu ation
problem investigate
efficiency problems
horner good
good representation
representing formula
obtained successively
successively taking
taking common
factor remaining
remaining polynomials
polynomials diminishing
diminishing degrees
degrees anx
anx polynomial
formula substitute
substitute polynomial
polynomial evaluated
evaluated hard
hard efficient
algorithm unpleasant
unpleasant appearance
appearance formula
formula appearance
appearance explicitly
explicitly transformation
transformation leading
leading original
original polynomial
coefficients pen
pencil calculation
calculation conveniently
conveniently organized
organized tworow
tworow table
table row
row polynomial
equal listed
listed highest
lowest entry
left entry
computed times
times entry
row coefficient
coefficient row
row final
final entry
computed fashion
fashion sought
sought evaluate
evaluate coefficients
coefficients comparing
comparing table
entries formula
formula finally
finally pseudocode
shortest imaginable
imaginable nontrivial
horner evaluates
evaluates polynomial
horner input
downto multiplications
additions sum
efficient horner
horner term
term polynomial
anxn computing
computing single
single term
require multiplications
horner computes
computes addition
addition term
term terms
terms multiplications
multiplications surprising
surprising horner
evaluation preprocessing
preprocessing polynomial
coefficients scientists
scientists years
horner publication
publication realization
realization investigating
investigating horner
byproducts intermediate
intermediate numbers
numbers generated
process evaluating
evaluating coefficients
coefficients quotient
quotient division
division final
result addition
addition equal
equal remainder
division quotient
quotient remainder
algorithm synthetic
division convenient
convenient called
called division
division binary
exponentiation amazing
amazing efficiency
efficiency horner
horner fades
fades method
method applied
applied comput
fact degenerates
degenerates brute
brute multiplication
multiplication wasteful
wasteful additions
additions zeros
zeros computing
mod essential
essential operation
important primality
testing encryption
encryption methods
methods algorithms
computing based
exponent processes
processes binary
string left
left bit
representing positive
integer binary
binary means
means computed
computed polynomial
polynomial bixi
bixi binary
compute polynomial
polynomial applying
method operations
operations imply
power abi
abi horner
polynomial implications
implications leading
leading digit
digit downto
downto abi
abi initializing
initializing accumulator
accumulator scan
exponent square
square accumulator
accumulator current
current binary
digit observations
lead left
algorithm leftrightbinaryexponentiation
leftrightbinaryexponentiation computes
expansion positive
output product
product downto
downto product
makes multiplications
multiplications repetition
loop total
computing length
length bit
exponent taking
account log
log conclude
conclude efficiency
efficiency leftto
leftto binary
exponentiation logarithmic
brute exponentiation
exponentiation requires
multiplications left
exponentiation binary
polynomial yielding
yielding applying
horner previous
previous method
method exploits
exploits differently
differently abi
abi computed
computed product
product terms
terms abi
abi product
consecutive terms
terms skipping
skipping binary
simply squaring
squaring term
term computed
computed previous
previous compute
compute powers
powers smallest
largest left
left product
accumulator binary
digit pseudocode
algorithm rightleftbinaryexponentiation
rightleftbinaryexponentiation computes
expansion nonnegative
output term
term initializes
initializes product
method table
digits terms
terms product
efficiency logarithmic
logarithmic reason
reason left
binary multiplication
multiplication usefulness
usefulness binary
binary exponentia
exponentia tion
algorithms reduced
reduced reliance
reliance availability
availability explicit
explicit binary
expansion exponent
exponent problem
asks design
algorithm shortcoming
shortcoming exercises
exercises brute
algorithm bruteforcepolynomialevaluation
bruteforcepolynomialevaluation computes
computes polynomial
polynomial highest
downto power
power total
pseudocode brute
brute polynomial
evaluation stems
stems substituting
substituting variable
variable polynomial
formula evaluating
evaluating lowest
term highest
highest determine
determine multiplications
faster horner
horner compared
compared lowest
highest term
problem multiplication
multiplication significantly
larger addition
addition horner
horner efficient
efficient expense
expense space
polynomial results
results application
application horner
horner quo
quo tient
tient remainder
horner convert
convert binary
decimal multiplications
subtractions needed
needed division
division polynomial
anxn constant
constant operations
operations synthetic
algorithm nonnegative
exponent apply
compute design
design nonrecursive
computing mimics
mimics left
exponentiation explicitly
explicitly binary
representation good
idea general
purpose polynomial
polynomial corollary
corollary fundamental
fundamental theorem
theorem algebra
algebra polynomial
anxn represented
represented roots
roots polynomial
polynomial generally
generally complex
complex necessarily
distinct discuss
discuss representations
convenient operations
operations polynomial
evaluation addition
polynomials multiplication
multiplication polynomials
polynomial interpolation
interpolation set
set data
points polynomial
degree problem
reduction version
version mathematicians
mathematicians professor
professor noted
noted mathematician
mathematician noticed
noticed wife
wife wanted
wanted tea
tea kettle
cupboard filled
filled stove
stove wife
wife signing
signing seller
seller local
local bookstore
bookstore professor
kettle sitting
sitting kitchen
kitchen counter
counter professor
cupboard proceeded
proceeded wife
wife routine
routine reduction
reduction alg
solution solved
solved solvable
reduction strategy
strategy professor
professor approached
approached task
strategy called
called problem
reduction solve
solve figure
figure professor
professor idea
idea problem
reduction plays
role theoretical
science classify
problems complexity
complexity classification
classification chapter
chapter strategy
strategy actual
actual problem
solving practical
practical difficulty
difficulty applying
applying lies
lies finding
finding problem
reduced efforts
efforts practical
practical reduction
reduction based
efficient solving
solving original
directly encountered
encountered technique
technique earlier
earlier section
section mentioned
mentioned called
called synthetic
division applying
evaluation section
plane determinant
determinant positive
left directed
words reduced
reduced geometric
geometric relative
relative locations
locations points
points determinant
determinant fact
fact entire
entire idea
idea analytical
geometry based
based reducing
reducing geometric
problems algebraic
algebraic vast
majority geometric
advantage historic
historic insight
insight rene
rene descartes
descartes section
based strategy
reduction computing
multiple recall
recall common
multiple positive
denoted lcm
lcm defined
defined smallest
smallest integer
integer divisible
divisible lcm
lcm common
multiple important
notions elementary
elementary arithmetic
arithmetic algebra
algebra middle
computing prime
prime factorizations
factorizations compute
factors lcm
lcm computational
computational procedure
algorithm drawbacks
drawbacks middle
school algorithm
divisor discussed
section inefficient
inefficient requires
requires consecutive
primes efficient
multiple devised
devised problem
reduction efficient
divisor product
factors formula
relating lcm
gcd difficult
difficult product
product lcm
gcd includes
includes factor
factor simply
product observation
observation leads
formula lcm
computed efficiently
efficiently euclid
induction paths
counting graph
paths solved
power adjacency
matrix exponentiation
discussed computing
computing powers
powers numbers
numbers applicable
matrices specific
square numbers
square elements
elements numbers
length vertex
length reduction
reduction optimization
problems deals
deals solving
maximum function
asks function
function minimum
minimum called
called minimization
minimum function
algorithm function
maximization advantage
advantage lies
max words
words minimize
minimize function
function maximize
maximize negative
negative minimal
minimal function
function property
property illustrated
illustrated function
function real
real variable
variable figure
figure formula
min valid
valid shows
shows maximization
reduced equivalent
equivalent minimization
general holds
holds functions
defined domain
domain figure
figure relationship
problems min
max apply
apply functions
functions variables
subject additional
additional constraints
constraints important
problems introduced
section topic
topic function
function optimization
optimization pointing
pointing standard
standard calculus
points function
fact based
reduction suggests
suggests finding
finding function
function derivative
derivative solving
equation function
function critical
words optimization
reduced problem
equation principal
principal finding
points calling
calling calculus
algorithm defined
defined fact
equations secret
secret calculus
calculus textbooks
textbooks problems
problems carefully
carefully selected
selected critical
points difficulty
makes lives
lives students
students instructors
instructors easier
easier process
process unintentionally
unintentionally create
impression students
students minds
minds linear
inequalities university
university endowment
endowment invest
invest sum
sum split
split types
types investments
cash endowment
endowment managers
managers annual
annual stock
stock bond
bond cash
cash investments
stocks risky
risky bonds
bonds endowment
endowment rules
rules require
require invested
stocks moneys
moneys invested
invested bonds
bonds addition
addition total
total invested
bonds invested
invested cash
cash managers
managers invest
invest money
money maximize
maximize create
create mathematical
mathematical model
problem amounts
amounts millions
millions dollars
dollars invested
cash variables
variables pose
pose optimization
subject small
ainxn group
group constraints
constraints called
called nonnegativity
constraints strictly
speaking unnecessary
unnecessary special
cases general
general constraints
constraints ainxn
ainxn convenient
convenient separately
separately linear
programming proved
proved flexible
flexible model
model wide
variety important
applications airline
scheduling transportation
network planning
planning oil
oil exploration
exploration refining
refining industrial
industrial production
production optimization
optimization fact
fact linear
programming considered
considered important
important achievements
history applied
mathematics classic
section discovered
dan worst
exponential performs
performs typical
inputs recent
recent algorithm
algorithm narendra
kar proven
proven polynomial
polynomial worstcase
worstcase efficiency
efficiency performed
performed competitively
competitively simplex
tests important
stress simplex
method karmarkar
algorithm successfully
successfully linear
problems limit
limit variables
variables integer
variables linear
problem required
integers linear
cases assignment
sections integer
difficult polynomial
solving arbitrary
general integer
algorithm possibly
possibly approaches
approaches bound
bound technique
section typically
typically solving
solving integer
problems knapsack
reduced linear
problem recall
section knapsack
posed knapsack
capacity items
values valuable
knapsack continuous
continuous fractional
fractional version
problem fraction
knapsack variable
knapsack inequality
inequality total
items expressed
sum continuous
posed linear
solved simple
simple special
special algorithm
algorithm introduced
section reduction
reduction knapsack
algorithm discrete
discrete version
problem allowed
allowed item
item integer
version maximize
subject seemingly
seemingly minor
minor modification
makes drastic
drastic difference
difference plexity
plexity similar
problems constrained
constrained discrete
discrete values
values potential
potential ranges
ranges fact
fact version
version eas
eas ier
ier subset
subset continuous
version fractional
fractional item
item version
version fact
fact complicated
complicated tinuous
counterpart reader
interested specific
problem wealth
subject monographs
monographs mar
mar kel
kel reduction
reduction graph
problems pointed
solved reduction
reduction standard
standard graph
true variety
variety puzzles
puzzles games
games applications
applications vertices
graph typically
typically represent
represent states
states problem
problem edges
edges permitted
permitted transi
transi tions
tions states
states graph
vertices represents
represents initial
state represents
represents goal
problem vertices
vertices kind
kind graph
graph transfor
transfor mation
mation reduces
problem path
vertex goal
vertex pwgc
pwgc pwc
pwc pwg
pwg pgc
pgc pwg
pwg pwc
pwc pwgc
pwgc figure
figure state
graph peasant
cabbage puzzle
puzzle revisit
revisit classic
classic river
river crossing
puzzle included
included exercises
section peasant
river bank
cabbage peasant
peasant solve
solution state
labeled states
states represent
represent stand
stand peasant
cabbage bars
bars denote
denote river
river convenience
convenience edges
edges indicating
indicating boat
boat occupants
occupants crossing
crossing terms
terms graph
interested finding
pwgc final
pwgc easy
easy distinct
distinct simple
simple paths
paths initialstate
initialstate vertex
vertex final
vertex applying
applying breadth
breadth formal
proof paths
paths smallest
smallest edges
edges puzzle
puzzle solutions
solutions requiring
requiring river
crossings minimum
minimum crossings
crossings needed
needed success
success solving
solving simple
simple puzzle
puzzle lead
lead generating
generating investigating
investigating state
graphs straightforward
task appreciation
appreciation consult
books artificial
intelligence science
science state
graphs principal
subject deal
deal important
case state
graphs sections
equality lcm
gcd underlies
underlies algorithm
lcm euclid
gcd efficiency
lcm numbers
numbers construct
children algorithm
max defined
defined section
min prove
prove paths
efficiency cubic
cubic checking
length algorithm
problem starting
starting arbi
arbi trary
forest vertex
leading grand
grand parent
parent graph
triangle graph
triangle subgraph
subgraph algorithm
plane design
points design
finding positive
integers sum
sum product
product large
large design
class assignment
section stated
stated people
assign people
people jobs
jobs minimize
assignment express
express assignment
problem linear
section maximize
subject graph
stated vertex
color edge
colors edges
endpoint color
color plain
plain edge
reduced vertex
dimensional office
plane location
location average
average manhattan
dis office
minimizes tance
tance office
office points
problem efficiently
efficiently solved
technique provided
provided office
office located
located input
points jealous
jealous husbands
husbands married
married couples
couples river
boat hold
hold people
people complicate
complicate matters
matters husbands
husbands jealous
jealous crossing
crossing procedure
procedure wife
wife bank
river woman
woman husband
husband wife
wife husband
husband people
people bank
river constraints
constraints solve
problem classical
solution river
crossings dominoes
dominoes small
small rectangular
rectangular tiles
tiles dots
dots called
called spots
spots pips
pips embossed
embossed halves
halves tiles
tiles standard
standard domino
set tiles
general domino
set domino
domino tiles
determine values
values constructs
constructs ring
ring tiles
tiles domino
set summary
summary transform
conquer fourth
fourth general
design problem
strategy discussed
discussed fact
fact group
group techniques
solve principal
varieties transform
strategy instance
reduction instance
simplification transforming
transforming instance
makes problem
solve presorting
presorting gaussian
elimination rotations
rotations avl
trees good
good examples
examples strategy
strategy representation
representation implies
implies changing
changing representation
instance examples
examples discussed
chapter representation
tree heaps
evaluation binary
reduction calls
calls transforming
transforming problem
examples applying
applying idea
idea algorithmic
solving section
section reductions
reductions linear
programming reductions
reductions graph
illustrate transform
conquer important
algorithms heaps
heapsort avl
trees gaussian
elimination horner
horner essentially
node satisfying
satisfying parental
requirement defined
trees heaps
heaps implemented
arrays heaps
queues underlie
underlie heapsort
heapsort theoretically
based arranging
arranging elements
array successively
successively removing
removing largest
running log
case addition
addition avl
trees balanced
balanced extent
extent binary
tree maintained
maintained transformations
transformations types
types called
rotations basic
operations avl
trees log
log eliminates
eliminates bad
bad worst
trees achieve
achieve perfect
perfect tree
allowing node
children idea
idea generalized
generalized yield
yield important
discussed gaussian
equations principal
algebra solves
solves transforming
transforming equivalent
matrix easy
easy solve
solve substitutions
substitutions gaussian
elimination requires
evaluation coefficient
coefficient preprocessing
preprocessing requires
additions evaluate
evaluate degree
byproducts synthetic
computing introduced
exponent process
process directions
directions left
left linear
programming concerns
concerns optimizing
inequalities efficient
algorithms capable
capable solving
solving large
large instances
problem thousands
thousands variables
variables constraints
constraints provided
provided variables
called integer
programming constitute
constitute difficult
difficult class
graph vertices
algorithms section
nonnegative integer
practical theoretical
prominent scientists
means algorithm
methods solving
figure notion
divides evenly
times algorithms
proving existence
solving approximately
algorithm designer
proof problem
produced algorithm
inputs algorithms
solution finding
solution algorithm
majority problems
real coefficients
similar vein
sort arbitrary
stable algorithm
problem deals
finding called
searches searching
special challenges
rapid proliferation
problems computationally
shortest cities
unresolved issue
issue theoretical
discuss topic
solving variety
storage retrieval
circuit path
problems reasonable
map graph
bounds low
consecutive pair
tree simply
presence edge
disk moves
classic recursive
size remaining
iterations needed
binary optimal
sets coins
coins tipping
tipping left
left staying
staying scale
sets heavier
heavier problem
extra coin
information relative
smaller log
instance solution
simply adding
case odd
array keys
array require
efficiency comparison
prove validity
elements compared
array smallest
smaller proceed
problem identifying
takes account
make moves
median numbers
derive formula
vertices degrees
class algorithms
identifying fake
chapter deals
figure transformation
problems easier
algorithms involve
assume section
faster sorting
comparisons sorting
section comparisons
set numbers
solutions infinitely
matrix singular
sum terms
unknowns solution
infinitely solutions
tree searching
larger root
height largest
height log
tree finding
keys principal
algorithm checks
tree array
topic chapter
relative complexity
exercises horner
formula obtained
degree anxn
primality testing
addition polynomials
prove mathematical
simple problem
typical inputs
problems discussed
discussed sections
arbitrary instance
problems true
reduction technique
integers determine
transformation problem
solution problems
important practical
soviet union
representing difference
detailed discussion
hundreds thousands
sensitivity input
polynomial efficiency
discuss section
algorithm identifying
problem assume
faced problem
discussion section
sophisti cated
ascertaining efficiency
lord kelvin
questions faster
hanoi problem
algorithms tower
hanoi algorithm
efficiency specific
times operation
constant initial
problem evaluating
elements product
information game
selected person
person questions
log bits
combined algorithm
pairs elements
solvable algorithm
hard problem
solving solve
table lists
log element
based sophisti
cated mathematical
algebraic prob
problem final
complexity prob
digit integer
alternating disk
numbers make
array exchanging
run input
leaves tree
section illustrate
permutation element
log words
element comparison
comparisons cavg
significantly worst
comparisons key
case successful
case unsuccessful
comparisons cworst
problem draw
represented root
tree total
make log
sections algorithm
size big
imply solve
functions convenient
tree shortest
coloring graph
small sample
fall category
karp kar
sum bin
function integer
function input
general observation
stage procedure
solution verify
stance traveling
determining integer
encryption method
rsa algorithm
rithm words
qualitative difference
game chess
subset edge
natural world
problems discuss
definite integral
accuracy approximation
compute values
arithmetic operation
yields result
large numbers
operations typical
numerical algorithm
formula solution
computed approximately
equations discuss
section method
fast values
formula large
applying formula
university toronto
smaller solve
solve equation
problem proper
computing difference
task problem
algorithm design
numbers problem
executed operation
technique algorithm
specific inputs
algorithm altogether
stability problem
explicitly implicitly
science discuss
pair convex
numbers lead
smaller elements
called left
generalized general
array remaining
left element
resulting algorithm
case performance
sort sorting
choice run
recurrence solution
cavg log
case assume
problem compute
elements worst
case small
algorithm formal
discuss classic
array input
log fact
exact solution
sort heapsort
algorithm exponenti
makes algorithm
array equal
ordered array
log average
indices element
arrays equal
strictly increas
ing arrays
raw binary
makes addition
node children
tree require
require processing
practi cal
section outline
idea algorithm
formula yields
small numbers
tion digit
additions subtraction
cations additions
algorithm addition
rithm assume
smallest distance
array num
input points
operations algorithm
finding closest
closest numbers
bers design
section language
plane defined
clidean plane
log algorithms
efficiency classic
greater smaller
decrease euclid
introduction chapter
solving nonlinear
nonlinear equations
applicable problem
element standard
scientists discovered
input words
addition deletion
graphs directed
courses prerequisites
objects typically
typically grows
efficient solution
edges figure
graph symmetric
depends nature
digraph graph
graph nodes
vertices starts
connected pair
components vertices
vertex parent
tree children
remaining array
computing nonnegative
function computed
factor iteration
log iteration
exercises algorithms
recall algorithm
technique idea
sort insertion
idea efficient
greater figure
figure iteration
proper position
nature input
times fact
values key
outer loop
convenient inputs
average half
algorithms selection
sight year
row filled
output true
false vertex
original version
section array
array sortable
distinct pair
pair called
size largest
sort important
sequence sequences
performance random
random arrays
vertices problem
application depth
digraph fig
delete edges
distinct solutions
vertex ordering
algorithms language
numbered vertex
generating combi
objects permuta
primary lies
problem generating
compute length
generate permutation
recall section
groups group
subset element
element sequence
sequence bit
requires generating
tations element
array output
string generate
algorithms run
half array
apply binary
searching array
table index
cursive version
binary input
valid arbitrary
arbitrary positive
section logarithmic
slightly smaller
sorted algorithms
called method
coins fake
genuine coins
integers called
larger instance
figure rows
method named
convenient cases
size initial
solution apply
computing log
assume searches
sequential efficiency
pre senting
array design
recurrence algorithm
algorithm write
problem power
section good
half elements
important notions
algorithm determined
determined efficiency
efficiency sorting
algorithmic alternatives
lomuto parti
assume implemented
problem recursive
nonrecursive version
version array
cbest algorithm
algorithm extremely
efficiency average
largest elements
reduces problem
element compared
leads formula
depending smaller
larger size
comparisons small
nodes elements
items element
elements subtree
greater element
element subtree
requires comparisons
efficiency characteristics
leads smaller
upper limits
proved mathematical
theory applications
exercises instance
case smallest
sorted increasing
problem relationship
algorithm notable
algorithms num
grows fast
practical small
algorithm selection
comparisons algorithm
undirected graph
solution instance
algorithm figure
difficult problems
algorithm fact
algorithm result
array index
figure array
graph defined
starts ends
figure illustrates
life applications
pro gram
orders magnitude
numbers characters
student records
technique discussed
algorithms string
array comparison
algorithm stable
tree trees
important examples
sorting section
algorithm simple
minimize total
key successful
subtree greater
searching binary
application sorting
balanced tree
proved difficult
tree log
upper bounds
mergesort quicksort
classic binary
data compres
discuss application
pairs element
equal sum
efficiency obtained
problem pair
left pairs
matching input
assume implement
character string
selected element
phenomenon called
clusters clus
ascertain efficiency
splits split
extremely large
instance problem
speaking express
numbers express
numbers knowledge
knowledge meagre
meagre unsatisfactory
unsatisfactory kind
kind beginning
beginning knowledge
knowledge scarcely
scarcely thoughts
thoughts advanced
advanced stage
stage science
science lord
kelvin counted
counted counts
counts counted
counted albert
albert einstein
einstein chapter
chapter devoted
devoted analysis
algorithms american
american heritage
heritage dic
dic tionary
tionary defines
defines analysis
analysis separation
separation intellectual
intellectual substantial
substantial constituent
constituent parts
parts individual
individual study
study prin
cipal dimensions
dimensions algorithm
algorithm pointed
section legitimate
legitimate desirable
desirable subject
study term
term analysis
algorithms narrower
narrower technical
technical sense
sense investigation
efficiency respect
respect resources
resources running
running memory
memory space
space emphasis
emphasis efficiency
efficiency easy
easy dimensions
dimensions simplicity
gen erality
erality efficiency
efficiency studied
studied precise
precise quantitative
quantitative terms
terms case
case speed
memory today
today computers
computers efficiency
efficiency considerations
considerations primary
primary importance
importance practical
practical view
view chapter
chapter limit
efficiency general
section arguably
arguably important
important chapter
chapter funda
funda mental
mental nature
nature topic
topic makes
important sections
sections entire
entire section
section notations
theta borrowed
borrowed mathematics
mathematics notations
notations language
language discussing
discussing efficiency
tool analysis
analysis setting
sum representing
representing algorithm
running simplifying
simplifying sum
sum standard
manipulation techniques
tool summation
summation special
kind equation
equation called
relation recurrence
relations set
set method
solving illustrate
illustrate analysis
methods appli
variety examples
examples sections
chapter section
devoted fibonacci
numbers discov
discov ered
ered years
ago remarkable
remarkable sequence
sequence appears
appears variety
science discussion
discussion fibonacci
sequence serves
serves natural
natural vehicle
vehicle introducing
introducing important
class recurrence
rela tions
tions solvable
solvable method
numbers sake
sake general
obser vations
vations efficiency
algorithms methods
methods analyzing
analyzing methods
methods sections
sections powerful
powerful technique
technique analyz
analyz ing
mathematical clarity
clarity precision
precision methods
methods foolproof
foolproof sections
deal approaches
approaches empirical
visualization complement
complement pure
pure mathematical
mathematical techniques
techniques sections
sections newer
newer developed
developed mathematical
mathematical counterparts
counterparts proaches
proaches important
role tools
tools analysis
framework section
rithms mentioned
section kinds
called complexity
complexity fast
called space
space complexity
complexity refers
refers memory
units required
algorithm dition
dition space
space needed
needed input
output early
early days
days electronic
electronic computing
computing resources
space premium
premium half
century relentless
relentless technological
technological innovations
innovations improved
improved speed
memory size
size orders
magnitude extra
space quired
typically caveat
caveat difference
difference fast
fast main
memory slower
slower secondary
memory cache
cache issue
issue diminished
diminished extent
extent addition
addition research
research experience
experience shown
shown problems
problems achieve
achieve spectacular
spectacular progress
progress speed
speed space
space established
tradition algorithm
algorithm textbooks
textbooks primarily
primarily efficiency
efficiency analytical
analytical framework
framework introduced
introduced applicable
applicable analyzing
analyzing space
efficiency measuring
size obvious
observation algorithms
longer larger
larger inputs
inputs takes
longer sort
sort larger
larger arrays
arrays larger
larger matrices
matrices logical
logical investigate
investigate algorithm
indicating algorithm
size cases
cases selecting
selecting parameter
parameter straightforward
straightforward size
size problems
searching finding
element problems
problems dealing
dealing lists
lists problem
anxn degree
degree coefficients
coefficients larger
larger degree
degree discussion
discussion minor
minor difference
difference inconsequential
inconsequential efficiency
analysis situations
situations choice
choice parameter
matrices natural
natural measures
measures size
problem frequently
frequently matrix
matrix natural
natural contender
contender total
matrices multiplied
multiplied general
general applicable
matrices necessarily
necessarily square
square simple
relating measures
measures easily
easily algorithm
efficiency qualitatively
qualitatively depending
depending measures
measures problem
exercises choice
choice size
metric influenced
influenced operations
size checking
algorithm examines
examines individual
individual characters
characters input
size characters
characters works
works processing
processing words
input make
make special
special measuring
problems checking
checking primality
primality positive
integer input
input magnitude
magnitude determines
determines input
require parameter
parameter size
inputs vertices
edges algorithms
algorithms graphs
size situations
situations preferable
preferable size
representation log
log metric
metric idea
idea efficiency
algorithms ques
tion units
running issue
issue concerns
concerns units
measuring algorithm
running simply
simply standard
standard unit
unit measurement
measurement millisecond
millisecond running
implement ing
algorithm obvious
obvious drawbacks
drawbacks approach
dependence speed
speed dependence
dependence quality
algorithm compiler
compiler generating
generating machine
machine code
code difficulty
difficulty clocking
clocking actual
actual running
running pro
gram algorithm
metric extraneous
extraneous factors
factors approach
approach times
executed approach
approach excessively
excessively difficult
difficult unnecessary
unnecessary thing
thing important
important operation
operation contributing
contributing total
running compute
compute times
executed difficult
difficult basic
loop sorting
elements keys
comparison algorithms
involve arithmetical
multiplication division
division consuming
operation division
division multiplication
subtraction considered
considered established
ficiency suggests
suggests measuring
measuring counting
executed inputs
compute nonrecursive
sections important
application cop
cop execution
execution algo
estimate computers
multiplication longer
longer addition
subtraction timing
timing data
data provided
provided kernighan
kernighan pike
pike ker
ker running
formula copc
copc formula
formula caution
caution information
information operations
fact computed
approximately constant
constant cop
cop approximation
approximation reliability
reliability easy
easy assess
assess extremely
small formula
formula reasonable
reasonable estimate
estimate algorithm
running makes
run machine
machine times
faster times
times assuming
assuming longer
longer algorithm
size times
longer small
values copc
copc knowing
knowing cop
cop neatly
neatly cancelled
cancelled ratio
ratio multiplicative
constant formula
formula cancelled
cancelled reasons
reasons efficiency
framework ignores
ignores multiplicative
constants concentrates
concentrates growth
inputs orders
growth emphasis
emphasis growth
growth large
large input
sizes difference
times small
inputs distinguishes
distinguishes efficient
algorithms inefficient
inefficient compute
compute greatest
divisor small
numbers immediately
immediately efficient
efficient euclid
compared algorithms
section faster
faster greatest
efficiencies important
important large
growth counts
counts table
algorithms magnitude
magnitude numbers
numbers table
table profound
profound significance
significance analysis
algorithms function
function growing
growing slowest
slowest logarithmic
slowly fact
fact table
approximate functions
log implementing
algorithm logarithmic
logarithmic basic
run practi
practi cally
cally instantaneously
instantaneously inputs
sizes specific
values logarithm
base formula
formula loga
loga logb
logb makes
makes base
base leaving
leaving logarithmic
logarithmic multiplicative
constant omit
omit logarithm
write simply
simply log
log situations
situations interested
interested function
growth multiplicative
constant spectrum
spectrum exponential
function factorial
function functions
functions grow
grow fast
values astronomically
astronomically large
values reason
reason values
table years
years making
making operations
operations execute
operations incomparably
incomparably faster
faster execute
operations longer
longer years
years estimated
estimated age
age planet
planet earth
earth tremendous
tremendous difference
functions referred
referred exponential
exponential growth
functions simply
simply exponential
exponential fact
fact strictly
speaking referred
referred line
require exponential
exponential operations
operations practical
practical solving
small sizes
sizes qualitative
functions table
table react
react twofold
twofold argument
argument function
increases log
log linear
function increases
increases twofold
twofold linearithmic
linearithmic function
increases slightly
slightly twofold
twofold quadratic
function cubic
cubic function
function fourfold
fourfold eightfold
eightfold squared
squared increases
increases mathematics
mathematics refuses
refuses cooperate
cooperate neat
neat worst
efficiencies beginning
section established
established reasonable
indicating size
running depends
size specifics
specifics input
input sequential
searches item
item key
key elements
elements checking
checking successive
key exhausted
exhausted algorithm
pseudocode simplicity
simplicity implemented
array assumes
assumes condition
condition checked
checked checks
checks array
index exceed
exceed upper
bound fails
sequentialsearch searches
searches array
array sequential
sequential input
element matches
matches matching
elements running
elements matching
makes largest
comparisons inputs
size cworst
runs longest
longest inputs
size determine
algorithm principle
principle straightforward
straightforward analyze
algorithm kind
inputs yield
yield largest
largest basic
compute worst
cworst sequential
sequential obvious
obvious methods
methods handling
handling trivial
trivial situations
situations explained
explained subsequent
chapter worst
analysis important
important information
efficiency bounding
bounding running
running words
words guarantees
guarantees instance
size running
running exceed
exceed cworst
cworst running
fastest inputs
size analyze
analyze case
determine kind
inputs smallest
smallest inputs
size case
smallest input
input means
means input
fastest ascertain
ascertain convenient
inputs sequential
sequential lists
key cbest
important worst
efficiency completely
completely useless
useless case
inputs advantage
fact algorithms
algorithms good
good case
performance extends
extends types
types inputs
case sorting
works fast
fast case
efficiency deteriorates
deteriorates slightly
slightly sorted
method choice
choice applications
dealing sorted
algorithm unsatisfactory
unsatisfactory immediately
immediately discard
discard analysis
analysis discussion
discussion worst
case counterpart
counterpart yields
yields information
algorithm behavior
typical random
random input
input information
information average
efficiency seeks
seeks analyze
efficiency make
make assumptions
sequential standard
assumptions probability
successful equal
position assumptions
assumptions validity
validity difficult
verify reasonableness
reasonableness average
cavg case
successful probability
situation case
unsuccessful comparisons
comparisons probability
probability cavg
cavg general
reasonable answers
answers successful
successful average
inspect average
elements unsuccessful
unsuccessful average
inspect elements
inputs elementary
elementary investigation
investigation average
efficiencies direct
approach involves
involves dividing
dividing instances
size classes
classes instance
instance class
class times
executed classes
classes sequential
sequential probability
probability distribution
distribution inputs
inputs obtained
obtained assumed
assumed expected
expected basic
operation technical
technical implementation
implementation rarely
easy probabilistic
assumptions underlying
underlying case
case difficult
verify quest
quest simplicity
simplicity quote
quote results
results average
algorithms discussion
interested derivations
derivations results
results consult
books baa
baa sed
sed knui
knuiii preceding
preceding discussion
discussion average
obtained taking
taking average
efficiencies average
average occasionally
occasionally coincide
coincide average
case cost
cost legitimate
legitimate performing
performing average
analysis average
efficiency information
information unequivocally
unequivocally important
algorithms averagecase
efficiency overly
overly pessimistic
pessimistic worst
efficiency lead
lead average
analysis scientists
scientists missed
missed important
called amortized
efficiency applies
applies single
single run
structure turns
turns situations
situations single
operation expensive
expensive total
total entire
operations significantly
operation multiplied
multiplied amortize
amortize high
high cost
cost worst
occurrence entire
sequence manner
similar business
business amortize
amortize cost
cost expensive
expensive item
item years
years item
item productive
productive life
life sophisticated
approach discovered
scientist robert
tarjan applications
applications developing
developing interesting
variation classic
tree tar
tar readable
readable nontechnical
nontechnical discussion
discussion tar
tar technical
technical account
account usefulness
finding unions
unions disjoint
sets recapitulation
recapitulation analysis
framework leave
section summarize
summarize main
main points
points framework
outlined space
efficiencies measured
measured functions
functions algorithm
executed space
counting extra
consumed algorithm
efficiencies algorithms
differ significantly
significantly inputs
algorithms distinguish
efficiencies framework
framework primary
lies growth
running extra
consumed input
infinity section
section formal
formal means
means investigate
investigate orders
growth sections
methods investigating
investigating nonrecursive
algorithms analysis
outlined applied
applied investigating
investigating efficiency
algorithms encounter
examples rest
rest exercises
natural size
metric inputs
inputs basic
operation iii
iii basic
computing finding
numbers euclid
eratosthenes pen
integers definition
algorithm adding
adding matrices
matrices basic
times performed
performed function
function matrix
matrix function
function total
matrices questions
questions definition
multiplication variation
variation sequential
sequential scans
scans occurrences
occurrences key
key efficiency
efficiency differ
differ efficiency
classic sequential
sequential glove
glove selection
selection gloves
gloves drawer
drawer pairs
pairs red
red gloves
gloves pairs
pairs yellow
yellow pairs
pairs green
green select
select gloves
gloves dark
dark selection
selection smallest
smallest gloves
gloves select
select matching
pair case
case missing
missing socks
socks washing
washing distinct
pairs socks
socks missing
missing largest
largest pairs
pairs remaining
remaining left
pairs case
pairs worst
assuming probability
probability disappearance
disappearance socks
socks probability
probability case
scenario probability
probability worst
pairs average
integer prove
prove alternative
alternative formula
repre sentation
log analogous
analogous formulas
formulas decimal
digits accepted
accepted analysis
framework binary
digits measuring
measuring size
size sorting
augmented make
make case
size worthwhile
worthwhile addition
elimination classic
unknowns requires
operation longer
longer gaussian
elimination equations
equations buying
buying times
faster factor
factor faster
faster sizes
sizes systems
systems solvable
solvable functions
argument increased
increased fourfold
fourfold log
log pairs
pairs functions
function pairs
pairs lower
lower higher
multiple function
log invention
invention chess
chess legend
legend game
chess invented
invented centuries
centuries ago
ago northwestern
northwestern india
india sage
sage invention
invention king
game offered
offered inventor
inventor reward
reward wanted
wanted inventor
asked grain
grain obtained
obtained single
single grain
grain wheat
wheat square
chessboard fourth
fourth squares
squares filled
filled grain
grain doubling
doubling grains
grains square
chessboard inventor
asked adding
adding grains
grains asymptotic
notations basic
classes pointed
pointed previous
section efficiency
framework centrates
centrates growth
efficiency rank
rank orders
growth scientists
scientists notations
theta notations
notations informally
informally sev
eral examples
examples formal
definitions discussion
discussion nonnegative
set natural
numbers context
context interested
interested algorithm
running basic
operation simple
function informal
introduction informally
informally set
functions lower
infinity examples
examples assertions
true functions
functions linear
linear lower
growth quadratic
quadratic growth
functions cubic
cubic higher
growth fourth
fourth degree
polynomial notation
notation stands
stands set
functions higher
infinity finally
finally set
infinity quadratic
function infinitely
infinitely log
log informal
introduction comfortable
comfortable idea
idea asymptotic
definitions notation
bounded constant
sake visual
visual clarity
clarity extended
extended real
real formally
assertions introduction
introduction values
definition lot
lot freedom
freedom choosing
choosing specific
constants reason
reason proof
proof figure
notation figure
proof select
select figure
theta notation
constant multiples
multiples large
positive constants
constants nonnegative
figure prove
prove inequality
inequality upper
prove left
left inequality
inequality lower
bound select
select property
property involving
involving asymptotic
definitions asymptotic
notations prove
general properties
properties problem
simple examples
examples property
property analyzing
algorithms comprise
comprise consecutively
consecutively executed
parts theorem
max analogous
analogous assertions
true notations
notations proof
proof extends
extends orders
growth simple
simple fact
fact arbitrary
numbers max
max positive
constant negative
integer similarly
similarly denote
denote max
max inequalities
inequalities adding
adding yields
max constants
definition max
max property
property imply
imply algorithm
algorithm comprises
comprises consec
consec utively
utively executed
parts implies
implies algorithm
efficiency deter
deter mined
mined higher
growth efficient
max array
array applying
applying sorting
elements equality
equality sorting
comparisons makes
comparisons efficiency
max limits
limits comparing
growth formal
definitions indispensable
indispensable proving
proving abstract
abstract properties
properties rarely
rarely comparing
growth specific
specific functions
convenient method
computing limit
limit ratio
ratio functions
functions principal
principal cases
arise implies
implies smaller
growth lim
lim implies
implies growth
growth implies
implies larger
larger growth
growth cases
case means
means limit
approach convenient
convenient based
definitions advantage
advantage powerful
powerful calculus
calculus techniques
techniques developed
developed computing
computing limits
limits pital
pital lim
lim stirling
values examples
examples limit
growth examples
examples beginning
illustrate definitions
definitions lim
constant functions
growth symbolically
symbolically orders
growth log
log exam
ple immediately
immediately obvious
obvious log
lim log
growth limn
limn log
log called
called notation
notation log
log big
notation rarely
rarely analysis
algorithms fourth
fourth case
case limit
limit rarely
rarely actual
actual practice
practice analyzing
algorithms possibility
possibility makes
makes limit
growth general
general based
definitions orders
growth discussed
discussed informally
informally section
advantage stirling
formula lim
lim nen
nen grows
fast grows
grows faster
faster write
write symbolically
symbolically big
notation preclude
preclude possibility
possibility growth
growth limit
limit computed
computed basic
classes efficiency
framework puts
puts functions
growth differ
differ constant
multiple infinitely
infinitely classes
classes exponential
base efficiencies
classes listed
listed table
table increasing
increasing orders
growth names
names comments
comments classifying
classifying algorithms
algorithms asymptotic
ciency practical
practical values
values multiplicative
constants left
unspecified leaves
leaves possibility
worse efficiency
class running
running faster
class inputs
sizes running
running cubic
algorithm outperform
outperform quadratic
exceeds anomalies
anomalies fortunately
fortunately multiplicative
constants differ
differ drastically
drastically algorithm
class outperform
outperform algorithm
class moderately
moderately sized
sized inputs
inputs observation
observation true
exponential running
running exponential
exercises notation
notation efficiency
class sequential
section worst
case informal
informal definitions
definitions determine
determine ing
ing assertions
false table
table basic
basic asymptotic
class comments
comments constant
constant short
short case
efficiencies reasonable
reasonable examples
typically infinity
infinity input
size grows
grows infinitely
large log
log logarithmic
logarithmic typically
typically result
result cutting
size constant
algorithm account
account input
input fixed
fixed fraction
fraction algorithm
linear running
running linear
linear algorithms
algorithms scan
scan size
sequential class
class log
log linearithmic
linearithmic conquer
chapter mergesort
case fall
category quadratic
quadratic typically
section elemen
elemen tary
algorithms operations
operations matrices
matrices standard
examples cubic
cubic typically
section nontrivial
nontrivial algorithms
algebra fall
fall class
class exponential
exponential typical
set term
term exponential
exponential broader
broader sense
sense larger
larger orders
growth factorial
factorial typical
functions class
function belongs
belongs simplest
simplest answers
answers prove
assertions log
log table
functions arise
arise analysis
algorithms values
functions log
log listed
fact mathematical
mathematical certainty
certainty prove
prove functions
functions listed
growth lowest
highest prove
prove polynomial
degree aknk
aknk belongs
belongs prove
prove exponential
base prove
assertions definitions
definitions notations
notations volved
volved disprove
disprove giving
giving specific
specific counterexample
counterexample nonnegative
set nonnegative
integers prove
prove section
section theorem
theorem notation
notation mentioned
section elements
distinct algorithm
array presorting
presorting extra
size space
algorithm range
range finite
numbers defined
differ ence
elements representation
representation english
compute range
range indi
algorithms notation
notation unsorted
sorted singly
linked binary
tree lighter
heavier identical
coins pan
pan scale
weights coins
fake lighter
coins design
determine fake
heavier door
wall facing
facing wall
wall stretches
stretches infinitely
infinitely direc
direc tions
tions door
wall direction
direction door
door algorithm
algorithm enables
enables door
door walking
walking steps
steps unknown
unknown steps
steps initial
position door
door par
par mathematical
systematically apply
section analyzing
simple demonstrates
demonstrates principal
principal steps
typically analyzing
numbers simplicity
array pseudocode
pseudocode standard
algorithm maxelement
maxelement determines
determines largest
element maxval
maxval obvious
obvious input
array operations
loop operations
operations loop
body comparison
comparison maxval
maxval assignment
assignment maxval
maxval operations
basic comparison
loop assignment
operation comparisons
size terms
terms metric
metric distinguish
cases denote
denote times
executed formula
formula expressing
expressing function
function size
comparison execution
execution loop
loop repeated
repeated loop
variable bounds
bounds inclusive
inclusive sum
sum easy
easy sum
compute repeated
repeated times
times general
operation located
located loop
input depends
depends additional
property worst
expressing times
executed standard
standard formulas
manipulation closed
formula establish
establish growth
growth proceeding
proceeding examples
examples review
review appen
dix summation
rules analysis
algorithms frequently
frequently basic
basic rules
manipulation cai
cai analysis
requires setting
executed recurrence
relations typical
typical analyzing
section summation
formulas lower
upper integer
integer limits
limits formula
formula special
case formula
formula element
problem elements
solved straightforward
algorithm uniqueelements
uniqueelements determines
determines elements
distinct input
true elements
distinct false
true natural
natural input
array innermost
loop single
comparison elements
operation element
comparisons depends
depends equal
positions occupy
occupy limit
limit investigation
case definition
definition worst
cworst largest
largest arrays
size inspection
inspection innermost
loop reveals
reveals kinds
kinds worst
algorithm exit
loop prematurely
prematurely arrays
pair equal
inputs comparison
comparison repetition
limits repeated
repeated outer
limits cworst
cworst computed
computed sum
sum faster
faster equality
equality obtained
obtained applying
applying summation
formula result
result perfectly
perfectly predictable
predictable worst
algorithm distinct
matrices efficiency
efficiency definition
product definition
definition matrix
dot products
products rows
rows matrix
matrix columns
col pair
pair indices
indices algorithm
algorithm matrixmultiplication
matrixmultiplication multiplies
multiplies square
matrices definition
matrices output
output matrix
matrix input
size matrix
matrix arithmetical
operations innermost
loop multiplication
addition principle
principle designation
designation algorithm
operation choose
choose repetition
counting automatically
automatically established
tradition multiplication
multiplication basic
operation section
multiplications executed
matrices investigate
investigate worst
efficiencies separately
separately multiplication
multiplication executed
repetition algorithm
loop governed
governed variable
variable ranging
ranging lower
bound multiplications
multiplications pair
pair specific
variables total
multiplications expressed
expressed triple
triple sum
sum formula
formula starting
starting innermost
innermost sum
simple result
result summation
summation machinations
machinations algorithm
computes elements
product matrix
matrix product
dot product
matrix takes
takes multiplications
multiplications kind
kind reasoning
reasoning expected
expected answering
answering problem
estimate running
machine product
product cmm
cmm cmn
cmn multiplication
multiplication machine
machine accurate
accurate estimate
estimate account
account spent
spent additions
additions cmm
cmm caa
caa cmn
cmn addition
addition estimates
estimates differ
differ multiplicative
growth erroneous
erroneous impression
impression outlined
outlined succeeds
succeeds analyzing
algorithm irregular
irregular loop
variable sum
sum complicated
complicated analyze
analyze difficulties
difficulties intrinsic
intrinsic average
analysis obstacles
obstacles prove
prove insur
insur mountable
mountable caveats
caveats simple
simple nonrecursive
algorithms subsequent
chapters algorithm
variable manner
manner previous
previous examples
finds binary
representation frequently
operation loop
loop comparison
comparison determines
determines loop
body executed
executed times
executed larger
larger repetitions
repetitions loop
body choice
choice important
important significant
significant feature
feature fact
fact loop
variable takes
takes values
values lower
limits alternative
computing times
times loop
executed halved
halved repetition
loop log
log exact
formula times
executed log
representation formula
formula applying
applying analysis
analysis technique
based recurrence
relations discuss
discuss technique
technique section
section pertinent
pertinent analysis
algorithms exercises
exercises compute
sums growth
growth sums
sums notation
notation simplest
simplest function
function sample
sample variance
variance measurements
measurements computed
computed divisions
divisions multiplications
subtractions additions
subtractions bunched
bunched required
required computing
computing variance
variance formulas
formulas algorithm
algorithm mystery
mystery input
compute basic
executed efficiency
altogether efficiency
class prove
algorithm secret
secret input
numbers minval
minval questions
algorithm enigma
enigma input
numbers false
true questions
implementation matrix
algorithm ample
ample reducing
reducing additions
effect algorithm
determine asymptotic
growth total
total times
times doors
doors toggled
toggled locker
doors puzzle
formula mathematical
induction insight
insight year
year school
school boy
boy named
gauss grew
grew greatest
greatest mathematicians
mathematicians times
times mental
mental arithmetic
arithmetic table
filled repeating
repeating numbers
numbers diagonals
diagonals shown
shown total
sum table
numbers cra
cra version
version important
numbers efficiency
algorithm glaring
inefficiency pseudocode
eliminated speed
speed algorithm
algorithm von
neighborhood algorithm
starts single
single square
square iterations
iterations adds
adds squares
squares iterations
iterations gar
gar parlance
parlance cellular
cellular automata
automata theory
theory cells
range results
results illustrated
illustrated page
page numbering
numbering total
total decimal
digits needed
needed num
num bering
bering pages
pages assume
assume pages
pages numbered
numbered consecutively
consecutively starting
starting mathematical
algorithms recursive
algorithms novices
novices idea
idea recursive
compute factorial
function arbitrary
arbitrary nonneg
nonneg ative
recursively input
output simplicity
simplicity indicator
expansion basic
multiplication executions
executions denote
denote function
formula alternatively
alternatively times
counting total
exercises multiplications
compute equality
compute multiplications
multiplications spent
spent compute
compute multiplication
multiplication needed
needed result
defines sequence
sequence equation
defines explicitly
explicitly function
function implicitly
implicitly function
function equations
relations brevity
brevity recurrences
relations important
role analysis
areas applied
mathematics studied
studied courses
courses discrete
mathematics discrete
discrete structures
structures tutorial
tutorial provided
provided appendix
appendix goal
goal solve
relation explicit
formula terms
terms infinitely
infinitely sequences
sequences recurrence
recurrence examples
examples determine
determine solution
solution uniquely
uniquely initial
condition tells
tells sequence
starts inspecting
inspecting condition
condition makes
calls tells
tells things
things calls
calls smallest
smallest algorithm
algorithm executed
executed defined
defined inspecting
inspecting pseudocode
pseudocode exiting
exiting line
performs multiplications
multiplications initial
condition calls
calls multiplications
multiplications succeeded
succeeded setting
multiplications embark
discussion solve
recurrence reiterate
reiterate important
important dealing
dealing recursively
recursively defined
defined functions
functions factorial
function defined
pseudocode beginning
section showed
showed defined
difficult solution
starts increases
increases systematic
systematic fashion
fashion techniques
relations called
substitutions method
idea reason
reason immediately
immediately applies
applies solving
recurrence substitute
substitute inspecting
inspecting lines
lines emerging
emerging pattern
pattern makes
makes predict
predict line
line general
pattern strictly
speaking correctness
correctness formula
formula proved
induction easier
easier solution
verify correctness
correctness remains
remains advantage
advantage initial
condition substitute
substitute pattern
pattern formula
formula ultimate
result backward
substitutions disappointed
disappointed exerting
exerting effort
effort obvious
obvious benefits
benefits method
simple solve
difficult recurrences
recurrences simple
simple iterative
iterative algorithm
algorithm accumulates
accumulates product
multiplications overhead
overhead space
space maintaining
maintaining recursion
recursion stack
stack issue
issue efficiency
computing section
section function
large fast
fast realistically
realistically compute
compute exact
exact values
simple convenient
convenient vehicle
vehicle standard
algorithms generalizing
generalizing experience
experience investigating
computing outline
general investigating
executed vary
vary inputs
condition times
executed solve
recurrence ascertain
ascertain growth
solution educational
educational workhorse
workhorse recursive
puzzle mythical
mythical monks
monks disks
disks sizes
sizes slide
slide pegs
pegs initially
initially disks
peg size
smallest goal
goal disks
auxiliary disk
disk forbidden
forbidden larger
problem elegant
elegant recursive
solution illustrated
figure disks
auxiliary recursively
auxiliary largest
directly peg
peg finally
finally recursively
auxiliary simply
simply single
single disk
directly source
source peg
peg destination
destination peg
peg figure
figure recursive
solution tower
puzzle apply
general outlined
outlined tower
problem disks
disks obvious
obvious choice
choice input
size indicator
indicator moving
moving disk
operation moves
moves depends
depends recurrence
equation obvious
condition recurrence
relation moves
recurrence method
substitutions pattern
pattern sums
left suggests
suggests generally
generally substitutions
substitutions initial
condition achieved
achieved formula
run unimaginably
unimaginably moderate
moderate values
algorithm poor
poor fact
prove efficient
intrinsic difficulty
makes computationally
hard makes
general careful
careful recursive
algorithms succinctness
succinctness mask
makes single
single analysis
analysis purposes
purposes construct
calls tree
nodes correspond
correspond recursive
calls parameter
parameter generally
generally parameters
parameters calls
hanoi tree
figure counting
counting nodes
puzzle agrees
agrees obtained
obtained earlier
earlier investigate
investigate recursive
binrec input
representation binrec
binrec set
condition additions
additions computing
computing binrec
binrec addition
addition algorithm
algorithm returned
returned leads
calls equal
equal additions
additions initial
condition presence
presence function
argument makes
makes method
substitutions stumble
stumble values
values powers
powers standard
solve advantage
theorem called
called smoothness
smoothness appendix
appendix claims
claims broad
broad assumptions
assumptions growth
growth observed
observed growth
values alternatively
alternatively solution
solution powers
powers fine
tune solution
arbitrary apply
apply recipe
recipe recurrence
recurrence takes
takes backward
substitutions encounter
encounter problems
problems substitute
substitute returning
returning original
original variable
variable log
prove problem
exercises exact
solution arbitrary
arbitrary slightly
slightly refined
refined formula
log section
section introduction
introduction analysis
algorithms techniques
techniques expanded
expanded section
discuss fibonacci
numbers analysis
analysis involves
involves difficult
difficult recurrence
relations solved
solved method
substitutions exercises
relations solve
relation calls
computing recursive
cubes algorithm
output sum
cubes set
algorithm straightforward
straightforward nonrecursive
sum recursive
relation function
values solve
solve deter
deter algorithm
computes set
subtractions algorithm
solve tower
hanoi original
puzzle published
published douard
douard lucas
lucas french
mathematician world
world disks
moved mystical
mystical tower
tower brahma
brahma estimate
estimate years
years monks
monks disk
disk minute
minute assume
assume monks
monks eat
eat sleep
sleep die
die moves
moves ith
ith largest
algorithm nonrecursive
puzzle imple
imple ment
choice restricted
restricted tower
hanoi version
puzzle disks
moved peg
peg prohibition
prohibition placing
placing larger
smaller remains
remains design
problem moves
moves prove
prove exact
exact additions
additions recursive
binrec arbitrary
log set
additions nonrecursive
solve design
integer based
formula set
solve draw
algorithm calls
algorithm good
algorithm riddle
riddle input
numbers temp
temp riddle
riddle temp
temp algorithm
compute set
relation algorithm
operation solve
solve algorithm
algorithm graphcomplete
graphcomplete input
definition graphcomplete
graphcomplete algorithm
case determinant
definition solving
growth compared
compared von
neighborhood revisited
revisited cells
range problem
exercises setting
setting solving
relation frying
frying hamburgers
fried small
small grill
grill hold
hold hamburgers
hamburgers hamburger
hamburger fried
fried sides
sides frying
frying hamburger
hamburger takes
minute hamburgers
fried recursive
algorithm executing
executing task
minimum hamburger
hamburger hamburgers
hamburgers apply
procedure recursively
recursively remaining
remaining hamburgers
hamburgers set
hamburgers algorithm
hamburgers minimum
minimum recursive
algorithm executes
executes task
minimum celebrity
celebrity problem
problem celebrity
celebrity group
group people
people person
person task
task celebrity
celebrity questions
questions people
people design
algorithm celebrity
celebrity determine
determine group
group person
questions algorithm
fibonacci section
section fibonacci
numbers famous
famous sequence
conditions fibonacci
numbers introduced
introduced leonardo
leonardo fibonacci
fibonacci solution
size rabbit
rabbit population
population problem
examples fibonacci
numbers discovered
discovered natural
world predicting
predicting prices
prices stocks
stocks commodities
commodities interesting
interesting applications
numbers science
science worst
section consecutive
section briefly
briefly algorithms
nth element
benefits discussion
discussion opportunity
opportunity method
relations analysis
algorithms explicit
formula apply
substitutions solve
recurrence easily
easily discernible
discernible pattern
pattern advantage
theorem describes
describes solutions
solutions homogeneous
homogeneous linear
linear recurrence
recurrence constant
constant efficients
efficients fixed
fixed real
called coefficients
coefficients recurrence
recurrence generic
generic term
term unknown
unknown sequence
sequence applying
applying theorem
conditions appendix
appendix formula
formula hard
hard formula
formula includes
includes arbitrary
arbitrary integer
integer powers
powers irrational
numbers yields
yields elements
benefits formula
formula immediately
implies grows
exponentially fibonacci
rabbits constant
constant golden
ratio antiquity
antiquity considered
considered pleasing
pleasing ratio
ratio rectangle
sides human
human eye
eye consciously
consciously ancient
ancient architects
architects sculptors
sculptors observation
observation fraction
fraction infinitely
infinitely small
small infinity
infinity fact
prove impact
impact term
term obtained
obtained rounding
rounding term
term nearest
integer words
words nonnegative
integer rounded
rounded nearest
algorithms sake
simplicity operations
operations additions
additions multiplications
multiplications unit
unit cost
cost fibonacci
numbers grow
grow infinitely
large grow
grow rapidly
rapidly detailed
analysis offered
offered warranted
warranted fact
fact size
size numbers
numbers efficient
efficient method
computing primary
primary caveats
caveats algorithms
outline analysis
analysis examples
examples student
student design
algorithms begin
begin recurrence
conditions obvious
obvious recursive
fibonacci recursively
recursively definition
fibonacci embarking
embarking formal
analysis efficient
addition additions
additions performed
computing numbers
additions needed
needed computing
recurrence similar
similar recurrence
recurrence equal
equal recurrences
recurrences called
called inhomogeneous
inhomogeneous general
solving inhomogeneous
inhomogeneous recurrences
recurrences appendix
appendix textbook
textbook discrete
mathematics recurrence
recurrence special
special leads
faster solution
solution inhomogeneous
inhomogeneous recurrence
recurrence homogeneous
homogeneous rewriting
rewriting substituting
substituting homogeneous
homogeneous recurrence
recurrence solved
solved manner
manner recur
recur rence
rence solved
solved explicit
formula avoided
avoided noting
noting fact
fact recurrence
recurrence starts
starts runs
runs ahead
ahead size
bits log
representation efficiency
class worse
worse doubly
doubly exponential
exponential poor
poor efficiency
algorithm anticipated
anticipated nature
nature recurrence
calls sizes
instances slightly
smaller size
size encountered
encountered situation
situation reason
reason algorithm
algorithm inefficiency
recursive tree
tree calls
calls tracing
execution tree
figure values
function evaluated
evaluated extremely
inefficient faster
computing successive
sequence iteratively
iteratively algo
fib computes
fibonacci iteratively
iteratively definition
fibonacci figure
calls computing
fibonacci definition
additions linear
function exponential
representation extra
array storing
storing preceding
sequence avoided
avoided storing
storing values
values accomplish
fibonacci lies
formula efficiency
efficiency exponentiation
simply multiplying
discuss log
problem chapters
chapters special
exercised implementing
implementing approach
fibonacci intermediate
results irrational
make approximations
approximations accurate
accurate final
final yields
result finally
finally exists
exists log
fibonacci manipulates
manipulates integers
integers based
based equality
equality efficient
efficient computing
matrix powers
powers exercises
exercises web
site dedicated
dedicated applications
numbers study
study fibonacci
rabbits problem
rabbits sur
sur rounded
rounded wall
wall pairs
pairs rabbits
rabbits year
year initial
initial pair
rabbits male
female newborn
newborn rabbit
rabbit pairs
pairs fertile
fertile month
month life
life birth
birth male
female pair
pair month
month climbing
climbing stairs
stairs ways
ways climb
climb stair
stair case
case stairs
stairs stair
stair staircase
staircase climbed
climbed ways
ways numbers
numbers fibonacci
numbers closed
valid direct
direct substitutions
substitutions function
function satisfies
conditions maximum
values java
java primitive
primitive types
int smallest
smallest nth
fibonacci memory
memory allocated
allocated int
int recursive
nth bonacci
bonacci times
times computed
computed prove
algorithm text
text requires
requires space
space prove
equality modulo
modulo divisions
consec utive
utive fibonacci
input dissecting
dissecting fibonacci
fibonacci rectangle
sides secutive
secutive fibonacci
algorithm dissect
dissect squares
squares size
choice implement
computing digits
digits nth
fibonacci based
iterative definition
fib experiment
experiment largest
largest programs
programs run
run minute
minute empirical
sections algorithms
algorithms nonrecursive
recursive analyzed
analyzed mathematically
mathematically techniques
techniques applied
applied success
success fully
fully simple
algorithms power
power mathematics
mathematics enhanced
enhanced advanced
advanced techniques
techniques sed
sed pur
pur gra
gra gre
gre limitless
limitless fact
fact seemingly
difficult analyze
analyze mathematical
mathematical precision
precision certainty
certainty pointed
section true
analysis principal
alternative mathematical
ficiency empirical
analysis approach
approach implies
implies steps
steps spelled
spelled general
general empirical
efficiency understand
understand experiment
experiment purpose
purpose efficiency
metric measured
measured measurement
unit operation
operation unit
unit characteristics
characteristics input
range size
size implementing
algorithms exper
exper imentation
imentation generate
generate sample
inputs run
algorithms sample
inputs data
observed analyze
discuss steps
steps goals
goals pursue
pursue analyzing
algorithms empirically
empirically checking
checking accuracy
accuracy theoretical
assertion algorithm
efficiency comparing
comparing efficiency
problem imple
imple mentations
mentations algorithm
algorithm developing
developing hypothesis
class ascertaining
efficiency implementing
machine experiment
experiment design
design pend
pend experimenter
experimenter seeks
seeks goal
goal experiment
experiment dictate
dictate algorithm
measured alternative
alternative insert
counter counters
counters implementing
algorithm times
executed straightforward
straightforward operation
operation mindful
mindful possibility
possibility basic
executed places
places executions
executions accounted
accounted straightforward
task modified
modified ensure
ensure works
correctly terms
solves counts
counts yields
yields alternative
algorithm easiest
easiest unix
unix alternatively
alternatively running
running code
code fragment
fragment tstart
tstart completion
completion tfinish
tfinish computing
difference tfinish
tfinish tstart
tstart function
function clock
clock purpose
purpose java
java method
method currenttimemillis
currenttimemillis class
class important
important facts
facts mind
mind typically
typically accurate
results repeated
repeated runs
runs inputs
inputs obvious
obvious remedy
remedy make
make measurements
measurements average
average median
median sample
sample observation
observation high
high speed
speed modern
modern puters
puters running
running register
register reported
reported standard
standard overcome
overcome obstacle
obstacle run
run extra
extra loop
times total
running loop
loop repetitions
repetitions running
running sharing
sharing unix
unix reported
reported spent
spent cpu
cpu programs
programs defeats
defeats purpose
purpose experiment
experiment devoted
devoted specifically
specifically execution
execution units
units called
called ticks
ticks difference
difference divided
divided constant
constant indicating
indicating ticks
ticks unit
unit unix
unix called
called user
user automatically
automatically provided
provided measuring
measuring physical
running disadvantages
disadvantages principal
principal dependence
dependence machine
machine important
important technical
technical shared
shared counting
counting executions
running specific
specific information
performance computing
computing environment
environment importance
importance experimenter
experimenter algorithm
class addition
addition measuring
measuring spent
spent segments
segments pinpoint
pinpoint bottleneck
bottleneck performance
performance missed
missed abstract
abstract deliberation
deliberation algorithm
operation data
data called
called profiling
profiling important
important resource
resource empirical
running data
obtained tools
tools computing
computing environments
environments efficiency
efficiency basic
operation counting
counting clocking
clocking sample
inputs experiment
experiment goal
goal sample
sample representing
representing typical
input understand
understand typical
input classes
discuss researchers
researchers developed
developed set
instances benchmark
benchmark ing
developed experimenter
experimenter typically
typically make
make decisions
decisions sample
sample size
range instance
typically trivially
trivially small
small excessively
large procedure
procedure generating
generating instances
instances range
chosen instance
sizes adhere
adhere pattern
pattern generated
randomly range
chosen principal
advantage size
size changing
changing pattern
pattern impact
impact easier
easier analyze
analyze sample
sample sizes
sizes generated
generated doubling
doubling compute
ratios observed
metric ratios
ratios exhibit
exhibit behavior
classes discussed
major disadvantage
disadvantage nonrandom
nonrandom sizes
sizes possibility
algorithm investigation
investigation exhibits
exhibits atypical
atypical behavior
behavior sample
sample chosen
chosen sizes
sizes sample
sample algorithm
slowly odd
odd size
inputs empirical
empirical results
results misleading
misleading important
issue sizes
sizes experiment
included observed
metric vary
vary considerably
considerably instances
size wise
wise instances
size sample
developed methods
methods statistics
statistics experimenter
experimenter make
make cisions
cisions shortage
shortage books
subject instances
included sample
sample averages
averages medians
medians observed
observed values
values size
computed investigated
investigated addition
addition individual
individual sample
sample points
points empirical
analysis requires
numbers pattern
pattern input
typically instances
instances generated
randomly generating
digital difficult
principle problem
approximately reason
reason scientists
scientists numbers
numbers pseudorandom
pseudorandom practical
practical easiest
easiest natural
advantage random
random generator
generator language
language libraries
libraries typically
typically output
output pseudo
interval pseudo
variable desired
desired transformation
transformation continuous
continuous random
interval variable
integers alternatively
alternatively implement
generating pseudo
numbers widely
widely studied
studied algorithms
random seed
seed generates
numbers linear
integer positive
integer parameters
parameters seed
seed output
output sequence
pseudorandom integers
integers uniformly
values pseudorandom
numbers obtained
treating integers
integers generated
generated digits
digits decimal
decimal seed
seed mod
mod simplicity
simplicity pseudocode
pseudocode misleading
misleading devil
devil lies
lies details
details choosing
choosing algorithm
algorithm parameters
parameters partial
partial recommendations
recommendations based
based results
results sophisticated
sophisticated mathematical
knuii details
details seed
seed chosen
chosen arbitrarily
set current
current date
date large
large conveniently
conveniently word
word size
size selected
selected integer
integer pattern
pattern digits
digits mod
mod chosen
chosen empirical
empirical data
result experiment
experiment recorded
recorded presented
presented analysis
analysis data
data presented
presented numerically
numerically table
table graphically
graphically scatterplot
coordinate good
idea options
options feasible
feasible methods
methods unique
unique strengths
weaknesses principal
advantage tabulated
tabulated data
data lies
lies opportunity
opportunity manip
manip ulate
ulate easily
easily compute
ratios candidate
candidate represent
represent efficiency
algorithm ratios
ratios converge
converge pos
pos itive
itive constant
large careless
careless novices
novices assume
assume constant
constant incorrect
incorrect definition
ratios running
running reacts
reacts doubling
doubling input
size discussed
section ratios
ratios slightly
slightly logarithmic
logarithmic algorithms
algorithms converge
converge linear
linear quadratic
cubic algorithms
algorithms obvious
obvious convenient
cases scatterplot
scatterplot ascertaining
ascertaining algorithm
algorithm probable
probable efficiency
class logarithmic
algorithm scat
scat terplot
terplot concave
concave shape
figure fact
fact distinguishes
distinguishes basic
classes linear
points tend
tend aggregate
aggregate straight
line generally
generally contained
contained straight
straight lines
lines figure
figure scatterplots
scatterplots functions
functions convex
figure making
making difficult
difficult differentiate
differentiate scatterplot
scatterplot cubic
shape rapid
rapid metric
metric values
values exponential
require logarithmic
logarithmic scale
scale vertical
vertical axis
axis val
val ues
ues loga
loga plotted
plotted commonly
commonly logarithm
base coordinate
coordinate scatterplot
scatterplot exponential
algorithm resemble
resemble linear
function plies
plies logb
logb vice
versa applications
applications empirical
analysis predict
predict gorithm
performance instance
instance included
included experiment
sample ratios
ratios constant
constant sample
instances approximate
approximate prod
prod uct
uct instances
approach caution
caution values
range mathematicians
mathematicians predictions
predictions extrapolation
extrapolation opposed
opposed interpolation
interpolation deals
deals values
range unleashing
unleashing standard
tech niques
niques statistical
statistical data
data analysis
analysis prediction
prediction majority
majority techniques
based specific
specific probabilistic
assumptions valid
valid experimental
experimental data
data section
pointing basic
basic differ
differ ences
ences mathematical
strength mathematical
analysis independence
independence specific
inputs principal
weakness applicability
applicability investigating
investigating average
strength empirical
analysis lies
lies applicability
results sample
instances experiment
experiment figure
figure typical
typical plots
plots logarithmic
linear convex
convex functions
functions exercises
exercises sorting
algorithm studied
studied counter
inserted key
algorithm sortanalysis
sortanalysis input
output total
comparison counter
inserted prove
correction run
run problem
problem properly
properly inserted
inserted counter
coun ters
ters key
comparisons random
sizes analyze
obtained hypothesis
efficiency estimate
estimate key
comparisons randomly
generated array
size sorted
problem measuring
running milliseconds
milliseconds hypothesize
hypothesize efficiency
based empirical
empirical observations
observations basic
operation size
size scale
scale transformation
transformation make
make logarithmic
logarithmic scatterplot
scatterplot linear
linear distinguish
distinguish scatterplot
algorithm empirically
empirically largest
largest divisions
gcd positive
integer empirically
empirically smallest
smallest pair
make divisions
divisions gcd
gcd average
efficiency euclid
size measured
measured average
average divisions
divisions davg
gcd davg
davg scatterplot
scatterplot davg
class run
class sieve
eratos thenes
thenes section
run timing
experiment algorithms
gcd presented
presented section
visualization addition
addition mathematical
visualization defined
defined images
information visual
visual illustration
illustration algorithm
operation formance
formance kinds
kinds inputs
inputs execution
execution speed
speed algorithms
problem accomplish
accomplish goal
goal algorithm
visualiza tion
tion graphic
graphic elements
elements points
segments dimensional
dimensional bars
bars represent
represent interesting
interesting events
events algorithm
animation static
visualization shows
shows algorithm
progress series
series images
images algorithm
animation shows
shows continuous
continuous movie
movie presentation
presentation algorithm
operations animation
animation arguably
arguably sophisticated
option difficult
difficult implement
implement early
early efforts
efforts area
area algorithm
visualization watershed
watershed event
event happened
happened appearance
appearance minute
minute color
color titled
titled sorting
visualization classic
classic produced
produced university
toronto ronald
ronald baecker
baecker assistance
assistance sherman
sherman bae
bae contained
contained visualizations
visualizations sorting
algorithms half
half discussed
discussed provided
provided convincing
convincing demonstration
demonstration relative
relative speeds
speeds success
success sorting
algorithms perennial
perennial vorite
vorite algorithm
animation sorting
problem lends
lends naturally
naturally visual
visual presentation
presentation vertical
vertical horizontal
horizontal bars
bars sticks
sticks heights
heights lengths
lengths rearranged
rearranged sizes
sizes figure
figure presentation
presentation convenient
convenient illustrating
illustrating actions
actions typical
typical sorting
algorithm small
inputs larger
larger files
files sorting
sorting ingenious
ingenious idea
idea presenting
data scatterplot
plane coordinate
coordinate representing
item position
position representing
item representation
sorting transformation
transformation random
random scatterplot
points diagonal
diagonal figure
algorithm representation
representation comparing
comparing exchanging
exchanging items
items event
event animated
animated easily
easily appearance
appearance sorting
sorting great
great algorithm
algorithm animations
animations created
created appearance
appearance java
java figure
scatterplot representation
representation world
world wide
wide web
web range
range scope
scope algorithm
algorithm group
sorting application
application area
area geometric
purpose animation
animation systems
systems catalog
catalog links
links existing
visualizations maintained
maintained nsf
nsf supported
supported algovizproject
algovizproject contained
contained links
links survey
survey existing
visualizations low
low quality
quality content
content heavily
heavily skewed
skewed easier
easier topics
topics sorting
sorting sha
sha principal
visualization research
education potential
potential benefits
benefits researchers
researchers based
based expectations
expectations algo
visualization uncover
uncover unknown
unknown features
features algorithms
algorithms researcher
researcher visualization
visualization recursive
recursive tower
rithm odd
numbered disks
disks colored
colors noticed
noticed disks
color direct
direct contact
contact algorithm
execution observation
observation helped
helped developing
developing recursive
version classic
algorithm bentley
bentley mcilroy
mcilroy ben
ben mentioned
animation improving
improving library
library implementation
implementation leading
leading sorting
visualization education
education seeks
seeks students
students learning
algorithms evidence
evidence effectiveness
effectiveness decisively
decisively mixed
mixed experiments
experiments register
register positive
positive learning
learning outcomes
outcomes failed
failed increasing
increasing body
body evidence
evidence creating
creating sophisticated
systems fact
fact appears
appears student
student involvement
involvement visualization
visualization important
important specific
specific features
features visualization
visualization software
software experiments
experiments low
low tech
tech visualizations
visualizations prepared
prepared students
students effective
effective passive
passive exposure
exposure sophisticated
systems summarize
summarize successes
successes research
education reported
reported literature
literature impressive
impressive deeper
understanding human
human perception
perception images
images required
required true
true potential
potential algorithm
visualization fulfilled
fulfilled summary
summary kinds
efficiency deals
deals extra
space requires
efficiency principally
principally measured
measured function
size counting
executed basic
operation contributes
contributes running
typically consuming
loop algorithms
running differ
differ considerably
considerably inputs
size leading
leading worst
efficiency established
efficiency primarily
primarily grounded
grounded growth
running input
infinity notations
notations asymptotic
asymptotic orders
functions expressing
classes constant
constant logarithmic
linear linearithmic
linearithmic quadratic
cubic exponential
exponential main
ascertain sum
sum growth
growth main
relation expressing
ascertain solution
growth succinctness
succinctness recursive
algorithm mask
inefficiency fibonacci
numbers important
important sequence
sequence integers
integers element
sum predecessors
predecessors algorithms
numbers drastically
drastically efficiencies
efficiencies empirical
algorithm performed
performed running
algorithm sample
analyzing data
observed basic
running involves
involves generating
generating pseudorandom
numbers applicability
algorithm principal
strength approach
dependence results
results instance
instance sample
sample main
main weakness
weakness algorithm
visualization images
left subtree
problem posed
comput ing
consecutive elements
searching key
instance figure
important data
algorithm takes
colored color
randomly generated
irrational numbers
tions computing
section devoted
elements log
size log
underlying set
problem yields
assigned edges
graph weight
acyclic graphs
operations set
element subsets
principal alternatives
graphs section
figure solution
algorithm obtained
section simple
algorithm performs
size tree
turns log
real line
algorithm process
paths graph
problem version
section construct
making prob
algorithm iteration
delete edge
tions execution
algorithms prove
puzzle problem
graph connectivity
element subset
largest edge
villages located
applications important
class function
tree root
exercises apply
optimization problem
examples algorithms
case algorithm
acyclic graph
problem figure
implemented array
array elements
algorithm makes
figure algorithm
edge vertices
element equal
difficult prove
analyze algorithm
fast algorithm
elements distinct
makes comparisons
algorithms require
lower upper
function values
algorithm discussed
algorithm operation
adjacency matrix
history algorithmics
leads general
examples considered
algorithms proof
algorithm iterations
property desirable
topic section
constructing simple
applications years
design simple
set pairs
pairs vertices
largest edges
called standard
dense sparse
weighted digraph
defining path
vertex simply
maximum vertices
makes solve
sets lists
structure problem
tree implement
algorithmic problems
algorithm iii
figure maximum
solve general
called forward
row ith
problems linear
sum multiples
numbers xij
jordan elimination
board composed
defined difference
fortunately turns
structure implementing
implementation idea
possibly rightmost
coefficients equal
graph difficult
asks maximum
lies simple
problem optimizing
maximize minimize
minimize cnxn
achievements history
called simplex
discovered mathematician
narendra karmarkar
method empirical
empirical tests
variable representing
expressed sum
subject apply
vertices labeled
location problem
office minimizes
discovered american
algorithms traveling
fundamental prop
problem vari
set feasible
problem line
arise problem
method idea
method current
compute ratio
problem stan
dard set
cases arise
sion classic
sible solution
half century
moderate size
efficiency worst
published algorithm
constraints strict
sums left
feasible assignment
decreasing edge
obtained result
forward edge
ing paths
measurement unit
cuts cut
theorem max
exercises cut
equality implies
mum cut
tices iteration
algorithm exceeds
section pointing
equality prove
algorithm augmented
sets vertices
obvious observation
path edge
odd numbered
french mathematician
case matching
algorithm implementing
exit loop
sets total
cated algorithms
graphs exercises
scan sorted
domino tile
columns matrix
sets elements
figure discuss
subsequent iteration
representing set
matching implement
experiment ascertain
classic method
graph source
graph sequence
sorting algorithms
output array
terms problem
implemen tation
requires algorithm
applications involving
fact problems
sequence vertices
forest figure
important theoretical
edges incident
small size
multiplying times
algorithm decrease
section application
comparisons input
elementary sorting
create wrong
wrong impression
matrix efficiency
vertices partitioned
partitioned disjoint
key output
left exercises
comparisons average
instances problems
solves linear
sequential section
sets points
subject chapter
asked exercises
straightforward implementation
operation key
representation compute
total sum
finding path
graph design
coordinate plane
execute jobs
preceding chapter
problems polynomial
colors edge
seemingly simple
problems sorting
text string
figure formal
exercises alternative
riety problems
appli cation
genuine coin
algorithm character
lem assume
solve small
problem require
fact problem
nected path
french mathemati
sorting algorithm
important algorithm
vertex graph
length path
brute algo
problem deter
section problem
algorithm chapter
problem design
advantage fact
computed recursive
vertices represent
fits knapsack
set orderable
maximum numbers
tree left
problem minimum
loop algorithm
numbers dis
counter examples
applications deal
fined adjacency
optimality optimal
algorithm study
study algo
rithms practical
set important
theoretical stand
science deal
deeper understanding
problem familiar
algorithms differ
princi pal
techniques section
wealth good
books subject
illustrated simple
ing numeric
illustrating notion
integers denoted
gcd computed
integer pair
based definition
procedure finding
common factor
times compute
discuss methods
prime factorization
remaining algorithm
condition algorithm
pseudocode eliminated
special exercised
leave section
assignment comparison
lists output
inputs euclid
player write
equal difference
difference numbers
set integer
locker door
steps typically
strengths weaknesses
works correctly
problem computational
algorithm code
algorithms advantage
task important
problems complex
problem intrinsic
principal subject
structures algorithm
rarely easy
performed algorithm
run longer
array implementation
structuring restructuring
learning algorithms
representation technique
exercises simple
integer algorithms
induction algorithm
algorithm performance
kinds algorithm
pler algorithms
algorithms easier
easier understand
unnecessary sort
algorithm fine
fine tune
algorithm assume
sets require
magnitude algorithm
bentley ben
pirical analysis
inputs analyzing
advantages disadvantages
approach analyzing
ultimate result
difficult investigation
investigation algorithm
complexity problem
comparisons arrays
important issue
problems solution
peasant finds
cabbage river
boat room
room peasant
peasant item
item wolf
cabbage absence
absence wolf
wolf eat
goat eat
eat cabbage
takes minute
angle sides
base write
equation arbitrary
arbitrary real
standard algorithm
finding distance
numbers output
books problem
practical importance
problem interesting
subsequent chapters
sort lists
specially chosen
makes questions
questions easier
sorted input
good sorting
pieces keys
algorithm solution
algorithms simple
words input
input equal
arrays sorting
operations addition
structures algorithms
applications dealing
subject study
computationally hard
colors vertices
additional property
problems difficult
algorithms deal
mathematical objects
typically require
accumulation error
algorithms information
leonhard euler
state problem
discovery problem
model problem
problem color
special character
strings bit
indispensable pro
strings differ
numbers computing
nodes kinds
node single
elements require
special node
performed data
implementing recursive
highest priority
operations priority
adding element
struc ture
based array
implementation priority
heaps important
sets finite
finite nonempty
nonempty set
definition graph
dense graph
vertices element
representations convenient
nature problem
world applica
path points
communication network
plications convenient
graph interested
world appli
appli cations
vertex traverse
obvious application
section data
encoding section
applications mention
called state
subtrees binary
defined recursively
algorithms figure
applications science
sets efficiency
depends tree
algorithms log
plays central
central role
representation set
finding union
finding intersection
bit vector
changing elements
adding item
deleting item
set union
numbers advantage
implemented unsorted
school method
based algorithm
input array
efficiency section
input output
books devoted
difference running
problem solves
graph adjacent
problems computing
solved approximately
problems important
graph representing
ends vertex
based formula
defined adjacency
easy problem
formula log
coin lighter
problem make
values prove
compared key
transformed problem
indi cate
problems section
integer exponent
specific algorithms
principal algorithm
polynomial worst
generates sequence
exam ple
case prove
sort efficiency
prove assertion
smaller key
problem transform
moves solve
matrices multiplication
bound section
case sort
values log
isons average
matching element
similar problem
ples problems
portant theoretical
mathematical problem
numerical analy
root large
algorithms chapter
remaining elements
estimate times
algorithm case
algorithms efficient
case key
algorithm insertion
algorithm merge
rithm average
mergesort quick
algorithm output
elements position
algorithm scan
makes comparison
ficiency section
algorithm mul
algorithm proved
faster algorithms
decimal digit
lems computational
sec tion
figure transform
algorithms exponentiation
examples section
elements pair
output returns
returns true
efficiency entire
approach computing
algorithms comparing
sorting input
case array
averagecase efficiency
intersection set
sort design
cate efficiency
algorithm gaussian
result equation
technique method
method based
equations called
named carl
carl friedrich
friedrich gauss
equation coefficient
row largest
glaring inefficiency
computers multi
subtraction multiplication
appen dix
method lead
computers multiplication
section solve
denoted det
det defined
element det
recursive formula
formula det
det odd
odd element
obtained matrix
matrix deleting
deleting row
easy det
product elements
tree prin
prin cipal
node ele
representation tech
trees general
trees differ
golden ratio
exact formula
considerably difficult
tree insert
called item
operations makes
scheduling job
arise impor
tion huffman
children key
algorithm size
keys parent
insertion operation
log means
detailed analysis
runs slowly
algorithms yield
log prove
element determine
lengths represent
case computing
knuth knuii
polynomial evalu
nontrivial algorithm
binary string
product consecutive
digit addition
addition compute
multiplications total
binary decimal
applicable matrices
function fact
difficulty makes
small simple
method section
dantzig dan
algorithm exponential
karmarkar kar
problem integer
problem chapter
representing fraction
sum total
tinuous counterpart
finds river
bank wolf
straightforward task
consult books
constructing max
edges endpoint
integers general
section exploit
discuss important
problem simply
algorithm language
algorithm implementation
factor algorithm
prove solution
simpler efficient
inputs sorted
basic operations
numbers called
algorithms principal
algorithm typically
sort ver
sort language
problem apply
running implement
natorial objects
adjacent element
set represent
generating permu
case cworst
solution formula
logarithmic function
phisticated analysis
log smaller
formula relating
leads fast
encounter examples
algorithm fast
sorting based
rithms generating
directed graph
section algorithm
problem searching
set items
figure presents
orderable elements
elements output
optimization problems
introduced section
write implementing
algorithmic solution
root figure
efficiency searching
techniques based
actual implementation
vice versa
final result
technique discuss
sort figure
algorithm outline
runs fast
standard assumptions
size large
root leaves
principal application
approximation algorithms
graph called
graph tree
generated algorithm
algorithm pri
problem coin
algorithm mini
numbers prob
simplicity gen
standard sum
special kind
cations variety
quired algorithm
ques tion
typically involve
basic fact
divisor large
difference algorithm
values approximate
operation run
line important
reasonable algorithm
sort case
arrays case
sophisticated approach
interesting variation
sections discuss
sentation positive
king game
formally prove
bound prove
efficient max
equal positive
worse class
true algorithm
permutations element
presorting algorithm
ence largest
english algorithm
summation formula
equal simple
product element
algorithm effect
study algorithm
algorithm multiplication
equality compute
recurrences recurrence
setting recurrence
important general
ment language
graph definition
algorithms outline
web site
types int
algorithm consec
algorithm iterative
true average
theoretical assertion
insert counter
accurate results
size small
section major
method input
analysis knuii
cartesian coordinate
constant large
gorithm performance
instances approach
standard tech
pal strength
sieve eratos
timing experiment
algorithms study
algorithm visualiza
algorithm progress
sophisticated option
presenting data
representation process
rithm visualization
hanoi algo
disks color
mentioned algorithm
efficiency fast
mathematical induction
average key
finding solution
united states
simplicity assume
finding largest
algorithm stops
algorithm prove
array size
algorithm efficient
mentioned section
deals problem
case important
tracing algorithm
mathematician george
salesman knap
problems small
algorithm extreme
ically satisfied
problem exam
maximum mini
vertices degree
problem men
lution sequence
class algorithm
algo rithm
algorithm solving
section examples
problem small
algorithms sort
formal definition
problem sorting
identical coins
searching random
problem stated
based observation
equal key
algorithm application
comparisons sort
ercises algorithm
pair prob
finite infinite
generating element
graph pro
algorithm computing
outlined section
running algorithm
real num
general purpose
inputs algorithm
algorithm estimate
compared algorithm
secutive integers
algorithm opt
section run
algorithm exceed
obtained dis
dis cuss
ical data
problems typically
sparse graph
tions finding
trees discuss
unsorted array
dictionary operation
important problem
design technique
important applications
compute product
algorithm general
horizontally vertically
matrix element
problem introduced
ing formula
cessful searches
section deals
algorithm pair
elements input
class worst
exercises section
case problem
size problem
numbers rep
standard assumption
array element
linear algorithm
general technique
lem efficient
element unique
ness problem
algorithm entire
rithm presorting
solution unique
applications algorithm
exercises solve
solution solve
case worst
log efficiency
priority implement
imply computing
solvable alg
simple formula
formula min
formal proof
trary vertex
coloring prob
lem assign
manhattan dis
algorithm compared
case comparison
tions combinations
searching algorithm
position sorted
num ber
smaller element
sort quicksort
tree smaller
multiplications multiplication
algorithm construct
path length
simple algorithm
problem solved
algorithms discuss
tree node
algorithm starts
efficient implement
construct tree
design line
line algorithm
principal alternative
elements small
algorithm make
algorithms based
array orderable
special case
efficiency sec
general obser
array key
size element
sequential algorithm
algorithm max
defined differ
section set
algorithm improvement
values large
defined recursive
lies formula
algorithms princi
discussed section
chapter discuss
chapter algorithm
graph edge
root leaf
represented adjacency
array algorithm
instances problem
algorithm determine
problem called
general case
faster algorithm
algorithm input
problem algorithm
algorithms called
chapter deal
timal solution
set edge
tables table
matrix represent
matching pair
graph adjacency
points coordinate
determine effi
examples algorithm
rithms general
players player
clid algorithm
parental parent
tion vertex
variety applications
problem exercises
data structure
elements sort
ing linear
ments left
ments sorted
log small
decreasing array
specific input
polynomials polynomial
equations unknown
rational numbers
section exam
set element
rational num
equalities inequalities
problem based
general problem
problem discussed
discussed chapter
tion problems
algorithm min
knapsack prob
lem prove
ing efficient
values small
largest element
algorithm compute
algorithm discuss
element position
run experiment
mergesort merge
algorithm sort
problem min
algorithm pre
ing length
recurrence rela
yields max
tary sorting
counter coun
euclid algo
successful unsuccessful
algorithm linear
ing log
specific algorithm
discuss algorithm
problem maxi
design efficient
equal element
tant problems
ment problem
linear equation
efficient algorithms
ing information
characters character
vertices color
section discuss
ing range
algorithm insert
construction construct
ing fact
arrays size
functions function
solve problem
totic efficiency
gorithms solving
graph subgraph
matrix row
tion examples
ing efficiency
binary repre
asymptotic effi
times algo
elements set
rows row
comparisons algo
algorithms sec
algorithm implement
keys key
traversal algorithm
ent assignment
zontally vertically
timization problem
lem called
illustrated figure
problem asks
set item
set ele
approaches approach
tant algorithms
discuss algo
instances prob
digits digit
recursive algo
good algorithm
algorithm require
tion element
parisons algorithm
vertices edge
algorithms problem
cussed section
array sort
sive recursive
children child
difficult problem
tion insert
algorithm solve
sake simplicity
problems solve
classes class
row col
pseudocode algorithm
lem solution
algorithm run
sion algorithm
subsets subset
comparisons comparison
set subset
sets subsets
design algo
erage case
nodes node
tree subtree
tion algorithms
trees tree
negative integer
ative integer
paths path
ation problem
tion discuss
rithm design
arrays array
case effi
important application
key comparison
lem solved
rithm solving
sorting algo
code algorithm
gorithm design
ing largest
data struc
cases case
rithm computing
algorithm section
problem computing
solving problem
algorithm finding
positive integer
problem solve
algorithm called
algorithm comput
problem finding
problem discuss
efficiency class
sets set
solutions solution
solving prob
algorithm sec
ing input
ciency class
tion section
efficiency algo
ing algorithm
rithm algorithm
section exercises
algorithm pro
efficiency algorithm
efficient algorithm
algorithms algorithm
running run
ure figure
problem section
sorted sort
ciency efficiency
words word
operations operation
tion problem
lem section
elements element
rithm problem
problems problem
algorithm problem
minimum spanning tree
dynamic programming algorithm
boyer moore algorithm
vertices numbered higher
intermediate vertices numbered
paths intermediate vertices
topological sorting problem
optimal binary tree
single source shortest
lengths shortest paths
source shortest paths
linear programming problem
basic feasible solution
shortest paths problem
weighted connected graph
basic operation executed
kth smallest element
convex hull set
hull set points
augmenting path method
coin row problem
intermediate vertex numbered
vertex numbered higher
algorithm basic operation
variable size decrease
problems solved polynomial
comparison based algorithm
problem dynamic programming
design dynamic programming
shortest augmenting path
stable marriage problem
stable marriage algorithm
left binary exponentiation
recurrence relation key
character rightmost occurrence
good suffix table
bad symbol table
ith row column
average comparisons successful
entry pivot column
augmenting path algorithm
binary reflected gray
reflected gray code
decrease constant factor
dynamic programming algorithms
memory function method
binary trees keys
existence paths intermediate
shortest path paths
numbered higher shortest
shortest paths lengths
shortest paths intermediate
problem feasible region
brute string matching
relation key comparisons
extended binary tree
preceded character rightmost
hash table size
hamiltonian circuit problem
path augmenting path
ann lea sue
stable marriage matching
pairs shortest paths
problem solved polynomial
yield optimal solution
algorithm minimum spanning
spanning tree graph
connected weighted graph
points feasible region
size decrease algorithm
length shortest path
algorithm design techniques
spanning tree problem
ties broken arbitrarily
greatest common divisor
upper triangular matrix
closest pair problem
dynamic programming approach
index max index
max index max
coin optimal solution
largest coins robot
cell adjacent cell
programming algorithm knapsack
items knapsack capacity
item optimal subset
knapsack problem dynamic
dynamic programming table
floyd algorithm pairs
algorithm pairs shortest
transitive closure digraph
ith vertex intermediate
path intermediate vertex
boxed row column
row column existence
column existence paths
efficiency warshall algorithm
equal length shortest
maximum cardinality matching
matching bipartite graph
lea sue free
sue free men
free men bob
preorder inorder postorder
solutions smaller subproblems
instance knapsack problem
constructing optimal binary
establishing lower bounds
lower bound class
information theoretic lower
problem lower bound
decision tree algorithm
binary decision tree
draw decision tree
decision problems solved
problem polynomially reducible
characters pattern text
pattern barber text
pattern entire length
character pattern characters
bad symbol shift
good suffix shift
occurrence suff preceded
suff preceded character
keys hashed cell
hash table figure
comparisons successful table
inserting tree figure
strongly connected components
bit strings length
partition based algorithm
winning position player
algorithmic problem solving
yields optimal solution
algorithm kruskal algorithm
edges minimum spanning
spanning tree weighted
constructing minimum spanning
minimum weight edge
nearest tree vertex
tree vertices remaining
design greedy algorithm
shortest path source
fixed length encoding
frequencies symbol occurrences
huffman coding tree
searching sorted array
upper triangular coefficient
triangular coefficient matrix
binary exponentiation algorithm
feasible region problem
objective function equal
solve linear programming
entries objective row
directed edge positive
maximum matching bipartite
tom ann lea
computing greatest common
comparisons worst case
linear programming problems
vertex intermediate vertex
trivial lower bound
theoretic lower bound
problem coins weighings
class decision problems
decision traveling salesman
cnf satisfiability problem
dynamic programming technique
solving problems overlapping
classic dynamic programming
solving coin row
coins robot bring
robot bring cell
longest path dag
pseudocode dynamic programming
knapsack capacity optimal
composition optimal subset
memory function algorithm
algorithm constructing optimal
root optimal tree
column matrix equal
means exists path
numbered higher equal
numbered higher paths
paths lengths shortest
decrease conquer technique
source removal algorithm
key comparisons binary
russian peasant multiplication
element ith row
row column matrix
solve recurrence relation
times basic operation
child serves root
serves root subtree
root subtree keys
arrays worst case
key comparisons mergesort
write pseudocode conquer
pseudocode conquer algorithm
pivot left scan
scanning indices crossed
dutch national flag
inorder postorder traversals
traversal root visited
path length extended
length extended binary
multiplying digit integers
points sorted nondecreasing
points left line
sorted nondecreasing coordinates
graph positive integer
extra space facilitate
space facilitate faster
sorting distribution counting
natural language texts
horspool algorithm searching
text horspool algorithm
shift pattern entire
rightmost occurrence pattern
horspool algorithm pattern
shift pattern positions
symbol shift table
suffix shift table
moore algorithm pattern
suffix table shift
symbol table good
table good suffix
text algorithm retrieves
algorithm retrieves bad
retrieves bad symbol
hash function mod
cells hash table
hashed cell hash
cell hash table
money parted hash
prim algorithm section
times algorithm basic
growth constant multiple
method backward substitutions
greedy algorithm yields
algorithm yields optimal
constructed solution obtained
tree weighted connected
constructs minimum spanning
algorithm constructing minimum
input weighted connected
set tree vertices
vertex added tree
figure demonstrates application
spanning tree prove
proof prim algorithm
represented weight matrix
resulting set elements
efficiency sequence unions
sequence unions finds
graph minimum spanning
nearest source vertices
solve single source
weighted graph digraph
weighted path length
integer linear programming
convex hull problem
feasible region linear
region linear programming
extreme feasible region
initial basic feasible
path source sink
maximum problem network
augmenting path respect
augmenting path matching
committee members committee
members committee members
definition based algorithm
string matching problem
points convex hull
line segment endpoints
set points plane
person job person
string matching algorithm
extreme points feasible
application brute approach
improved modest effort
stack fake coins
set points convex
convex hull line
hull line segment
points line convex
domain grows exponentially
small instance problem
design exhaustive algorithm
depth dfs breadth
dfs breadth bfs
unvisited vertices edges
problem computing greatest
equivalent upper triangular
elements main diagonal
classical binary tree
space efficiencies algorithm
problems overlapping subproblems
algorithm knapsack problem
subset items knapsack
set recurrence relation
comparison based algorithms
algorithms sorting searching
numerical analysis science
based algorithm problem
lower bound tight
information theoretic argument
sorted array log
log lower bound
tight lower bound
decision tree figure
lower bound log
based algorithm sorting
algorithm sorting element
ternary decision tree
log positive integer
tree algorithm solves
solves problem coins
solved polynomial algorithm
positive integer weights
polynomially reducible decision
instance hamiltonian circuit
determine graph positive
degree taylor polynomial
numbers represented floating
significant decimal digits
error relative error
large relative error
dfs based algorithm
algorithm searching sorted
algorithm solves problem
comparison based sorting
relationship solution instance
variety decrease conquer
varies iteration algorithm
algorithm topological sorting
solve topological sorting
digraph represented adjacency
johnson trotter algorithm
algorithm generating bit
generating bit strings
key binary tree
instance chips winning
chips winning position
presorting based algorithm
key comparisons successful
binary tree defined
height binary tree
randomly ordered arrays
partition split position
set solve recurrence
pen pencil algorithm
algorithm multiplying digit
algorithm closest pair
analyzing efficiency nonrecursive
empirical analysis algorithm
efficiency analysis framework
basic operation times
orders growth functions
average case analysis
basic efficiency classes
comparing orders growth
functions orders growth
times comparison executed
von neumann neighborhood
disks peg auxiliary
linear equations unknowns
shortest path problem
algorithm dijkstra algorithm
starting character pattern
matching substring text
pattern shift pattern
positive decimal integer
average case efficiencies
shortest paths vertex
finding shortest paths
partially constructed solution
programming technique solving
technique solving problems
overlapping subproblems typically
subproblems typically subproblems
typically subproblems arise
subproblems arise recurrence
arise recurrence relating
subproblems dynamic programming
dynamic programming suggests
programming suggests solving
suggests solving smaller
recording results table
results table solution
table solution original
original problem obtained
compute nth fibonacci
application dynamic programming
variation dynamic programming
recurrence relating solution
solution problem solutions
problem solutions smaller
dynamic programming applications
dynamic ming algorithm
maximum coins maximum
compute filling row
filling row table
row table left
table left manner
left manner similar
maximum money picked
positive integers indicating
integers indicating coin
denominations shown figure
shown figure yields
sum means coin
means coin optimal
minimum coins denominations
applies dynamic programming
coin collecting problem
adjacent cell left
values row column
algorithm space efficiency
optimal path cell
path cell adjacent
efficiency solving coin
apply dynamic programming
series games win
games win series
write pseudocode dynamic
knapsack problem memory
subsets ith item
ith item optimal
optimal subset item
subset item optimal
capacity optimal subset
optimal subset selected
subset selected items
entry previous row
row columns left
goal figure table
solving knapsack problem
capacity figure solving
figure solving instance
solving instance knapsack
programming algorithm instance
item weight capacity
space efficiency algorithm
needed composition optimal
table entries initialized
function method knapsack
method knapsack problem
nonnegative integer indicating
apply memory function
function method instance
problem memory function
table generated dynamic
true false sequence
false sequence values
table knapsack problem
knapsack problem nondecreasing
binary tree optimal
key left subtree
keys optimally arranged
root optimal binary
table dynamic programming
programming algorithm constructing
successful searches optimal
tables main table
main table root
table root table
comparisons successful tree
optimal tree key
efficiency algorithm optimalbst
tree set keys
algorithm finding optimal
warshall algorithm computing
algorithm computing transitive
computing transitive closure
transitive closure directed
closure directed graph
recall adjacency matrix
directed path positive
positive length ith
digraph adjacency matrix
adjacency matrix transitive
matrix transitive closure
specifically element ith
numbered higher series
higher series starts
series starts intermediate
starts intermediate vertices
intermediate vertices paths
adjacency matrix digraph
vertex intermediate paths
algorithm compute elements
compute elements matrix
elements matrix predecessor
matrix predecessor series
predecessor series element
series element ith
path ith vertex
numbered higher intermediate
higher intermediate vertices
kth vertex intermediate
vertex intermediate vertices
exists path intermediate
generating elements matrix
figure application warshall
application warshall algorithm
warshall algorithm digraph
higher paths boxed
paths boxed row
algorithm digraph shown
pseudocode warshall algorithm
sparse graphs represented
traversal based algorithm
digraph weight matrix
bit strings bitwise
strings bitwise operation
path paths ith
paths ith vertex
simply weight matrix
weight matrix graph
graph negative length
path paths intermediate
higher equal length
application floyd algorithm
algorithm cubic efficiency
higher shortest paths
higher shortest path
apply warshall algorithm
warshall algorithm transitive
algorithm transitive closure
pairs straws connected
optimal solution problem
improved objective function
feasible solution optimal
simplex method classic
iterative improvement algorithms
figure feasible region
maximal objective function
adjacent extreme points
rows objective row
row entry pivot
pivot column tableau
entries pivot column
coefficient values problem
problem simplex method
xij uij edge
augmenting path augmenting
ford fulkerson method
rij uij xij
edge augmenting path
maximum minimum cut
finding maximum matching
bipartite graph vertices
path respect matching
matching maximum matching
maximum matching algorithm
jim tom jim
tom jim lea
tower hanoi puzzle
worst case average
subproblems ideally equal
ideally equal size
problem smaller subproblems
compute sum numbers
conquer algorithm called
instance size divided
size divided instances
divided instances size
establish solution growth
application conquer technique
halves sorting recursively
sorting recursively merging
power recurrence relation
comparisons mergesort worst
conquer algorithm finding
algorithm problem write
algorithm solve recurrence
design conquer algorithm
left scan denoted
scan denoted index
denoted index pointer
index pointer starts
pointer starts element
elements smaller pivot
subarray scan skips
scan skips elements
pivot stops encountering
stops encountering element
elements larger pivot
scanning indices pointing
indices pointing element
pointing element pointing
element pointing equal
prove scanning indices
case input strictly
input strictly decreasing
strictly decreasing arrays
real num bers
national flag problem
binary tree traversals
binary tree input
tree input binary
input binary tree
binary tree output
nodes binary tree
nodes shown squares
nodes shown circles
internal external node
root visited visiting
visited visiting left
binary tree algorithm
binary tree preorder
tree preorder inorder
classic traversal algorithms
postorder traversals tree
internal path length
defined sum lengths
sum lengths paths
multiplication large integers
strassen matrix multiplication
digit numbers product
numbers product computed
sum digits sum
product halves product
sum halves sum
applying master theorem
numbers decimal digits
integer multiplication algorithm
required brute algorithm
matrices strassen algorithm
multiplications strassen algorithm
strassen algorithm multiplying
algorithm multiplying matrices
additions strassen algorithm
based conquer technique
brute algorithm points
conquer algorithm closest
points closer dmin
width separating line
dmin minimum distance
points array points
array points array
set points left
hull sequence line
sequence line segments
line segments vertices
segments vertices points
hull entire set
upper lower hulls
case efficiency quickhull
closest pair algorithm
conquer sorting algorithm
adjacency lists graph
set convex hull
design brute algorithm
vertices connected component
job person job
space offs algorithm
offs algorithm design
algorithm design issue
design issue theoreticians
issue theoreticians practitioners
theoreticians practitioners computing
idea preprocess problem
preprocess problem input
problem input additional
input additional information
additional information obtained
information obtained accelerate
obtained accelerate solving
accelerate solving problem
solving problem afterward
technique exploits space
exploits space offs
facilitate faster flexible
faster flexible access
flexible access data
comparison counting algorithm
small set values
array hold sorted
distribution counting algorithm
initialized index element
index element initialized
write multiplying sparse
problem string matching
matches pairs characters
pairs characters pattern
random natural language
actual pattern text
characters pattern counterparts
pattern counterparts text
left boyer moore
simplified version boyer
version boyer moore
searching pattern barber
missing matching substring
aligned character pattern
character pattern case
pattern aligned text
pattern characters letter
characters letter situation
letter situation similar
situation similar case
shift sizes computed
sizes computed formula
pattern distance rightmost
alphabet pattern text
pattern text construct
construct shift table
align pattern beginning
pattern beginning text
beginning text matching
text matching substring
matching substring pattern
substring pattern reaches
pattern reaches character
reaches character text
character text starting
text starting character
matched mismatching pair
case retrieve entry
retrieve entry column
horspool algorithm string
english letters spaces
hor spool algorithm
barber text characters
text characters failing
characters failing letter
occurrence pattern abcbab
table boyer moore
shift table earlier
character pairs matched
text mismatched character
table shift pattern
pattern baobab text
failure comparison space
comparison space character
space character text
character text algorithm
pattern max iteration
leads farther shift
farther shift pattern
apply horspool algorithm
make character comparisons
algorithm make searching
moore algorithm correctly
table pattern shifts
efficient algorithm task
algorithm task space
task space efficiencies
keys cells hash
hash table evenly
figure collision keys
collision resolution mechanism
resolution mechanism principal
hashing keys stored
keys stored linked
stored linked lists
table linked lists
hash function key
keys money parted
parted hash addresses
hash addresses money
addresses money parted
figure hash table
hash table construction
hash function distributes
function distributes keys
hash table factor
computing hash function
operations insertion deletion
closed hashing addressing
state hash table
storing large dictionaries
extendible hashing disk
input hash function
function mod construct
hash table largest
table largest key
successful table average
operations benefit modification
equal smallest key
total minimum keys
upper bound height
bound height tree
tree obtained inserting
obtained inserting tree
key insertion algorithm
insertion algorithm tree
design analysis algorithms
vertices connected edge
equality gcd mod
middle school procedure
problem algorithm solves
person takes minutes
important problem types
problems numerical problems
large data sets
abstract data types
prove greedy algorithm
suggests constructing solution
obtained solution problem
solution problem reached
sequence locally optimal
locally optimal choices
optimal choices yield
prim algorithm kruskal
dijkstra algorithm shortest
trees minimum spanning
tree prim algorithm
spanning trees graph
algorithm constructs minimum
consists single vertex
nearest vertex tree
smallest weight ties
weight ties broken
tree constructed algorithm
spanning tree input
tree input weighted
connected graph output
graph output set
output set edges
set edges composing
edges composing minimum
composing minimum spanning
tree adjacent tree
adjacent tree vertex
simple task finding
broken arbitrarily identified
arbitrarily identified vertex
identified vertex added
added tree operations
application prim algorithm
algorithm specific graph
algorithm yield minimum
generated prim algorithm
tree graph minimum
graph minimum weight
assumption minimum spanning
weight equal weight
tree minimum spanning
correctness proof prim
algorithm depends data
depends data structures
graph represented weight
weight matrix priority
matrix priority implemented
priority implemented unordered
implemented unordered array
vertices remaining vertices
remaining vertices illustration
illustration figure application
shown bold figure
adjacency lists priority
greedy algorithm minimum
greedy algorithm yield
algorithm yield optimal
greedy algorithm problem
apply prim algorithm
prim algorithm graph
algorithm graph priority
priority fringe vertices
algorithm correctly graphs
correctly graphs negative
graphs negative edge
negative edge weights
weights minimum spanning
algorithm previous section
mini mum spanning
kruskal algorithm minimum
edges nondecreasing weights
correctness kruskal algorithm
application kruskal algorithm
prim kruskal algorithms
elements entire set
union disjoint subsets
implementation makeset requires
operation initialization singleton
initialization singleton subsets
sequence union operations
broken arbitrarily size
sequence union size
union size operations
updated resulting set
log union size
unions finds log
log quick union
version called union
true false minimum
weight edge connected
edge connected weighted
weighted graph edges
graph edges minimum
edge weights connected
weights connected weighted
weighted graph distinct
graph distinct graph
distinct graph minimum
minimum spanning forest
paths problem vertex
paths leading source
algorithm single source
dijkstra algorithm finds
vertex nearest source
source vertices adjacent
algorithm selects vertex
path source vertex
application dijkstra algorithm
algorithm compares path
compares path lengths
path lengths edge
prim algorithm compares
graph nonnegative weights
vertices weighted graph
graph digraph variation
digraph variation called
variation called single
single pair shortest
pair shortest path
solving single source
length encoding assigns
codewords frequent symbols
variable length encoding
codeword prefix codeword
root tree weight
huffman tree construction
numbers assigned leaves
path root ith
root ith leaf
minimum weighted path
questions needed chosen
codeword length frequent
function alphabet size
graph coloring problem
key comparisons worst
based sorting algorithm
matrix adjacency lists
simple path root
wolf goat cabbage
gaussian elimination algorithm
design presorting based
based algorithm solving
problem deter efficiency
deter efficiency class
original upper triangular
solve gaussian elimination
gaussian elimination matrix
stage gaussian elimination
apply gaussian elimination
equations unknowns unique
unknowns unique solution
gaussian elimination solve
tree avl tree
rotation avl tree
performed key inserted
child tree root
tree root insertion
height avl tree
equal keys children
essentially binary tree
parental dominance holds
deleting root key
term brute algorithm
compute left binary
problems solved algorithm
figure decision tree
graph hamiltonian circuit
hamiltonian circuit graph
solution original problem
constant factor algorithms
algorithm generating permutations
fake coin problem
elements greater equal
analysis recursive algorithms
tree recursive calls
case efficiency algorithm
recurrence initial conditions
elements fibonacci sequence
computing nth fibonacci
algorithm input size
bits binary representation
systems linear equations
algorithm string matching
searching insertion deletion
algorithm design strategies
brute straightforward approach
straightforward approach solving
directly based problem
based problem statement
problem statement definitions
statement definitions concepts
definitions concepts involved
based brute approach
brute approach problem
exchange element putting
element putting smallest
putting smallest element
smallest element final
element final position
action algorithm illustrated
vertical final positions
final positions considered
positions considered subsequent
considered subsequent iterations
makes exchanges sorted
exchanges sorted algorithm
brute approach results
approach results algorithm
results algorithm improved
algorithm improved modest
brute algorithm computing
algorithm based brute
ring star fully
star fully connected
fully connected mesh
dark light dark
algorithm make comparisons
array characters representing
points plane higher
plane higher dimensional
solution closest pair
compute distance pair
distance closest points
smaller square root
sets depicted figure
triangle rectangle generally
rectangle generally convex
generally convex polygon
definition convex hull
line segment connecting
segment connecting points
connecting points set
line convex hull
vertices points line
segment endpoints points
set extreme points
convex hull boundary
pair problem points
efficient algorithm office
algorithm office location
office location minimizing
class brute algorithm
brute algorithm convex
algorithm convex hull
brute approach combinatorial
constraints finding desired
salesman problem knapsack
knapsack problem assignment
hamiltonian circuit defined
figure presents small
presents small instance
instance assignment problem
assignment problem exhaustive
exhaustive impractical small
impractical small instances
exhaustive algorithm problem
queens row column
algorithm generating magic
generating magic squares
traversal arbitrary vertex
visited iteration algorithm
data structure representing
structure representing graph
unvisited vertices algorithm
connected component starting
component starting vertex
starting vertex visited
vertex visited unvisited
visited unvisited vertices
forest tree edges
tree edges shown
edges shown solid
traversal constructing called
serves root tree
root tree forest
tree forest unvisited
forest unvisited vertex
unvisited vertex reached
attached child vertex
child vertex reached
vertex reached edge
reached edge called
edge called tree
called tree edge
edge leading previously
leading previously visited
previously visited vertex
visited vertex predecessor
vertex predecessor parent
predecessor parent tree
traversal graph input
input graph output
output graph vertices
graph vertices marked
vertices marked consecutive
marked consecutive integers
traversal vertex unvisited
unvisited vertex marked
unvisited vertices connected
vertices connected vertex
connected vertex path
vertex path numbers
graph vertices edges
forest undirected graph
tree edges dfs
previously unvisited vertices
vertices reached pushed
stack vertices dead
ends popped stack
applications finding articulation
finding articulation points
traversal starting vertex
bfs based algorithm
minimum edge path
vertices adjacent levels
adjacent levels bfs
levels bfs tree
main facts depth
efficiency adjacency matrix
ties vertex alphabetical
true false dfs
false dfs forests
based algorithm checking
algorithm checking graph
checking graph bipartite
general framework outlined
framework outlined section
efficiency nonrecursive algorithms
analyzing efficiency recursive
indicating input size
constant multiple large
size algorithm runs
input size algorithm
constant multiple infinity
notation definition function
definition function denoted
function denoted bounded
integer definition illustrated
definition illustrated figure
limit based approach
input array real
digits binary representation
recurrence relation additions
executions basic operation
variable uniformly distributed
static algorithm visualization
recursive algorithm computing
solving systems linear
problem maximize subject
path positive length
binary tree set
relating solution problem
comparisons successful searches
length ith vertex
optimal solution instance
values knapsack capacity
vertices numbered vertices
numbered vertices numbered
pairs shortest path
solved algorithm problems
polynomial problem solved
lower bounds efficiency
needed solve problem
decision trees technique
establish lower bounds
based algorithms sorting
sorting searching sorted
called computational complexity
problems continuous mathematics
continuous mathematics solving
mathematics solving equations
systems equations evaluating
equations evaluating func
evaluating func tions
func tions computing
tions computing integrals
algorithm respect algorithms
respect algorithms problem
algorithm problem bound
algorithm lower bound
algorithm matching lower
matching lower bound
prove comparison based
trivial lower bounds
based counting items
counting items problem
items problem input
problem input processed
input processed output
processed output items
output items produced
lower bound algorithm
permutations distinct items
searching element sorted
lower bound based
called information theoretic
adversary method establishing
method establishing lower
lower bounds based
bounds based logic
based logic malevolent
algorithm consuming path
lower bound obtained
encountered problem discussing
lower bound key
bound key comparisons
comparisons comparison based
lower bound problem
solve lower bound
euclidean minimum spanning
multiplying arbitrary square
arbitrary square matrices
section exercises prove
log weighings worst
weighings worst case
connectivity graph vertices
binary decision trees
array decision trees
decision tree element
average comparisons algorithm
element insertion sort
decision tree binary
tree binary element
binary element array
ternary decision trees
decision trees figure
lower bound binary
tree height leaves
design comparison based
sorting element array
worst case draw
coins weighings extra
polynomial algorithm definition
solved polynomial called
seeks classify problems
decision problems answers
definition class decision
solved polynomial deterministic
algorithms class problems
class problems called
polynomial important problems
problems decision problems
adjacent vertices colored
decision problem solved
halting problem input
halts halt input
halt input halt
input halt halts
halt halts input
contributions theoretical science
bin packing problem
vast majority decision
majority decision problems
checking proposed solution
proposed solution solves
solution solves problem
nondeterministic guessing stage
hundreds difficult combinatorial
problem class definition
definition decision problem
problems polynomially reducible
reducible decision version
hamil tonian circuit
hamiltonian circuit length
problem hamiltonian circuit
image instance decision
instance decision traveling
entire expression true
deterministic polynomial algorithm
reducible problem polynomial
hamiltonian circuit eulerian
eulerian circuit graph
size graph subset
independent set size
continuous mathematical problems
truncation error smaller
represented floating numbers
precision significant decimal
absolute error relative
relative error representing
subtracting equal floating
equal floating numbers
relative errors approximations
danger subtractive cancellation
significant digits approximation
iterations newton method
general linear programming
problem optimal solution
vertex free vertex
technique based exploiting
based exploiting relationship
exploiting relationship solution
problem solution smaller
solution smaller instance
relationship established exploited
major variations decrease
variations decrease conquer
decrease conquer decrease
conquer decrease constant
problem figure decrease
instance half size
decrease conquer size
conquer size reduction
size reduction pattern
reduction pattern varies
pattern varies iteration
iteration algorithm euclid
application decrease technique
sorted array size
straight insertion sort
based recursive idea
iteration insertion sort
insertion sort makes
input array sorted
graph directions edges
dfs forest digraph
digraph dfs traversal
dfs forest directed
forest directed graph
starts listed vertex
problem solution digraph
topological sorting digraph
sorting problem solution
sorting problem algorithm
yields solution topological
solution topological sorting
application algorithm digraph
vertex incoming edges
based algorithm topological
source determine vertex
determine vertex digraph
vertex digraph represented
called strongly connected
dfs traversal digraph
algorithms generating combinatorial
discuss algorithms generating
generating permutations smaller
insert left insert
left insert left
trotter algorithm generating
generating permutations input
permutations input positive
integer output permutations
largest mobile element
algorithm generate subsets
element set subsets
subsets bit strings
generate bit strings
bit string based
string based algorithm
nonrecursive algorithm generating
generating binary reflected
decrease conquer algorithm
efficient algorithm searching
index array element
array element equal
case efficiency binary
coins piles coins
recurrence relation weighings
russian peasant method
people positions eliminated
person initial position
initial position person
prove general validity
bit cyclic shift
cyclic shift left
algorithm fake coin
russian peasant algorithm
solution josephus problem
size decrease algorithms
segment elements smaller
segment elements greater
smallest element array
solves selection problem
linear worst case
interpolation variable size
decrease algorithm searching
searching insertion binary
insertion binary tree
decreasing sequence keys
played piles chips
puts opponent winning
opponent winning position
losing positions player
instance nim sum
binary tree classify
tree classify algorithm
classify algorithm variable
algorithm variable size
decrease algorithm efficiency
class algorithm worst
worst case outline
direct application decrease
computational geometry closest
geometry closest pair
problem instance size
sorting algorithm works
input subarray array
subarray array defined
array defined left
defined left indices
left indices output
strictly increasing array
conquer general algorithm
mergesort worst case
comparisons algorithm brute
problem write pseudocode
running worst case
leaves binary tree
tree defined sum
product digits product
approach solving problem
binary tree figure
counting input array
output array elements
array elements sorted
elements sorted nondecreasing
brute algorithm section
string characters called
algorithm searching pattern
pattern characters pattern
mismatching pair encountered
searching patterns binary
patterns binary text
binary text zeros
table average key
traveling salesman problem
worst case comparisons
log worst case
common divisor integers
consecutive integer checking
integer checking algorithm
roots quadratic equation
graph figure adjacency
tree vertices graph
length simple path
collection disjoint subsets
edge connecting vertex
algorithm shortest path
shortest paths vertices
obtained greedy algorithm
spanning tree spanning
tree spanning tree
finding minimum spanning
algorithm prim algorithm
edges shown bold
section greedy algorithm
mum spanning tree
union operations union
algorithm greedy algorithm
input positive integer
points cartesian plane
computing square roots
element uniqueness problem
circuit eulerian circuit
brute algorithm problem
bit string representing
important special case
brute algo rithm
solving problem deter
instance linear programming
state space graph
state space graphs
set subsets set
satisfies constraints problem
typically involves small
involves small localized
improves objective function
objective function algorithm
function algorithm returns
algorithm returns feasible
returns feasible solution
solution optimal stops
greedy algorithm finding
important problems solved
method classic algorithm
important problem maximizing
efficient simplex method
iterative improvement algorithm
improvement algorithm problem
matching problem finding
feasible solution problem
constraints problem feasible
set points defined
points defined inequality
defined inequality comprises
inequality comprises points
comprises points line
largest objective function
points objective function
objective function problem
optimal solution linear
solution linear programming
programming problem optimal
programming problem constraints
points problem feasible
problems feasible region
programming problem unbounded
subject constraints optimal
constraints optimal solution
unbounded feasible region
feasible region optimal
region optimal solution
extreme problem feasible
subject linear programming
objective function extreme
extreme points grow
points grow exponentially
apply simplex method
variables required nonnegative
programming problem standard
feasible solution set
solution set variables
set variables solve
variables solve resulting
solve resulting basic
basic feasible solutions
values objective function
labeled basic variables
basic variables basic
values basic variables
row simplex method
tableau represents optimal
represents optimal solution
objective row possibly
signals fact objective
fact objective function
objective function increasing
function increasing coordinate
means min largest
min largest adjacent
largest adjacent extreme
objective row commonly
row commonly select
commonly select negative
variable basic variable
pivot column pivot
positive entry pivot
ratio dividing row
dividing row entry
row smallest ratio
row departing variable
pivot column ratio
entries pivot row
tableau represents basic
represents basic feasible
entry objective row
steps simplex method
select negative entry
variable pivot column
simplex method called
simplex method algorithm
iterative improvement idea
sequence feasible solutions
sequence adjacent extreme
problem solve linear
programming problem minimize
problem minimize subject
simplex method problem
simplex method solve
primal dual problems
edges vertex called
total material leaving
vertex conservation requirement
network sources sinks
intermediate vertices network
programming problem simplex
xij edge network
path called augmenting
called augmenting path
method ford fulkerson
augmenting path idea
edge capacity uij
augmenting path maximum
augmenting paths shown
connected directed edge
edge positive unused
positive unused capacity
unused capacity rij
capacity rij uij
edge positive xji
edges kind called
edges tail listed
conservation requirement vertex
positive unused capacities
forward edges positive
edges positive flows
edges augmenting path
iteration augmenting path
max min cut
min cut theorem
shown figure augmenting
figure augmenting path
edmonds karp edm
unlabeled vertex connected
connected vertex traversal
vertex traversal directed
traversal directed edge
vertex labeled min
network single source
source single sink
augmenting path sink
maximum application algorithm
final obtained augmenting
obtained augmenting path
directed path source
augment sink path
cut smallest capacity
capacity minimum cut
minimum cut network
sum flows edges
minimum cut capacity
figure algorithm finds
column set uij
cardinality matching largest
iterative improvement technique
bipartite graph matching
matching graph figure
matching shown figure
matching path augmenting
matching obtained augmentation
obtained augmentation matching
augmentation matching augmenting
matching augmenting path
maximum matching figure
matching perfect matching
matching matches vertices
respect matching exists
length alternating edges
free vertices sets
edge free vertex
free vertex adjacent
endpoint augmenting path
finds maximum matching
vertex adjacent free
graph vertices vertex
vertices vertex set
vertex set edges
cardinality matching problem
matching problem bipartite
problem bipartite graph
hall marriage theorem
matching called stable
men set women
position ranking preference
men preferences women
preferences women preferences
lea ann sue
jim tom bob
tom bob jim
bob jim tom
sue jim tom
instance stable marriage
blocking pair marriage
pair marriage matching
marriage problem stable
marriage matching men
matching men women
highest ranked woman
men bob proposed
accepted tom ann
men bob jim
bob jim proposed
rejected tom ann
tom jim sue
men bob tom
bob tom proposed
algorithm yields stable
yields stable matching
stable matching woman
optimal stable matching
efficiency class stable
class stable marriage
marriage matching instance
prove optimal stable
optimal stable marriage
input nonnegative integer
square root function
graph traversal algorithms
problem traveling salesman
connected components graph
edges dfs forest
vertices dead ends
dead ends popped
grows exponentially faster
solving problem directly
problem directly based
extreme points set
points set convex
extreme points convex
boundary convex hull
brute algorithm searching
person assigned job
edge connects vertex
graph bipartite vertices
vertices colored colors
based algorithm matrix
solved brute algorithm
vertex unvisited vertex
graph depth breadth
worst case inputs
algorithm innermost loop
nonnegative integer output
nonnegative integer definition
important algorithms areas
person understand teaching
notion algorithm section
problem solved algorithms
analyzing algorithms section
fundamental data structures
instructions solving problem
legitimate input finite
largest integer divides
gcd euclid algorithm
algorithms computing greatest
euclid algorithm presented
school procedure computing
procedure computing gcd
common elements sorted
elements sorted lists
common divisor positive
divisor positive integers
precision required algorithm
extended euclid algorithm
locker doors closed
input algorithm specifies
algorithm specifies instance
specifies instance problem
capabilities computational device
hungarian american mathematician
case algorithm called
general design techniques
solving problems algorithmically
problems algorithmically applicable
algorithmically applicable variety
applicable variety problems
variety problems areas
problems areas computing
algorithms underlying design
review basic data
basic data structures
algorithms natural language
natural language pseudocode
desirable characteristic algorithm
easier design algorithm
standard formula roots
formula roots quadratic
common divisor algorithm
antoine saint exupe
figure good algorithm
good algorithm result
algorithm result repeated
cabbage solve problem
takes minutes person
minutes person takes
problem types sorting
types sorting searching
sorting searching string
searching string processing
string processing graph
processing graph problems
graph problems combinatorial
combinatorial problems geometric
geometric problems numerical
important sorting algorithms
algorithms searching problem
string sequence characters
sequence characters alphabet
thought collection points
connected line segments
line segments called
segments called edges
wide variety applications
problem mentioned earlier
interested geometric algorithms
problem combinatorial terms
algorithms operate data
important elementary data
elementary data structures
data structures array
structures array linked
item null figure
representing abstract data
data items collection
collection data items
edge directed vertex
vertex called edge
depicted figure vertices
figure adjacency lists
figure weighted graph
path simple length
graph figure path
figure graph connected
figure graph cycles
rooted trees important
vertex free tree
root tree vertices
free tree rooted
efficient access large
access large data
path root vertex
vertex tree figure
length longest simple
height tree levels
tree figure binary
left child vertex
implementation binary tree
child sibling representation
representation tree figure
set unordered collection
unordered collection items
abstract data adt
delete ith element
stack operation sequence
operation sequence starts
element row column
items weights values
weights values knapsack
efficiency space efficiency
graphs represented adjacency
algorithm finding maximum
based idea transformation
instance simplification variety
transform conquer strategy
special property makes
instance simplification representation
simplest case trees
based representation idea
variety transform conquer
efficiency log worst
algo rithm problem
requires log comparisons
runlength runvalue runlength
searches needed justify
algorithm problem quadratic
problem quadratic efficiency
maximum points set
solution original upper
matrix zeros main
arbitrary coefficient matrix
solve upper triangular
yields upper triangular
input matrix column
matrix column vector
column vector output
vector output equivalent
output equivalent upper
triangular matrix values
matrix values column
exchange ith row
coefficient ith column
expensive addition subtraction
substitution stage gaussian
gaussian elimination yields
lower triangular matrix
computing matrix inverse
applying gaussian elimination
gaussian elimination linear
elimination linear equations
method solving equations
elimination solve instance
solve instance problem
instance problem panels
problem panels board
panels board initially
board initially lit
insertion deletion log
efficiency dictionary operations
definition avl tree
avl tree requires
left subtrees node
figure avl tree
avl tree binary
binary tree avl
avl tree numbers
node left subtrees
tree rooted unbalanced
rooted unbalanced node
unbalanced node closest
node closest newly
closest newly inserted
newly inserted leaf
single rotation general
rotation performed key
inserted left subtree
subtree left child
left child tree
left rotation mirror
rotation mirror image
key inserted subtree
rotation tree rooted
rotation figure general
figure general rotation
general rotation avl
avl tree shaded
tree shaded node
shaded node inserted
constructing avl tree
ordered keys children
node key leaf
keys tree nodes
log worst average
avl trees draw
trees draw binary
successively starting tree
tree real numbers
real numbers design
range difference largest
difference largest smallest
largest smallest numbers
smallest numbers tree
numbers tree determine
tree determine worst
smallest largest keys
theoretically important sorting
binary tree keys
parental node algorithm
larger key children
algorithm input array
require key comparisons
key comparisons height
parental dominance requirement
stage maximum deletions
algorithm finding deleting
finding deleting element
wealth literature subject
algorithm evaluating polynomial
input array coefficients
array coefficients polynomial
coefficients polynomial degree
polynomial degree stored
degree stored lowest
stored lowest highest
lowest highest output
highest output polynomial
output polynomial downto
horner optimal algorithm
optimal algorithm polynomial
algorithm polynomial evaluation
exploit binary representation
binary representation exponent
string representing exponent
binary exponentiation method
computes left binary
exponentiation algorithm input
algorithm input binary
input binary digits
digits binary expansion
product compute left
product accumulator algorithm
product term product
horner evaluate polynomial
apply left binary
exponentiation algorithm compute
problem solving strategy
horner polynomial evaluation
computing common multiple
product common prime
common prime factors
graph problem counting
paths length ith
ith vertex graph
vertex graph undirected
undirected directed equals
directed equals element
equals element adjacency
element adjacency matrix
adjacency matrix square
relationship minimization maximization
minimization maximization problems
finding extremum points
optimal decision making
decision making reduced
making reduced instance
variables subject constraints
subject constraints linear
equations linear inequalities
stocks bonds cash
invested stocks bonds
knapsack problem posed
fraction item knapsack
path initial state
initial state vertex
peasant wolf goat
state vertex labeled
vertex labeled pwgc
final state vertex
algorithm computing lcm
edge coloring problem
tiles unordered pair
unordered pair integers
problem easier solve
binary exponentiation algorithms
solving equations systems
equations systems equations
log binary tree
internal nodes tree
binary tree height
average worst cases
finding minimum numbers
set real numbers
finding largest element
lighter heavier genuine
coloring problem graph
key comparisons algorithm
adjacency matrix representation
edges tree edges
euclid algorithm computing
instance problem solution
problem size subproblem
size subproblem size
subproblem size solution
size solution subproblem
solution subproblem solution
subproblem solution original
original problem figure
cworst worst case
generating combinatorial objects
section discuss algorithms
key compared element
function grows slowly
sorted array elements
largest key comparisons
efficiency brute algorithm
algorithm problem section
general framework analyzing
notations big omega
big omega big
omega big theta
section general framework
outlined section systematically
section systematically applied
systematically applied analyzing
applied analyzing efficiency
algorithms main tool
efficiency recursive algorithms
algorithms computing fibonacci
computing fibonacci numbers
framework analyzing efficiency
space efficiency called
runs space efficiency
measuring input size
algorithm efficiency function
efficiency function parameter
function parameter indicating
size bits binary
consuming operation algorithm
operation algorithm innermost
analysis algorithm ficiency
counting times algorithm
inputs size compute
nonrecursive recursive algorithms
algo rithm basic
operation executed algorithm
running implementing algorithm
table values functions
functions important analysis
inputs realistic sizes
difference orders growth
function log increases
case input size
size input inputs
input inputs size
inputs size algorithm
basic operation inputs
operation inputs size
worst case analysis
algorithm runs fastest
sorted arrays algorithm
probability occurring ith
occurring ith position
investigation worst case
worst case efficiencies
efficiency measured counting
extra memory units
memory units consumed
growth algorithm running
input size infinity
largest element numbers
case scenario pairs
formula bits binary
higher growth constant
nonnegative functions defined
functions defined set
asymptotic notations formal
notations formal definitions
multiple large positive
large positive constant
positive constant nonnegative
constant nonnegative integer
constants required definition
big omega notation
denoted bounded positive
bounded positive constant
based approach comparing
approach comparing orders
lim limit equal
exponential functions orders
orders growth values
growth values base
efficiencies large algorithms
large algorithms fall
algorithms fall classes
algorithm asymptotic efficiency
typically characterizes efficiency
characterizes efficiency algorithms
efficiency algorithms embedded
algorithms embedded loops
embedded loops section
typical algorithms generate
listed increasing growth
elements array distinct
efficiency class entire
class entire algorithm
apply general framework
size elements array
general analyzing efficiency
algorithms parameter parameters
parameter parameters indicating
parameters indicating input
size algorithm basic
depends size input
case efficiencies investigated
efficiencies investigated separately
investigated separately set
set sum expressing
rules sum manipulation
recurrence relation times
analyzing recursive algorithms
recursive algorithms section
repetition innermost loop
loop variable limits
based algorithm computing
elements computed scalar
computed scalar dot
input positive decimal
decimal integer output
integer output binary
output binary digits
operation times basic
minval maxval minval
questions problem algorithm
input matrix real
matrix real numbers
cells von neumann
neumann neighborhood range
compute recursive algorithm
multiplications needed compute
recurrence relation initial
relation initial condition
solving recurrence relations
larger disk smaller
recursively disks peg
calls tower hanoi
figure tree recursive
calls recursive algorithm
recurrence recursive calls
algorithm computing sum
algorithm input positive
version tower hanoi
peg disk peg
design recursive algorithm
applications fibonacci numbers
computes nth fibonacci
definition input nonnegative
integer output nth
output nth fibonacci
algorithm computing nth
recursive definition based
analyze data obtained
basic operation physical
operation physical running
instances size included
generating random numbers
pseudo random variable
random variable uniformly
uniformly distributed interval
uniformly distributed integer
distributed integer values
linear congruential method
values sample range
mathematical empirical analyses
empirical analyses algorithms
images convey information
convey information algorithms
principal variations algorithm
variations algorithm visualization
algorithm visualization static
visualization static algorithm
algorithm visualization dynamic
visualization dynamic algorithm
dynamic algorithm visualization
algorithm visualization called
visualization called algorithm
called algorithm animation
figure initial final
initial final screens
final screens typical
screens typical visualization
typical visualization sorting
visualization sorting algorithm
sophisticated software systems
main tool analyzing
tool analyzing efficiency
expressing executions basic
basic operation ascertain
efficient algorithm finding
data structure called
vertices set vertices
algorithm solving systems
positive integer output
subsets element set
idea ghost spoken
ghost spoken charles
spoken charles dickens
charles dickens dynamic
dickens dynamic programming
programming algorithm design
design technique inter
technique inter esting
inter esting history
esting history invented
history invented prominent
invented prominent mathematician
prominent mathematician richard
mathematician richard bellman
richard bellman general
bellman general method
general method optimizing
method optimizing multistage
optimizing multistage decision
multistage decision pro
decision pro cesses
pro cesses word
cesses word programming
word programming technique
programming technique stands
technique stands planning
stands planning refer
planning refer programming
refer programming proving
programming proving important
proving important tool
important tool applied
tool applied mathematics
applied mathematics dynamic
mathematics dynamic programming
dynamic programming tually
programming tually considered
tually considered science
considered science circles
science circles general
circles general algorithm
design technique special
technique special types
special types optimization
types optimization problems
optimization problems view
problems view tech
view tech nique
tech nique dynamic
nique dynamic programming
recurrence relating problem
relating problem solution
problem solution solutions
solution solutions smaller
smaller subproblems solving
subproblems solving overlapping
solving overlapping subproblems
overlapping subproblems dynamic
solving smaller subproblems
smaller subproblems recording
subproblems recording results
problem obtained technique
obtained technique illustrated
technique illustrated revisiting
illustrated revisiting fibonacci
revisiting fibonacci numbers
numbers dis cussed
dis cussed section
cussed section read
section read section
read section discussion
section discussion beautiful
discussion beautiful topic
beautiful topic feel
topic feel temptation
feel temptation read
temptation read succumb
read succumb fibonacci
succumb fibonacci numbers
fibonacci numbers elements
numbers elements sequence
elements sequence defined
initial conditions recurrence
conditions recurrence directly
recurrence directly compute
directly compute nth
nth fibonacci recompute
fibonacci recompute values
recompute values function
values function times
function times figure
times figure problem
figure problem computing
problem computing expressed
computing expressed terms
expressed terms smaller
terms smaller overlapping
smaller overlapping subproblems
overlapping subproblems computing
subproblems computing simply
computing simply elements
simply elements dimensional
elements dimensional array
dimensional array consecutive
array consecutive values
consecutive values starting
values starting view
starting view initial
view initial conditions
initial conditions equation
conditions equation producing
equation producing elements
producing elements element
elements element array
element array single
array single loop
single loop pseudocode
loop pseudocode simple
simple algorithm section
algorithm section fact
section fact extra
fact extra array
extra array accomplish
array accomplish task
accomplish task recording
task recording values
recording values elements
values elements fibonacci
fibonacci sequence problem
sequence problem exercises
problem exercises phenomenon
exercises phenomenon unusual
phenomenon unusual counter
unusual counter examples
counter examples chapter
examples chapter straightforward
chapter straightforward application
straightforward application dynamic
dynamic programming interpreted
programming interpreted special
interpreted special variety
special variety space
variety space dynamic
space dynamic programming
programming algorithm fined
algorithm fined extra
fined extra space
extra space algorithms
space algorithms compute
algorithms compute nth
nth fibonacci computing
fibonacci computing preceding
computing preceding elements
preceding elements sequence
elements sequence section
sequence section typical
section typical algorithm
typical algorithm based
algorithm based classic
based classic dynamic
programming approach solve
approach solve smaller
solve smaller subproblems
smaller subproblems problem
subproblems problem variation
problem variation dynamic
programming approach seeks
approach seeks solving
seeks solving unnecessary
solving unnecessary subproblems
unnecessary subproblems technique
subproblems technique illustrated
technique illustrated section
illustrated section exploits
section exploits called
exploits called memory
called memory functions
memory functions considered
functions considered variation
considered variation dynamic
dynamic programming classical
programming classical version
classical version dynamic
version dynamic programming
dynamic programming variation
programming variation crucial
variation crucial designing
crucial designing algorithm
designing algorithm remains
algorithm remains deriving
remains deriving recurrence
deriving recurrence relating
smaller subproblems availability
subproblems availability equation
availability equation computing
equation computing nth
nth fibonacci exceptions
fibonacci exceptions majority
exceptions majority dynamic
majority dynamic programming
programming applications deal
applications deal optimiza
deal optimiza tion
optimiza tion problems
tion problems mention
problems mention general
mention general principle
general principle underlines
principle underlines applications
underlines applications richard
applications richard bellman
richard bellman called
bellman called principle
called principle optimality
principle optimality terms
optimality terms original
terms original formulation
original formulation optimal
formulation optimal solution
solution instance optimization
instance optimization problem
optimization problem composed
problem composed optimal
composed optimal solutions
optimal solutions subin
solutions subin stances
subin stances principle
stances principle optimality
principle optimality holds
optimality holds rare
holds rare fails
rare fails finding
fails finding longest
finding longest simple
simple path graph
path graph applicability
graph applicability problem
applicability problem checked
problem checked principal
checked principal difficulty
principal difficulty developing
difficulty developing dynamic
developing dynamic ming
ming algorithm sections
algorithm sections exercises
sections exercises chapter
exercises chapter standard
chapter standard examples
standard examples dynamic
examples dynamic programming
programming algorithms section
algorithms section fact
section fact invented
fact invented independently
invented independently discovery
independently discovery dynamic
discovery dynamic programming
dynamic programming viewed
programming viewed examples
viewed examples technique
examples technique applications
technique applications numerous
applications numerous applications
numerous applications range
applications range optimal
range optimal breaking
optimal breaking text
breaking text lines
text lines baa
lines baa image
baa image resizing
image resizing avi
resizing avi variety
avi variety applications
variety applications sophisticated
applications sophisticated engineering
sophisticated engineering problems
engineering problems ber
problems ber basic
ber basic examples
basic examples goal
examples goal section
goal section dynamic
section dynamic programming
dynamic programming typical
programming typical examples
typical examples coin
examples coin row
problem row coins
row coins values
coins values positive
values positive integers
integers necessarily distinct
necessarily distinct goal
distinct goal maximum
goal maximum money
maximum money subject
money subject constraint
subject constraint coins
constraint coins adjacent
coins adjacent initial
adjacent initial row
initial row picked
row picked maximum
picked maximum picked
maximum picked row
picked row coins
row coins derive
coins derive recurrence
derive recurrence partition
recurrence partition allowed
partition allowed coin
allowed coin selections
coin selections groups
selections groups coin
groups coin largest
coin largest group
largest group equal
group equal nth
equal nth coin
nth coin maximum
coin maximum coins
coins maximum group
maximum group equal
group equal definition
equal definition recurrence
definition recurrence subject
recurrence subject obvious
subject obvious initial
obvious initial conditions
conditions max compute
max compute filling
manner similar nth
similar nth fibonacci
nth fibonacci algorithm
fibonacci algorithm fib
algorithm fib section
fib section algorithm
section algorithm coinrow
algorithm coinrow applies
coinrow applies formula
applies formula maximum
formula maximum money
money picked coin
picked coin row
coin row picking
row picking adjacent
picking adjacent coins
adjacent coins input
coins input array
input array positive
array positive integers
indicating coin values
coin values output
values output maximum
output maximum money
money picked max
picked max application
max application algorithm
application algorithm coin
algorithm coin row
coin row denominations
row denominations shown
figure yields maximum
yields maximum pointing
maximum pointing index
pointing index max
index max figure
max figure solving
figure solving coin
row problem dynamic
dynamic programming coin
programming coin row
coin row fact
row fact solved
fact solved problem
solved problem coins
problem coins row
coins row maximum
row maximum coins
coins maximum total
maximum total computations
total computations possibilities
computations possibilities produced
possibilities produced maxima
produced maxima formula
maxima formula application
formula application formula
application formula sum
formula sum means
optimal solution moving
solution moving computing
moving computing maximum
computing maximum produced
maximum produced sum
produced sum means
optimal solution finally
solution finally maximum
finally maximum computing
maximum computing produced
computing produced implying
produced implying coin
implying coin optimal
optimal solution coin
solution coin optimal
optimal solution repeating
solution repeating computations
repeating computations backtracing
computations backtracing information
backtracing information terms
information terms larger
terms larger recorded
larger recorded extra
recorded extra array
extra array values
array values computed
values computed coinrow
computed coinrow largest
coinrow largest money
largest money picked
money picked coins
picked coins composing
coins composing optimal
composing optimal set
optimal set takes
set takes space
takes space superior
space superior alternatives
superior alternatives straightforward
alternatives straightforward topdown
straightforward topdown application
topdown application recurrence
application recurrence solving
recurrence solving problem
solving problem exhaustive
exhaustive problem section
section exercises making
exercises making problem
making problem general
problem general instance
general instance problem
instance problem minimum
problem minimum coins
united states countries
states countries simple
countries simple efficient
simple efficient algorithm
efficient algorithm discussed
algorithm discussed chapter
discussed chapter dynamic
chapter dynamic programming
programming algorithm general
algorithm general case
general case assuming
case assuming availability
assuming availability unlimited
availability unlimited quantities
unlimited quantities coins
quantities coins denominations
coins denominations minimum
denominations minimum coins
minimum coins values
coins values convenient
values convenient define
convenient define obtained
define obtained adding
obtained adding coin
adding coin denomination
coin denomination denominations
denomination denominations select
denominations select minimizing
select minimizing constant
minimizing constant smallest
constant smallest recurrence
smallest recurrence min
recurrence min ndj
min ndj compute
ndj compute filling
manner similar coin
similar coin row
row problem computing
problem computing table
computing table entry
table entry requires
entry requires finding
requires finding minimum
minimum numbers algorithm
numbers algorithm changemaking
algorithm changemaking applies
changemaking applies dynamic
dynamic programming minimum
programming minimum coins
coins denominations input
denominations input positive
positive integer array
integer array increasing
array increasing positive
increasing positive integers
indicating coin denominations
coin denominations output
denominations output minimum
output minimum coins
minimum coins temp
coins temp min
temp min temp
min temp application
temp application algorithm
application algorithm denominations
algorithm denominations shown
figure yields coins
yields coins space
coins space efficiencies
efficiencies algorithm min
algorithm min figure
min figure application
figure application algorithm
application algorithm mincoinchange
algorithm mincoinchange coin
mincoinchange coin denominations
coin denominations coins
denominations coins optimal
coins optimal solution
optimal solution backtrace
solution backtrace computa
backtrace computa tions
computa tions denominations
tions denominations produced
denominations produced minima
produced minima formula
minima formula instance
formula instance considered
instance considered application
considered application formula
application formula minimum
formula minimum produced
minimum produced minimum
produced minimum produced
minimum produced coin
produced coin denomination
coin denomination minimum
denomination minimum coin
minimum coin set
coin set coin
set coin collecting
collecting problem coins
problem coins cells
coins cells board
cells board coin
board coin cell
coin cell robot
cell robot located
robot located upper
located upper left
upper left cell
left cell board
cell board coins
board coins bring
coins bring cell
bring cell robot
cell robot cell
robot cell current
cell current location
current location robot
location robot visits
robot visits cell
visits cell coin
cell coin picks
coin picks coin
picks coin design
coin design algorithm
design algorithm maximum
algorithm maximum coins
maximum coins robot
coins robot path
robot path largest
path largest coins
bring cell ith
cell ith row
row column board
column board cell
board cell adjacent
adjacent cell adjacent
cell left largest
left largest numbers
largest numbers coins
numbers coins brought
coins brought cells
brought cells adjacent
adjacent cells row
cells row adjacent
row adjacent cells
adjacent cells left
cells left cells
left cells column
cells column cells
column cells assume
cells assume equal
assume equal nonexistent
equal nonexistent neighbors
nonexistent neighbors largest
neighbors largest coins
bring cell maximum
cell maximum numbers
maximum numbers coin
numbers coin cell
coin cell words
cell words formula
words formula max
formula max cij
max cij coin
cij coin cell
coin cell cij
cell cij formulas
cij formulas table
formulas table values
table values row
row column typical
column typical dynamic
typical dynamic programming
programming algorithms involving
algorithms involving dimensional
involving dimensional tables
dimensional tables algorithm
tables algorithm robotcoincollection
algorithm robotcoincollection applies
robotcoincollection applies dynamic
dynamic programming compute
programming compute largest
compute largest coins
coins robot board
robot board starting
board starting moving
starting moving upper
moving upper left
left corner input
corner input matrix
input matrix elements
matrix elements equal
elements equal cells
equal cells coin
cells coin output
coin output largest
output largest coins
bring cell max
cell max algorithm
max algorithm illustrated
illustrated figure coin
figure coin setup
coin setup figure
setup figure computing
figure computing formula
computing formula cell
formula cell table
cell table takes
table takes constant
takes constant efficiency
constant efficiency algorithm
efficiency algorithm space
space efficiency tracing
efficiency tracing computations
tracing computations backward
computations backward makes
backward makes optimal
makes optimal path
optimal path optimal
path optimal path
adjacent cell optimal
cell optimal path
cell left cell
left cell direction
cell direction yields
direction yields optimal
yields optimal paths
optimal paths instance
paths instance figure
instance figure shown
shown figure ties
figure ties optimal
ties optimal path
optimal path obtained
path obtained figure
obtained figure coins
figure coins dynamic
coins dynamic programming
programming algorithm results
algorithm results paths
results paths coins
paths coins maximum
coins maximum coins
maximum coins exercises
coins exercises dynamic
exercises dynamic programming
dynamic programming common
programming common conquer
common conquer principal
conquer principal difference
principal difference solve
difference solve instance
solve instance coin
instance coin row
row problem efficiency
problem efficiency solving
row problem straight
problem straight forward
straight forward application
forward application recurrence
application recurrence exponential
recurrence exponential efficiency
exponential efficiency solving
row problem exhaustive
problem exhaustive exponential
exhaustive exponential apply
exponential apply dynamic
programming algorithm solutions
algorithm solutions making
solutions making problem
making problem denominations
problem denominations modify
denominations modify dynamic
modify dynamic programming
programming algorithm coin
algorithm coin collecting
collecting problem cells
problem cells board
cells board inaccessible
board inaccessible robot
inaccessible robot apply
robot apply algorithm
apply algorithm board
algorithm board inaccessible
board inaccessible cells
inaccessible cells shown
cells shown optimal
shown optimal paths
optimal paths board
paths board rod
board rod cutting
rod cutting problem
cutting problem design
problem design dynamic
programming algorithm fol
algorithm fol lowing
fol lowing problem
lowing problem maximum
problem maximum total
maximum total sale
total sale price
sale price obtained
price obtained cutting
obtained cutting rod
cutting rod units
rod units integer
units integer length
integer length pieces
length pieces sale
pieces sale price
sale price piece
price piece units
piece units space
units space efficiencies
efficiencies algorithm shortest
shortest path counting
path counting chess
counting chess rook
chess rook horizontally
rook horizontally vertically
vertically square row
square row column
row column chessboard
column chessboard shortest
chessboard shortest paths
shortest paths rook
paths rook corner
rook corner chessboard
corner chessboard diagonally
chessboard diagonally corner
diagonally corner length
corner length path
length path measured
path measured squares
measured squares passes
squares passes squares
passes squares solve
squares solve problem
solve problem dynamic
programming algorithm elementary
algorithm elementary combinatorics
elementary combinatorics minimum
combinatorics minimum sum
sum descent positive
descent positive integers
positive integers arranged
integers arranged equilateral
arranged equilateral triangle
equilateral triangle numbers
triangle numbers base
numbers base shown
base shown figure
shown figure problem
figure problem smallest
problem smallest sum
smallest sum descent
sum descent triangle
descent triangle apex
triangle apex base
apex base sequence
base sequence adjacent
sequence adjacent numbers
adjacent numbers shown
shown figure circles
figure circles design
circles design dynamic
programming algorithm problem
problem efficiency binomial
efficiency binomial coefficient
binomial coefficient design
coefficient design efficient
algorithm computing bino
computing bino mial
bino mial coefficient
mial coefficient multiplications
coefficient multiplications space
multiplications space efficiencies
efficiencies algorithm longest
algorithm longest path
path dag design
dag design efficient
algorithm finding length
finding length longest
path dag problem
dag problem important
problem important prototype
important prototype dynamic
prototype dynamic programming
programming applications determines
applications determines minimal
determines minimal needed
minimal needed completing
needed completing project
completing project comprising
project comprising precedence
comprising precedence constrained
precedence constrained tasks
constrained tasks coin
tasks coin row
row problem discussed
section problem finding
problem finding longest
finding longest path
path dag maximum
dag maximum square
maximum square submatrix
square submatrix boolean
submatrix boolean matrix
boolean matrix largest
matrix largest square
largest square submatrix
square submatrix elements
submatrix elements zeros
elements zeros design
zeros design dynamic
programming algorithm efficiency
efficiency algorithm finding
finding largest free
largest free square
free square area
square area screen
area screen selecting
screen selecting construction
selecting construction site
construction site world
site world series
world series odds
series odds teams
odds teams playing
teams playing series
playing series games
series games teams
games teams wins
teams wins games
wins games assume
games assume probability
assume probability winning
probability winning game
winning game equal
game equal probability
equal probability losing
probability losing game
losing game ties
game ties probability
ties probability winning
probability winning series
winning series games
win series games
win series set
series set recurrence
recurrence relation dynamic
relation dynamic programming
programming algorithm probability
algorithm probability team
probability team winning
team winning game
winning game series
game series proba
series proba bility
proba bility winning
bility winning game
winning game write
game write pseudocode
programming algorithm solving
problem determine space
determine space efficiencies
space efficiencies knapsack
efficiencies knapsack problem
problem memory functions
memory functions section
functions section designing
section designing dynamic
designing dynamic programming
knapsack problem items
problem items weights
items knapsack problem
knapsack problem introduced
section discussed solving
discussed solving exhaustive
solving exhaustive assume
exhaustive assume weights
assume weights knapsack
weights knapsack capacity
knapsack capacity positive
capacity positive integers
positive integers item
integers item values
item values integers
values integers design
integers design dynamic
programming algorithm derive
algorithm derive recurrence
derive recurrence relation
recurrence relation expresses
relation expresses solution
expresses solution instance
solution instance knapsack
knapsack problem terms
problem terms solutions
terms solutions smaller
solutions smaller subinstances
smaller subinstances instance
subinstances instance defined
instance defined items
defined items weights
capacity optimal solution
solution instance valuable
instance valuable subset
knapsack capacity subsets
capacity subsets items
subsets items knapsack
knapsack capacity categories
capacity categories ith
categories ith item
ith item subsets
item subsets ith
optimal subset definition
subset definition subsets
definition subsets ith
optimal subset items
optimal subset optimal
subset optimal solution
solution feasible subsets
feasible subsets items
subsets items maximum
items maximum values
maximum values ith
values ith item
ith item knapsack
item knapsack optimal
knapsack optimal subset
selected items optimal
items optimal subset
selected items observations
items observations lead
observations lead recurrence
lead recurrence max
recurrence max convenient
max convenient define
convenient define initial
define initial conditions
initial conditions goal
conditions goal maximal
goal maximal subset
maximal subset items
optimal subset figure
subset figure illustrates
figure illustrates values
illustrates values involved
values involved equations
involved equations compute
equations compute entry
compute entry ith
entry ith row
row column compute
column compute maximum
compute maximum entry
maximum entry previous
previous row column
row column sum
column sum entry
sum entry previous
previous row columns
columns left table
left table filled
table filled row
filled row column
row column goal
column goal figure
figure table solving
table solving knapsack
dynamic programming capacity
programming capacity figure
algorithm instance data
instance data item
data item weight
weight capacity dynamic
capacity dynamic programming
programming table filled
table filled applying
filled applying formulas
applying formulas shown
formulas shown figure
figure maximal composition
maximal composition optimal
optimal subset backtracing
subset backtracing computations
backtracing computations entry
computations entry table
entry table item
table item included
item included optimal
included optimal solution
solution optimal subset
optimal subset filling
subset filling remaining
filling remaining units
remaining units knapsack
units knapsack capacity
capacity item optimal
item optimal selection
optimal selection leaves
selection leaves element
leaves element remaining
element remaining composition
remaining composition similarly
composition similarly item
similarly item final
item final optimal
final optimal solution
optimal solution item
solution item efficiency
item efficiency space
efficiency algorithm needed
algorithm needed composition
composition optimal solution
optimal solution asked
solution asked prove
asked prove assertions
prove assertions exercises
assertions exercises memory
exercises memory functions
memory functions discussed
functions discussed beginning
discussed beginning chapter
beginning chapter illustrated
chapter illustrated subsequent
illustrated subsequent sections
subsequent sections dynamic
sections dynamic programming
dynamic programming deals
programming deals problems
deals problems solutions
problems solutions recurrence
solutions recurrence relation
recurrence relation overlapping
relation overlapping subproblems
overlapping subproblems direct
subproblems direct approach
direct approach finding
approach finding solution
finding solution recurrence
solution recurrence leads
recurrence leads algorithm
leads algorithm solves
algorithm solves common
solves common subproblems
common subproblems inefficient
subproblems inefficient typically
inefficient typically exponential
typically exponential worse
exponential worse classic
worse classic dynamic
programming approach works
approach works fills
works fills table
fills table solutions
table solutions smaller
smaller subproblems solved
subproblems solved unsatisfying
solved unsatisfying aspect
unsatisfying aspect approach
aspect approach solutions
approach solutions smaller
smaller subproblems solution
subproblems solution problem
solution problem drawback
problem drawback approach
drawback approach natural
approach natural combine
natural combine strengths
combine strengths approaches
strengths approaches goal
approaches goal method
goal method solves
method solves subproblems
solves subproblems method
subproblems method exists
method exists based
exists based memory
based memory functions
memory functions method
functions method solves
method solves problem
solves problem manner
problem manner addition
manner addition maintains
addition maintains table
maintains table kind
table kind dynamic
kind dynamic programming
programming algorithm initially
algorithm initially table
initially table entries
entries initialized special
initialized special null
special null symbol
null symbol calculated
symbol calculated method
calculated method checks
method checks entry
checks entry table
table entry null
entry null simply
null simply retrieved
simply retrieved table
retrieved table computed
table computed recursive
computed recursive result
recursive result recorded
result recorded table
recorded table algorithm
table algorithm implements
algorithm implements idea
implements idea knapsack
idea knapsack problem
knapsack problem initializing
problem initializing table
initializing table recursive
table recursive function
recursive function called
function called items
called items knapsack
knapsack capacity algorithm
capacity algorithm mfknapsack
algorithm mfknapsack implements
mfknapsack implements memory
implements memory function
knapsack problem input
problem input nonnegative
integer indicating items
indicating items considered
items considered nonnegative
considered nonnegative integer
integer indicating knapsack
indicating knapsack capacity
knapsack capacity output
capacity output optimal
output optimal feasible
optimal feasible subset
feasible subset items
subset items global
items global variables
global variables input
variables input arrays
input arrays eights
arrays eights alues
eights alues table
alues table entries
entries initialized row
initialized row column
row column initialized
column initialized weights
initialized weights mfknapsack
weights mfknapsack max
mfknapsack max mfknapsack
max mfknapsack values
mfknapsack values mfknapsack
values mfknapsack weights
mfknapsack weights apply
weights apply memory
method instance considered
instance considered table
considered table figure
table figure results
figure results nontrivial
results nontrivial values
nontrivial values row
row column computed
column computed capacity
computed capacity figure
function algorithm nontrivial
algorithm nontrivial entry
nontrivial entry retrieved
entry retrieved recomputed
retrieved recomputed larger
recomputed larger instances
larger instances proportion
instances proportion entries
proportion entries significantly
entries significantly larger
significantly larger general
larger general constant
general constant factor
constant factor gain
factor gain memory
gain memory function
knapsack problem efficiency
class algorithm significant
algorithm significant improvement
significant improvement expected
improvement expected dynamic
expected dynamic programming
programming algorithms computation
algorithms computation takes
computation takes constant
takes constant mind
constant mind memory
mind memory function
function algorithm space
space efficient version
efficient version algorithm
version algorithm exercises
algorithm exercises apply
exercises apply dynamic
algorithm instance knapsack
knapsack problem item
problem item weight
weight capacity optimal
capacity optimal subsets
optimal subsets instance
subsets instance general
instance general table
general table generated
generated dynamic ming
ming algorithm optimal
algorithm optimal subset
optimal subset knapsack
subset knapsack problem
problem instance write
instance write pseudocode
knapsack problem write
pseudocode algorithm finds
algorithm finds composition
finds composition optimal
optimal subset table
subset table generated
generated dynamic programming
knapsack prob lem
prob lem prove
lem prove efficiency
prove efficiency space
space efficiency needed
efficiency needed composition
optimal subset filled
subset filled dynamic
filled dynamic programming
programming table true
table true false
sequence values row
values row dynamic
row dynamic programming
programming table knapsack
problem nondecreasing true
nondecreasing true false
sequence values column
values column dynamic
column dynamic ming
dynamic ming table
ming table knapsack
problem nondecreasing design
nondecreasing design dynamic
programming algorithm version
algorithm version knapsack
knapsack problem unlimited
problem unlimited quantities
unlimited quantities copies
quantities copies item
copies item kinds
item kinds efficiency
kinds efficiency algorithm
efficiency algorithm apply
algorithm apply memory
method instance knapsack
knapsack problem entries
problem entries dynamic
entries dynamic programming
programming table computed
table computed memory
computed memory function
function method retrieved
method retrieved recomputation
retrieved recomputation prove
recomputation prove efficiency
prove efficiency class
efficiency class memory
class memory function
function algorithm knap
algorithm knap problem
knap problem algorithm
algorithm problem memory
memory function approach
function approach unattractive
approach unattractive problem
unattractive problem computing
problem computing binomial
computing binomial coefficient
binomial coefficient formula
coefficient formula write
formula write research
write research applications
research applications dynamic
applications dynamic programming
dynamic programming finding
programming finding longest
finding longest common
longest common subsequence
common subsequence sequences
subsequence sequences optimal
sequences optimal string
optimal string editing
string editing minimal
editing minimal triangulation
minimal triangulation polygon
triangulation polygon optimal
polygon optimal binary
optimal binary trees
binary tree important
tree important data
data structures science
structures science principal
science principal applications
principal applications implement
applications implement dictionary
implement dictionary set
dictionary set elements
set elements operations
elements operations searching
insertion deletion probabilities
deletion probabilities figure
probabilities figure binary
trees keys searching
keys searching elements
searching elements set
elements set accumulated
set accumulated data
accumulated data searches
data searches natural
searches natural pose
natural pose optimal
pose optimal binary
binary tree average
tree average comparisons
average comparisons smallest
comparisons smallest simplicity
smallest simplicity limit
simplicity limit discussion
limit discussion minimizing
discussion minimizing average
minimizing average comparisons
comparisons successful method
successful method extended
method extended unsuccessful
extended unsuccessful searches
unsuccessful searches keys
searches keys searched
keys searched probabilities
searched probabilities figure
probabilities figure depicts
figure depicts binary
depicts binary trees
trees keys average
keys average comparisons
comparisons successful trees
successful trees fact
trees fact optimal
fact optimal binary
tree optimal tiny
optimal tiny optimal
tiny optimal tree
optimal tree generating
tree generating binary
generating binary trees
trees keys general
keys general algorithm
general algorithm exhaustive
algorithm exhaustive approach
exhaustive approach unrealistic
approach unrealistic total
unrealistic total binary
total binary trees
trees keys equal
keys equal nth
equal nth catalan
nth catalan grows
catalan grows infinity
grows infinity fast
infinity fast problem
fast problem section
section exercises distinct
exercises distinct keys
distinct keys ordered
keys ordered smallest
ordered smallest largest
smallest largest probabilities
largest probabilities searching
probabilities searching smallest
searching smallest average
smallest average comparisons
comparisons successful binary
successful binary tree
binary tree tij
tree tij keys
tij keys integer
keys integer indices
integer indices classic
indices classic dynamic
programming approach values
approach values smaller
values smaller instances
smaller instances problem
instances problem interested
problem interested derive
interested derive recurrence
derive recurrence underlying
recurrence underlying dynamic
underlying dynamic programming
programming algorithm ways
algorithm ways choose
ways choose root
choose root keys
root keys binary
keys binary tree
figure root key
left subtree tik
subtree tik keys
tik keys optimally
optimally arranged subtree
arranged subtree tkj
subtree tkj optimal
tkj optimal bst
optimal bst figure
bst figure binary
binary tree bst
tree bst root
bst root optimal
optimal binary subtrees
binary subtrees tik
subtrees tik tkj
tik tkj keys
tkj keys optimally
optimally arranged taking
arranged taking advantage
taking advantage principle
advantage principle optimality
principle optimality tree
optimality tree levels
levels starting make
starting make comparison
make comparison numbers
comparison numbers equal
numbers equal keys
equal keys levels
keys levels recurrence
levels recurrence relation
recurrence relation obtained
relation obtained min
obtained min tik
min tik ikj
tik ikj tkj
ikj tkj min
tkj min tik
min tik tkj
tik tkj ikj
tkj ikj min
ikj min ikj
min ikj recurrence
ikj recurrence min
recurrence min ikj
min ikj assume
ikj assume formula
assume formula interpreted
formula interpreted comparisons
interpreted comparisons tree
comparisons tree formula
tree formula implies
formula implies node
implies node binary
node binary tree
binary tree goal
tree goal figure
figure table dynamic
binary tree dimensional
tree dimensional table
dimensional table figure
table figure shows
figure shows values
shows values needed
values needed comput
needed comput ing
comput ing formula
ing formula row
formula row columns
columns left column
left column rows
column rows row
rows row arrows
row arrows pairs
arrows pairs sums
pairs sums computed
sums computed smallest
computed smallest recorded
smallest recorded suggests
recorded suggests filling
suggests filling table
filling table diagonals
table diagonals starting
diagonals starting zeros
starting zeros main
main diagonal probabilities
diagonal probabilities moving
probabilities moving upper
moving upper corner
upper corner algorithm
corner algorithm sketched
algorithm sketched computes
sketched computes average
computes average comparisons
searches optimal binary
tree optimal tree
optimal tree maintain
tree maintain dimensional
maintain dimensional table
dimensional table minimum
table minimum achieved
minimum achieved table
achieved table shape
table shape table
shape table figure
table figure filled
figure filled manner
filled manner starting
manner starting entries
starting entries table
entries table filled
table filled entries
filled entries indices
entries indices roots
indices roots optimal
roots optimal subtrees
optimal subtrees makes
subtrees makes reconstruct
makes reconstruct optimal
reconstruct optimal tree
optimal tree entire
tree entire set
entire set illustrate
set illustrate algorithm
illustrate algorithm applying
algorithm applying key
applying key set
key set beginning
set beginning section
beginning section key
section key probability
key probability initial
probability initial tables
initial tables main
root table compute
table compute min
compute min binary
min binary trees
trees keys root
keys root optimal
optimal tree index
tree index average
index average comparisons
successful tree finish
tree finish computations
finish computations exercises
computations exercises final
exercises final tables
final tables main
root table average
key comparisons optimal
comparisons optimal tree
optimal tree equal
equal root optimal
tree key left
left subtree keys
subtree key specific
key specific structure
specific structure subtrees
structure subtrees roots
subtrees roots consulting
roots consulting root
consulting root table
root table root
table root optimal
optimal tree left
left child root
child root onenode
root onenode tree
onenode tree root
root node optimal
node optimal tree
tree key figure
key figure presents
figure presents optimal
presents optimal tree
optimal tree entirety
tree entirety figure
entirety figure optimal
figure optimal binary
binary tree pseudocode
tree pseudocode dynamic
programming algorithm optimalbst
algorithm optimalbst finds
optimalbst finds optimal
finds optimal binary
binary tree dynamic
tree dynamic programming
dynamic programming input
programming input array
input array probabilities
array probabilities sorted
probabilities sorted keys
sorted keys output
keys output average
output average comparisons
searches optimal bst
optimal bst table
bst table subtrees
table subtrees roots
subtrees roots optimal
roots optimal bst
optimal bst diagonal
bst diagonal minval
diagonal minval kmin
minval kmin sum
kmin sum minval
sum minval sum
minval sum algorithm
sum algorithm space
space efficiency quadratic
quadratic efficiency version
efficiency version algorithm
version algorithm cubic
algorithm cubic careful
cubic careful analysis
careful analysis shows
analysis shows entries
shows entries root
entries root table
root table nondecreasing
table nondecreasing row
nondecreasing row column
row column limits
column limits values
limits values range
values range makes
range makes running
makes running algorithm
running algorithm exercises
algorithm exercises finish
exercises finish computations
finish computations started
computations started section
started section constructing
section constructing optimal
binary tree efficiency
tree efficiency algorithm
algorithm optimalbst cubic
optimalbst cubic space
cubic space efficiency
algorithm optimalbst quadratic
optimalbst quadratic write
quadratic write pseudocode
write pseudocode linear
pseudocode linear algorithm
linear algorithm generates
algorithm generates optimal
generates optimal binary
tree root table
root table devise
table devise compute
devise compute sums
compute sums dynamic
sums dynamic programming
binary tree constant
tree constant sum
constant sum true
sum true false
true false root
false root optimal
tree key highest
key highest probability
highest probability construct
probability construct optimal
construct optimal binary
set keys equally
keys equally searched
equally searched average
searched average comparisons
successful tree distinct
tree distinct binary
distinct binary trees
binary trees constructed
trees constructed set
constructed set orderable
set orderable keys
orderable keys satisfies
keys satisfies recurrence
satisfies recurrence relation
recurrence relation solution
relation solution recurrence
solution recurrence catalan
recurrence catalan numbers
catalan numbers verify
numbers verify assertion
verify assertion growth
assertion growth implication
growth implication exhaustive
implication exhaustive algorithm
exhaustive algorithm constructing
finding optimal binary
binary tree generalize
tree generalize optimal
generalize optimal binary
optimal binary algorithm
binary algorithm taking
algorithm taking account
taking account unsuc
account unsuc cessful
unsuc cessful searches
cessful searches write
searches write pseudocode
write pseudocode memory
pseudocode memory function
memory function optimal
function optimal binary
binary tree problem
tree problem limit
problem limit function
limit function finding
function finding smallest
finding smallest key
smallest key comparisons
comparisons successful matrix
successful matrix chain
matrix chain multiplication
chain multiplication problem
multiplication problem minimizing
problem minimizing total
minimizing total multiplications
multiplications computing product
product matrices dimensions
matrices dimensions assume
dimensions assume intermediate
assume intermediate products
intermediate products matrices
matrices computed brute
computed brute definition
brute definition based
based algorithm matrices
matrices multiplications differ
multiplications differ factor
differ factor ways
factor ways compute
ways compute product
compute product matrices
product matrices design
matrices design dynamic
programming algorithm finding
finding optimal multiplying
optimal multiplying matrices
multiplying matrices warshall
matrices warshall floyd
warshall floyd algorithms
floyd algorithms section
section algorithms warshall
algorithms warshall algorithm
directed graph floyd
graph floyd algorithm
paths problem algorithms
problem algorithms based
algorithms based essentially
based essentially idea
essentially idea exploit
idea exploit relationship
exploit relationship problem
relationship problem simpler
problem simpler smaller
simpler smaller version
smaller version warshall
version warshall floyd
warshall floyd published
floyd published algorithms
published algorithms mention
algorithms mention ing
mention ing dynamic
programming algorithms dynamic
algorithms dynamic programming
dynamic programming flavor
programming flavor considered
flavor considered applications
considered applications tech
applications tech nique
tech nique warshall
nique warshall algorithm
warshall algorithm recall
algorithm recall adjacency
adjacency matrix aij
matrix aij directed
aij directed graph
directed graph boolean
graph boolean matrix
boolean matrix ith
matrix ith row
row column directed
column directed edge
directed edge ith
ith vertex interested
vertex interested matrix
interested matrix information
matrix information existence
information existence directed
existence directed paths
directed paths arbitrary
paths arbitrary lengths
arbitrary lengths vertices
lengths vertices graph
vertices graph matrix
graph matrix called
matrix called transitive
called transitive closure
closure digraph determine
digraph determine constant
determine constant vertex
constant vertex reachable
vertex reachable ith
reachable ith vertex
ith vertex application
vertex application examples
application examples spreadsheet
examples spreadsheet cell
spreadsheet cell changed
cell changed spreadsheet
changed spreadsheet software
spreadsheet software cells
software cells affected
cells affected spreadsheet
affected spreadsheet modeled
spreadsheet modeled digraph
vertices represent spreadsheet
represent spreadsheet cells
spreadsheet cells edges
cells edges cell
edges cell dependencies
cell dependencies transitive
dependencies transitive closure
transitive closure information
closure information software
information software engineering
software engineering transitive
engineering transitive closure
transitive closure investigating
closure investigating data
investigating data control
data control dependencies
control dependencies inheritance
dependencies inheritance testing
inheritance testing oriented
testing oriented software
oriented software electronic
software electronic engineering
electronic engineering redundancy
engineering redundancy identification
redundancy identification generation
identification generation digital
generation digital circuits
digital circuits definition
circuits definition transitive
definition transitive closure
graph vertices defined
vertices defined boolean
defined boolean matrix
boolean matrix tij
matrix tij element
tij element ith
row column exists
column exists nontrivial
exists nontrivial path
nontrivial path directed
ith vertex tij
vertex tij digraph
tij digraph adjacency
transitive closure figure
closure figure generate
figure generate transitive
generate transitive closure
closure digraph depth
digraph depth breadth
depth breadth performing
breadth performing traversal
performing traversal starting
traversal starting ith
starting ith figure
ith figure digraph
figure digraph adjacency
transitive closure vertex
closure vertex information
vertex information vertices
information vertices reachable
vertices reachable columns
reachable columns ith
columns ith row
ith row transitive
row transitive closure
transitive closure traversal
closure traversal vertex
traversal vertex starting
vertex starting yields
starting yields transitive
yields transitive closure
transitive closure entirety
closure entirety method
entirety method traverses
method traverses digraph
traverses digraph times
digraph times algorithm
times algorithm exists
algorithm exists called
exists called warshall
called warshall algorithm
warshall algorithm stephen
algorithm stephen warshall
stephen warshall discovered
warshall discovered war
discovered war convenient
war convenient assume
convenient assume digraph
assume digraph vertices
digraph vertices rows
vertices rows columns
rows columns adjacency
adjacency matrix numbered
matrix numbered warshall
numbered warshall algorithm
warshall algorithm constructs
algorithm constructs transitive
constructs transitive closure
transitive closure series
closure series boolean
series boolean matrices
boolean matrices information
matrices information directed
information directed paths
directed paths digraph
paths digraph specifically
digraph specifically element
matrix equal exists
equal exists directed
vertices paths adjacency
paths adjacency matrix
matrix digraph recall
digraph recall adjacency
adjacency matrix information
matrix information edge
information edge paths
edge paths intermediate
intermediate vertices information
vertices information paths
information paths vertex
paths vertex intermediate
vertex intermediate freedom
intermediate freedom speak
freedom speak general
speak general subsequent
general subsequent matrix
subsequent matrix series
matrix series vertex
series vertex intermediate
intermediate paths predecessor
paths predecessor matrix
predecessor matrix series
matrix series reflects
series reflects paths
reflects paths vertices
paths vertices digraph
vertices digraph intermediate
digraph intermediate digraph
intermediate digraph transitive
digraph transitive closure
transitive closure central
closure central algorithm
central algorithm compute
matrix equal means
equal means exists
exists path ith
numbered higher figure
higher figure changing
figure changing zeros
changing zeros warshall
zeros warshall algorithm
warshall algorithm situations
algorithm situations path
situations path inter
path inter mediate
inter mediate vertices
mediate vertices kth
vertices kth vertex
kth vertex path
vertex path intermediate
path intermediate vertices
higher equal possibility
equal possibility path
possibility path kth
path kth vertex
intermediate vertices loss
vertices loss generality
loss generality assume
generality assume occurs
assume occurs case
occurs case create
case create path
create path property
path property simply
property simply eliminating
simply eliminating vertices
eliminating vertices occurrences
vertices occurrences caveat
occurrences caveat path
caveat path rewritten
path rewritten vertices
rewritten vertices numbered
vertices numbered representation
numbered representation means
representation means exists
numbered higher means
higher means exists
numbered higher proved
higher proved easy
proved easy converse
easy converse assertion
converse assertion true
assertion true formula
true formula generating
formula generating elements
elements matrix formula
matrix formula heart
formula heart warshall
heart warshall algorithm
warshall algorithm formula
algorithm formula implies
formula implies generating
implies generating elements
elements matrix convenient
matrix convenient applying
convenient applying warshall
applying warshall algorithm
warshall algorithm element
algorithm element rij
element rij remains
rij remains element
remains element rij
element rij changed
rij changed element
changed element row
row column element
element column row
column row illustrated
row illustrated figure
illustrated figure application
algorithm digraph figure
digraph figure shown
shown figure existence
figure existence paths
intermediate vertices adjacency
vertices adjacency matrix
adjacency matrix boxed
matrix boxed row
numbered higher vertex
higher vertex path
vertex path boxed
path boxed row
higher paths figure
paths figure application
digraph shown bold
bold pseudocode warshall
warshall algorithm warshall
algorithm warshall implements
warshall implements warshall
implements warshall algorithm
transitive closure input
closure input adjacency
matrix digraph vertices
digraph vertices output
vertices output transitive
output transitive closure
closure digraph observations
digraph observations warshall
observations warshall algorithm
warshall algorithm remarkably
algorithm remarkably succinct
remarkably succinct efficiency
succinct efficiency fact
efficiency fact sparse
fact sparse graphs
adjacency lists traversal
lists traversal based
based algorithm figure
algorithm figure digraph
figure digraph weight
weight matrix distance
matrix distance matrix
distance matrix mentioned
matrix mentioned beginning
beginning section asymptotic
section asymptotic efficiency
asymptotic efficiency warshall
warshall algorithm speed
algorithm speed implementation
speed implementation warshall
implementation warshall algorithm
warshall algorithm inputs
algorithm inputs restructuring
inputs restructuring innermost
restructuring innermost loop
innermost loop problem
loop problem section
exercises make algorithm
make algorithm run
run faster matrix
faster matrix rows
matrix rows bit
rows bit strings
bitwise operation modern
operation modern languages
modern languages space
languages space efficiency
space efficiency warshall
warshall algorithm situation
algorithm situation similar
situation similar computing
similar computing fibonacci
computing fibonacci dynamic
fibonacci dynamic programming
programming algorithms matrices
algorithms matrices recording
matrices recording intermediate
recording intermediate results
intermediate results algorithm
results algorithm fact
algorithm fact unnecessary
fact unnecessary problem
unnecessary problem section
exercises asks avoiding
asks avoiding wasteful
avoiding wasteful memory
wasteful memory finally
memory finally underlying
finally underlying idea
underlying idea warshall
idea warshall algorithm
warshall algorithm applied
algorithm applied general
applied general problem
general problem finding
problem finding lengths
finding lengths shortest
paths weighted graphs
weighted graphs floyd
graphs floyd algorithm
connected graph undirected
undirected directed pairs
directed pairs shortest
problem asks distances
asks distances lengths
vertex vertices variations
vertices variations problem
variations problem involving
problem involving shortest
involving shortest paths
shortest paths graphs
paths graphs important
graphs important applications
important applications communications
applications communications transportation
communications transportation networks
transportation networks operations
networks operations research
operations research studied
research studied years
studied years recent
years recent applications
recent applications pairs
applications pairs shortest
path problem precomputing
problem precomputing distances
precomputing distances motion
distances motion planning
motion planning games
planning games convenient
games convenient lengths
convenient lengths shortest
shortest paths matrix
paths matrix called
matrix called distance
called distance matrix
distance matrix element
matrix element dij
element dij ith
dij ith row
column matrix length
matrix length shortest
shortest path ith
ith vertex figure
vertex figure generate
figure generate distance
generate distance matrix
distance matrix algorithm
matrix algorithm similar
algorithm similar warshall
similar warshall algorithm
warshall algorithm called
algorithm called floyd
called floyd algorithm
floyd algorithm inventor
algorithm inventor robert
inventor robert floyd
robert floyd applicable
floyd applicable undirected
undirected directed weighted
weighted graphs provided
graphs provided floyd
provided floyd explicitly
floyd explicitly referenced
explicitly referenced warshall
referenced warshall paper
warshall paper presenting
paper presenting algorithm
presenting algorithm flo
algorithm flo years
flo years earlier
years earlier bernard
earlier bernard roy
bernard roy published
roy published essentially
published essentially algorithm
essentially algorithm proceedings
algorithm proceedings french
proceedings french academy
french academy sciences
academy sciences roy
sciences roy negative
roy negative length
negative length distance
length distance vertices
distance vertices arbitrarily
vertices arbitrarily small
arbitrarily small repeating
small repeating times
repeating times algorithm
times algorithm enhanced
algorithm enhanced lengths
enhanced lengths shortest
paths vertex pairs
vertex pairs shortest
paths problem section
section exercises floyd
exercises floyd algorithm
floyd algorithm computes
algorithm computes distance
computes distance matrix
distance matrix weighted
matrix weighted graph
graph vertices series
vertices series matrices
series matrices lengths
matrices lengths shortest
shortest paths constraints
paths constraints paths
constraints paths considered
paths considered matrix
considered matrix specifically
matrix specifically element
matrix equal length
vertices paths simply
paths simply weight
graph matrix series
matrix series lengths
series lengths shortest
paths vertices intermediate
vertices intermediate distance
intermediate distance matrix
distance matrix sought
matrix sought warshall
sought warshall algorithm
warshall algorithm compute
column matrix means
matrix means equal
means equal length
numbered higher partition
higher partition paths
partition paths disjoint
paths disjoint subsets
disjoint subsets kth
subsets kth vertex
intermediate paths subset
paths subset intermediate
subset intermediate vertices
higher shortest definition
shortest definition matrices
definition matrices length
matrices length shortest
shortest path subset
path subset graph
subset graph negative
negative length limit
length limit attention
limit attention paths
attention paths subset
paths subset vertex
subset vertex intermediate
intermediate vertex visiting
vertex visiting path
visiting path length
path length paths
length paths vertices
paths vertices numbered
vertices numbered words
numbered words paths
words paths path
paths path intermediate
numbered higher path
higher path intermediate
numbered higher situation
higher situation depicted
situation depicted symbolically
depicted symbolically figure
symbolically figure length
figure length shortest
paths intermediate figure
intermediate figure underlying
figure underlying idea
underlying idea floyd
idea floyd algorithm
floyd algorithm vertices
algorithm vertices numbered
path paths kth
paths kth vertex
kth vertex equal
vertex equal taking
equal taking account
taking account lengths
account lengths shortest
shortest paths subsets
paths subsets leads
subsets leads recurrence
leads recurrence min
recurrence min wij
min wij element
wij element row
row column current
column current distance
current distance matrix
distance matrix replaced
matrix replaced sum
replaced sum elements
sum elements row
elements row column
column row sum
row sum smaller
sum smaller current
smaller current application
current application floyd
floyd algorithm graph
algorithm graph figure
graph figure illustrated
figure pseudocode floyd
pseudocode floyd algorithm
floyd algorithm takes
takes advantage fact
advantage fact matrix
fact matrix sequence
matrix sequence written
sequence written predecessor
written predecessor algorithm
predecessor algorithm floyd
algorithm floyd implements
floyd implements floyd
implements floyd algorithm
paths problem input
problem input weight
input weight matrix
matrix graph negative
negative length output
length output distance
output distance matrix
distance matrix shortest
matrix shortest paths
paths lengths overwritten
lengths overwritten min
overwritten min efficiency
min efficiency floyd
efficiency floyd algorithm
floyd algorithm cubic
cubic efficiency warshall
warshall algorithm chapter
algorithm chapter dijkstra
chapter dijkstra algorithm
dijkstra algorithm method
algorithm method finding
method finding shortest
intermediate vertices simply
vertices simply weight
weight matrix lengths
matrix lengths shortest
shortest path lengths
path lengths shortest
shortest path figure
path figure application
figure application floyd
floyd algorithm digraph
digraph shown updated
shown updated elements
updated elements shown
elements shown bold
shown bold exercises
bold exercises apply
exercises apply warshall
closure digraph fined
digraph fined adjacency
adjacency matrix prove
matrix prove efficiency
prove efficiency warshall
warshall algorithm cubic
cubic efficiency class
efficiency class warshall
class warshall algorithm
warshall algorithm inferior
algorithm inferior traversal
inferior traversal based
based algorithm sparse
algorithm sparse graphs
adjacency lists implement
lists implement warshall
implement warshall algorithm
warshall algorithm extra
extra memory storing
memory storing elements
storing elements algorithm
elements algorithm intermediate
algorithm intermediate matrices
intermediate matrices restructure
matrices restructure innermost
restructure innermost loop
loop algorithm warshall
algorithm warshall make
warshall make run
make run faster
run faster inputs
faster inputs rewrite
inputs rewrite pseudocode
rewrite pseudocode warshall
warshall algorithm assuming
algorithm assuming matrix
assuming matrix rows
matrix rows represented
rows represented bit
represented bit strings
bitwise operation formed
operation formed warshall
formed warshall algorithm
warshall algorithm determine
algorithm determine digraph
determine digraph dag
acyclic graph good
graph good algorithm
algorithm problem good
problem good idea
good idea apply
idea apply warshall
transitive closure undirected
closure undirected graph
undirected graph solve
graph solve pairs
solve pairs shortest
path problem digraph
problem digraph weight
prove matrix sequence
matrix sequence floyd
sequence floyd algorithm
floyd algorithm written
algorithm written predecessor
written predecessor graph
predecessor graph digraph
graph digraph negative
digraph negative weights
negative weights floyd
weights floyd algorithm
floyd algorithm yield
algorithm yield result
yield result enhance
result enhance floyd
enhance floyd algorithm
floyd algorithm shortest
algorithm shortest paths
paths lengths jack
lengths jack straws
jack straws game
straws game jack
game jack straws
jack straws plastic
straws plastic wooden
plastic wooden straws
wooden straws dumped
straws dumped table
dumped table players
table players disturbing
players disturbing straws
disturbing straws concerned
straws concerned pairs
concerned pairs straws
straws connected path
connected path touching
path touching straws
touching straws endpoints
straws endpoints straws
endpoints straws dumped
straws dumped large
dumped large piece
large piece graph
piece graph paper
graph paper determine
paper determine pairs
determine pairs straws
straws connected touching
connected touching connecting
touching connecting straws
connecting straws connected
straws connected indirectly
connected indirectly connected
indirectly connected straws
connected straws east
straws east central
east central regionals
central regionals acm
regionals acm international
acm international collegiate
international collegiate programming
collegiate programming contest
programming contest summary
contest summary dynamic
summary dynamic programming
smaller subproblems dynamic
solving smaller subproblem
smaller subproblem recording
subproblem recording results
problem obtained applicability
obtained applicability dynamic
applicability dynamic programming
dynamic programming optimization
programming optimization problem
optimization problem requires
problem requires problem
requires problem principle
problem principle optimality
principle optimality optimal
optimality optimal solution
optimal solution instances
solution instances optimal
instances optimal solutions
optimal solutions subinstances
solutions subinstances problems
subinstances problems making
problems making problem
making problem arbitrary
problem arbitrary coin
arbitrary coin denominations
coin denominations solved
denominations solved dynamic
solved dynamic programming
dynamic programming solving
programming solving knapsack
programming algorithm exemplifies
algorithm exemplifies application
exemplifies application technique
application technique difficult
technique difficult problems
difficult problems combinatorial
problems combinatorial optimization
combinatorial optimization memory
optimization memory function
memory function technique
function technique seeks
technique seeks combine
seeks combine strengths
combine strengths topdown
strengths topdown approaches
topdown approaches solving
overlapping subproblems solving
subproblems solving fashion
solving fashion subproblems
fashion subproblems problem
subproblems problem recording
problem recording solutions
recording solutions table
solutions table dynamic
dynamic programming constructing
programming constructing optimal
set keys probabilities
keys probabilities searching
probabilities searching warshall
searching warshall algorithm
warshall algorithm finding
algorithm finding transitive
finding transitive closure
transitive closure floyd
closure floyd algorithm
paths problem based
based idea interpreted
idea interpreted application
interpreted application dynamic
section important problem
cnxn subject ainxn
solving linear programming
bounded feasible region
pivot row pivot
row pivot row
single source single
free vertex free
bfs traversal graph
set men set
problems computational geometry
sort input array
output array sorted
array sorted nondecreasing
basic operation algorithm
matrix representation adjacency
straight line points
algorithm matrix multiplication
efficiency class brute
convex polygon vertices
determine worst case
computing square root
traversal graph traversal
algorithm average case
array real numbers
binary digits binary
represented adjacency lists
prays miracle prayer
miracle prayer reduces
prayer reduces great
reduces great god
great god grant
god grant ivan
grant ivan turgenev
ivan turgenev russian
turgenev russian novelist
russian novelist short
novelist short story
short story writer
story writer conquer
writer conquer general
design technique fame
technique fame catchy
fame catchy deserved
catchy deserved efficient
deserved efficient algorithms
efficient algorithms specific
algorithms specific implementations
specific implementations general
implementations general strategy
general strategy conquer
strategy conquer algorithms
conquer algorithms general
algorithms general problem
general problem divided
problem divided subproblems
divided subproblems ideally
equal size subproblems
size subproblems solved
subproblems solved typically
solved typically recursively
typically recursively dif
recursively dif ferent
dif ferent algorithm
ferent algorithm employed
algorithm employed subproblems
employed subproblems small
subproblems small solutions
small solutions subproblems
solutions subproblems combined
subproblems combined solution
combined solution original
original problem conquer
problem conquer technique
conquer technique diagrammed
technique diagrammed figure
diagrammed figure depicts
figure depicts case
depicts case dividing
case dividing problem
dividing problem smaller
smaller subproblems widely
subproblems widely occurring
widely occurring case
occurring case conquer
case conquer algorithms
conquer algorithms designed
designed executed single
executed single processor
single processor problem
processor problem computing
problem computing sum
sum numbers problem
numbers problem instances
instances problem compute
problem compute sum
sum numbers compute
numbers compute sum
compute sum remaining
sum remaining numbers
remaining numbers simply
numbers simply sums
simply sums computed
sums computed applying
computed applying method
applying method recursively
method recursively values
recursively values sum
values sum efficient
sum efficient compute
efficient compute sum
sum numbers moment
numbers moment reflection
moment reflection efficient
reflection efficient brute
efficient brute summation
brute summation problem
summation problem size
problem figure conquer
figure conquer technique
conquer technique typical
technique typical case
typical case small
case small summing
small summing numbers
summing numbers algorithm
numbers algorithm formal
formal analysis common
analysis common sense
common sense compute
sense compute sums
compute sums lead
sums lead negative
lead negative conquer
negative conquer algorithm
conquer algorithm necessarily
necessarily efficient brute
efficient brute solution
brute solution prayers
solution prayers goddess
prayers goddess algorithmics
goddess algorithmics chapter
algorithmics chapter epigraph
chapter epigraph answered
epigraph answered spent
answered spent executing
spent executing conquer
executing conquer turns
conquer turns significantly
turns significantly smaller
significantly smaller solving
smaller solving problem
solving problem method
problem method fact
method fact conquer
fact conquer approach
conquer approach yields
approach yields important
yields important efficient
important efficient algorithms
efficient algorithms science
algorithms science discuss
science discuss classic
discuss classic examples
classic examples algorithms
examples algorithms chapter
algorithms chapter sequential
chapter sequential algorithms
sequential algorithms keeping
algorithms keeping mind
keeping mind conquer
mind conquer technique
conquer technique ideally
technique ideally suited
ideally suited parallel
suited parallel computations
parallel computations subproblem
computations subproblem solved
subproblem solved simultaneously
solved simultaneously processor
simultaneously processor conquer
processor conquer algorithm
algorithm called pairwise
called pairwise summation
pairwise summation substantially
summation substantially accumulated
substantially accumulated error
accumulated error sum
error sum numbers
sum numbers represented
represented approximately digital
approximately digital hig
digital hig mentioned
hig mentioned typical
mentioned typical case
typical case conquer
case conquer problem
conquer problem instance
instances size generally
size generally instance
generally instance size
instances size needing
size needing solved
needing solved constants
solved constants assuming
constants assuming size
assuming size power
size power simplify
power simplify analysis
simplify analysis recurrence
analysis recurrence running
recurrence running function
running function accounts
function accounts spent
accounts spent dividing
spent dividing instance
dividing instance size
instance size instances
instances size combining
size combining solutions
combining solutions sum
solutions sum recurrence
sum recurrence called
recurrence called general
called general conquer
general conquer recurrence
conquer recurrence growth
recurrence growth solution
growth solution depends
solution depends values
depends values constants
values constants growth
constants growth function
growth function efficiency
function efficiency analysis
efficiency analysis conquer
analysis conquer algorithms
conquer algorithms greatly
algorithms greatly simplified
greatly simplified theorem
simplified theorem appendix
theorem appendix master
appendix master theorem
master theorem recurrence
theorem recurrence log
recurrence log nlogb
log nlogb analogous
nlogb analogous results
analogous results hold
results hold notations
hold notations recurrence
notations recurrence additions
recurrence additions conquer
additions conquer sum
conquer sum computation
sum computation algorithm
computation algorithm inputs
inputs size nlogb
size nlogb nlog
nlogb nlog solution
nlog solution efficiency
solution efficiency class
efficiency class drudgery
class drudgery solving
drudgery solving recurrence
solving recurrence approach
recurrence approach establish
approach establish solution
solution growth unknown
growth unknown multiplicative
unknown multiplicative constant
multiplicative constant solving
constant solving recurrence
solving recurrence equation
recurrence equation specific
equation specific initial
specific initial condition
initial condition yields
condition yields exact
yields exact powers
exact powers pointing
powers pointing recurrence
pointing recurrence covers
recurrence covers decreaseby
covers decreaseby constant
decreaseby constant factor
factor algorithms discussed
discussed previous chapter
previous chapter fact
chapter fact people
fact people algorithms
people algorithms binary
algorithms binary degenerate
binary degenerate cases
degenerate cases andconquer
cases andconquer subproblems
andconquer subproblems half
subproblems half size
half size solved
size solved decrease
solved decrease constant
constant factor divideand
factor divideand conquer
divideand conquer design
conquer design paradigms
design paradigms mergesort
paradigms mergesort perfect
mergesort perfect successful
perfect successful application
successful application conquer
conquer technique sorts
technique sorts array
sorts array dividing
array dividing halves
dividing halves sorting
recursively merging smaller
merging smaller sorted
smaller sorted arrays
sorted arrays single
arrays single sorted
single sorted algorithm
sorted algorithm mergesort
algorithm mergesort sorts
mergesort sorts array
sorts array recursive
array recursive mergesort
recursive mergesort input
mergesort input array
sorted nondecreasing mergesort
nondecreasing mergesort merge
mergesort merge merging
merge merging sorted
merging sorted arrays
sorted arrays pointers
arrays pointers array
pointers array indices
array indices initialized
indices initialized elements
initialized elements arrays
elements arrays merged
arrays merged elements
merged elements pointed
elements pointed compared
pointed compared smaller
compared smaller added
smaller added array
added array constructed
array constructed index
constructed index smaller
index smaller element
smaller element incremented
element incremented successor
incremented successor array
successor array copied
array copied operation
copied operation repeated
operation repeated arrays
repeated arrays exhausted
arrays exhausted remaining
exhausted remaining elements
elements array copied
array copied array
copied array algorithm
array algorithm merge
algorithm merge merges
merge merges sorted
merges sorted arrays
sorted array input
array input arrays
input arrays sorted
arrays sorted output
sorted output sorted
output sorted array
array elements operation
elements operation algorithm
illustrated figure mergesort
figure mergesort operation
mergesort operation efficient
operation efficient mergesort
efficient mergesort assuming
mergesort assuming simplicity
assuming simplicity power
simplicity power recurrence
key comparisons cmerge
comparisons cmerge analyze
cmerge analyze cmerge
analyze cmerge key
cmerge key comparisons
key comparisons performed
comparisons performed merging
performed merging stage
merging stage comparison
stage comparison total
comparison total elements
total elements arrays
elements arrays needing
arrays needing processed
needing processed reduced
processed reduced worst
reduced worst case
worst case arrays
case arrays element
arrays element smaller
element smaller elements
smaller elements alternating
elements alternating arrays
alternating arrays worst
worst case cmerge
case cmerge recurrence
cmerge recurrence cworst
recurrence cworst master
cworst master theorem
master theorem cworst
theorem cworst log
cworst log fact
log fact easy
fact easy exact
easy exact solution
exact solution worst
solution worst case
case recurrence cworst
recurrence cworst log
worst case theoretical
case theoretical minimum
theoretical minimum general
minimum general comparison
sorting algorithm large
algorithm large comparisons
large comparisons algo
comparisons algo rithm
algo rithm average
average case turns
case turns gon
turns gon log
gon log noteworthy
log noteworthy advantage
noteworthy advantage mergesort
advantage mergesort quick
mergesort quick sort
quick sort heapsort
sort heapsort important
heapsort important advanced
important advanced sorting
sorting algorithms discussed
algorithms discussed stability
discussed stability problem
stability problem section
section exercises principal
exercises principal short
principal short coming
short coming mergesort
coming mergesort linear
mergesort linear extra
linear extra storage
extra storage algorithm
storage algorithm requires
algorithm requires merging
requires merging resulting
merging resulting algorithm
resulting algorithm complicated
algorithm complicated theoretical
complicated theoretical main
theoretical main ideas
main ideas leading
ideas leading variations
leading variations mergesort
variations mergesort algorithm
mergesort algorithm implemented
algorithm implemented merging
implemented merging pairs
merging pairs array
array elements merging
elements merging sorted
merging sorted pairs
sorted pairs power
pairs power slight
power slight bookkeeping
slight bookkeeping complications
bookkeeping complications arise
complications arise avoids
arise avoids space
avoids space overhead
space overhead stack
overhead stack recursive
stack recursive calls
recursive calls sorted
calls sorted parts
sorted parts sort
parts sort recursively
sort recursively merge
recursively merge scheme
merge scheme sorting
scheme sorting files
sorting files residing
files residing secondary
residing secondary memory
secondary memory devices
memory devices called
devices called multiway
called multiway mergesort
multiway mergesort exercises
mergesort exercises write
algorithm finding sition
finding sition largest
sition largest element
element array numbers
numbers algorithm output
algorithm output arrays
output arrays elements
arrays elements largest
elements largest set
largest set solve
algorithm finding values
finding values largest
values largest smallest
smallest elements array
array numbers set
numbers set solve
conquer algorithm exponenti
algorithm exponenti ation
exponenti ation problem
problem computing positive
integer set solve
multiplications algorithm section
algorithm section theoretical
section theoretical minimum
theoretical minimum log
minimum log algorithm
log algorithm brute
algorithm problem mentioned
problem mentioned chapter
mentioned chapter logarithm
chapter logarithm bases
logarithm bases irrelevant
bases irrelevant contexts
irrelevant contexts arising
contexts arising analyzing
arising analyzing algorithm
efficiency class true
class true asser
true asser tions
asser tions master
tions master theorem
master theorem logarithms
theorem logarithms growth
logarithms growth solutions
growth solutions recurrences
solutions recurrences apply
recurrences apply mergesort
apply mergesort sort
mergesort sort alphabetical
sort alphabetical mergesort
alphabetical mergesort stable
mergesort stable sorting
sorting algorithm solve
case assume set
assume set recurrence
comparisons mergesort case
mergesort case inputs
case inputs solve
inputs solve set
relation key moves
key moves version
moves version mergesort
version mergesort section
mergesort section taking
section taking key
taking key moves
key moves account
moves account algorithm
account algorithm efficiency
real numbers pair
numbers pair inversion
pair inversion numbers
inversion numbers design
numbers design log
design log algorithm
log algorithm counting
algorithm counting inversions
counting inversions implement
inversions implement version
implement version mergesort
version mergesort language
mergesort language choice
language choice tromino
choice tromino puzzle
tromino puzzle tromino
puzzle tromino accurately
tromino accurately tromino
accurately tromino shaped
tromino shaped tile
shaped tile formed
tile formed squares
formed squares problem
squares problem chess
problem chess board
chess board missing
board missing square
missing square trominoes
square trominoes oriented
trominoes oriented arbitrary
oriented arbitrary squares
arbitrary squares board
squares board missing
board missing overlaps
missing overlaps gol
overlaps gol design
gol design conquer
algorithm problem quicksort
problem quicksort important
quicksort important sorting
algorithm based conquer
based conquer approach
conquer approach mergesort
approach mergesort divides
mergesort divides input
divides input elements
input elements position
elements position array
position array quicksort
array quicksort divides
quicksort divides encountered
divides encountered idea
encountered idea array
idea array partition
array partition section
partition section discussed
section discussed selection
discussed selection problem
selection problem partition
problem partition arrangement
partition arrangement array
arrangement array elements
array elements left
left element equal
element equal elements
equal elements greater
greater equal partition
equal partition achieved
partition achieved final
achieved final position
sorted array sorting
array sorting subarrays
sorting subarrays left
subarrays left independently
left independently method
independently method difference
method difference mergesort
difference mergesort division
mergesort division problem
division problem subproblems
problem subproblems entire
subproblems entire combining
entire combining solutions
combining solutions entire
solutions entire division
entire division stage
division stage required
stage required combine
required combine solutions
combine solutions subproblems
solutions subproblems pseudocode
subproblems pseudocode quicksort
pseudocode quicksort algorithm
quicksort algorithm quicksort
algorithm quicksort sorts
quicksort sorts subarray
sorts subarray quicksort
subarray quicksort input
quicksort input subarray
indices output subarray
output subarray sorted
subarray sorted nondecreasing
sorted nondecreasing partition
nondecreasing partition split
split position quicksort
position quicksort partition
quicksort partition algorithm
algorithm lomuto partition
lomuto partition discussed
partition discussed section
discussed section alternatively
section alternatively partition
alternatively partition generally
partition generally subarray
generally subarray sophisticated
subarray sophisticated method
sophisticated method suggested
method suggested hoare
suggested hoare prominent
hoare prominent british
prominent british scientist
british scientist invented
scientist invented quicksort
invented quicksort hoare
quicksort hoare age
hoare age invented
age invented algorithm
invented algorithm sort
algorithm sort words
sort words machine
words machine translation
machine translation project
translation project russian
project russian english
russian english hoare
english hoare thought
hoare thought bubblesort
thought bubblesort amazing
bubblesort amazing luck
amazing luck thought
luck thought quicksort
thought quicksort hard
quicksort hard assessment
hard assessment lucky
assessment lucky wonderful
lucky wonderful career
wonderful career computing
career computing discovering
computing discovering sorting
discovering sorting algorithm
sorting algorithm hoa
algorithm hoa years
hoa years received
years received turing
received turing award
turing award fundamental
award fundamental contributions
fundamental contributions definition
contributions definition design
definition design programming
design programming languages
programming languages knighted
languages knighted services
knighted services education
services education science
education science selecting
science selecting pivot
selecting pivot element
pivot element respect
element respect subarray
respect subarray strategies
subarray strategies selecting
strategies selecting pivot
selecting pivot issue
pivot issue analyze
issue analyze algorithm
analyze algorithm efficiency
algorithm efficiency simplest
efficiency simplest strategy
simplest strategy selecting
strategy selecting subarray
selecting subarray element
subarray element lomuto
element lomuto algorithm
lomuto algorithm scan
algorithm scan subarray
scan subarray ends
subarray ends comparing
ends comparing subarray
comparing subarray elements
subarray elements pivot
elements pivot left
starts element elements
element elements smaller
smaller pivot left
pivot left subarray
left subarray scan
skips elements smaller
smaller pivot stops
encountering element greater
greater equal pivot
equal pivot left
starts element subarray
element subarray elements
subarray elements larger
larger pivot subarray
pivot subarray scan
skips elements larger
larger pivot stops
encountering element smaller
equal pivot stopping
pivot stopping scans
stopping scans encountering
scans encountering element
encountering element equal
element equal pivot
equal pivot yield
pivot yield splits
yield splits arrays
splits arrays lot
arrays lot duplicates
lot duplicates makes
duplicates makes algorithm
makes algorithm run
run faster array
faster array equal
equal elements split
elements split subarrays
split subarrays sizes
subarrays sizes reducing
sizes reducing problem
reducing problem size
problem size scanning
size scanning entire
scanning entire array
entire array scans
array scans situations
scans situations arise
situations arise depending
arise depending scanning
depending scanning indices
indices crossed scanning
crossed scanning indices
indices crossed simply
crossed simply exchange
simply exchange resume
exchange resume scans
resume scans incrementing
scans incrementing decrementing
incrementing decrementing scanning
decrementing scanning indices
indices crossed partitioned
crossed partitioned subarray
partitioned subarray exchanging
subarray exchanging pivot
exchanging pivot finally
pivot finally scanning
finally scanning indices
pointing equal subarray
equal subarray partitioned
subarray partitioned split
partitioned split position
split position combine
position combine case
combine case crossed
case crossed indices
crossed indices exchanging
indices exchanging pivot
exchanging pivot pseudocode
pivot pseudocode implementing
procedure algorithm hoarepartition
algorithm hoarepartition partitions
hoarepartition partitions subarray
partitions subarray hoare
subarray hoare algorithm
hoare algorithm element
output partition split
split position returned
position returned function
returned function swap
function swap undo
swap undo swap
undo swap index
swap index subarray
index subarray bounds
subarray bounds pseudocode
bounds pseudocode checking
pseudocode checking possibility
checking possibility index
possibility index incremented
index incremented append
incremented append array
append array sentinel
array sentinel index
sentinel index advancing
index advancing position
advancing position sophisticated
position sophisticated method
sophisticated method pivot
method pivot selection
pivot selection mentioned
selection mentioned section
mentioned section makes
section makes sentinel
makes sentinel unnecessary
sentinel unnecessary sorting
unnecessary sorting array
sorting array quicksort
array quicksort figure
quicksort figure discussion
figure discussion quicksort
discussion quicksort efficiency
quicksort efficiency noting
efficiency noting key
noting key comparisons
key comparisons partition
comparisons partition achieved
partition achieved scanning
achieved scanning indices
scanning indices coincide
indices coincide splits
coincide splits middle
splits middle subarrays
middle subarrays case
subarrays case key
key comparisons case
comparisons case satisfies
case satisfies recurrence
satisfies recurrence cbest
recurrence cbest master
cbest master theorem
master theorem cbest
theorem cbest log
cbest log solving
log solving yields
solving yields cbest
yields cbest log
cbest log worst
worst case splits
case splits skewed
splits skewed extreme
skewed extreme subarrays
extreme subarrays size
subarrays size subarray
size subarray partitioned
subarray partitioned unfortunate
partitioned unfortunate situation
unfortunate situation increasing
situation increasing arrays
increasing arrays inputs
arrays inputs problem
inputs problem solved
problem solved strictly
solved strictly increasing
increasing array pivot
array pivot left
left scan left
scan left scan
left scan indicating
scan indicating split
indicating split position
split position figure
position figure quicksort
figure quicksort operation
quicksort operation array
operation array transformations
array transformations pivots
transformations pivots shown
pivots shown bold
shown bold tree
bold tree recursive
recursive calls quicksort
calls quicksort input
quicksort input values
input values subarray
values subarray bounds
subarray bounds split
bounds split position
split position partition
position partition obtained
partition obtained making
obtained making comparisons
making comparisons partition
comparisons partition exchanging
partition exchanging pivot
exchanging pivot algorithm
pivot algorithm left
algorithm left strictly
left strictly increasing
increasing array sort
array sort sorting
sort sorting strictly
sorting strictly increasing
strictly increasing arrays
increasing arrays diminishing
arrays diminishing sizes
diminishing sizes processed
sizes processed total
processed total key
comparisons equal cworst
equal cworst utility
cworst utility quicksort
utility quicksort average
average case behavior
case behavior cavg
behavior cavg average
cavg average key
key comparisons quicksort
comparisons quicksort randomly
quicksort randomly ordered
ordered array size
array size partition
size partition position
partition position comparisons
position comparisons achieve
comparisons achieve partition
achieve partition left
partition left subarrays
left subarrays elements
subarrays elements assuming
elements assuming partition
assuming partition split
split position probability
position probability recurrence
probability recurrence relation
recurrence relation cavg
relation cavg solution
cavg solution trickier
solution trickier worst
trickier worst case
worst case analyses
case analyses turns
analyses turns cavg
turns cavg log
cavg log average
log average quicksort
average quicksort makes
quicksort makes comparisons
makes comparisons case
comparisons case innermost
case innermost loop
innermost loop efficient
loop efficient runs
efficient runs faster
runs faster mergesort
faster mergesort heapsort
mergesort heapsort log
heapsort log algorithm
log algorithm discuss
algorithm discuss chapter
discuss chapter randomly
chapter randomly ordered
ordered arrays nontrivial
arrays nontrivial sizes
nontrivial sizes justifies
sizes justifies algorithm
justifies algorithm inventor
algorithm inventor quicksort
inventor quicksort importance
quicksort importance persistent
importance persistent efforts
efforts years refine
years refine basic
refine basic algorithm
basic algorithm improvements
algorithm improvements discovered
improvements discovered researchers
discovered researchers pivot
researchers pivot selection
pivot selection methods
selection methods randomized
methods randomized quicksort
randomized quicksort random
quicksort random element
random element median
element median method
median method median
method median leftmost
median leftmost rightmost
leftmost rightmost middle
rightmost middle element
middle element array
element array switching
array switching insertion
switching insertion sort
insertion sort small
sort small subarrays
small subarrays elements
subarrays elements systems
elements systems sorting
systems sorting small
sorting small subarrays
small subarrays finishing
subarrays finishing algorithm
finishing algorithm insertion
insertion sort applied
sort applied entire
applied entire sorted
entire sorted array
sorted array modifications
array modifications partitioning
modifications partitioning algorithm
partitioning algorithm partition
algorithm partition segments
partition segments smaller
segments smaller equal
equal larger pivot
larger pivot problem
pivot problem section
section exercises robert
exercises robert sedgewick
robert sedgewick sed
sedgewick sed world
sed world leading
world leading expert
leading expert quicksort
expert quicksort improvements
quicksort improvements combination
improvements combination cut
combination cut running
cut running algorithm
running algorithm sorting
sorting algorithm quicksort
algorithm quicksort weaknesses
quicksort weaknesses stable
weaknesses stable requires
stable requires stack
requires stack parameters
stack parameters subarrays
parameters subarrays sorted
subarrays sorted size
sorted size stack
size stack log
stack log sorting
log sorting smaller
sorting smaller subarrays
smaller subarrays obtained
subarrays obtained partitioning
obtained partitioning worse
partitioning worse space
worse space efficiency
space efficiency heapsort
efficiency heapsort sophisticated
heapsort sophisticated ways
sophisticated ways choosing
ways choosing pivot
choosing pivot make
pivot make quadratic
make quadratic running
quadratic running worst
worst case eliminate
case eliminate completely
eliminate completely performance
completely performance randomly
performance randomly ordered
ordered arrays sensitive
arrays sensitive implementation
sensitive implementation details
implementation details algorithm
details algorithm architecture
algorithm architecture data
architecture data february
data february issue
february issue computing
issue computing science
computing science engineering
science engineering joint
engineering joint publication
joint publication american
publication american institute
american institute physics
institute physics ieee
physics ieee society
ieee society selected
society selected quicksort
selected quicksort algorithms
quicksort algorithms greatest
algorithms greatest development
greatest development practice
development practice science
practice science engineering
science engineering century
engineering century exercises
century exercises apply
exercises apply quicksort
apply quicksort sort
quicksort sort alphabetical
sort alphabetical draw
alphabetical draw tree
recursive calls partitioning
calls partitioning procedure
partitioning procedure outlined
procedure outlined section
outlined section prove
section prove scanning
pointing equal prove
equal prove scanning
scanning indices element
indices element position
element position left
position left pointed
left pointed showing
pointed showing quicksort
showing quicksort stable
quicksort stable sorting
sorting algorithm array
algorithm array elements
array elements sentinel
elements sentinel mentioned
sentinel mentioned text
mentioned text needed
text needed single
needed single sentinel
single sentinel suffices
sentinel suffices input
suffices input version
input version quicksort
version quicksort section
quicksort section arrays
section arrays equal
equal elements worst
decreasing arrays worst
case input quicksort
input quicksort median
quicksort median pivot
median pivot selection
pivot selection strictly
selection strictly increas
strictly increas ing
increas ing arrays
ing arrays worst
decreasing arrays estimate
arrays estimate times
times faster quicksort
faster quicksort sort
quicksort sort array
sort array random
array random numbers
random numbers insertion
numbers insertion sort
insertion sort true
sort true false
true false element
false element arrays
element arrays sorted
arrays sorted faster
sorted faster insertion
faster insertion sort
insertion sort quicksort
sort quicksort design
quicksort design algorithm
design algorithm rearrange
algorithm rearrange elements
rearrange elements array
elements array real
num bers negative
bers negative elements
negative elements positive
elements positive elements
positive elements algorithm
elements algorithm efficient
algorithm efficient space
space efficient dutch
efficient dutch national
flag problem rearrange
problem rearrange array
rearrange array characters
array characters red
characters red white
red white blue
white blue colors
blue colors dutch
colors dutch national
national flag dij
flag dij design
dij design linear
linear algorithm problem
algorithm problem solution
problem solution dutch
solution dutch national
flag problem quicksort
problem quicksort implement
quicksort implement quicksort
implement quicksort language
quicksort language choice
choice run sample
run sample inputs
sample inputs verify
inputs verify theoretical
verify theoretical assertions
theoretical assertions algorithm
assertions algorithm efficiency
algorithm efficiency nuts
efficiency nuts bolts
nuts bolts collection
bolts collection bolts
collection bolts widths
bolts widths nuts
widths nuts allowed
nuts allowed nut
allowed nut determine
nut determine nut
determine nut larger
nut larger smaller
larger smaller matches
smaller matches nuts
matches nuts bolts
nuts bolts problem
bolts problem nut
problem nut design
nut design algorithm
algorithm problem average
problem average case
efficiency log raw
log raw binary
tree traversals related
traversals related properties
related properties section
properties section conquer
section conquer technique
conquer technique applied
technique applied binary
applied binary trees
tree defined finite
defined finite set
finite set nodes
set nodes consists
nodes consists root
consists root disjoint
root disjoint binary
disjoint binary trees
binary trees called
trees called left
subtree root binary
root binary tree
binary tree special
tree special case
special case ordered
case ordered tree
ordered tree figure
figure standard interpretation
standard interpretation alternative
interpretation alternative definition
alternative definition binary
definition binary tree
tree section definition
section definition divides
definition divides binary
divides binary tree
binary tree smaller
tree smaller structures
smaller structures left
structures left subtree
left subtree problems
subtree problems binary
problems binary trees
binary trees solved
trees solved applying
solved applying conquer
applying conquer technique
conquer technique recursive
technique recursive algorithm
algorithm computing height
computing height binary
tree recall height
recall height defined
longest path root
root leaf computed
leaf computed maximum
computed maximum heights
maximum heights root
heights root left
root left tleft
left tleft tright
tleft tright figure
tright figure standard
figure standard representation
standard representation binary
representation binary tree
binary tree subtrees
tree subtrees account
subtrees account extra
account extra root
extra root convenient
root convenient define
convenient define height
height tree recursive
tree recursive algorithm
recursive algorithm height
algorithm height computes
height computes recursively
computes recursively height
recursively height binary
tree output height
output height max
height max height
max height tlef
height tlef height
tlef height tright
height tright problem
tright problem instance
instance size nodes
size nodes binary
binary tree comparisons
tree comparisons compute
comparisons compute maximum
compute maximum numbers
maximum numbers additions
numbers additions algorithm
additions algorithm recurrence
algorithm recurrence relation
recurrence relation tlef
relation tlef tright
tlef tright solve
tright solve recurrence
solve recurrence solution
recurrence solution addition
solution addition frequently
addition frequently executed
operation algorithm checking
algorithm checking typical
checking typical binary
typical binary tree
binary tree algorithms
tree algorithms tree
algorithms tree comparison
tree comparison executed
comparison executed additions
executed additions single
additions single node
node tree comparison
tree comparison addition
comparison addition numbers
addition numbers helps
numbers helps analysis
helps analysis tree
analysis tree algorithms
tree algorithms draw
algorithms draw tree
draw tree extension
tree extension replacing
extension replacing subtrees
replacing subtrees special
subtrees special nodes
special nodes extra
nodes extra nodes
extra nodes shown
shown squares figure
squares figure called
figure called external
called external original
external original nodes
original nodes shown
shown circles called
circles called internal
called internal definition
internal definition extension
definition extension binary
extension binary tree
binary tree single
tree single external
single external node
external node easy
node easy height
easy height algorithm
height algorithm makes
makes addition internal
addition internal node
internal node extended
node extended tree
extended tree makes
tree makes comparison
makes comparison figure
comparison figure binary
tree left extension
left extension internal
extension internal nodes
internal nodes shown
shown circles external
circles external nodes
external nodes shown
shown squares tree
squares tree internal
tree internal external
external node ascertain
node ascertain algorithm
ascertain algorithm efficiency
algorithm efficiency external
efficiency external nodes
external nodes extended
nodes extended binary
binary tree internal
tree internal nodes
internal nodes checking
nodes checking figure
checking figure similar
figure similar examples
similar examples easy
examples easy hypothesize
easy hypothesize external
hypothesize external nodes
external nodes internal
internal nodes prove
nodes prove equality
prove equality total
equality total nodes
total nodes internal
nodes internal external
external node root
node root children
root children internal
children internal node
internal node equation
node equation immediately
equation immediately implies
immediately implies equality
implies equality applies
equality applies nonempty
applies nonempty binary
nonempty binary tree
binary tree definition
tree definition node
definition node children
node children binary
children binary tree
binary tree denote
tree denote numbers
denote numbers parental
numbers parental nodes
nodes leaves returning
leaves returning algorithm
returning algorithm height
algorithm height comparisons
height comparisons tree
comparisons tree additions
tree additions important
additions important conquer
important conquer algorithms
conquer algorithms binary
binary trees classic
trees classic traversals
classic traversals preorder
traversals preorder inorder
postorder traversals nodes
traversals nodes binary
binary tree recursively
tree recursively visiting
recursively visiting tree
visiting tree root
root left subtrees
left subtrees differ
subtrees differ timing
differ timing root
timing root preorder
root preorder traversal
preorder traversal root
root visited left
visited left subtrees
left subtrees visited
subtrees visited inorder
visited inorder traversal
inorder traversal root
visiting left subtree
left subtree visiting
subtree visiting subtree
visiting subtree postorder
subtree postorder traversal
postorder traversal root
visiting left subtrees
left subtrees traversals
subtrees traversals illustrated
traversals illustrated figure
illustrated figure pseudocodes
figure pseudocodes straightforward
pseudocodes straightforward repeating
straightforward repeating descriptions
repeating descriptions traversals
descriptions traversals standard
traversals standard feature
standard feature data
feature data structures
data structures textbooks
structures textbooks efficiency
textbooks efficiency analysis
efficiency analysis identical
analysis identical analysis
identical analysis height
analysis height algorithm
height algorithm recursive
algorithm recursive node
recursive node extended
node extended binary
binary tree finally
tree finally questions
finally questions binary
questions binary trees
binary trees require
trees require traversals
require traversals left
traversals left subtrees
left subtrees insert
subtrees insert operations
insert operations binary
operations binary tree
binary tree require
tree require processing
require processing subtrees
processing subtrees considered
subtrees considered section
considered section applications
section applications conquer
applications conquer examples
conquer examples variable
decrease technique preorder
technique preorder inorder
inorder postorder figure
postorder figure binary
tree traversals exercises
traversals exercises design
exercises design conquer
conquer algorithm computing
algorithm computing levels
computing levels binary
levels binary tree
tree algorithm single
algorithm single node
single node trees
node trees efficiency
trees efficiency class
class algorithm seeks
algorithm seeks compute
seeks compute leaves
compute leaves binary
tree algorithm leafcounter
algorithm leafcounter computes
leafcounter computes recursively
computes recursively leaves
recursively leaves binary
tree output leaves
output leaves leafcounter
leaves leafcounter tlef
leafcounter tlef leafcounter
tlef leafcounter tright
leafcounter tright algorithm
tright algorithm prove
algorithm prove make
make correction compute
correction compute height
compute height binary
binary tree asymptotic
tree asymptotic ficiency
asymptotic ficiency section
ficiency section conquer
section conquer algorithm
conquer algorithm stack
algorithm stack explicitly
stack explicitly implicitly
explicitly implicitly algorithm
implicitly algorithm altogether
algorithm altogether prove
altogether prove equality
prove equality mathematical
equality mathematical induction
mathematical induction traverse
induction traverse binary
traverse binary tree
inorder postorder write
postorder write pseudocode
write pseudocode classic
pseudocode classic traversal
traversal algorithms preorder
algorithms preorder postorder
preorder postorder binary
postorder binary trees
binary trees assuming
trees assuming algorithm
assuming algorithm recur
algorithm recur sive
recur sive recursive
sive recursive calls
recursive calls classic
calls classic traversal
traversal algorithms yields
algorithms yields sorted
yields sorted applied
sorted applied binary
applied binary tree
binary tree prove
tree prove property
prove property draw
property draw binary
tree nodes labeled
nodes labeled inorder
labeled inorder postorder
traversals tree yield
tree yield lists
yield lists inorder
lists inorder postorder
inorder postorder permutations
postorder permutations labels
permutations labels inorder
labels inorder postorder
inorder postorder traversal
postorder traversal lists
traversal lists binary
design algorithm constructs
algorithm constructs binary
constructs binary tree
binary tree lists
tree lists labels
lists labels generated
labels generated inorder
generated inorder postorder
traversals tree algorithm
tree algorithm inputs
algorithm inputs problem
inputs problem solution
problem solution internal
solution internal path
lengths paths internal
paths internal nodes
internal nodes root
nodes root internal
root internal node
internal node similarly
node similarly external
similarly external path
external path length
lengths paths external
paths external nodes
external nodes root
nodes root external
root external node
external node prove
node prove internal
prove internal nodes
nodes tree write
tree write computing
write computing internal
computing internal path
binary tree investigate
tree investigate empirically
investigate empirically average
empirically average key
comparisons searching randomly
searching randomly generated
randomly generated binary
generated binary tree
binary tree chocolate
tree chocolate puzzle
chocolate puzzle chocolate
puzzle chocolate break
chocolate break pieces
break pieces break
pieces break straight
break straight line
straight line broken
line broken design
broken design algorithm
design algorithm solves
solves problem minimum
problem minimum breaks
minimum breaks minimum
breaks minimum justify
minimum justify properties
justify properties binary
properties binary tree
binary tree multiplication
tree multiplication large
large integers strassen
integers strassen matrix
multiplication section surprising
section surprising algorithms
surprising algorithms seemingly
algorithms seemingly straightfor
seemingly straightfor ward
straightfor ward tasks
ward tasks multiplying
tasks multiplying integers
multiplying integers multiplying
integers multiplying square
multiplying square matrices
square matrices achieve
matrices achieve asymptotic
achieve asymptotic efficiency
asymptotic efficiency ingenious
efficiency ingenious application
ingenious application conquer
conquer technique multiplication
technique multiplication large
large integers applications
integers applications notably
applications notably modern
notably modern cryptography
modern cryptography require
cryptography require manipulation
require manipulation inte
manipulation inte gers
inte gers decimal
gers decimal digits
decimal digits integers
digits integers single
integers single word
single word modern
word modern require
modern require special
require special treatment
special treatment practi
treatment practi cal
practi cal supports
cal supports investigations
supports investigations algorithms
investigations algorithms efficient
algorithms efficient manipulation
efficient manipulation large
manipulation large integers
large integers section
integers section outline
section outline interesting
outline interesting algorithm
interesting algorithm multiplying
algorithm multiplying numbers
multiplying numbers conventional
numbers conventional pen
conventional pen pencil
algorithm mul tiplying
mul tiplying digit
tiplying digit integers
digit integers digits
integers digits multiplied
digits multiplied digits
multiplied digits total
digits total digit
total digit multiplications
digit multiplications numbers
multiplications numbers digits
numbers digits pad
digits pad shorter
pad shorter leading
shorter leading zeros
leading zeros equalize
zeros equalize lengths
equalize lengths impossible
lengths impossible design
impossible design algorithm
design algorithm digit
algorithm digit multiplica
digit multiplica tions
multiplica tions turns
tions turns case
turns case miracle
case miracle conquer
miracle conquer accomplish
conquer accomplish feat
accomplish feat demonstrate
feat demonstrate basic
demonstrate basic idea
basic idea algorithm
idea algorithm case
algorithm case digit
case digit integers
digit integers numbers
integers numbers represented
numbers represented formula
represented formula yields
formula yields digit
yields digit multiplications
digit multiplications pen
multiplications pen pencil
pencil algorithm fortunately
algorithm fortunately compute
fortunately compute middle
compute middle term
middle term digit
term digit multiplication
digit multiplication taking
multiplication taking advantage
taking advantage products
advantage products computed
products computed special
computed special numbers
special numbers multiplied
numbers multiplied pair
multiplied pair digit
pair digit numbers
product computed formula
computed formula product
formula product digits
digits product sum
product sum digits
digits sum digits
digits sum apply
sum apply multiplying
apply multiplying digit
digit integers positive
integers positive numbers
positive numbers middle
numbers middle promised
middle promised advantage
promised advantage conquer
advantage conquer technique
conquer technique denote
technique denote half
denote half digits
half digits half
digits half notations
half notations implies
notations implies taking
implies taking advantage
taking advantage digit
advantage digit numbers
numbers product halves
halves product halves
halves product sum
product sum halves
halves sum halves
halves sum apply
sum apply method
apply method computing
method computing products
computing products power
products power recursive
power recursive algorithm
digit integers pure
integers pure recursion
pure recursion stopped
recursion stopped deem
stopped deem small
deem small numbers
small numbers size
numbers size directly
size directly digit
directly digit multiplications
digit multiplications algorithm
multiplications algorithm make
algorithm make multiplica
make multiplica tion
multiplica tion digit
tion digit numbers
digit numbers requires
numbers requires multiplications
requires multiplications digit
multiplications digit numbers
digit numbers recurrence
numbers recurrence multiplications
recurrence multiplications solving
multiplications solving backward
solving backward substitutions
backward substitutions yields
substitutions yields log
yields log nlog
log nlog advantage
nlog advantage property
advantage property logarithms
property logarithms alogb
logarithms alogb clogb
alogb clogb additions
clogb additions subtractions
additions subtractions decreased
subtractions decreased num
decreased num ber
num ber multiplications
ber multiplications requiring
multiplications requiring operations
requiring operations digit
operations digit additions
digit additions subtractions
additions subtractions executed
subtractions executed algorithm
executed algorithm multiplying
decimal integers operations
integers operations needed
operations needed compute
needed compute products
compute products digit
products digit numbers
digit numbers formulas
numbers formulas require
formulas require additions
require additions subtraction
additions subtraction recurrence
subtraction recurrence applying
recurrence applying master
master theorem stated
theorem stated beginning
stated beginning chapter
beginning chapter nlog
chapter nlog means
nlog means total
means total additions
total additions subtractions
additions subtractions asymptotic
subtractions asymptotic growth
asymptotic growth multipli
growth multipli cations
multipli cations asymptotic
cations asymptotic advantage
asymptotic advantage algorithm
advantage algorithm practical
algorithm practical depends
practical depends quality
depends quality implementing
implementing algorithm wide
algorithm wide disparity
wide disparity reported
disparity reported results
reported results machines
results machines conquer
machines conquer algorithm
conquer algorithm reported
algorithm reported outperform
reported outperform conventional
outperform conventional method
conventional method numbers
method numbers decimal
decimal digits run
digits run faster
run faster numbers
faster numbers decimal
decimal digits area
digits area importance
area importance modern
importance modern cryptography
modern cryptography outperformance
cryptography outperformance crossover
outperformance crossover machine
crossover machine switching
machine switching conventional
switching conventional algorithm
conventional algorithm multiplicands
algorithm multiplicands smaller
multiplicands smaller crossover
smaller crossover finally
crossover finally oriented
finally oriented language
oriented language java
language java smalltalk
java smalltalk aware
smalltalk aware languages
aware languages special
languages special classes
special classes dealing
classes dealing large
dealing large integers
large integers discovered
integers discovered year
discovered year russian
year russian mathematician
russian mathematician anatoly
mathematician anatoly karatsuba
anatoly karatsuba conquer
karatsuba conquer algorithm
conquer algorithm proved
algorithm proved wrong
proved wrong prevailing
wrong prevailing opinion
prevailing opinion efficiency
opinion efficiency integer
efficiency integer multiplication
multiplication algorithm discovery
algorithm discovery encouraged
discovery encouraged researchers
encouraged researchers asymptotically
researchers asymptotically faster
asymptotically faster algorithms
faster algorithms algebraic
algorithms algebraic problems
algebraic problems algorithm
problems algorithm section
algorithm section strassen
section strassen matrix
matrix multiplication conquer
multiplication conquer approach
conquer approach digit
approach digit multiplications
digit multiplications multiplying
multiplications multiplying integers
multiplying integers surprised
integers surprised similar
surprised similar feat
similar feat accomplished
feat accomplished multiplying
accomplished multiplying matrices
multiplying matrices algorithm
matrices algorithm published
algorithm published strassen
published strassen str
strassen str principal
str principal insight
principal insight algorithm
insight algorithm lies
algorithm lies discovery
lies discovery product
discovery product matrices
product matrices multiplications
matrices multiplications opposed
multiplications opposed required
opposed required brute
algorithm section accomplished
section accomplished formulas
accomplished formulas matrices
formulas matrices strassen
strassen algorithm makes
makes multipli cations
multipli cations additions
additions subtractions brute
subtractions brute algorithm
brute algorithm requires
algorithm requires multiplications
multiplications additions numbers
additions numbers lead
numbers lead multiplying
lead multiplying matrices
multiplying matrices strassen
strassen algorithm importance
algorithm importance stems
importance stems asymptotic
stems asymptotic superiority
asymptotic superiority matrix
superiority matrix infinity
matrix infinity matrices
infinity matrices power
matrices power matrices
power matrices padded
matrices padded rows
padded rows columns
rows columns zeros
columns zeros product
zeros product submatrices
product submatrices difficult
submatrices difficult verify
difficult verify submatrices
verify submatrices numbers
submatrices numbers product
product computed strassen
computed strassen formulas
strassen formulas numbers
formulas numbers replaced
numbers replaced submatrices
replaced submatrices products
submatrices products matrices
matrices computed recursively
computed recursively method
recursively method strassen
method strassen algorithm
strassen algorithm matrix
matrix multiplication evaluate
multiplication evaluate asymptotic
evaluate asymptotic efficiency
asymptotic efficiency algorithm
efficiency algorithm multiplications
algorithm multiplications strassen
multiplying matrices power
matrices power recurrence
recurrence relation log
relation log nlog
log nlog smaller
nlog smaller required
smaller required brute
brute algorithm savings
algorithm savings multiplications
savings multiplications achieved
multiplications achieved expense
achieved expense making
expense making extra
making extra additions
extra additions strassen
strassen algorithm matrices
algorithm matrices make
matrices make additions
make additions subtractions
additions subtractions matrices
subtractions matrices size
matrices size additions
size additions numbers
additions numbers simply
numbers simply multiplied
simply multiplied observations
multiplied observations yield
observations yield recurrence
yield recurrence relation
recurrence relation closed
relation closed solution
closed solution recurrence
solution recurrence problem
recurrence problem section
section exercises simply
exercises simply establish
simply establish solution
solution growth master
growth master theorem
master theorem nlog
theorem nlog words
nlog words additions
words additions growth
additions growth multiplications
growth multiplications puts
multiplications puts strassen
puts strassen algorithm
strassen algorithm nlog
algorithm nlog efficiency
nlog efficiency class
class brute method
brute method strassen
method strassen discovery
strassen discovery algorithms
discovery algorithms multiplying
algorithms multiplying matrices
multiplying matrices real
matrices real numbers
real numbers progressively
numbers progressively smaller
progressively smaller constants
smaller constants invented
constants invented fastest
invented fastest algorithm
fastest algorithm coopersmith
algorithm coopersmith winograd
coopersmith winograd coo
winograd coo efficiency
coo efficiency decreasing
efficiency decreasing values
decreasing values exponents
values exponents obtained
exponents obtained expense
obtained expense increasing
expense increasing complexity
increasing complexity algorithms
complexity algorithms large
algorithms large multiplicative
large multiplicative constants
multiplicative constants practical
constants practical interesting
practical interesting theoretical
interesting theoretical view
theoretical view closer
view closer theoretical
closer theoretical lower
theoretical lower bound
lower bound matrix
bound matrix multiplication
matrix multiplication multiplications
multiplication multiplications gap
multiplications gap bound
gap bound algorithm
bound algorithm remains
algorithm remains unresolved
remains unresolved matrix
unresolved matrix multiplication
matrix multiplication computationally
multiplication computationally equivalent
computationally equivalent important
equivalent important problems
important problems solving
problems solving systems
linear equations discussed
equations discussed chapter
discussed chapter exercises
chapter exercises smallest
exercises smallest largest
smallest largest numbers
largest numbers digits
numbers digits product
digits product decimal
product decimal digit
decimal digit integers
digit integers compute
integers compute applying
compute applying conquer
applying conquer algorithm
conquer algorithm outlined
outlined text prove
text prove equality
prove equality alogb
equality alogb clogb
alogb clogb section
clogb section nlog
section nlog log
nlog log closed
log closed formula
closed formula multiplications
formula multiplications multiplication
multiplications multiplication large
multiplication large integer
large integer multiplication
multiplication algorithm addition
algorithm addition assuming
addition assuming power
assuming power sake
power sake simplicity
sake simplicity subtle
simplicity subtle assumption
subtle assumption setting
assumption setting recurrences
setting recurrences true
recurrences true final
true final answers
final answers assumption
answers assumption digit
assumption digit additions
digit additions pen
additions pen pencil
digit integers disregard
integers disregard potential
disregard potential carries
potential carries verify
carries verify formulas
verify formulas underlying
formulas underlying strassen
underlying strassen algorithm
multiplying matrices apply
matrices apply strassen
apply strassen algorithm
strassen algorithm compute
algorithm compute exiting
compute exiting recursion
exiting recursion computing
recursion computing products
computing products matrices
products matrices brute
matrices brute algorithm
solve recurrence additions
recurrence additions required
additions required strassen
required strassen algo
strassen algo rithm
algo rithm assume
rithm assume power
assume power pan
power pan discovered
pan discovered conquer
discovered conquer matrix
conquer matrix multiplication
multiplication algorithm based
algorithm based multiplying
based multiplying matrices
multiplying matrices multiplications
matrices multiplications asymptotic
multiplications asymptotic efficiency
asymptotic efficiency pan
efficiency pan algorithm
pan algorithm additions
algorithm additions strassen
strassen algorithm practical
algorithm practical implementations
practical implementations strassen
implementations strassen algorithm
strassen algorithm brute
algorithm brute method
brute method matrix
method matrix sizes
matrix sizes smaller
sizes smaller crossover
smaller crossover run
crossover run experiment
experiment determine crossover
determine crossover closest
crossover closest pair
hull problems conquer
problems conquer section
conquer section discussed
section discussed brute
discussed brute approach
approach solving classic
solving classic prob
classic prob lems
prob lems computational
hull problem dimensional
problem dimensional versions
dimensional versions problems
versions problems solved
problems solved brute
solved brute algorithms
brute algorithms sec
algorithms sec tion
sec tion discuss
tion discuss sophisticated
discuss sophisticated asymptotically
sophisticated asymptotically efficient
asymptotically efficient algorithms
efficient algorithms problems
algorithms problems based
problems based conquer
conquer technique closest
technique closest pair
pair problem set
cartesian plane sake
plane sake simplicity
assume points distinct
points distinct assume
distinct assume points
assume points ordered
points ordered nondecreasing
ordered nondecreasing coordinate
nondecreasing coordinate sort
coordinate sort efficeint
sort efficeint sorting
efficeint sorting algorithm
algorithm mergesort convenient
mergesort convenient points
convenient points sorted
sorted nondecreasing coordinate
nondecreasing coordinate denote
coordinate denote problem
denote problem solved
problem solved obvious
solved obvious brute
obvious brute algorithm
algorithm points subsets
points subsets points
subsets points drawing
points drawing vertical
drawing vertical line
vertical line median
line median coordinates
median coordinates points
coordinates points left
left line points
points line solve
line solve closest
pair problem min
problem min figure
min figure idea
figure idea conquer
idea conquer algorithm
pair problem rectangle
problem rectangle points
rectangle points closer
closer dmin recursively
dmin recursively subsets
recursively subsets smallest
subsets smallest distances
smallest distances pairs
distances pairs points
pairs points min
points min necessarily
min necessarily smallest
necessarily smallest distance
smallest distance pairs
distance pairs points
pairs points closer
points closer pair
closer pair sides
pair sides separating
sides separating line
separating line combining
line combining solutions
combining solutions smaller
smaller subproblems points
subproblems points limit
points limit attention
limit attention points
attention points symmetric
points symmetric vertical
symmetric vertical width
vertical width separating
separating line distance
line distance pair
pair points figure
figure points width
points width separating
separating line obtained
line obtained ordered
obtained ordered nondecreasing
ordered nondecreasing coor
nondecreasing coor dinate
coor dinate scan
dinate scan updating
scan updating information
updating information dmin
information dmin minimum
minimum distance encounter
distance encounter closer
encounter closer pair
closer pair points
pair points initially
points initially dmin
initially dmin subsequently
dmin subsequently dmin
subsequently dmin chance
dmin chance closer
chance closer dmin
closer dmin difference
dmin difference coordinates
difference coordinates dmin
coordinates dmin geometri
dmin geometri cally
geometri cally means
cally means rectangle
means rectangle shown
rectangle shown figure
shown figure principal
figure principal insight
principal insight exploited
insight exploited algorithm
exploited algorithm observation
algorithm observation rectangle
observation rectangle points
rectangle points half
points half left
half left rectangle
left rectangle distance
rectangle distance easy
distance easy prove
easy prove total
prove total points
total points rectangle
points rectangle exceed
rectangle exceed prob
exceed prob lem
prob lem section
section exercises careful
exercises careful analysis
careful analysis reduces
analysis reduces joh
reduces joh algorithm
joh algorithm points
algorithm points moving
points moving pseudocode
moving pseudocode algorithm
pseudocode algorithm advice
algorithm advice section
advice section computing
section computing square
square roots innermost
roots innermost loop
loop algorithm efficientclosestpair
algorithm efficientclosestpair solves
efficientclosestpair solves closest
solves closest pair
pair problem conquer
problem conquer input
conquer input array
input array points
array points cartesian
cartesian plane sorted
plane sorted nondecreasing
nondecreasing coordinates array
coordinates array points
array points sorted
nondecreasing coordinates output
coordinates output euclidean
output euclidean distance
euclidean distance closest
pair points minimal
points minimal distance
minimal distance brute
distance brute algorithm
algorithm points array
points array remaining
array remaining points
remaining points array
points array efficientclosestpair
array efficientclosestpair min
efficientclosestpair min points
min points array
points array num
array num dminsq
num dminsq num
dminsq num dminsq
num dminsq min
dminsq min dminsq
min dminsq sqrt
dminsq sqrt dminsq
sqrt dminsq algorithm
dminsq algorithm spends
algorithm spends linear
spends linear dividing
linear dividing problem
dividing problem problems
problem problems half
problems half size
half size combining
size combining obtained
combining obtained solutions
obtained solutions assuming
solutions assuming usual
assuming usual power
usual power recurrence
power recurrence running
recurrence running algorithm
running algorithm applying
algorithm applying master
master theorem log
theorem log necessity
log necessity presort
necessity presort input
presort input points
input points efficiency
points efficiency class
efficiency class sorting
class sorting log
sorting log algorithm
log algorithm mergesort
algorithm mergesort fact
mergesort fact efficiency
fact efficiency class
efficiency class achieve
class achieve proved
achieve proved algorithm
proved algorithm problem
algorithm problem log
problem log natural
log natural assumptions
natural assumptions operations
assumptions operations algorithm
operations algorithm pre
algorithm pre convex
pre convex hull
hull problem revisit
problem revisit convex
revisit convex hull
hull problem introduced
introduced section smallest
section smallest convex
polygon points plane
points plane conquer
plane conquer algorithm
algorithm called quickhull
called quickhull resemblance
quickhull resemblance quicksort
resemblance quicksort set
quicksort set points
cartesian plane assume
plane assume points
assume points sorted
nondecreasing coordinates ties
coordinates ties resolved
ties resolved increasing
resolved increasing coordinates
increasing coordinates points
coordinates points involved
points involved difficult
involved difficult prove
difficult prove geometrically
prove geometrically obvious
geometrically obvious fact
obvious fact leftmost
fact leftmost rightmost
leftmost rightmost distinct
rightmost distinct extreme
distinct extreme points
convex hull figure
hull figure straight
figure straight line
line points directed
points directed line
directed line separates
line separates points
separates points sets
points sets set
sets set points
left line set
points line left
line left line
left line directed
line directed forms
directed forms counterclockwise
forms counterclockwise cite
counterclockwise cite analytical
cite analytical condition
analytical condition based
condition based checking
based checking determinant
checking determinant formed
determinant formed coordinates
formed coordinates points
coordinates points line
points line extreme
line extreme points
convex hull excluded
hull excluded consideration
excluded consideration boundary
consideration boundary convex
convex hull polygonal
hull polygonal chains
polygonal chains upper
chains upper boundary
upper boundary lower
boundary lower boundary
lower boundary upper
boundary upper boundary
upper boundary called
boundary called upper
called upper hull
upper hull sequence
vertices points lower
points lower boundary
lower boundary called
boundary called lower
called lower hull
lower hull sequence
vertices points fact
points fact convex
convex hull entire
entire set composed
set composed upper
composed upper lower
lower hulls constructed
hulls constructed independently
constructed independently similar
independently similar fashion
similar fashion observation
fashion observation exploited
observation exploited algorithms
exploited algorithms problem
algorithms problem concreteness
problem concreteness discuss
concreteness discuss quickhull
discuss quickhull proceeds
quickhull proceeds construct
proceeds construct upper
construct upper hull
upper hull lower
hull lower hull
lower hull constructed
hull constructed manner
constructed manner figure
manner figure upper
figure upper lower
lower hulls set
hulls set points
set points pmax
points pmax figure
pmax figure idea
figure idea quickhull
idea quickhull upper
quickhull upper hull
upper hull simply
hull simply line
simply line segment
segment endpoints algorithm
endpoints algorithm identifies
algorithm identifies pmax
identifies pmax farthest
pmax farthest line
farthest line figure
line figure maximizes
figure maximizes angle
maximizes angle pmaxppn
angle pmaxppn selected
pmaxppn selected pmax
selected pmax maximizes
pmax maximizes area
maximizes area triangle
area triangle vertices
triangle vertices algorithm
vertices algorithm identifies
algorithm identifies points
identifies points set
points set left
set left line
left line pmax
line pmax points
pmax points make
points make set
make set points
left line make
line make set
make set difficult
set difficult prove
difficult prove pmax
prove pmax vertex
pmax vertex upper
vertex upper hull
upper hull points
hull points pmaxpn
points pmaxpn vertices
pmaxpn vertices upper
vertices upper hull
upper hull eliminated
hull eliminated consideration
eliminated consideration points
consideration points left
points left lines
left lines pmax
lines pmax algorithm
pmax algorithm constructing
algorithm constructing upper
constructing upper hulls
upper hulls pmax
hulls pmax recursively
pmax recursively simply
recursively simply concatenate
simply concatenate upper
concatenate upper hull
upper hull entire
entire set figure
set figure algorithm
figure algorithm geometric
algorithm geometric operations
geometric operations implemented
operations implemented fortunately
implemented fortunately advantage
fortunately advantage fact
advantage fact analytical
arbitrary points cartesian
cartesian plane area
plane area triangle
area triangle equal
triangle equal half
equal half magnitude
half magnitude determinant
magnitude determinant expression
determinant expression positive
expression positive left
positive left line
left line formula
line formula constant
formula constant lies
constant lies left
lies left line
left line determined
line determined points
determined points distance
points distance line
distance line quickhull
line quickhull worst
quickhull worst case
case efficiency quicksort
efficiency quicksort problem
quicksort problem section
section exercises average
exercises average case
case performance algorithm
performance algorithm benefit
algorithm benefit quicksort
benefit quicksort savings
quicksort savings average
savings average balanced
average balanced split
balanced split problem
split problem smaller
smaller subproblems significant
subproblems significant fraction
significant fraction points
fraction points pmaxpn
points pmaxpn figure
pmaxpn figure eliminated
figure eliminated processing
eliminated processing natural
processing natural assumption
natural assumption points
assumption points chosen
points chosen randomly
chosen randomly uniform
randomly uniform dis
uniform dis tribution
dis tribution convex
tribution convex region
convex region circle
region circle rectangle
circle rectangle average
rectangle average case
efficiency quickhull turns
quickhull turns linear
turns linear ove
linear ove exercises
ove exercises dimensional
exercises dimensional version
dimensional version closest
version closest pair
pair problem finding
closest numbers set
numbers set real
num bers design
design algorithm directly
algorithm directly based
directly based conquer
conquer technique determine
technique determine efficiency
efficiency class good
class good algorithm
problem prove conquer
prove conquer algorithm
pair problem examines
problem examines vertical
examines vertical figures
vertical figures points
figures points closer
closer dmin minimum
minimum distance points
distance points encountered
points encountered algorithm
encountered algorithm version
algorithm version conquer
version conquer dimensional
conquer dimensional closest
pair algorithm presorting
algorithm presorting input
presorting input set
input set simply
set simply sort
simply sort sets
sort sets nondecreasing
sets nondecreasing coordinates
nondecreasing coordinates recursive
coordinates recursive assuming
recursive assuming sorting
assuming sorting mergesort
sorting mergesort set
mergesort set recurrence
recurrence relation running
relation running worst
worst case solve
case solve implement
solve implement conquer
implement conquer closest
conquer closest pair
pair algorithm outlined
algorithm outlined section
outlined section language
language choice web
choice web visualization
web visualization algorithm
visualization algorithm closest
pair problem algorithm
problem algorithm visualization
algorithm visualization represent
visualization represent voronoi
represent voronoi polygon
voronoi polygon set
polygon set points
points plane defined
plane defined perimeter
defined perimeter set
perimeter set points
points plane closer
plane closer union
closer union voronoi
union voronoi polygons
voronoi polygons points
polygons points called
points called voronoi
called voronoi diagram
voronoi diagram voronoi
diagram voronoi diagram
voronoi diagram set
diagram set points
set points visualization
points visualization algorithm
visualization algorithm generating
algorithm generating voronoi
generating voronoi diagram
voronoi diagram web
diagram web study
web study examples
study examples diagrams
examples diagrams based
diagrams based observations
based observations solution
observations solution previous
solution previous generalized
previous generalized general
generalized general case
general case pmax
case pmax quickhull
pmax quickhull algorithm
quickhull algorithm analytically
algorithm analytically case
analytically case efficiency
efficiency quickhull specific
quickhull specific inputs
specific inputs make
inputs make quickhull
make quickhull run
quickhull run quadratic
run quadratic implement
quadratic implement quickhull
implement quickhull language
quickhull language choice
language choice creating
choice creating decagons
creating decagons points
decagons points plane
points plane line
plane line devise
line devise algorithm
devise algorithm construct
algorithm construct decagons
construct decagons vertices
decagons vertices points
vertices points decagons
points decagons convex
decagons convex simple
convex simple boundary
simple boundary decagons
boundary decagons common
decagons common shortest
common shortest path
shortest path fenced
path fenced area
fenced area dimensional
area dimensional clidean
dimensional clidean plane
clidean plane shape
plane shape convex
shape convex polygon
vertices points necessarily
points necessarily points
necessarily points min
points min max
min max design
max design efficient
comput ing length
ing length shortest
shortest path oro
path oro summary
oro summary conquer
summary conquer general
design technique solves
technique solves problem
solves problem dividing
problem dividing smaller
dividing smaller subproblems
smaller subproblems ideally
equal size solving
size solving recursively
solving recursively combining
recursively combining solutions
combining solutions solution
solutions solution original
problem efficient algorithms
efficient algorithms based
based technique inapplicable
technique inapplicable inferior
inapplicable inferior simpler
inferior simpler algorithmic
simpler algorithmic solutions
algorithmic solutions running
solutions running conquer
running conquer algorithms
conquer algorithms satisfies
algorithms satisfies recurrence
satisfies recurrence master
recurrence master theorem
master theorem establishes
theorem establishes growth
establishes growth solutions
growth solutions mergesort
solutions mergesort conquer
mergesort conquer sorting
algorithm works dividing
works dividing input
dividing input array
input array halves
array halves sorting
recursively merging sorted
merging sorted halves
sorted halves original
halves original array
sorted algorithm efficiency
efficiency log cases
log cases key
cases key comparisons
key comparisons theoretical
comparisons theoretical minimum
theoretical minimum principal
minimum principal drawback
principal drawback significant
drawback significant extra
significant extra storage
extra storage requirement
storage requirement quicksort
requirement quicksort conquer
quicksort conquer sorting
algorithm works partitioning
works partitioning input
partitioning input elements
input elements relative
elements relative preselected
relative preselected element
preselected element quicksort
element quicksort noted
quicksort noted superior
noted superior efficiency
superior efficiency log
efficiency log algorithms
log algorithms sorting
algorithms sorting randomly
sorting randomly ordered
ordered arrays quadratic
arrays quadratic worst
efficiency classic traversals
classic traversals binary
traversals binary tree
inorder postorder similar
postorder similar algorithms
similar algorithms require
algorithms require recursive
require recursive processing
recursive processing left
processing left subtrees
left subtrees considered
subtrees considered examples
considered examples conquer
examples conquer technique
conquer technique analysis
technique analysis helped
analysis helped replacing
helped replacing subtrees
replacing subtrees tree
subtrees tree special
tree special external
special external nodes
external nodes conquer
nodes conquer algorithm
conquer algorithm multiplying
digit integers requires
integers requires digit
requires digit multiplications
digit multiplications strassen
strassen algorithm multiplications
algorithm multiplications matrices
multiplications matrices exploiting
matrices exploiting conquer
exploiting conquer technique
conquer technique algorithm
technique algorithm matrices
matrices multiplications conquer
multiplications conquer technique
conquer technique successfully
technique successfully applied
successfully applied important
applied important problems
things mercy things
mercy things johann
things johann wolfgang
johann wolfgang von
wolfgang von ethe
von ethe space
ethe space offs
practitioners computing problem
problem computing values
computing values function
values function points
function points domain
points domain premium
domain premium precompute
premium precompute function
precompute function values
function values table
values table human
table human computers
human computers advent
computers advent electronic
advent electronic computers
electronic computers process
computers process burdening
process burdening libraries
burdening libraries volumes
libraries volumes mathematical
volumes mathematical tables
mathematical tables lost
tables lost appeal
lost appeal widespread
appeal widespread electronic
widespread electronic computers
electronic computers underlying
computers underlying idea
underlying idea proven
idea proven development
proven development important
development important algorithms
important algorithms problems
algorithms problems general
problems general terms
general terms idea
terms idea preprocess
problem afterward approach
afterward approach input
approach input enhancement
input enhancement discuss
enhancement discuss algorithms
algorithms based counting
based counting methods
counting methods sorting
methods sorting section
sorting section boyer
section boyer moore
moore algorithm string
string matching simplified
matching simplified version
simplified version sug
version sug gested
sug gested horspool
gested horspool section
horspool section technique
section technique exploits
space offs simply
offs simply extra
simply extra space
access data approach
data approach prestructuring
approach prestructuring highlights
prestructuring highlights facets
highlights facets variation
facets variation space
variation space processing
space processing problem
processing problem standard
problem standard terms
standard terms synonymously
terms synonymously technique
synonymously technique preprocessing
technique preprocessing preconditioning
preprocessing preconditioning confusingly
preconditioning confusingly terms
confusingly terms applied
terms applied methods
applied methods idea
methods idea preprocessing
idea preprocessing extra
preprocessing extra space
extra space chapter
space chapter confusion
chapter confusion input
confusion input enhancement
input enhancement special
enhancement special space
special space technique
space technique discussed
technique discussed solved
discussed solved input
solved input enhancement
input enhancement variety
enhancement variety deals
variety deals access
deals access structuring
access structuring illustrate
structuring illustrate approach
illustrate approach hashing
approach hashing section
hashing section indexing
section indexing trees
indexing trees section
trees section algorithm
section algorithm design
design technique related
technique related space
related space idea
space idea dynamic
idea dynamic programming
dynamic programming strategy
programming strategy based
strategy based recording
based recording solu
recording solu tions
solu tions overlapping
tions overlapping subproblems
overlapping subproblems problem
subproblems problem table
problem table solu
table solu tion
solu tion problem
tion problem obtained
problem obtained discuss
obtained discuss developed
discuss developed technique
developed technique separately
technique separately chapter
separately chapter final
chapter final comments
final comments interplay
comments interplay space
interplay space algo
space algo rithm
algo rithm design
rithm design resources
design resources space
resources space design
space design situations
design situations fact
situations fact align
fact align bring
align bring algorithmic
bring algorithmic solution
algorithmic solution minimizes
solution minimizes running
minimizes running space
running space consumed
space consumed situation
consumed situation arises
situation arises algorithm
arises algorithm space
space efficient data
structure represent problem
represent problem input
problem input leads
input leads faster
leads faster algorithm
faster algorithm problem
algorithm problem traversing
problem traversing graphs
traversing graphs efficiency
graphs efficiency principal
efficiency principal traversal
algorithms depth breadth
depth breadth depends
breadth depends data
structure repre senting
repre senting graphs
senting graphs adjacency
adjacency representation numbers
representation numbers vertices
numbers vertices edges
vertices edges input
edges input graphs
input graphs sparse
graphs sparse edges
sparse edges relative
relative vertices adjacency
vertices adjacency representation
adjacency representation efficient
representation efficient space
efficient space running
space running points
running points view
points view situation
view situation arises
situation arises manipulation
arises manipulation sparse
manipulation sparse matrices
sparse matrices sparse
matrices sparse polynomi
sparse polynomi als
polynomi als percentage
als percentage zeros
percentage zeros objects
zeros objects sufficiently
objects sufficiently high
sufficiently high space
high space ignoring
space ignoring zeros
ignoring zeros objects
zeros objects representation
objects representation processing
representation processing discuss
processing discuss space
discuss space offs
space offs mentioning
offs mentioning hugely
mentioning hugely important
hugely important area
important area data
area data compression
data compres sion
compres sion size
sion size reduction
size reduction goal
reduction goal technique
goal technique solving
problem discuss data
discuss data compression
data compression algorithm
compression algorithm chapter
algorithm chapter reader
chapter reader interested
reader interested topic
interested topic wealth
topic wealth algorithms
wealth algorithms books
algorithms books sorting
books sorting counting
sorting counting applying
counting applying input
applying input enhancement
input enhancement technique
enhancement technique discuss
technique discuss application
discuss application sorting
sorting problem obvious
problem obvious idea
obvious idea element
idea element sorted
element sorted total
sorted total elements
total elements smaller
smaller element results
element results table
results table numbers
table numbers positions
numbers positions elements
positions elements sorted
sorted element position
element position index
position index counting
index counting sorted
counting sorted array
array sort simply
sort simply copying
simply copying elements
copying elements positions
positions sorted algorithm
sorted algorithm called
algorithm called comparison
called comparison counting
comparison counting sort
counting sort figure
sort figure array
figure array initially
array initially final
initially final state
final state array
state array figure
array figure sorting
figure sorting comparison
sorting comparison counting
counting algorithm comparisoncountingsort
sorted nondecreasing efficiency
nondecreasing efficiency algorithm
quadratic algorithm considers
algorithm considers pairs
considers pairs element
pairs element array
element array formally
array formally times
formally times basic
operation comparison executed
comparison executed equal
executed equal sum
equal sum encountered
sum encountered times
encountered times algorithm
times algorithm makes
algorithm makes key
makes key comparisons
key comparisons selection
sort addition linear
addition linear extra
linear extra space
extra space positive
space positive algorithm
positive algorithm makes
algorithm makes minimum
makes minimum key
minimum key moves
key moves placing
moves placing directly
placing directly final
directly final position
sorted array counting
array counting idea
counting idea productively
idea productively situation
productively situation elements
situation elements sorted
elements sorted small
sorted small set
set values assume
values assume sort
assume sort values
sort values applying
values applying general
applying general sorting
general sorting algorithm
sorting algorithm advantage
algorithm advantage additional
advantage additional information
additional information values
information values sorted
values sorted scan
sorted scan compute
scan compute simply
compute simply make
simply make elements
make elements equal
elements equal remaining
equal remaining elements
remaining elements equal
elements equal generally
equal generally element
generally element values
element values integers
values integers lower
integers lower bound
upper bound compute
bound compute frequency
compute frequency values
frequency values array
values array positions
array positions sorted
positions sorted filled
sorted filled positions
filled positions overwrite
positions overwrite elements
overwrite elements realistic
elements realistic situation
realistic situation sorting
situation sorting items
sorting items information
items information keys
information keys overwrite
keys overwrite elements
overwrite elements array
elements array hold
hold sorted elements
sorted elements values
elements values equal
values equal lowest
equal lowest copied
lowest copied elements
copied elements positions
positions elements copied
elements copied positions
copied positions accumulated
positions accumulated sums
accumulated sums frequencies
sums frequencies called
frequencies called distribution
called distribution statistics
distribution statistics method
statistics method distribution
method distribution counting
distribution counting sorting
counting sorting array
sorting array values
array values set
values set overwritten
set overwritten process
overwritten process sorting
process sorting frequency
sorting frequency distribution
frequency distribution arrays
distribution arrays array
arrays array values
array values frequencies
values frequencies distribution
frequencies distribution values
distribution values distribution
values distribution values
distribution values proper
values proper positions
proper positions rences
positions rences elements
rences elements final
elements final sorted
final sorted array
sorted array index
index array positions
array positions distribution
positions distribution values
distribution values reduced
values reduced element
reduced element positions
element positions convenient
positions convenient process
convenient process input
process input array
input array left
left element distribution
element distribution position
distribution position array
position array hold
hold sorted decrease
sorted decrease distribution
decrease distribution proceed
distribution proceed element
proceed element array
element array entire
array entire processing
entire processing depicted
processing depicted figure
depicted figure sorting
figure sorting distribution
distribution counting distribution
counting distribution values
distribution values decremented
values decremented shown
decremented shown bold
bold pseudocode algorithm
pseudocode algorithm distributioncountingsort
algorithm distributioncountingsort sorts
distributioncountingsort sorts array
sorts array integers
array integers range
integers range distribution
range distribution counting
distribution counting input
input array integers
array integers output
integers output array
sorted nondecreasing initialize
nondecreasing initialize frequencies
initialize frequencies compute
compute frequencies reuse
frequencies reuse distribution
reuse distribution downto
distribution downto assuming
downto assuming range
assuming range array
range array values
array values fixed
values fixed linear
fixed linear algorithm
linear algorithm makes
algorithm makes consecutive
makes consecutive passes
consecutive passes input
passes input array
input array efficiency
array efficiency class
efficiency class efficient
class efficient sorting
efficient sorting algorithms
quicksort heapsort encountered
heapsort encountered important
encountered important efficiency
important efficiency obtained
efficiency obtained exploiting
obtained exploiting specific
exploiting specific nature
specific nature inputs
nature inputs sorting
inputs sorting distribution
distribution counting works
counting works addition
works addition trading
addition trading space
trading space exercises
space exercises exchange
exercises exchange numeric
exchange numeric values
numeric values variables
values variables extra
variables extra storage
extra storage comparison
storage comparison counting
counting algorithm correctly
algorithm correctly arrays
correctly arrays equal
arrays equal values
equal values assuming
values assuming set
assuming set values
set values sort
values sort alphabetical
sort alphabetical distribution
alphabetical distribution counting
counting algorithm distribution
algorithm distribution counting
counting algorithm stable
algorithm stable design
stable design line
design line algorithm
line algorithm sorting
algorithm sorting array
sorting array size
array size values
size values distinct
values distinct integers
distinct integers ancestry
integers ancestry problem
ancestry problem asks
problem asks determine
asks determine vertex
determine vertex ancestor
ancestor vertex binary
vertex binary generally
binary generally rooted
generally rooted ordered
rooted ordered tree
ordered tree vertices
tree vertices design
vertices design input
design input enhancement
input enhancement algorithm
enhancement algorithm sufficient
algorithm sufficient information
sufficient information solve
information solve problem
solve problem pair
problem pair tree
pair tree vertices
tree vertices constant
vertices constant technique
constant technique virtual
technique virtual initialization
virtual initialization efficient
initialization efficient initialize
efficient initialize elements
initialize elements array
array elements constant
elements constant initialized
constant initialized utilizing
initialized utilizing variable
utilizing variable counter
variable counter initialized
counter initialized elements
initialized elements auxiliary
elements auxiliary arrays
auxiliary arrays size
arrays size defined
size defined counter
defined counter indices
counter indices elements
indices elements initialized
elements initialized index
element initialized index
element initialized kth
initialized kth element
kth element counter
element counter initialized
counter initialized sketch
initialized sketch state
sketch state arrays
state arrays signments
arrays signments general
signments general scheme
general scheme initialized
scheme initialized distance
initialized distance sorting
distance sorting egyptian
sorting egyptian stone
egyptian stone statues
stone statues standing
statues standing row
standing row art
row art gallery
art gallery hall
gallery hall curator
hall curator statues
curator statues ordered
statues ordered height
ordered height minimize
height minimize total
minimize total distance
total distance statues
distance statues moved
statues moved assume
moved assume simplicity
assume simplicity statues
simplicity statues heights
statues heights azi
heights azi write
azi write multiplying
multiplying sparse matrices
sparse matrices matrix
matrices matrix write
matrix write multiplying
multiplying sparse polynomials
sparse polynomials degrees
polynomials degrees good
degrees good idea
good idea write
idea write plays
write plays classic
plays classic game
classic game tic
game tic tac
tic tac toe
tac toe human
toe human user
human user storing
user storing positions
storing positions game
positions game board
game board input
board input enhancement
input enhancement string
enhancement string matching
string matching section
matching section technique
section technique input
technique input enhancement
input enhancement applied
enhancement applied problem
applied problem string
matching recall problem
recall problem string
string matching requires
matching requires finding
requires finding occurrence
finding occurrence string
occurrence string characters
called pattern longer
pattern longer string
longer string characters
called text discussed
text discussed brute
discussed brute algorithm
problem section simply
section simply matches
simply matches pairs
pattern text left
text left mismatch
left mismatch occurs
mismatch occurs shifts
occurs shifts pattern
shifts pattern position
pattern position trial
position trial maximum
trial maximum trials
maximum trials worst
trials worst case
brute algorithm class
algorithm class average
class average comparisons
average comparisons pattern
comparisons pattern shift
pattern shift random
shift random natural
language texts average
texts average case
efficiency turns faster
turns faster algorithms
faster algorithms discovered
algorithms discovered exploit
discovered exploit input
exploit input enhancement
input enhancement idea
enhancement idea preprocess
idea preprocess pattern
preprocess pattern information
pattern information table
information table information
table information actual
information actual pattern
pattern text idea
text idea bestknown
idea bestknown algorithms
bestknown algorithms knuth
algorithms knuth morris
knuth morris pratt
morris pratt algorithm
pratt algorithm knu
algorithm knu boyer
knu boyer moore
moore algorithm boy
algorithm boy principal
boy principal difference
principal difference algorithms
difference algorithms lies
algorithms lies characters
lies characters pattern
counterparts text knuthmorris
text knuthmorris pratt
knuthmorris pratt algorithm
pratt algorithm left
algorithm left boyer
moore algorithm left
algorithm left idea
left idea leads
idea leads simpler
leads simpler algorithms
simpler algorithms pursue
algorithms pursue boyer
pursue boyer moore
moore algorithm starts
algorithm starts aligning
starts aligning pattern
aligning pattern beginning
pattern beginning characters
beginning characters text
characters text trial
text trial fails
trial fails shifts
fails shifts pattern
shifts pattern comparisons
pattern comparisons trial
comparisons trial algorithm
trial algorithm left
algorithm left starting
left starting character
character pattern underlying
pattern underlying idea
underlying idea boyer
moore algorithm simple
algorithm simple actual
simple actual implementation
actual implementation working
implementation working method
working method discussion
method discussion simplified
discussion simplified version
moore algorithm suggested
algorithm suggested horspool
suggested horspool hor
horspool hor addition
hor addition simpler
addition simpler horspool
simpler horspool algorithm
horspool algorithm necessarily
necessarily efficient boyer
efficient boyer moore
moore algorithm random
algorithm random strings
random strings horspool
strings horspool algorithm
barber text starting
text starting pattern
starting pattern moving
pattern moving left
moving left pairs
text pattern characters
pattern characters successfully
characters successfully matching
successfully matching substring
matching substring stopped
substring stopped altogether
stopped altogether continued
altogether continued occurrence
continued occurrence pattern
occurrence pattern desired
pattern desired mismatch
desired mismatch occurs
mismatch occurs shift
occurs shift pattern
shift pattern make
pattern make large
make large shift
large shift risking
shift risking possibility
risking possibility missing
possibility missing matching
substring text horspool
horspool algorithm determines
algorithm determines size
determines size shift
size shift character
shift character text
character text aligned
text aligned character
pattern case character
case character matches
character matches counterpart
matches counterpart pattern
counterpart pattern general
pattern general possibilities
general possibilities case
possibilities case pattern
case pattern letter
pattern letter safely
letter safely shift
safely shift pattern
entire length shift
length shift character
shift character pattern
character pattern aligned
aligned text character
text character pattern
pattern case occurrences
case occurrences character
occurrences character pattern
character pattern letter
pattern letter shift
letter shift align
shift align rightmost
align rightmost occurrence
occurrence pattern text
pattern text case
text case character
case character pattern
similar case pattern
case pattern shifted
pattern shifted entire
shifted entire pattern
entire pattern length
pattern length case
length case finally
case finally character
finally character pattern
similar case rightmost
case rightmost occurrence
rightmost occurrence characters
occurrence characters pattern
characters pattern aligned
aligned text examples
text examples demonstrate
examples demonstrate left
demonstrate left character
left character comparisons
character comparisons lead
comparisons lead farther
lead farther shifts
farther shifts pattern
pattern shifts position
shifts position brute
position brute algorithm
brute algorithm characters
algorithm characters pattern
characters pattern trial
pattern trial lose
trial lose superiority
lose superiority fortunately
superiority fortunately idea
fortunately idea input
idea input enhancement
input enhancement makes
enhancement makes repetitive
makes repetitive comparisons
repetitive comparisons unnecessary
comparisons unnecessary precompute
unnecessary precompute shift
precompute shift sizes
shift sizes table
sizes table indexed
table indexed characters
indexed characters encountered
characters encountered text
encountered text natural
text natural language
language texts space
texts space punctuation
space punctuation symbols
punctuation symbols special
symbols special characters
special characters information
characters information text
information text eventual
text eventual searching
eventual searching required
searching required table
required table entries
table entries shift
entries shift sizes
computed formula pattern
formula pattern length
pattern length characters
length characters pattern
characters pattern distance
distance rightmost characters
rightmost characters pattern
character pattern barber
pattern barber table
barber table entries
table entries equal
entries equal entries
equal entries simple
entries simple algorithm
simple algorithm computing
algorithm computing shift
computing shift table
shift table entries
entries initialize entries
initialize entries pattern
entries pattern length
pattern length scan
length scan pattern
scan pattern left
pattern left repeating
left repeating times
repeating times character
times character pattern
character pattern overwrite
pattern overwrite entry
overwrite entry table
entry table character
table character distance
character distance character
distance character pattern
character pattern algorithm
pattern algorithm scans
algorithm scans pattern
scans pattern left
pattern left overwrite
left overwrite character
overwrite character rightmost
rightmost occurrence algorithm
occurrence algorithm shifttable
algorithm shifttable fills
shifttable fills shift
fills shift table
shift table horspool
table horspool boyer
horspool boyer moore
boyer moore algorithms
moore algorithms input
algorithms input pattern
input pattern alphabet
pattern alphabet characters
alphabet characters output
characters output table
output table size
table size indexed
size indexed alphabet
indexed alphabet characters
alphabet characters filled
characters filled shift
filled shift sizes
computed formula size
formula size table
size table summarize
table summarize algorithm
summarize algorithm horspool
algorithm horspool algorithm
algorithm pattern length
pattern length alphabet
length alphabet pattern
text construct shift
shift table align
table align pattern
text characters matched
characters matched mismatching
encountered case retrieve
entry column shift
column shift table
shift table text
table text character
text character aligned
character aligned character
character pattern shift
shift pattern characters
characters text pseudocode
text pseudocode horspool
pseudocode horspool algorithm
horspool algorithm horspoolmatching
algorithm horspoolmatching implements
horspoolmatching implements horspool
implements horspool algorithm
matching input pattern
input pattern text
pattern text output
text output index
output index left
index left matching
left matching substring
matching substring matches
substring matches shifttable
matches shifttable generate
shifttable generate table
generate table shifts
table shifts position
shifts position pattern
position pattern matched
pattern matched characters
matched characters table
characters table application
table application horspool
application horspool algorithm
barber text comprises
text comprises english
comprises english letters
letters spaces denoted
spaces denoted underscores
denoted underscores shift
underscores shift table
shift table mentioned
table mentioned filled
mentioned filled character
filled character shift
character shift actual
shift actual text
actual text proceeds
text proceeds simple
proceeds simple demonstrate
simple demonstrate worst
demonstrate worst case
case efficiency hor
efficiency hor spool
spool algorithm problem
section exercises random
exercises random texts
random texts efficiency
texts efficiency class
efficiency class horspool
class horspool algorithm
horspool algorithm faster
algorithm faster average
faster average brute
average brute algorithm
brute algorithm fact
algorithm fact mentioned
fact mentioned efficient
mentioned efficient sophisticated
efficient sophisticated predecessor
sophisticated predecessor discovered
predecessor discovered boyer
discovered boyer moore
moore algorithm outline
algorithm outline boyer
outline boyer moore
moore algorithm comparison
algorithm comparison rightmost
comparison rightmost character
rightmost character pattern
pattern character text
character text fails
text fails algorithm
fails algorithm thing
algorithm thing horspool
thing horspool algorithm
horspool algorithm shifts
shifts pattern characters
pattern characters retrieved
characters retrieved table
retrieved table precomputed
table precomputed explained
precomputed explained earlier
explained earlier algorithms
earlier algorithms act
algorithms act differently
act differently positive
differently positive pattern
positive pattern characters
pattern characters matched
characters matched successfully
matched successfully mismatch
successfully mismatch encountered
mismatch encountered text
encountered text pattern
text pattern situation
pattern situation boyer
situation boyer moore
moore algorithm determines
algorithm determines shift
determines shift size
shift size quantities
size quantities guided
quantities guided text
guided text character
text character caused
character caused mismatch
caused mismatch counterpart
mismatch counterpart pattern
counterpart pattern called
pattern called badsymbol
called badsymbol shift
badsymbol shift reasoning
shift reasoning shift
reasoning shift reasoning
shift reasoning horspool
reasoning horspool algorithm
algorithm pattern shift
shift pattern text
pattern text conveniently
text conveniently size
conveniently size shift
size shift computed
shift computed formula
computed formula entry
formula entry precomputed
entry precomputed table
precomputed table horspool
table horspool algorithm
horspool algorithm matched
algorithm matched characters
matched characters text
characters text pattern
text pattern barber
failing letter text
letter text shift
text shift pattern
pattern positions formula
positions formula mismatching
formula mismatching character
mismatching character text
character text occurs
text occurs pattern
occurs pattern provided
pattern provided pattern
provided pattern barber
failing letter shift
letter shift pattern
pattern positions shift
positions shift pattern
shift pattern negative
pattern negative positions
negative positions fall
positions fall brute
fall brute thinking
brute thinking simply
thinking simply shift
simply shift pattern
pattern position summarize
position summarize bad
summarize bad symbol
symbol shift computed
shift computed boyer
computed boyer moore
moore algorithm quantity
algorithm quantity positive
quantity positive negative
positive negative expressed
negative expressed compact
expressed compact formula
compact formula max
formula max shift
max shift guided
shift guided successful
guided successful characters
successful characters pattern
characters pattern refer
pattern refer ending
refer ending portion
ending portion pattern
portion pattern suffix
pattern suffix size
suffix size denote
size denote suff
denote suff shift
suff shift good
shift good suffix
suffix shift apply
shift apply reasoning
apply reasoning guided
reasoning guided filling
guided filling bad
filling bad symbol
shift table based
table based single
based single alphabet
single alphabet character
alphabet character pattern
character pattern suffixes
pattern suffixes sizes
suffixes sizes good
sizes good suffix
shift table case
table case occurrence
case occurrence suff
occurrence suff pattern
suff pattern accurate
pattern accurate occurrence
accurate occurrence suff
rightmost occurrence useless
occurrence useless shift
useless shift pattern
shift pattern occurrence
pattern occurrence suff
preceded character simply
character simply failed
simply failed trial
failed trial case
trial case shift
shift pattern distance
distance rightmost occurrence
rightmost occurrence preceded
occurrence preceded character
rightmost occurrence suff
occurrence suff rightmost
suff rightmost occurrence
pattern abcbab distances
abcbab distances pattern
distances pattern abcbab
pattern abcbab occurrence
abcbab occurrence suff
rightmost occurrence cases
occurrence cases shift
cases shift pattern
entire length pattern
length pattern dbcbab
pattern dbcbab shift
dbcbab shift pattern
entire length characters
length characters shifting
characters shifting pattern
shifting pattern entire
entire length occurrence
length occurrence suff
pattern abcbab shifting
abcbab shifting matching
shifting matching substring
matching substring starts
substring starts text
starts text aligned
text aligned characters
aligned characters pattern
characters pattern shift
shift pattern dbcbab
pattern dbcbab abcbab
dbcbab abcbab pattern
abcbab pattern substring
pattern substring prefix
substring prefix beginning
prefix beginning pattern
beginning pattern suffix
pattern suffix ending
suffix ending pattern
ending pattern erroneous
pattern erroneous shift
erroneous shift based
shift based suffix
based suffix size
suffix size occurrence
size occurrence pattern
occurrence pattern preceded
pattern preceded character
rightmost occurrence longest
occurrence longest prefix
longest prefix size
prefix size matches
size matches suffix
matches suffix size
suffix size prefix
size prefix exists
prefix exists shift
exists shift size
shift size computed
size computed distance
computed distance prefix
distance prefix suffix
prefix suffix set
suffix set pattern
set pattern length
pattern length values
length values good
values good suffix
suffix table boyer
algorithm pattern abcbab
pattern abcbab pattern
abcbab pattern abcbab
pattern abcbab prepared
abcbab prepared summarize
prepared summarize boyer
summarize boyer moore
moore algorithm entirety
algorithm entirety boyer
entirety boyer moore
algorithm pattern alphabet
pattern alphabet pattern
text construct bad
construct bad symbol
table earlier pattern
earlier pattern construct
pattern construct good
construct good suffix
table earlier align
earlier align pattern
text character pairs
pairs matched mismatching
pair encountered character
encountered character pairs
pairs matched successfully
matched successfully case
successfully case retrieve
entry column bad
column bad symbol
symbol table text
table text mismatched
mismatched character retrieve
character retrieve entry
retrieve entry good
entry good suffix
pattern positions computed
positions computed formula
computed formula max
formula max shifting
max shifting maximum
shifting maximum shifts
maximum shifts log
shifts log ical
log ical shifts
ical shifts based
shifts based observations
based observations text
observations text mismatched
mismatched character matched
character matched group
matched group pattern
group pattern rightmost
pattern rightmost characters
rightmost characters imply
characters imply shifting
imply shifting characters
shifting characters spectively
characters spectively lead
spectively lead aligning
lead aligning pattern
aligning pattern matching
pattern matching substring
substring text interested
text interested shifting
interested shifting pattern
shifting pattern missing
pattern missing matching
matching substring maximum
substring maximum numbers
maximum numbers searching
numbers searching pattern
searching pattern baobab
baobab text english
text english letters
letters spaces bad
spaces bad symbol
suffix table filled
table filled pattern
filled pattern baobab
pattern baobab actual
baobab actual pattern
pattern text figure
text figure proceeds
figure proceeds pattern
proceeds pattern fails
pattern fails counterpart
fails counterpart text
counterpart text algorithm
symbol table shifts
table shifts tern
shifts tern max
tern max positions
max positions successfully
positions successfully matches
successfully matches pairs
pairs characters failure
characters failure comparison
shift pattern max
max iteration good
iteration good suffix
good suffix leads
suffix leads farther
shift pattern successfully
pattern successfully matches
successfully matches pair
matches pair failure
pair failure comparison
table shift max
shift max figure
max figure string
figure string matching
string matching boyer
matching boyer moore
algorithm pattern max
max iteration bad
iteration bad symbol
bad symbol leads
symbol leads farther
shift pattern finds
pattern finds matching
finds matching substring
substring text successfully
text successfully matching
successfully matching characters
matching characters pattern
counterparts text searching
text searching occurrence
searching occurrence pattern
occurrence pattern worst
pattern worst case
case effi ciency
effi ciency boyer
ciency boyer moore
moore algorithm linear
linear algorithm runs
runs fast large
fast large alphabets
large alphabets relative
alphabets relative length
relative length pattern
length pattern people
pattern people simplified
people simplified versions
simplified versions horspool
versions horspool algorithm
horspool algorithm dealing
algorithm dealing natural
dealing natural language
natural language strings
language strings exercises
strings exercises apply
exercises apply horspool
algorithm pattern baobab
baobab text bess
text bess knew
bess knew baobabs
knew baobabs problem
baobabs problem searching
problem searching genes
searching genes dna
genes dna sequences
dna sequences hor
sequences hor spool
spool algorithm dna
algorithm dna sequence
dna sequence represented
sequence represented text
represented text alphabet
text alphabet gene
alphabet gene segment
gene segment pattern
segment pattern construct
pattern construct shift
shift table gene
table gene segment
gene segment chromo
segment chromo tcctattctt
chromo tcctattctt apply
tcctattctt apply horspool
horspool algorithm locate
algorithm locate pattern
locate pattern dna
pattern dna sequence
dna sequence ttatagatctcgtattcttttatagatctcctattctt
sequence ttatagatctcgtattcttttatagatctcctattctt character
ttatagatctcgtattcttttatagatctcctattctt character comparisons
character comparisons horspool
comparisons horspool algorithm
text zeros searching
zeros searching text
searching text length
pattern length horspool
length horspool algorithm
horspool algorithm worst
case input horspool
input horspool algorithm
horspool algorithm make
algorithm make character
brute algorithm make
make searching pattern
searching pattern text
pattern text horspool
horspool algorithm discovers
algorithm discovers matching
discovers matching substring
matching substring large
substring large shift
large shift make
shift make character
character comparisons boyer
comparisons boyer moore
moore algorithm make
make searching patterns
text zeros boyer
zeros boyer moore
algorithm correctly bad
correctly bad symbol
symbol table pattern
pattern shifts boyer
shifts boyer moore
algorithm correctly good
correctly good suffix
suffix table pattern
pattern shifts characters
shifts characters pattern
characters pattern counterpart
counterpart text horspool
horspool algorithm characters
algorithm characters left
characters left boyer
moore algorithm implement
algorithm implement horspool
implement horspool algorithm
horspool algorithm boyer
algorithm boyer moore
moore algorithm brute
run experiment efficiencies
experiment efficiencies matching
efficiencies matching random
matching random binary
random binary patterns
binary patterns random
patterns random binary
random binary texts
binary texts random
texts random natural
natural language patterns
language patterns natural
patterns natural language
language texts strings
texts strings characters
strings characters establish
characters establish cyclic
establish cyclic shift
cyclic shift plea
shift plea cyclic
plea cyclic shift
cyclic shift leap
shift leap vice
leap vice versa
vice versa formally
versa formally cyclic
formally cyclic shift
cyclic shift obtained
shift obtained concatenating
obtained concatenating character
concatenating character suffix
character suffix character
suffix character prefix
character prefix design
prefix design space
design space efficient
space efficient algorithm
efficiencies algorithm design
algorithm design efficient
efficiencies algorithm hashing
algorithm hashing section
hashing section efficient
section efficient implement
efficient implement dictionaries
implement dictionaries recall
dictionaries recall dictionary
recall dictionary abstract
abstract data set
data set operations
set operations searching
operations searching lookup
searching lookup insertion
lookup insertion deletion
insertion deletion defined
deletion defined elements
defined elements set
elements set arbitrary
set arbitrary nature
arbitrary nature numbers
nature numbers characters
character strings practice
strings practice important
practice important case
important case records
case records student
student records school
records school citizen
school citizen records
citizen records governmental
records governmental office
governmental office records
office records library
records library typically
library typically records
typically records comprise
records comprise fields
comprise fields responsible
fields responsible keeping
responsible keeping information
keeping information entity
information entity represents
entity represents student
represents student fields
student fields student
fields student date
student date birth
date birth sex
birth sex home
sex home address
home address major
address major fields
major fields called
fields called key
called key identifying
key identifying entities
identifying entities represented
entities represented records
represented records student
records student discussion
student discussion assume
discussion assume implement
assume implement dictionary
implement dictionary records
dictionary records keys
records keys hashing
keys hashing based
hashing based idea
based idea distributing
idea distributing keys
distributing keys dimensional
keys dimensional array
dimensional array called
array called hash
called hash table
hash table distribution
table distribution computing
distribution computing keys
computing keys predefined
keys predefined function
predefined function called
function called hash
called hash function
hash function assigns
function assigns integer
assigns integer called
integer called hash
called hash address
hash address key
address key keys
key keys nonnegative
keys nonnegative integers
nonnegative integers hash
integers hash function
function mod remainder
remainder division keys
division keys letters
keys letters alphabet
letters alphabet assign
alphabet assign letter
assign letter position
letter position alphabet
position alphabet denoted
alphabet denoted ord
denoted ord apply
ord apply kind
apply kind function
kind function integers
function integers finally
integers finally character
finally character string
character string unsophisticated
string unsophisticated option
unsophisticated option mod
option mod option
mod option compute
option compute ord
compute ord mod
ord mod constant
mod constant larger
constant larger ord
larger ord general
ord general hash
general hash function
hash function conflicting
function conflicting require
conflicting require ments
require ments hash
ments hash table
table size excessively
size excessively large
excessively large compared
large compared keys
compared keys sufficient
keys sufficient jeopardize
sufficient jeopardize implementation
jeopardize implementation efficiency
implementation efficiency hash
efficiency hash function
hash function distribute
function distribute keys
distribute keys cells
table evenly requirement
evenly requirement makes
requirement makes desirable
makes desirable applications
desirable applications hash
applications hash function
hash function dependent
function dependent bits
dependent bits key
bits key hash
key hash function
hash function easy
function easy compute
easy compute obtained
compute obtained treating
obtained treating ord
treating ord digits
ord digits based
digits based computing
based computing decimal
computing decimal horner
decimal horner finding
horner finding remainder
finding remainder dividing
remainder dividing figure
dividing figure collision
collision keys hashing
keys hashing choose
hashing choose hash
choose hash table
table size smaller
size smaller keys
smaller keys collisions
keys collisions phenomenon
collisions phenomenon keys
phenomenon keys hashed
table figure collisions
figure collisions expected
collisions expected considerably
expected considerably larger
considerably larger problem
larger problem section
exercises fact worst
fact worst case
worst case keys
case keys hashed
hash table fortunately
table fortunately appropriately
fortunately appropriately chosen
appropriately chosen hash
chosen hash table
table size good
size good hash
good hash function
hash function situation
function situation rarely
situation rarely hashing
rarely hashing scheme
hashing scheme collision
scheme collision resolution
mechanism principal versions
principal versions hashing
versions hashing called
hashing called chaining
called chaining closed
chaining closed hashing
closed hashing called
hashing called addressing
called addressing hashing
addressing hashing chaining
hashing chaining hashing
chaining hashing keys
linked lists attached
lists attached cells
attached cells hash
hash table keys
table keys hashed
hashed cell words
cell words money
words money parted
parted hash function
hash function simple
simple function strings
function strings mentioned
strings mentioned positions
mentioned positions word
positions word letters
word letters alphabet
letters alphabet compute
alphabet compute sum
compute sum remainder
sum remainder division
remainder division table
division table key
table key word
key word hash
word hash mod
hash mod key
mod key word
key word installed
word installed ninth
installed ninth cell
ninth cell mod
cell mod final
mod final result
final result process
result process figure
process figure collision
collision keys mod
keys mod dictionary
mod dictionary implemented
dictionary implemented table
implemented table linked
linked lists simply
lists simply applying
simply applying key
applying key procedure
key procedure creating
procedure creating table
creating table illustrate
table illustrate key
illustrate key kid
key kid hash
kid hash table
table figure compute
figure compute hash
compute hash function
function key kid
key kid attached
kid attached cell
attached cell linked
cell linked key
linked key collisions
key collisions case
collisions case traverse
case traverse linked
traverse linked comparing
linked comparing string
comparing string kid
string kid string
kid string unsuccessful
string unsuccessful general
unsuccessful general efficiency
general efficiency searching
efficiency searching depends
searching depends lengths
depends lengths linked
lengths linked lists
linked lists dictionary
lists dictionary table
dictionary table sizes
table sizes quality
sizes quality keys
quality keys money
money parted figure
parted figure hash
table construction chaining
construction chaining hash
chaining hash function
hash function hash
function hash function
distributes keys cells
table evenly keys
evenly keys ratio
keys ratio called
ratio called factor
called factor hash
factor hash table
hash table plays
table plays crucial
plays crucial role
crucial role efficiency
role efficiency hashing
efficiency hashing average
hashing average pointers
average pointers chain
pointers chain links
chain links inspected
links inspected successful
inspected successful searches
unsuccessful searches turns
searches turns standard
turns standard assumptions
standard assumptions searching
assumptions searching randomly
searching randomly selected
randomly selected element
selected element hash
element hash function
hash function distributing
function distributing keys
distributing keys uniformly
keys uniformly table
uniformly table cells
table cells results
cells results natural
results natural identical
natural identical searching
identical searching sequentially
searching sequentially linked
sequentially linked gained
linked gained hashing
gained hashing reduction
hashing reduction average
reduction average size
average size factor
factor size hash
size hash table
table factor small
factor small imply
small imply lot
imply lot lists
lot lists inefficient
lists inefficient space
inefficient space large
space large longer
large longer linked
longer linked lists
linked lists longer
lists longer times
longer times factor
times factor amazingly
factor amazingly efficient
amazingly efficient scheme
efficient scheme makes
scheme makes key
makes key average
key average price
average price comparisons
price comparisons true
comparisons true addition
true addition comparisons
addition comparisons spend
comparisons spend computing
spend computing hash
function key constant
key constant operation
constant operation independent
operation independent remarkable
independent remarkable efficiency
remarkable efficiency result
efficiency result method
result method ingenuity
method ingenuity expense
ingenuity expense extra
expense extra space
extra space dictionary
space dictionary operations
dictionary operations insertion
insertion deletion identical
deletion identical searching
identical searching insertions
searching insertions problem
insertions problem section
section exercises modification
exercises modification deletion
modification deletion performed
deletion performed searching
performed searching key
searching key deleted
key deleted removing
deleted removing efficiency
removing efficiency operations
efficiency operations identical
operations identical searching
identical searching average
searching average case
average case keys
case keys equal
keys equal hash
equal hash table
table size closed
size closed hashing
hashing addressing closed
addressing closed hashing
closed hashing keys
keys stored hash
stored hash table
hash table linked
linked lists implies
lists implies table
implies table size
table size large
size large keys
large keys strategies
keys strategies employed
strategies employed collision
employed collision resolution
collision resolution simplest
resolution simplest called
simplest called linear
called linear probing
linear probing checks
probing checks cell
checks cell collision
cell collision occurs
collision occurs cell
occurs cell key
cell key installed
key installed cell
installed cell occupied
cell occupied availability
occupied availability cell
availability cell successor
cell successor checked
successor checked hash
checked hash table
hash table reached
table reached wrapped
reached wrapped beginning
wrapped beginning table
beginning table treated
table treated circular
treated circular array
circular array method
array method illustrated
method illustrated figure
illustrated figure word
figure word hash
word hash function
hash function illustrate
function illustrate chaining
illustrate chaining key
chaining key computing
key computing hash
hash function table
function table construction
table construction cell
construction cell unsuccessful
cell unsuccessful cell
unsuccessful cell occupant
cell occupant equal
occupant equal matching
equal matching key
matching key cell
key cell manner
cell manner encounter
manner encounter matching
encounter matching key
matching key successful
key successful cell
successful cell unsuccessful
cell unsuccessful word
unsuccessful word lit
word lit table
lit table figure
table figure lit
figure lit mod
lit mod cell
mod cell immediately
cell immediately kid
immediately kid mod
kid mod kid
mod kid parted
kid parted declare
parted declare unsuccessful
declare unsuccessful insertion
unsuccessful insertion operations
insertion operations straightforward
operations straightforward version
straightforward version hashing
version hashing deletion
hashing deletion simply
deletion simply delete
simply delete key
delete key state
key state hash
table figure unable
figure unable key
unable key afterward
key afterward computing
afterward computing algorithm
computing algorithm location
algorithm location unsuccessful
location unsuccessful result
unsuccessful result simple
result simple solution
simple solution keys
solution keys money
money parted money
parted money figure
money figure hash
table construction linear
construction linear probing
linear probing lazy
probing lazy deletion
lazy deletion previously
deletion previously occupied
previously occupied locations
occupied locations special
locations special symbol
special symbol distinguish
symbol distinguish locations
distinguish locations occupied
locations occupied mathematical
occupied mathematical analysis
mathematical analysis linear
analysis linear probing
linear probing difficult
probing difficult problem
difficult problem chaining
problem chaining simplified
chaining simplified versions
simplified versions results
versions results state
results state average
state average times
average times algorithm
times algorithm access
algorithm access hash
access hash table
table factor successful
factor successful unsuccessful
unsuccessful searches accuracy
searches accuracy approximations
accuracy approximations increases
approximations increases larger
increases larger sizes
larger sizes hash
sizes hash table
hash table numbers
table numbers surprisingly
numbers surprisingly small
surprisingly small densely
small densely populated
densely populated tables
populated tables large
tables large percentage
large percentage values
percentage values hash
values hash table
hash table closer
table closer performance
closer performance linear
performance linear prob
linear prob ing
prob ing deteriorates
ing deteriorates phenomenon
deteriorates phenomenon called
phenomenon called clustering
called clustering cluster
clustering cluster linear
cluster linear probing
linear probing sequence
probing sequence contiguously
sequence contiguously occupied
contiguously occupied cells
occupied cells wrapping
cells wrapping final
wrapping final state
final state hash
table figure clusters
figure clusters clus
clusters clus ters
clus ters bad
ters bad news
bad news hashing
news hashing make
hashing make dictionary
make dictionary operations
dictionary operations efficient
operations efficient clusters
efficient clusters larger
clusters larger probability
larger probability element
probability element attached
element attached cluster
attached cluster increases
cluster increases addition
increases addition large
addition large clusters
large clusters probabil
clusters probabil ity
probabil ity clusters
ity clusters coalesce
clusters coalesce key
coalesce key insertion
key insertion causing
insertion causing clustering
causing clustering collision
clustering collision resolution
collision resolution strategies
resolution strategies suggested
strategies suggested alleviate
suggested alleviate problem
alleviate problem important
problem important hashing
important hashing scheme
hashing scheme hash
scheme hash function
hash function determine
function determine fixed
determine fixed increment
fixed increment probing
increment probing sequence
probing sequence collision
sequence collision location
collision location mod
location mod location
mod location table
location table probed
table probed sequence
probed sequence incre
sequence incre ment
incre ment table
ment table size
table size prime
size prime common
common divisor condition
divisor condition satisfied
condition satisfied automatically
satisfied automatically prime
automatically prime functions
prime functions recommended
functions recommended literature
recommended literature mod
literature mod small
mod small tables
small tables mod
tables mod larger
mod larger problem
larger problem solved
problem solved young
solved young graduate
young graduate student
graduate student mathematics
student mathematics named
mathematics named donald
named donald knuth
donald knuth important
knuth important scientists
important scientists multivolume
scientists multivolume treatise
multivolume treatise art
treatise art programming
art programming knui
programming knui knuii
knuii knuiii knuiv
knuiii knuiv remains
knuiv remains comprehensive
remains comprehensive influential
comprehensive influential algorithmics
influential algorithmics published
algorithmics published mathematical
published mathematical analysis
mathematical analysis hashing
analysis hashing proved
hashing proved difficult
proved difficult partial
difficult partial results
partial results considerable
results considerable practical
considerable practical experience
practical experience method
experience method good
method good hashing
good hashing functions
hashing functions primary
functions primary secondary
primary secondary hashing
secondary hashing perior
hashing perior linear
perior linear probing
linear probing performance
probing performance deteriorates
performance deteriorates table
deteriorates table natural
table natural solution
natural solution situation
solution situation rehashing
situation rehashing current
rehashing current table
current table scanned
table scanned keys
scanned keys relocated
keys relocated larger
relocated larger table
larger table worthwhile
table worthwhile main
worthwhile main properties
main properties hashing
properties hashing balanced
balanced trees principal
trees principal competitor
principal competitor implementing
competitor implementing dictionaries
implementing dictionaries asymptotic
dictionaries asymptotic efficiency
asymptotic efficiency hashing
efficiency hashing searching
hashing searching insertion
insertion deletion implemented
deletion implemented average
implemented average worst
worst case balanced
case balanced trees
balanced trees average
trees average efficiencies
average efficiencies log
efficiencies log average
log average worst
worst cases ordering
cases ordering preservation
ordering preservation balanced
preservation balanced trees
balanced trees hashing
trees hashing assume
hashing assume existence
assume existence key
existence key ordering
key ordering makes
ordering makes hashing
makes hashing suitable
hashing suitable applications
suitable applications iterate
applications iterate keys
iterate keys der
keys der require
der require range
require range queries
range queries counting
queries counting keys
counting keys lower
keys lower upper
upper bounds discovery
bounds discovery ibm
discovery ibm researchers
ibm researchers hashing
researchers hashing important
hashing important applications
important applications standard
applications standard technique
standard technique stor
technique stor ing
stor ing symbol
ing symbol table
symbol table symbols
table symbols generated
symbols generated compilation
generated compilation hashing
compilation hashing handy
hashing handy applications
handy applications checking
applications checking positions
checking positions generated
positions generated chess
generated chess playing
chess playing sidered
playing sidered modifications
sidered modifications proved
modifications proved storing
proved storing large
large dictionaries disks
dictionaries disks variation
disks variation hashing
variation hashing called
hashing called extendible
called extendible hashing
hashing disk access
disk access expensive
access expensive compared
expensive compared probes
compared probes performed
probes performed main
performed main mem
main mem ory
mem ory preferable
ory preferable make
preferable make probes
make probes disk
probes disk accesses
disk accesses location
accesses location computed
location computed hash
computed hash function
hash function extendible
function extendible hashing
hashing disk bucket
disk bucket hold
bucket hold keys
hold keys key
keys key bucket
key bucket identified
bucket identified keys
identified keys read
keys read main
read main memory
main memory searched
memory searched key
searched key section
key section discuss
section discuss trees
discuss trees principal
trees principal alternative
principal alternative storing
alternative storing large
large dictionaries exercises
dictionaries exercises input
exercises input hash
mod construct hash
construct hash table
successful table input
table input hash
mod construct closed
construct closed hash
closed hash table
successful table good
table good idea
good idea hash
idea hash function
hash function letter
function letter natural
letter natural language
natural language word
language word probability
word probability keys
probability keys hashed
table size hash
size hash function
distributes keys evenly
keys evenly cells
evenly cells table
cells table birthday
table birthday paradox
birthday paradox birthday
paradox birthday paradox
birthday paradox asks
paradox asks people
asks people room
people room chances
room chances birthday
chances birthday month
birthday month day
month day unexpected
day unexpected problem
unexpected problem implication
problem implication hashing
implication hashing result
hashing result questions
result questions chaining
questions chaining version
chaining version hashing
version hashing insert
hashing insert keys
insert keys knew
keys knew keys
knew keys dictionary
keys dictionary distinct
dictionary distinct dictionary
distinct dictionary operations
dictionary operations benefit
benefit modification keys
modification keys linked
keys linked sorted
linked sorted dictio
sorted dictio nary
dictio nary operations
nary operations benefit
benefit modification advantage
modification advantage keys
advantage keys stored
keys stored entire
stored entire table
entire table sorted
table sorted hashing
sorted hashing elements
hashing elements distinct
elements distinct efficiency
distinct efficiency application
efficiency application efficiency
application efficiency brute
algorithm section presorting
section presorting based
based algorithm section
algorithm section table
section table average
table average case
average case entry
case entry worst
entry worst case
worst case entry
case entry efficiency
entry efficiency classes
efficiency classes implementations
classes implementations adt
implementations adt dictionary
adt dictionary unordered
dictionary unordered ordered
unordered ordered binary
ordered binary balanced
binary balanced array
balanced array tree
array tree hashing
tree hashing insertion
hashing insertion deletion
insertion deletion discussed
deletion discussed hashing
discussed hashing context
hashing context techniques
context techniques based
techniques based space
based space offs
space offs takes
offs takes advantage
takes advantage general
advantage general strategy
general strategy write
strategy write hashing
write hashing problem
hashing problem natural
problem natural language
language text generate
text generate distinct
generate distinct words
distinct words occurrences
words occurrences word
occurrences word text
word text insert
text insert counters
insert counters pro
counters pro gram
pro gram empirical
gram empirical efficiency
empirical efficiency hashing
efficiency hashing theoretical
hashing theoretical results
theoretical results figure
results figure parental
figure parental node
parental node tree
node tree trees
tree trees idea
trees idea extra
idea extra space
facilitate faster access
faster access data
access data set
data set partic
set partic ularly
ularly important data
important data set
data set large
set large records
large records stored
records stored disk
stored disk principal
disk principal device
principal device organizing
device organizing data
organizing data sets
data sets index
sets index information
index information location
information location records
location records key
records key values
key values data
values data sets
data sets structured
sets structured records
structured records opposed
records opposed unstruc
opposed unstruc tured
unstruc tured data
tured data text
data text images
text images video
images video important
video important index
important index organization
index organization tree
organization tree introduced
tree introduced bayer
introduced bayer mcgreight
bayer mcgreight bay
mcgreight bay extends
bay extends idea
extends idea tree
idea tree section
tree section permitting
section permitting single
permitting single key
single key node
node tree version
tree version data
version data records
data records keys
records keys stored
keys stored leaves
stored leaves increasing
leaves increasing keys
increasing keys parental
keys parental nodes
parental nodes indexing
nodes indexing specifically
indexing specifically parental
specifically parental node
parental node ordered
ordered keys assumed
keys assumed sake
assumed sake simplicity
sake simplicity distinct
simplicity distinct keys
distinct keys interposed
keys interposed pointers
interposed pointers node
pointers node children
node children keys
children keys subtree
keys subtree greater
subtree greater equal
greater equal smaller
smaller equal smallest
smallest key subtree
key subtree keys
keys greater equal
greater equal smallest
smallest key figure
key figure addition
figure addition tree
addition tree structural
tree structural properties
structural properties root
properties root leaf
root leaf children
leaf children node
children node root
node root leaves
root leaves children
leaves children keys
children keys tree
keys tree perfectly
perfectly balanced leaves
balanced leaves node
leaves node depicted
node depicted figure
depicted figure called
figure called node
called node nodes
node nodes classic
nodes classic binary
nodes tree introduced
tree introduced section
introduced section comprises
section comprises nodes
comprises nodes figure
nodes figure tree
tree figure searching
figure searching tree
searching tree similar
tree similar searching
similar searching binary
binary tree starting
tree starting root
starting root chain
root chain pointers
chain pointers leaf
pointers leaf key
leaf key keys
key keys leaf
leaf keys stored
keys stored sorted
stored sorted parental
sorted parental nodes
nodes leaves binary
leaves binary keys
binary keys node
keys node large
node large make
large make worthwhile
make worthwhile key
worthwhile key comparisons
key comparisons concerned
comparisons concerned typical
concerned typical application
typical application data
application data structure
data structure storing
structure storing large
storing large data
large data disk
data disk nodes
disk nodes tree
tree correspond disk
correspond disk pages
disk pages needed
pages needed access
needed access disk
access disk page
disk page typically
page typically orders
typically orders magnitude
orders magnitude larger
magnitude larger needed
larger needed keys
needed keys fast
keys fast memory
fast memory disk
memory disk accesses
disk accesses principal
accesses principal indicator
principal indicator efficiency
indicator efficiency similar
efficiency similar data
similar data structures
data structures nodes
structures nodes tree
nodes tree access
tree access key
access key equal
key equal height
equal height tree
height tree estimate
tree estimate height
estimate height smallest
keys tree positive
tree positive height
positive height root
height root tree
root tree key
tree key nodes
key nodes keys
nodes keys total
keys total minimum
minimum keys nodes
keys nodes children
nodes children nodes
children nodes total
nodes total minimum
minimum keys general
keys general nodes
general nodes keys
nodes keys finally
keys finally leaf
finally leaf nodes
leaf nodes key
nodes key tree
key tree nodes
nodes height inequality
height inequality series
inequality series standard
series standard simplifications
standard simplifications problem
simplifications problem section
section exercises inequality
exercises inequality reduces
inequality reduces yields
reduces yields upper
yields upper bound
height tree nodes
tree nodes log
nodes log inequality
log inequality immediately
inequality immediately implies
immediately implies searching
implies searching tree
searching tree log
tree log operation
log operation important
operation important ascertain
important ascertain efficiency
efficiency class actual
class actual disk
actual disk accesses
disk accesses implied
accesses implied formula
implied formula table
formula table values
table values estimates
values estimates records
estimates records typical
records typical values
typical values tree
values tree upper
tree upper bound
upper bound mind
bound mind table
mind table entries
table entries upper
entries upper estimates
upper estimates disk
estimates disk accesses
disk accesses actual
accesses actual applications
actual applications rarely
applications rarely exceeds
rarely exceeds tree
exceeds tree root
tree root nodes
root nodes stored
nodes stored fast
stored fast memory
fast memory minimize
memory minimize disk
minimize disk accesses
disk accesses operations
accesses operations insertion
insertion deletion straightforward
deletion straightforward ing
straightforward ing log
ing log outline
log outline insertion
outline insertion algorithm
insertion algorithm deletion
algorithm deletion algorithm
deletion algorithm references
algorithm references aho
references aho cor
aho cor straightforward
cor straightforward algorithm
straightforward algorithm inserting
algorithm inserting tree
inserting tree similar
tree similar algorithm
similar algorithm insertion
algorithm insertion tree
insertion tree outlined
tree outlined section
outlined section apply
section apply procedure
apply procedure key
procedure key leaf
key leaf room
leaf room leaf
room leaf position
leaf position keys
position keys sorted
keys sorted room
sorted room leaf
room leaf split
leaf split half
split half sending
half sending half
sending half records
half records node
records node smallest
node smallest key
smallest key node
key node pointer
node pointer inserted
pointer inserted leaf
inserted leaf parent
leaf parent immediately
parent immediately key
immediately key pointer
key pointer leaf
pointer leaf recursive
leaf recursive procedure
recursive procedure percolate
procedure percolate tree
percolate tree root
root created halves
created halves root
halves root keys
root keys split
keys split children
split children root
children root figure
root figure shows
figure shows result
shows result inserting
result inserting tree
tree figure restriction
figure restriction leaves
restriction leaves items
leaves items aware
items aware algorithms
aware algorithms implementing
algorithms implementing inser
implementing inser tions
inser tions tree
tions tree possibility
tree possibility recursive
possibility recursive node
recursive node splits
node splits split
splits split nodes
split nodes encountered
nodes encountered searching
encountered searching leaf
searching leaf possibility
leaf possibility node
possibility node splits
node splits moving
splits moving key
moving key node
key node sibling
node sibling inserting
sibling inserting tree
tree figure moving
figure moving smallest
moving smallest key
smallest key leaf
key leaf sibling
leaf sibling keys
sibling keys replacing
keys replacing key
replacing key parent
key parent smallest
parent smallest figure
smallest figure tree
figure tree obtained
tree figure child
figure child modification
child modification space
modification space expense
space expense slightly
expense slightly complicated
slightly complicated algorithm
complicated algorithm tree
algorithm tree indexing
tree indexing large
indexing large considered
large considered tree
considered tree varieties
tree varieties types
varieties types trees
types trees binary
avl trees btree
trees btree constructed
btree constructed successive
successive insertions data
insertions data records
data records initially
records initially tree
initially tree considered
tree considered tree
considered tree keys
tree keys reside
keys reside leaves
reside leaves upper
leaves upper levels
upper levels organized
levels organized tree
organized tree comprising
tree comprising index
comprising index entire
index entire structure
entire structure called
structure called fact
called fact tree
fact tree exercises
tree exercises examples
exercises examples index
examples index real
index real life
life applications involve
applications involve computers
involve computers prove
computers prove equality
prove equality derivation
equality derivation upper
derivation upper bound
height tree derivation
tree derivation inequality
derivation inequality minimum
inequality minimum tree
minimum tree guarantees
tree guarantees disk
guarantees disk accesses
disk accesses searching
accesses searching records
searching records exceed
records exceed assume
exceed assume root
assume root page
root page stored
page stored main
stored main memory
main memory draw
memory draw tree
draw tree obtained
tree figure assume
figure assume leaf
assume leaf items
leaf items outline
items outline algorithm
largest key tree
key tree modifica
tree modifica tion
modifica tion insert
tion insert operation
insert operation leaf
operation leaf key
leaf key encounters
key encounters node
encounters node keys
keys node split
node split nodes
split nodes sending
nodes sending middle
sending middle key
middle key node
key node parent
parent node root
node root middle
root middle key
middle key created
key created construct
created construct tree
construct tree inserting
tree inserting keys
inserting keys initially
keys initially tree
initially tree principal
tree principal advantage
principal advantage insertion
advantage insertion procedure
insertion procedure compared
procedure compared trees
compared trees section
trees section disadvantage
section disadvantage write
disadvantage write implementing
write implementing key
implementing key insertion
algorithm tree write
tree write visualization
write visualization key
visualization key insertion
algorithm tree summary
tree summary space
summary space offs
practitioners computing algorithm
computing algorithm design
design technique trading
technique trading space
trading space prevalent
space prevalent trading
prevalent trading space
trading space input
space input enhancement
input enhancement principal
enhancement principal varieties
principal varieties trading
varieties trading space
trading space algorithm
space algorithm design
algorithm design idea
design idea preprocess
problem afterward sorting
afterward sorting distribution
distribution counting important
counting important algorithms
important algorithms string
algorithms string matching
string matching examples
matching examples algorithms
based technique distribution
technique distribution counting
distribution counting special
counting special method
special method sorting
method sorting lists
sorting lists elements
lists elements small
elements small set
set values horspool
values horspool algorithm
string matching considered
matching considered simplified
considered simplified version
moore algorithm algorithms
algorithm algorithms based
algorithms based ideas
based ideas input
ideas input enhancement
input enhancement left
enhancement left comparisons
left comparisons pattern
comparisons pattern characters
pattern characters algorithms
characters algorithms bad
algorithms bad symbol
shift table boyer
boyer moore table
moore table called
table called good
called good suffix
shift table prestructuring
table prestructuring technique
prestructuring technique exploits
space offs extra
offs extra space
access data hashing
data hashing trees
hashing trees important
trees important examples
important examples prestructuring
examples prestructuring hashing
prestructuring hashing efficient
hashing efficient approach
efficient approach implementing
approach implementing dictionaries
implementing dictionaries based
dictionaries based idea
based idea mapping
idea mapping keys
mapping keys dimensional
keys dimensional table
dimensional table size
table size limitations
size limitations table
limitations table make
table make collision
make collision resolution
mechanism principal varieties
principal varieties hashing
varieties hashing chaining
hashing chaining keys
chaining keys stored
linked lists hash
lists hash table
hash table closed
table closed hashing
hashing addressing keys
addressing keys stored
keys stored table
stored table enable
table enable searching
enable searching insertion
insertion deletion average
deletion average tree
average tree balanced
balanced tree generalizes
tree generalizes idea
generalizes idea tree
idea tree allowing
tree allowing multiple
allowing multiple keys
multiple keys node
keys node principal
node principal application
principal application called
application called tree
called tree keeping
tree keeping index
keeping index information
index information data
information data stored
data stored disk
stored disk choosing
disk choosing tree
choosing tree appropriately
tree appropriately implement
appropriately implement operations
implement operations searching
insertion deletion disk
deletion disk accesses
disk accesses extremely
accesses extremely large
extremely large files
elements matrix elements
matrix elements matrix
finding greatest common
integers euclid algorithm
divisions euclid algorithm
euclid algorithm inputs
problem algorithm solving
algorithm prove correctness
finding real roots
important algorithm design
real world applications
pair vertices pair
pair vertices connected
edge ith vertex
adjacency lists figure
path graph figure
longest simple path
represented bit string
greed lack word
lack word good
word good greed
good greed works
greed works michael
works michael douglas
michael douglas actor
douglas actor role
actor role gordon
role gordon gecko
gordon gecko wall
gecko wall street
wall street revisit
street revisit making
revisit making problem
making problem faced
problem faced subconsciously
faced subconsciously millions
subconsciously millions cashiers
millions cashiers world
cashiers world specific
world specific coins
specific coins denominations
coins denominations locale
denominations locale section
locale section assume
section assume denominations
assume denominations ordered
denominations ordered decreasing
ordered decreasing widely
decreasing widely coin
widely coin denominations
united states quarter
states quarter dime
quarter dime nickel
dime nickel penny
nickel penny coins
penny coins denominations
coins denominations cents
denominations cents quarter
cents quarter dimes
quarter dimes pennies
dimes pennies consciously
pennies consciously logical
consciously logical strategy
logical strategy making
strategy making sequence
making sequence choices
sequence choices alternatives
choices alternatives coin
alternatives coin denominations
coin denominations greedy
denominations greedy thinking
greedy thinking leads
thinking leads giving
leads giving quarter
giving quarter reduces
quarter reduces remaining
reduces remaining cents
remaining cents coins
cents coins disposal
coins disposal quarter
disposal quarter violated
quarter violated problem
violated problem constraints
problem constraints selection
constraints selection dime
selection dime reducing
dime reducing remaining
reducing remaining cents
remaining cents giving
cents giving dime
giving dime left
dime left cents
left cents pennies
cents pennies solution
pennies solution instance
solution instance making
instance making problem
making problem optimal
problem optimal fact
optimal fact prove
fact prove greedy
optimal solution positive
solution positive integer
positive integer coin
integer coin denominations
coin denominations easy
denominations easy coin
easy coin denominations
coin denominations yield
denominations yield optimal
optimal solution amounts
solution amounts approach
amounts approach applied
approach applied opening
applied opening paragraph
opening paragraph making
paragraph making prob
making prob lem
prob lem called
lem called greedy
called greedy scientists
greedy scientists general
scientists general design
design technique fact
technique fact applicable
fact applicable optimization
applicable optimization problems
optimization problems greedy
problems greedy approach
greedy approach suggests
approach suggests constructing
constructing solution sequence
solution sequence steps
sequence steps panding
steps panding partially
panding partially constructed
problem reached central
reached central technique
central technique choice
technique choice feasible
choice feasible problem
feasible problem constraints
problem constraints locally
constraints locally optimal
optimal local choice
local choice feasible
choice feasible choices
feasible choices irrevocable
choices irrevocable changed
irrevocable changed subsequent
changed subsequent steps
subsequent steps algorithm
steps algorithm requirements
algorithm requirements technique
requirements technique suggests
technique suggests greedy
suggests greedy alternative
greedy alternative sequence
alternative sequence locally
choices yield globally
yield globally optimal
globally optimal solution
optimal solution entire
solution entire problem
entire problem refrain
problem refrain philosophical
refrain philosophical discussion
philosophical discussion greed
discussion greed good
greed good bad
good bad movie
bad movie chapter
movie chapter epigraph
chapter epigraph hero
epigraph hero algorithmic
hero algorithmic perspective
algorithmic perspective greedy
perspective greedy strategy
greedy strategy works
strategy works problems
works problems sequence
problems sequence locally
choices yield optimal
instance problem case
problem case problems
case problems greedy
problems greedy algorithm
greedy algorithm interested
algorithm interested satisfied
interested satisfied approximate
satisfied approximate solution
approximate solution sections
solution sections chapter
sections chapter discuss
chapter discuss classic
discuss classic algorithms
classic algorithms minimum
algorithms minimum spanning
tree problem prim
problem prim algorithm
kruskal algorithm remarkable
algorithm remarkable algorithms
remarkable algorithms fact
algorithms fact solve
fact solve problem
solve problem applying
problem applying greedy
applying greedy approach
greedy approach ways
approach ways yield
ways yield optimal
optimal solution section
solution section classic
section classic algorithm
classic algorithm dijkstra
path problem weighted
weighted graph section
graph section devoted
section devoted huffman
devoted huffman trees
huffman trees principal
trees principal application
principal application huffman
application huffman codes
huffman codes important
codes important data
important data compression
data compression method
compression method interpreted
method interpreted application
interpreted application greedy
application greedy technique
greedy technique finally
technique finally examples
finally examples approximation
examples approximation algorithms
approximation algorithms based
based greedy approach
greedy approach discussed
approach discussed section
section greedy algorithms
greedy algorithms intuitively
algorithms intuitively appealing
intuitively appealing simple
appealing simple optimization
simple optimization problem
optimization problem easy
problem easy figure
easy figure proceed
figure proceed greedy
proceed greedy manner
greedy manner possibly
manner possibly small
possibly small instances
instances problem difficult
problem difficult prove
difficult prove greedy
optimal solution common
solution common ways
common ways illustrated
ways illustrated proof
illustrated proof section
proof section mathematical
section mathematical induction
mathematical induction partially
induction partially constructed
greedy algorithm iteration
algorithm iteration extended
iteration extended optimal
extended optimal solution
solution problem prove
problem prove optimality
prove optimality greedy
optimality greedy algorithm
greedy algorithm advancing
algorithm advancing problem
advancing problem goal
problem goal problem
goal problem minimum
problem minimum moves
minimum moves needed
moves needed chess
needed chess knight
chess knight corner
knight corner board
corner board diagonally
diagonally corner knight
corner knight moves
knight moves shaped
moves shaped jumps
shaped jumps squares
jumps squares horizontally
squares horizontally vertically
vertically square perpendicular
square perpendicular direction
perpendicular direction greedy
direction greedy solution
greedy solution goal
solution goal finish
goal finish squares
finish squares sequence
squares sequence moves
sequence moves solves
moves solves problem
solves problem advances
problem advances obtained
advances obtained equation
obtained equation minimum
equation minimum solution
minimum solution distance
solution distance goal
distance goal manhattan
goal manhattan distance
manhattan distance sum
distance sum difference
sum difference row
difference row numbers
row numbers difference
numbers difference column
difference column numbers
column numbers squares
numbers squares greedy
squares greedy algorithm
greedy algorithm decreases
algorithm decreases knight
decreases knight simply
knight simply final
simply final result
final result obtained
result obtained greedy
greedy algorithm optimal
algorithm optimal based
optimal based algorithm
based algorithm output
algorithm output operates
output operates problem
operates problem placing
problem placing maximum
placing maximum chips
maximum chips board
chips board chips
board chips adjacent
chips adjacent vertically
adjacent vertically horizontally
vertically horizontally diagonally
horizontally diagonally squares
diagonally squares prescription
squares prescription greedy
prescription greedy strategy
greedy strategy chip
strategy chip leave
chip leave squares
leave squares chips
squares chips starting
chips starting upper
starting upper left
left corner board
corner board chips
board chips shown
chips shown figure
shown figure solution
figure solution optimal
solution optimal partition
optimal partition board
partition board squares
board squares shown
squares shown figure
shown figure impossible
figure impossible chip
impossible chip squares
chip squares implies
squares implies total
implies total nonadjacent
total nonadjacent chips
nonadjacent chips board
chips board exceed
board exceed final
exceed final comment
final comment mention
comment mention sophisticated
mention sophisticated theory
sophisticated theory developed
theory developed greedy
developed greedy technique
greedy technique based
technique based abstract
based abstract combinatorial
abstract combinatorial structure
combinatorial structure called
structure called matroid
called matroid interested
matroid interested reader
interested reader books
reader books cor
books cor variety
cor variety internet
variety internet resources
internet resources subject
resources subject figure
subject figure placement
figure placement chips
placement chips adjacent
chips adjacent squares
adjacent squares partition
squares partition board
partition board proving
board proving impossibility
proving impossibility placing
impossibility placing chips
placing chips graph
chips graph figure
figure graph spanning
graph spanning trees
spanning trees minimum
spanning tree prim
prim algorithm problem
algorithm problem arises
problem arises naturally
arises naturally practical
naturally practical situations
practical situations points
situations points cheapest
points cheapest path
cheapest path ery
path ery pair
ery pair points
pair points direct
points direct applications
direct applications design
applications design kinds
design kinds networks
kinds networks communication
networks communication transportation
communication transportation electrical
transportation electrical providing
electrical providing cheapest
providing cheapest achieve
cheapest achieve connectivity
achieve connectivity identifies
connectivity identifies clusters
identifies clusters points
clusters points data
points data sets
data sets classification
sets classification purposes
classification purposes archeology
purposes archeology biology
archeology biology sociology
biology sociology sciences
sociology sciences helpful
sciences helpful constructing
helpful constructing approximate
constructing approximate solutions
approximate solutions difficult
solutions difficult problems
difficult problems traveling
salesman problem section
problem section represent
section represent points
represent points vertices
points vertices graph
vertices graph connections
graph connections graph
connections graph edges
graph edges connection
edges connection costs
connection costs edge
costs edge weights
edge weights posed
weights posed minimum
posed minimum spanning
tree problem defined
problem defined formally
defined formally definition
formally definition spanning
definition spanning tree
spanning tree undirected
tree undirected connected
undirected connected graph
graph connected acyclic
connected acyclic subgraph
acyclic subgraph tree
subgraph tree vertices
vertices graph weights
graph weights assigned
assigned edges minimum
spanning tree smallest
tree smallest weight
smallest weight tree
weight tree defined
defined sum weights
weights edges minimum
tree problem finding
problem finding minimum
graph figure presents
figure presents simple
presents simple illustrating
simple illustrating notions
illustrating notions constructing
notions constructing minimum
spanning tree exhaustive
tree exhaustive obstacles
exhaustive obstacles spanning
obstacles spanning trees
spanning trees grows
trees grows exponentially
grows exponentially graph
exponentially graph size
graph size dense
size dense graphs
dense graphs generating
graphs generating spanning
generating spanning trees
trees graph easy
graph easy fact
easy fact difficult
fact difficult finding
difficult finding minimum
tree weighted graph
weighted graph efficient
graph efficient algorithms
algorithms problem section
problem section outline
section outline prim
outline prim algorithm
algorithm pri robert
pri robert prim
robert prim rediscovered
prim rediscovered algorithm
rediscovered algorithm published
algorithm published years
published years earlier
years earlier czech
earlier czech mathematician
czech mathematician vojte
mathematician vojte jarni
vojte jarni czech
jarni czech journal
czech journal prim
journal prim algorithm
prim algorithm constructs
spanning tree sequence
tree sequence expanding
sequence expanding subtrees
expanding subtrees initial
subtrees initial subtree
initial subtree sequence
subtree sequence consists
sequence consists single
single vertex selected
vertex selected arbitrarily
selected arbitrarily set
arbitrarily set graph
set graph vertices
graph vertices iteration
vertices iteration algorithm
iteration algorithm expands
algorithm expands current
expands current tree
current tree greedy
tree greedy manner
greedy manner simply
manner simply attaching
simply attaching nearest
attaching nearest vertex
vertex tree nearest
tree nearest vertex
vertex tree connected
tree connected vertex
connected vertex tree
vertex tree edge
tree edge smallest
edge smallest weight
broken arbitrarily algorithm
arbitrarily algorithm stops
algorithm stops graph
stops graph vertices
graph vertices included
vertices included tree
included tree constructed
constructed algorithm expands
algorithm expands tree
expands tree vertex
tree vertex iterations
vertex iterations total
total iterations vertices
iterations vertices graph
vertices graph tree
graph tree generated
tree generated algorithm
generated algorithm obtained
algorithm obtained set
obtained set edges
set edges tree
edges tree expansions
tree expansions pseudocode
expansions pseudocode algorithm
pseudocode algorithm prim
prim algorithm constructing
tree vertices initialized
vertices initialized vertex
initialized vertex minimum
vertex minimum weight
weight edge edges
edge edges nature
edges nature prim
nature prim algorithm
prim algorithm makes
algorithm makes vertex
makes vertex current
vertex current tree
current tree information
tree information shortest
information shortest edge
shortest edge connecting
connecting vertex tree
tree vertex information
vertex information attaching
information attaching labels
attaching labels vertex
labels vertex nearest
vertex nearest tree
tree vertex length
vertex length weight
length weight edge
weight edge vertices
edge vertices adjacent
vertices adjacent tree
adjacent tree vertices
tree vertices indicating
vertices indicating infinite
indicating infinite distance
infinite distance tree
distance tree vertices
tree vertices null
vertices null nearest
null nearest tree
tree vertex alternatively
vertex alternatively split
alternatively split vertices
split vertices tree
vertices tree sets
tree sets fringe
sets fringe unseen
fringe unseen fringe
unseen fringe vertices
fringe vertices tree
vertices tree adjacent
tree vertex candidates
vertex candidates tree
candidates tree vertex
tree vertex selected
vertex selected unseen
selected unseen vertices
unseen vertices graph
vertices graph called
graph called unseen
called unseen affected
unseen affected algorithm
affected algorithm labels
algorithm labels finding
labels finding vertex
finding vertex added
vertex added current
added current tree
current tree simple
tree simple task
task finding vertex
finding vertex smallest
vertex smallest distance
smallest distance set
distance set ties
set ties broken
tree operations set
operations set tree
vertices remaining vertex
remaining vertex connected
vertex connected shorter
connected shorter edge
shorter edge current
edge current distance
current distance update
distance update labels
update labels weight
labels weight edge
edge figure demonstrates
demonstrates application prim
prim algorithm specific
specific graph prim
graph prim algorithm
prim algorithm yield
yield minimum spanning
tree prove induction
prove induction subtrees
induction subtrees generated
subtrees generated prim
prim algorithm subgraph
algorithm subgraph minimum
subgraph minimum spanning
spanning tree immediately
tree immediately implies
immediately implies tree
implies tree sequence
tree sequence minimum
sequence minimum spanning
spanning tree vertices
vertices graph basis
graph basis induction
basis induction trivial
induction trivial consists
trivial consists single
single vertex minimum
vertex minimum spanning
spanning tree inductive
tree inductive assume
inductive assume minimum
assume minimum spanning
tree prove generated
prove generated prim
prim algorithm minimum
tree prove contradiction
prove contradiction assuming
contradiction assuming minimum
assuming minimum spanning
weight edge vertex
edge vertex prim
vertex prim algorithm
prim algorithm assumption
algorithm assumption minimum
spanning tree formed
tree formed figure
formed figure addition
figure addition edge
addition edge connecting
connecting vertex coincides
vertex coincides delete
coincides delete edge
delete edge spanning
edge spanning tree
spanning tree entire
tree entire graph
entire graph weight
graph weight equal
equal weight equal
equal weight spanning
weight spanning tree
spanning tree minimum
spanning tree contradicts
tree contradicts assumption
contradicts assumption minimum
spanning tree completes
tree completes correctness
completes correctness proof
prim algorithm efficient
algorithm efficient prim
efficient prim algorithm
prim algorithm depends
data structures chosen
structures chosen graph
chosen graph priority
graph priority set
priority set vertex
set vertex priorities
vertex priorities distances
priorities distances nearest
distances nearest tree
nearest tree vertices
tree vertices figure
vertices figure set
figure set operates
set operates priority
operates priority graph
priority graph represented
unordered array algorithm
array algorithm running
algorithm running iterations
running iterations array
iterations array implementing
array implementing priority
implementing priority traversed
priority traversed delete
traversed delete minimum
delete minimum update
minimum update priorities
update priorities remaining
priorities remaining vertices
remaining vertices implement
vertices implement priority
implement priority min
priority min mirror
min mirror image
mirror image structure
image structure discussed
structure discussed section
discussed section fact
section fact plemented
fact plemented constructing
plemented constructing negating
constructing negating key
negating key values
key values min
values min binary
binary tree element
tree element equal
element equal implementation
equal implementation fringe
implementation fringe unseen
fringe unseen split
unseen split pursued
split pursued unseen
pursued unseen vertices
unseen vertices adjacent
vertices adjacent moved
adjacent moved fringe
moved fringe tree
fringe tree vertices
vertices illustration figure
figure application prim
prim algorithm parenthesized
algorithm parenthesized labels
parenthesized labels vertex
labels vertex middle
vertex middle column
middle column nearest
column nearest tree
tree vertex edge
vertex edge weight
edge weight selected
weight selected vertices
selected vertices edges
vertices edges shown
bold figure correctness
figure correctness proof
prim algorithm children
algorithm children principal
children principal properties
principal properties heaps
properties heaps valid
heaps valid min
valid min heaps
min heaps obvious
heaps obvious modifications
obvious modifications root
modifications root min
root min smallest
min smallest largest
largest element deletion
element deletion smallest
deletion smallest element
smallest element insertion
insertion element min
element min size
min size log
size log operations
log operations operation
operations operation changing
operation changing element
changing element priority
element priority problem
priority problem section
section exercises graph
exercises graph represented
lists priority plemented
priority plemented min
plemented min running
min running algorithm
running algorithm log
log algorithm performs
algorithm performs deletions
performs deletions smallest
deletions smallest element
smallest element makes
element makes verifications
makes verifications possibly
verifications possibly element
possibly element priority
element priority min
priority min size
min size exceeding
size exceeding operations
exceeding operations noted
operations noted earlier
noted earlier log
earlier log operation
log operation running
operation running implementation
running implementation prim
implementation prim algorithm
prim algorithm log
algorithm log connected
log connected graph
connected graph section
graph section greedy
tree problem greedy
problem greedy manner
greedy manner prim
manner prim algorithm
prim algorithm exercises
algorithm exercises write
write pseudocode greedy
pseudocode greedy algorithm
greedy algorithm making
algorithm making problem
making problem coin
problem coin denominations
coin denominations input
denominations input efficiency
input efficiency class
class algorithm design
algorithm design greedy
greedy algorithm assignment
algorithm assignment problem
problem section greedy
optimal solution job
solution job scheduling
job scheduling problem
scheduling problem scheduling
problem scheduling jobs
scheduling jobs dura
jobs dura tions
dura tions execution
tions execution single
execution single processor
single processor jobs
processor jobs executed
jobs executed job
executed job schedule
job schedule minimizes
schedule minimizes total
minimizes total spent
total spent jobs
spent jobs spent
jobs spent job
spent job sum
job sum spent
sum spent job
spent job waiting
job waiting spent
waiting spent execution
spent execution design
execution design greedy
algorithm problem greedy
problem greedy algorithm
optimal solution compatible
solution compatible intervals
compatible intervals real
real line representing
line representing times
representing times activity
times activity requiring
activity requiring resource
requiring resource task
resource task largest
task largest intervals
largest intervals overlap
intervals overlap investigate
overlap investigate greedy
investigate greedy algorithms
greedy algorithms based
algorithms based earliest
based earliest shortest
earliest shortest duration
shortest duration earliest
duration earliest finish
earliest finish algorithms
finish algorithms prove
algorithms prove algorithm
optimal solution counterexample
solution counterexample showing
counterexample showing case
showing case bridge
case bridge crossing
bridge crossing revisited
crossing revisited generalization
revisited generalization bridge
generalization bridge crossing
bridge crossing puzzle
crossing puzzle problem
problem exercises people
exercises people bridge
people bridge crossing
bridge crossing times
crossing times conditions
times conditions problem
conditions problem people
problem people bridge
people bridge speed
bridge speed slower
speed slower flashlight
slower flashlight group
flashlight group design
group design greedy
algorithm problem bridge
problem bridge algorithm
bridge algorithm yield
yield minimum crossing
minimum crossing instance
crossing instance problem
instance problem prove
problem prove instance
prove instance smallest
instance smallest people
smallest people averaging
people averaging identical
averaging identical vessels
identical vessels pints
vessels pints allowed
pints allowed operation
allowed operation vessels
operation vessels split
vessels split total
split total equally
total equally achieve
equally achieve minimum
achieve minimum vessel
minimum vessel initial
vessel initial set
initial set sequence
set sequence operations
sequence operations rumor
operations rumor spreading
rumor spreading people
spreading people possession
people possession rumor
possession rumor rumors
rumor rumors sending
rumors sending electronic
sending electronic messages
electronic messages assume
messages assume sender
assume sender includes
sender includes rumors
includes rumors message
rumors message addressee
message addressee design
addressee design greedy
algorithm yields minimum
yields minimum messages
minimum messages send
messages send rumors
send rumors bachet
rumors bachet problem
bachet problem weights
problem weights optimal
weights optimal set
optimal set weights
set weights scale
weights scale integer
scale integer largest
integer largest range
largest range provided
range provided weights
provided weights free
weights free cup
free cup scale
cup scale weights
scale weights cups
weights cups scale
cups scale apply
scale apply prim
graph priority vertices
priority vertices tree
vertices tree apply
tree apply prim
graph priority fringe
fringe vertices current
vertices current tree
current tree adjacent
tree vertex notion
vertex notion minimum
notion minimum spanning
spanning tree applicable
tree applicable connected
applicable connected weighted
weighted graph connectivity
graph connectivity applying
connectivity applying prim
applying prim algorithm
prim algorithm correctly
edge weights minimum
tree graph obtained
graph obtained prim
obtained prim algorithm
prim algorithm gnew
algorithm gnew graph
gnew graph obtained
graph obtained adding
obtained adding vertex
adding vertex edges
vertex edges weights
edges weights connecting
weights connecting vertex
connecting vertex vertices
vertex vertices struct
vertices struct minimum
struct minimum spanning
spanning tree gnew
tree gnew adding
gnew adding edges
adding edges prim
edges prim algorithm
prim algorithm spanning
algorithm spanning tree
spanning tree connected
connected graph weights
graph weights edges
weights edges good
edges good algorithm
problem prove weighted
prove weighted connected
connected graph distinct
graph distinct weights
distinct weights minimum
spanning tree outline
tree outline efficient
outline efficient algorithm
efficient algorithm changing
algorithm changing element
changing element min
element min efficiency
min efficiency algorithm
efficiency algorithm kruskal
kruskal algorithm previous
previous section considered
section considered greedy
considered greedy algorithm
greedy algorithm grows
algorithm grows mini
grows mini mum
spanning tree greedy
tree greedy inclusion
greedy inclusion nearest
inclusion nearest vertex
nearest vertex vertices
vertex vertices tree
vertices tree remarkably
tree remarkably greedy
remarkably greedy algorithm
greedy algorithm mini
algorithm mini mum
tree problem yields
optimal solution named
solution named kruskal
named kruskal algorithm
kruskal algorithm joseph
algorithm joseph kruskal
joseph kruskal discovered
kruskal discovered algorithm
discovered algorithm year
algorithm year graduate
year graduate student
graduate student kru
student kru kruskal
kru kruskal algorithm
connected graph acyclic
graph acyclic subgraph
acyclic subgraph edges
subgraph edges sum
sum edge weights
edge weights smallest
weights smallest difficult
smallest difficult prove
difficult prove subgraph
prove subgraph tree
subgraph tree algorithm
tree algorithm constructs
spanning tree expanding
tree expanding sequence
expanding sequence subgraphs
sequence subgraphs acyclic
subgraphs acyclic necessarily
acyclic necessarily connected
necessarily connected inter
connected inter mediate
inter mediate stages
mediate stages algorithm
stages algorithm begins
algorithm begins sorting
begins sorting graph
sorting graph edges
graph edges nondecreasing
nondecreasing weights starting
weights starting subgraph
starting subgraph scans
subgraph scans sorted
scans sorted adding
sorted adding edge
adding edge current
edge current subgraph
current subgraph inclusion
subgraph inclusion create
inclusion create simply
create simply skipping
simply skipping edge
skipping edge algorithm
edge algorithm kruskal
kruskal algorithm constructing
spanning tree sort
tree sort nondecreasing
sort nondecreasing edge
nondecreasing edge weights
edge weights ecounter
weights ecounter initialize
ecounter initialize set
initialize set tree
set tree edges
tree edges size
edges size initialize
size initialize processed
initialize processed edges
processed edges ecounter
edges ecounter eik
ecounter eik acyclic
eik acyclic eik
acyclic eik ecounter
eik ecounter correctness
ecounter correctness kruskal
kruskal algorithm proved
algorithm proved repeating
proved repeating essen
repeating essen tial
essen tial steps
tial steps proof
steps proof prim
prim algorithm previous
previous section fact
section fact tree
fact tree prim
prim algorithm generally
algorithm generally acyclic
generally acyclic subgraph
acyclic subgraph kruskal
subgraph kruskal algorithm
kruskal algorithm turns
algorithm turns obstacle
turns obstacle overcome
obstacle overcome figure
overcome figure demonstrates
demonstrates application kruskal
kruskal algorithm graph
algorithm graph illustrating
graph illustrating prim
illustrating prim algorithm
section algorithm operations
algorithm operations disconnectedness
operations disconnectedness intermediate
disconnectedness intermediate subgraphs
intermediate subgraphs applying
subgraphs applying prim
applying prim kruskal
kruskal algorithms small
algorithms small graph
small graph create
graph create impression
create impression simpler
impression simpler impres
simpler impres sion
impres sion wrong
sion wrong iterations
wrong iterations kruskal
iterations kruskal algorithm
kruskal algorithm addition
algorithm addition edge
addition edge edges
edge edges selected
edges selected create
selected create tree
create tree edges
tree edges sorted
edges sorted edges
sorted edges illustration
edges illustration figure
figure application kruskal
kruskal algorithm selected
algorithm selected edges
selected edges shown
bold figure edge
figure edge connecting
connecting vertices create
vertices create difficult
create difficult created
difficult created edge
created edge connects
edge connects vertices
connects vertices connected
vertices connected path
connected path vertices
path vertices connected
connected component figure
component figure connected
connected component subgraph
component subgraph generated
subgraph generated kruskal
generated kruskal algorithm
kruskal algorithm tree
algorithm tree cycles
tree cycles view
cycles view observations
view observations convenient
observations convenient slightly
convenient slightly interpretation
slightly interpretation kruskal
interpretation kruskal algorithm
kruskal algorithm operations
algorithm operations progression
operations progression series
progression series forests
series forests vertices
forests vertices graph
graph edges initial
edges initial forest
initial forest consists
forest consists trivial
consists trivial trees
trivial trees comprising
trees comprising single
comprising single vertex
single vertex graph
vertex graph final
graph final forest
final forest consists
forest consists single
consists single tree
single tree minimum
tree graph iteration
graph iteration algorithm
iteration algorithm takes
algorithm takes edge
takes edge sorted
edge sorted graph
sorted graph edges
graph edges finds
edges finds trees
finds trees vertices
trees vertices trees
vertices trees unites
trees unites larger
unites larger tree
larger tree adding
tree adding edge
adding edge fortunately
edge fortunately efficient
fortunately efficient algorithms
efficient algorithms crucial
algorithms crucial vertices
crucial vertices tree
vertices tree called
tree called unionfind
called unionfind algorithms
unionfind algorithms discuss
algorithms discuss subsection
discuss subsection efficient
subsection efficient union
efficient union algorithm
union algorithm running
algorithm running kruskal
running kruskal algorithm
kruskal algorithm dominated
algorithm dominated needed
dominated needed sorting
needed sorting edge
sorting edge weights
edge weights graph
weights graph efficient
graph efficient sorting
algorithm efficiency kruskal
efficiency kruskal algorithm
kruskal algorithm log
algorithm log disjoint
log disjoint subsets
disjoint subsets union
subsets union algorithms
union algorithms kruskal
algorithms kruskal algorithm
kruskal algorithm applications
algorithm applications require
applications require dynamic
subsets element collection
element collection subjected
union operations sequence
operations sequence bounded
sequence bounded union
bounded union increases
union increases subset
increases subset size
subset size elements
size elements entire
entire set dealing
set dealing abstract
dealing abstract data
abstract data collection
data collection disjoint
disjoint subsets finite
subsets finite set
finite set operations
set operations makeset
operations makeset creates
makeset creates element
creates element set
element set assumed
set assumed operation
assumed operation applied
operation applied elements
applied elements set
elements set returns
set returns subset
returns subset union
subset union constructs
union constructs union
constructs union disjoint
disjoint subsets adds
subsets adds collection
adds collection deleted
collection deleted makeset
deleted makeset creates
makeset creates set
creates set applying
set applying operation
applying operation times
operation times initializes
times initializes structure
initializes structure collection
structure collection singleton
collection singleton sets
singleton sets performing
sets performing union
performing union yields
union yields union
yields union disjoint
disjoint subsets implementations
subsets implementations abstract
implementations abstract data
abstract data element
data element disjoint
element disjoint subsets
disjoint subsets collection
collection subset representative
subset representative implemen
representative implemen tations
implemen tations impose
tations impose specific
impose specific constraints
specific constraints representative
constraints representative requiring
representative requiring smallest
requiring smallest element
smallest element subset
element subset representative
subset representative assumed
representative assumed set
assumed set elements
set elements mapped
elements mapped integers
mapped integers principal
integers principal alternatives
principal alternatives implementing
alternatives implementing data
implementing data structure
structure called quick
called quick optimizes
quick optimizes efficiency
optimizes efficiency operation
efficiency operation called
operation called quick
called quick union
quick union optimizes
union optimizes union
optimizes union operation
union operation quick
operation quick array
quick array indexed
array indexed elements
indexed elements underlying
elements underlying set
underlying set array
set array values
array values representatives
values representatives subsets
representatives subsets elements
subsets elements subset
elements subset implemented
subset implemented linked
implemented linked header
linked header pointers
header pointers elements
pointers elements figure
elements figure scheme
figure scheme implementation
scheme implementation makeset
makeset requires assigning
requires assigning element
assigning element representative
element representative array
representative array initializing
array initializing corre
initializing corre sponding
corre sponding linked
sponding linked single
linked single node
single node efficiency
node efficiency operation
efficiency operation initialization
singleton subsets efficiency
subsets efficiency retrieve
efficiency retrieve representative
retrieve representative array
representative array executing
array executing union
executing union takes
union takes longer
takes longer straightforward
longer straightforward solution
straightforward solution simply
solution simply append
simply append update
append update information
update information representative
information representative elements
representative elements subset
elements subset representatives
subset representatives element
representatives element index
element index representative
index representative size
representative size null
size null figure
null figure linked
figure linked representation
linked representation subsets
representation subsets obtained
subsets obtained quick
obtained quick performing
quick performing union
performing union lists
union lists size
lists size considered
size considered deleted
considered deleted collection
deleted collection delete
collection delete collection
delete collection easy
collection easy verify
easy verify algorithm
verify algorithm sequence
algorithm sequence union
operations union runs
union runs compared
runs compared alternatives
compared alternatives simple
alternatives simple efficiency
simple efficiency sequence
efficiency sequence union
union operations append
operations append shorter
append shorter lists
shorter lists longer
lists longer ties
longer ties broken
arbitrarily size assumed
size assumed storing
assumed storing elements
storing elements header
elements header modification
header modification called
modification called figure
called figure forest
figure forest representation
forest representation subsets
representation subsets quick
subsets quick union
quick union result
union result union
result union size
union size worst
efficiency single plication
single plication union
plication union operation
union operation worst
operation worst case
worst case running
case running legitimate
running legitimate sequence
legitimate sequence union
size operations turns
operations turns log
turns log proof
log proof assertion
proof assertion element
assertion element set
element set disjoint
set disjoint subsets
disjoint subsets manipulate
subsets manipulate times
manipulate times representative
times representative updated
representative updated sequence
updated sequence union
size operations large
operations large set
large set elements
set elements representative
elements representative updated
representative updated smaller
updated smaller subset
smaller subset involved
subset involved computing
involved computing union
computing union size
union size large
large size subset
size subset representative
subset representative updated
representative updated resulting
set elements updated
elements updated resulting
set elements general
elements general updated
general updated times
updated times resulting
times resulting set
set elements entire
entire set elements
set elements log
elements log total
log total updates
total updates representatives
updates representatives elements
representatives elements exceed
elements exceed log
exceed log union
union size efficiency
size efficiency sequence
finds log quick
quick union principal
union principal alternative
principal alternative implementing
alternative implementing disjoint
implementing disjoint subsets
disjoint subsets represents
subsets represents subset
represents subset rooted
subset rooted tree
rooted tree nodes
nodes tree subset
tree subset elements
subset elements node
elements node root
node root element
root element considered
element considered subset
considered subset representative
subset representative tree
representative tree edges
tree edges directed
edges directed children
directed children parents
children parents figure
parents figure addition
figure addition mapping
addition mapping set
mapping set elements
set elements tree
elements tree nodes
tree nodes implemented
nodes implemented array
implemented array pointers
array pointers maintained
pointers maintained mapping
maintained mapping shown
mapping shown figure
shown figure sake
figure sake simplicity
sake simplicity implementation
simplicity implementation makeset
makeset requires creation
requires creation single
creation single node
node tree operation
tree operation initialization
singleton subsets union
subsets union implemented
union implemented attaching
implemented attaching root
attaching root tree
root tree deleting
tree deleting tree
deleting tree collection
tree collection making
collection making pointer
making pointer root
pointer root null
root null efficiency
null efficiency operation
efficiency operation specific
operation specific usefulness
specific usefulness amortized
amortized efficiency mentioned
efficiency mentioned chapter
mentioned chapter figure
chapter figure path
figure path compression
path compression performed
compression performed pointer
performed pointer chain
chain node tree
root element returned
element returned subset
returned subset representative
subset representative efficiency
representative efficiency single
single operation tree
operation tree representing
tree representing subset
representing subset degenerate
subset degenerate linked
degenerate linked nodes
linked nodes bound
nodes bound improved
bound improved straightforward
improved straightforward union
straightforward union operation
union operation attaching
operation attaching smaller
attaching smaller tree
smaller tree root
tree root larger
root larger ties
larger ties broken
arbitrarily size tree
size tree measured
tree measured nodes
measured nodes version
nodes version called
called union size
union size height
size height version
height version called
called union rank
union rank options
rank options require
options require storing
require storing node
storing node tree
tree node descendants
node descendants height
descendants height subtree
height subtree rooted
rooted node easily
node easily prove
easily prove case
prove case height
case height tree
height tree logarithmic
tree logarithmic making
logarithmic making execute
making execute log
execute log quick
quick union efficiency
union efficiency sequence
finds log fact
log fact efficiency
fact efficiency obtained
efficiency obtained combining
obtained combining variety
combining variety quick
variety quick union
quick union path
union path compression
path compression modification
compression modification makes
modification makes node
makes node encountered
node encountered execution
encountered execution operation
execution operation tree
operation tree root
tree root figure
root figure sophisticated
figure sophisticated analysis
sophisticated analysis tar
analysis tar similar
tar similar techniques
similar techniques efficiency
techniques efficiency sequence
unions finds slightly
finds slightly worse
slightly worse linear
worse linear exercises
linear exercises apply
exercises apply kruskal
apply kruskal algorithm
spanning tree graphs
tree graphs statements
graphs statements true
statements true false
false minimum weight
tree graph edge
graph edge weights
spanning tree edge
tree edge weights
spanning tree algorithm
tree algorithm kruskal
algorithm kruskal make
kruskal make minimum
make minimum spanning
spanning forest arbitrary
forest arbitrary graph
arbitrary graph minimum
spanning forest trees
forest trees minimum
minimum spanning trees
trees graph connected
graph connected components
connected components kruskal
components kruskal algorithm
kruskal algorithm correctly
edge weights design
weights design algorithm
finding maximum spanning
maximum spanning tree
spanning tree largest
tree largest edge
largest edge weight
edge weight weighted
weight weighted connected
connected graph rewrite
graph rewrite pseudocode
rewrite pseudocode kruskal
pseudocode kruskal algorithm
kruskal algorithm terms
algorithm terms operations
terms operations disjoint
operations disjoint subsets
disjoint subsets adt
subsets adt prove
adt prove correctness
prove correctness kruskal
kruskal algorithm prove
algorithm prove efficiency
prove efficiency log
efficiency log union
union size version
size version quick
version quick union
quick union web
union web sites
web sites animations
sites animations kruskal
animations kruskal prim
kruskal prim algorithms
prim algorithms discuss
algorithms discuss merits
discuss merits demerits
merits demerits design
demerits design conduct
design conduct experiment
conduct experiment empirically
experiment empirically efficiencies
empirically efficiencies prim
efficiencies prim kruskal
kruskal algorithms random
algorithms random graphs
random graphs sizes
graphs sizes densities
sizes densities steiner
densities steiner tree
steiner tree villages
tree villages located
villages located vertices
located vertices unit
vertices unit square
unit square euclidean
square euclidean plane
euclidean plane asked
plane asked shortest
asked shortest network
shortest network roads
network roads path
roads path pair
path pair villages
pair villages roads
villages roads network
roads network write
network write generating
write generating random
generating random maze
random maze based
maze based prim
based prim algorithm
kruskal algorithm dijkstra
dijkstra algorithm section
algorithm section single
section single source
problem vertex called
called source weighted
source weighted connected
connected graph shortest
graph shortest paths
paths vertices important
vertices important stress
important stress interested
stress interested single
interested single shortest
single shortest path
shortest path starts
path starts source
starts source visits
source visits vertices
visits vertices difficult
vertices difficult problem
difficult problem version
problem version traveling
version traveling salesman
salesman problem introduced
section discussed single
discussed single source
problem asks family
asks family paths
family paths leading
leading source vertex
source vertex graph
vertex graph paths
graph paths edges
paths edges common
edges common variety
common variety practical
variety practical applications
practical applications shortest
applications shortest paths
paths problem popular
problem popular study
popular study obvious
study obvious widely
obvious widely applications
widely applications transportation
applications transportation planning
transportation planning packet
planning packet routing
packet routing communi
routing communi cation
communi cation networks
cation networks internet
networks internet multitudes
internet multitudes obvious
multitudes obvious applications
obvious applications finding
applications finding shortest
shortest paths social
paths social networks
social networks speech
networks speech recognition
speech recognition document
recognition document formatting
document formatting robotics
formatting robotics compilers
robotics compilers airline
compilers airline crew
crew scheduling world
scheduling world tainment
world tainment mention
tainment mention pathfinding
mention pathfinding video
pathfinding video games
video games finding
games finding solutions
finding solutions puzzles
solutions puzzles state
puzzles state space
graphs section simple
section simple algorithms
simple algorithms finding
algorithms finding shortest
shortest paths floyd
paths floyd algorithm
floyd algorithm general
algorithm general pairs
general pairs shortest
paths problem discussed
problem discussed chapter
chapter algorithm single
paths problem called
problem called dijkstra
called dijkstra algorithm
dijkstra algorithm applicable
algorithm applicable undirected
directed graphs nonnegative
graphs nonnegative weights
nonnegative weights plications
weights plications condition
plications condition satisfied
condition satisfied limitation
satisfied limitation impaired
limitation impaired popularity
impaired popularity dijkstra
popularity dijkstra algorithm
algorithm finds shortest
finds shortest paths
paths graph vertices
graph vertices distance
vertices distance source
distance source finds
source finds shortest
finds shortest path
path source edsger
source edsger dijkstra
edsger dijkstra noted
dijkstra noted dutch
noted dutch pioneer
dutch pioneer science
pioneer science industry
science industry computing
industry computing discovered
computing discovered algorithm
discovered algorithm mid
algorithm mid dijkstra
mid dijkstra algorithm
dijkstra algorithm graph
algorithm graph problem
graph problem posed
problem posed solved
posed solved amazing
solved amazing thing
amazing thing publish
thing publish amazing
publish amazing algorithms
amazing algorithms considered
algorithms considered scientific
considered scientific topic
scientific topic figure
topic figure idea
figure idea dijkstra
idea dijkstra algorithm
dijkstra algorithm subtree
algorithm subtree shortest
subtree shortest paths
shortest paths shown
shown bold nearest
bold nearest source
nearest source vertex
source vertex selected
vertex selected comparing
selected comparing lengths
comparing lengths subtree
lengths subtree paths
subtree paths increased
paths increased distances
increased distances vertices
distances vertices adjacent
vertices adjacent subtree
adjacent subtree vertices
subtree vertices vertex
vertices vertex nearest
vertex nearest general
nearest general ith
general ith iteration
ith iteration commences
iteration commences algorithm
commences algorithm identified
algorithm identified shortest
identified shortest paths
paths vertices nearest
vertices nearest source
source vertices source
vertices source edges
source edges shortest
edges shortest paths
shortest paths leading
leading source subtree
source subtree graph
subtree graph figure
graph figure edge
figure edge weights
edge weights nonnegative
weights nonnegative vertex
nonnegative vertex nearest
adjacent vertices set
adjacent vertices referred
vertices referred fringe
referred fringe vertices
fringe vertices candidates
vertices candidates dijkstra
candidates dijkstra algorithm
dijkstra algorithm selects
selects vertex nearest
source vertices treated
vertices treated fringe
treated fringe vertices
fringe vertices connected
vertices connected tree
connected tree vertices
tree vertices edges
vertices edges infinitely
edges infinitely large
infinitely large weights
large weights ith
weights ith nearest
ith nearest vertex
nearest vertex algorithm
vertex algorithm computes
algorithm computes fringe
computes fringe vertex
fringe vertex sum
vertex sum distance
sum distance nearest
distance nearest tree
tree vertex weight
weight edge length
edge length shortest
path source previously
source previously determined
previously determined algorithm
determined algorithm selects
selects vertex smallest
vertex smallest sum
smallest sum fact
sum fact suffices
fact suffices lengths
suffices lengths special
lengths special paths
special paths central
paths central insight
central insight dijkstra
insight dijkstra algorithm
dijkstra algorithm facilitate
algorithm facilitate algorithm
facilitate algorithm operations
algorithm operations vertex
operations vertex labels
vertex labels numeric
labels numeric length
numeric length shortest
source vertex algorithm
algorithm vertex added
added tree length
tree length shortest
source vertex path
vertex path parent
path parent vertex
parent vertex tree
vertex tree constructed
tree constructed left
constructed left unspecified
left unspecified source
unspecified source vertices
vertices adjacent current
adjacent current tree
current tree vertices
tree vertices labeling
vertices labeling finding
labeling finding nearest
finding nearest vertex
nearest vertex simple
vertex simple task
task finding fringe
finding fringe vertex
fringe vertex smallest
vertex smallest ties
smallest ties broken
tree operations fringe
operations fringe set
fringe set tree
vertices remaining fringe
remaining fringe vertex
fringe vertex connected
vertex connected edge
connected edge weight
edge weight update
weight update labels
update labels figure
labels figure demonstrates
demonstrates application dijkstra
dijkstra algorithm specific
specific graph labeling
graph labeling mechanics
labeling mechanics dijkstra
mechanics dijkstra algorithm
dijkstra algorithm similar
algorithm similar prim
similar prim algorithm
algorithm section construct
section construct expanding
construct expanding subtree
expanding subtree vertices
subtree vertices selecting
vertices selecting vertex
selecting vertex priority
vertex priority remaining
priority remaining vertices
remaining vertices important
vertices important solve
important solve problems
solve problems operate
problems operate priorities
operate priorities computed
priorities computed manner
computed manner dijkstra
manner dijkstra algorithm
dijkstra algorithm compares
lengths edge weights
edge weights prim
weights prim algorithm
algorithm compares edge
compares edge weights
edge weights pseudocode
weights pseudocode dijkstra
pseudocode dijkstra algorithm
dijkstra algorithm spelled
algorithm spelled prim
spelled prim algorithm
algorithm section terms
section terms explicit
terms explicit operations
explicit operations sets
operations sets labeled
sets labeled vertices
labeled vertices set
set vertices shortest
vertices shortest path
shortest path priority
path priority fringe
fringe vertices pseudocode
vertices pseudocode source
pseudocode source vertex
source vertex fringe
vertex fringe vertices
fringe vertices adjacent
vertices adjacent iteration
adjacent iteration completed
iteration completed algorithm
completed algorithm dijkstra
dijkstra algorithm single
shortest paths input
paths input weighted
connected graph nonnegative
nonnegative weights vertex
weights vertex output
vertex output length
output length shortest
shortest path penultimate
path penultimate vertex
penultimate vertex initialize
vertex initialize priority
initialize priority vertex
priority vertex null
vertex null insert
null insert initialize
insert initialize vertex
initialize vertex priority
vertex priority decrease
priority decrease update
decrease update priority
update priority deletemin
priority deletemin delete
deletemin delete minimum
delete minimum priority
minimum priority element
priority element vertex
element vertex adjacent
vertex adjacent decrease
adjacent decrease efficiency
decrease efficiency dijkstra
efficiency dijkstra algorithm
dijkstra algorithm depends
structures implementing priority
implementing priority representing
priority representing input
representing input graph
input graph reasons
graph reasons explained
reasons explained analysis
explained analysis prim
analysis prim algorithm
algorithm section tree
section tree vertices
vertices illustration shortest
illustration shortest paths
shortest paths identified
paths identified nonnumeric
identified nonnumeric labels
nonnumeric labels backward
labels backward destination
backward destination vertex
destination vertex left
vertex left column
left column source
column source lengths
source lengths numeric
lengths numeric labels
numeric labels tree
labels tree vertices
tree vertices length
vertices length figure
length figure application
figure application dijkstra
dijkstra algorithm closest
algorithm closest vertex
closest vertex shown
vertex shown bold
shown bold graphs
bold graphs represented
graphs represented weight
unordered array graphs
array graphs represented
lists priority implemented
priority implemented min
implemented min log
min log upper
log upper bound
upper bound achieved
bound achieved prim
achieved prim dijkstra
prim dijkstra algorithms
dijkstra algorithms priority
algorithms priority implemented
priority implemented sophisticated
implemented sophisticated data
sophisticated data structure
structure called fibonacci
called fibonacci cor
fibonacci cor complexity
cor complexity considerable
complexity considerable overhead
considerable overhead make
overhead make improvement
make improvement primarily
improvement primarily theoretical
primarily theoretical exercises
theoretical exercises adjustments
exercises adjustments dijkstra
adjustments dijkstra algorithm
dijkstra algorithm underlying
algorithm underlying graph
underlying graph solve
graph solve problems
problems solve single
paths problem directed
problem directed weighted
weighted graphs shortest
graphs shortest path
shortest path vertices
path vertices weighted
called single pair
path problem shortest
problem shortest paths
paths vertex weighted
vertex weighted graph
called single destination
single destination shortest
destination shortest paths
paths problem solve
problem solve single
paths problem graph
problem graph nonnegative
graph nonnegative numbers
nonnegative numbers assigned
assigned vertices length
vertices length path
length path defined
path defined sum
defined sum vertex
sum vertex numbers
vertex numbers path
numbers path solve
path solve instances
solve instances single
instances single source
problem vertex source
vertex source counterexample
source counterexample shows
counterexample shows dijkstra
shows dijkstra algorithm
dijkstra algorithm weighted
algorithm weighted connected
connected graph negative
negative weights tree
weights tree constructed
tree constructed dijkstra
constructed dijkstra algorithm
dijkstra algorithm process
algorithm process solving
process solving single
connected graph true
graph true false
true false spanning
false spanning tree
spanning tree true
tree true false
false minimum spanning
spanning tree write
tree write pseudocode
write pseudocode simpler
pseudocode simpler version
simpler version dijkstra
version dijkstra algorithm
algorithm finds distances
finds distances lengths
vertex vertices graph
vertices graph represented
matrix prove correctness
prove correctness dijkstra
correctness dijkstra algorithm
dijkstra algorithm graphs
algorithm graphs positive
graphs positive weights
positive weights design
weights design linear
linear algorithm solving
algorithm solving single
paths problem dags
problem dags directed
dags directed acyclic
acyclic graphs represented
adjacency lists minimum
lists minimum sum
sum descent problem
descent problem exercises
problem exercises solved
exercises solved dijkstra
solved dijkstra algorithm
shortest path modeling
path modeling assume
modeling assume model
assume model weighted
model weighted connected
connected graph balls
graph balls representing
balls representing vertices
representing vertices connected
vertices connected strings
connected strings appro
strings appro priate
appro priate lengths
priate lengths representing
lengths representing edges
representing edges solve
edges solve single
solve single pair
path problem model
problem model solve
model solve single
paths problem model
problem model revisit
model revisit section
revisit section determining
section determining route
determining route subway
developed subway washington
subway washington london
washington london write
london write task
write task huffman
task huffman trees
huffman trees codes
trees codes encode
codes encode text
encode text comprises
text comprises symbols
comprises symbols symbol
symbols symbol alphabet
symbol alphabet assigning
alphabet assigning text
assigning text symbols
text symbols sequence
symbols sequence bits
sequence bits called
bits called codeword
called codeword fixed
codeword fixed length
encoding assigns symbol
assigns symbol bit
symbol bit string
bit string length
string length log
length log standard
log standard ascii
standard ascii code
ascii code coding
code coding scheme
coding scheme yields
scheme yields shorter
yields shorter bit
shorter bit string
bit string average
string average based
average based idea
based idea assigning
idea assigning shorter
assigning shorter code
shorter code words
code words frequent
words frequent symbols
frequent symbols longer
symbols longer codewords
longer codewords frequent
frequent symbols idea
symbols idea telegraph
idea telegraph code
telegraph code invented
code invented mid
invented mid century
mid century samuel
century samuel morse
samuel morse code
morse code frequent
code frequent letters
frequent letters assigned
letters assigned short
assigned short sequences
short sequences dots
sequences dots dashes
dots dashes infrequent
dashes infrequent letters
infrequent letters longer
letters longer variable
longer variable length
encoding assigns codewords
assigns codewords lengths
codewords lengths symbols
lengths symbols introduces
symbols introduces problem
introduces problem fixed
problem fixed length
length encoding bits
encoding bits encoded
bits encoded text
encoded text represent
text represent generally
represent generally ith
generally ith symbol
ith symbol complication
symbol complication limit
complication limit called
limit called prefix
called prefix free
prefix free simply
free simply prefix
simply prefix codes
prefix codes prefix
codes prefix code
prefix code codeword
code codeword prefix
prefix codeword symbol
codeword symbol encoding
symbol encoding simply
encoding simply scan
simply scan bit
bit string group
string group bits
group bits codeword
bits codeword symbol
codeword symbol bits
symbol bits symbol
bits symbol operation
symbol operation bit
operation bit string
bit string reached
string reached create
reached create binary
create binary prefix
binary prefix code
prefix code alphabet
code alphabet natural
alphabet natural associate
natural associate alphabet
associate alphabet symbols
alphabet symbols leaves
symbols leaves binary
tree left edges
left edges labeled
edges labeled codeword
labeled codeword symbol
codeword symbol obtained
symbol obtained recording
obtained recording labels
recording labels simple
labels simple path
path root symbol
root symbol leaf
symbol leaf simple
leaf simple path
simple path leaf
path leaf continues
leaf continues leaf
continues leaf codeword
leaf codeword prefix
prefix codeword tree
codeword tree yields
tree yields prefix
yields prefix code
prefix code trees
code trees constructed
trees constructed manner
constructed manner alphabet
manner alphabet frequencies
alphabet frequencies symbol
symbol occurrences construct
occurrences construct tree
construct tree assign
tree assign shorter
assign shorter bit
shorter bit strings
bit strings high
strings high frequency
high frequency symbols
frequency symbols longer
symbols longer low
longer low frequency
low frequency symbols
frequency symbols greedy
symbols greedy algorithm
greedy algorithm invented
algorithm invented david
invented david huffman
david huffman graduate
huffman graduate student
graduate student mit
student mit huf
mit huf huffman
huf huffman algorithm
huffman algorithm initialize
algorithm initialize node
initialize node trees
node trees symbols
trees symbols alphabet
symbols alphabet frequency
alphabet frequency symbol
frequency symbol tree
symbol tree root
tree weight generally
weight generally weight
generally weight tree
weight tree equal
tree equal sum
equal sum frequencies
sum frequencies tree
frequencies tree leaves
tree leaves operation
leaves operation single
operation single tree
single tree obtained
tree obtained trees
obtained trees smallest
trees smallest weight
broken arbitrarily problem
arbitrarily problem section
exercises make left
make left subtree
left subtree tree
subtree tree sum
tree sum weights
sum weights root
weights root tree
tree weight tree
weight tree constructed
constructed algorithm called
algorithm called huffman
called huffman tree
huffman tree defines
tree defines manner
defines manner huffman
manner huffman code
huffman code symbol
code symbol alphabet
symbol alphabet occurrence
alphabet occurrence frequencies
occurrence frequencies text
frequencies text symbols
text symbols symbol
symbols symbol frequency
symbol frequency huffman
frequency huffman tree
tree construction input
construction input shown
input shown figure
shown figure constructing
figure constructing huffman
constructing huffman coding
coding tree resulting
tree resulting codewords
resulting codewords symbol
codewords symbol frequency
symbol frequency codeword
frequency codeword dad
codeword dad encoded
dad encoded decoded
encoded decoded bad
decoded bad occurrence
bad occurrence frequencies
occurrence frequencies codeword
frequencies codeword lengths
codeword lengths obtained
lengths obtained average
obtained average bits
average bits symbol
bits symbol code
symbol code fixed
code fixed length
length encoding alphabet
encoding alphabet bits
alphabet bits symbol
bits symbol toy
symbol toy huffman
toy huffman code
huffman code achieves
code achieves compression
achieves compression ratio
compression ratio standard
ratio standard compression
standard compression algorithm
compression algorithm effectiveness
algorithm effectiveness words
effectiveness words huffman
words huffman encoding
huffman encoding text
encoding text memory
text memory fixed
memory fixed length
length encoding extensive
encoding extensive experiments
extensive experiments huffman
experiments huffman codes
huffman codes shown
codes shown compression
shown compression ratio
compression ratio scheme
ratio scheme typically
scheme typically falls
typically falls depending
falls depending characteristics
depending characteristics text
characteristics text compressed
text compressed huffman
compressed huffman encoding
huffman encoding important
encoding important compression
important compression methods
compression methods addition
methods addition simplicity
addition simplicity versatility
simplicity versatility yields
versatility yields optimal
yields optimal minimal
optimal minimal length
minimal length encoding
length encoding provided
encoding provided frequencies
provided frequencies symbol
symbol occurrences independent
occurrences independent advance
independent advance simplest
advance simplest version
simplest version huffman
version huffman compression
huffman compression calls
compression calls fact
calls fact preliminary
fact preliminary scanning
preliminary scanning text
scanning text frequencies
text frequencies symbol
symbol occurrences frequencies
occurrences frequencies construct
frequencies construct huffman
construct huffman coding
coding tree encode
tree encode text
encode text scheme
text scheme makes
scheme makes coding
makes coding table
coding table encoded
table encoded text
encoded text make
text make decoding
make decoding drawback
decoding drawback overcome
drawback overcome dynamic
overcome dynamic huffman
dynamic huffman encoding
huffman encoding coding
encoding coding tree
coding tree updated
tree updated symbol
updated symbol read
symbol read source
read source text
source text modern
text modern alternatives
modern alternatives lempel
alternatives lempel ziv
lempel ziv algorithms
ziv algorithms assign
algorithms assign codewords
assign codewords individual
codewords individual symbols
individual symbols strings
strings symbols allowing
symbols allowing achieve
allowing achieve robust
achieve robust compressions
robust compressions applications
compressions applications important
important applications huffman
applications huffman algorithm
huffman algorithm data
algorithm data compression
data compression positive
compression positive numbers
positive numbers assigned
assigned leaves binary
tree node define
node define weighted
define weighted path
path length sum
length sum length
sum length simple
ith leaf construct
leaf construct binary
construct binary tree
binary tree minimum
tree minimum weighted
path length general
length general problem
general problem huffman
problem huffman algorithm
huffman algorithm solves
algorithm solves coding
solves coding application
coding application length
application length codeword
length codeword frequency
codeword frequency ith
frequency ith symbol
ith symbol problem
symbol problem arises
problem arises situations
arises situations involving
situations involving decision
involving decision making
decision making game
making game guessing
game guessing chosen
guessing chosen possibilities
chosen possibilities integer
possibilities integer questions
integer questions answerable
questions answerable strategies
answerable strategies playing
strategies playing game
playing game modeled
game modeled decision
modeled decision trees
decision trees depicted
trees depicted figure
depicted figure length
figure length simple
root leaf tree
leaf tree equal
tree equal questions
equal questions needed
needed chosen represented
chosen represented leaf
represented leaf chosen
leaf chosen probability
chosen probability sum
probability sum decision
sum decision trees
decision trees discussed
trees discussed section
discussed section figure
section figure decision
figure decision trees
decision trees guessing
trees guessing integer
guessing integer length
integer length path
ith leaf average
leaf average questions
average questions needed
needed chosen game
chosen game strategy
game strategy represented
strategy represented decision
represented decision tree
decision tree numbers
tree numbers chosen
numbers chosen probability
chosen probability strategy
probability strategy successively
strategy successively eliminate
successively eliminate half
eliminate half candidates
half candidates binary
candidates binary case
binary case arbitrary
case arbitrary minimum
arbitrary minimum weighted
weighted path tree
path tree rightmost
tree rightmost figure
rightmost figure huffman
figure huffman algorithm
huffman algorithm solve
problem general case
general case encountering
case encountering problem
encountering problem structing
problem structing optimal
tree section discussed
section discussed problem
discussed problem constructing
problem constructing optimal
binary tree positive
tree positive numbers
positive numbers prob
numbers prob abilities
prob abilities assigned
abilities assigned node
assigned node tree
node tree section
tree section numbers
section numbers assigned
assigned leaves problem
leaves problem turns
problem turns easier
turns easier solved
easier solved greedy
solved greedy algorithm
greedy algorithm solved
algorithm solved complicated
solved complicated dynamic
complicated dynamic programming
programming algorithm exercises
algorithm exercises construct
exercises construct huffman
construct huffman code
huffman code data
code data symbol
data symbol frequency
symbol frequency encode
frequency encode abacabad
encode abacabad code
abacabad code decode
code decode code
decode code data
code data transmission
data transmission purposes
transmission purposes desirable
purposes desirable code
desirable code minimum
code minimum variance
minimum variance codeword
variance codeword lengths
codeword lengths codes
lengths codes average
codes average length
average length compute
length compute average
compute average variance
average variance codeword
variance codeword length
codeword length huffman
length huffman codes
huffman codes result
codes result breaking
result breaking huffman
breaking huffman code
huffman code construction
code construction data
construction data symbol
data symbol probability
symbol probability properties
probability properties true
properties true huffman
true huffman code
huffman code codewords
code codewords frequent
frequent symbols length
symbols length codeword
length codeword length
length frequent symbol
frequent symbol smaller
symbol smaller equal
smaller equal codeword
equal codeword length
length frequent maximal
frequent maximal length
maximal length codeword
length codeword huffman
codeword huffman encoding
huffman encoding alphabet
encoding alphabet symbols
alphabet symbols write
symbols write pseudocode
write pseudocode huffman
pseudocode huffman tree
construction algorithm efficiency
class algorithm constructing
algorithm constructing huff
constructing huff tree
huff tree function
tree function alphabet
alphabet size huffman
size huffman tree
huffman tree constructed
tree constructed linear
constructed linear alphabet
linear alphabet symbols
alphabet symbols sorted
symbols sorted frequencies
sorted frequencies huffman
frequencies huffman coding
coding tree algorithm
tree algorithm codewords
algorithm codewords symbols
codewords symbols efficiency
symbols efficiency class
efficiency class function
class function alphabet
alphabet size generate
size generate huffman
generate huffman code
huffman code explicit
code explicit generation
explicit generation huffman
generation huffman coding
coding tree write
tree write constructs
write constructs huffman
constructs huffman code
huffman code english
code english text
english text encode
text encode write
encode write decoding
write decoding english
decoding english text
english text encoded
text encoded huffman
encoded huffman code
huffman code experiment
code experiment encoding
experiment encoding range
encoding range typical
range typical compres
typical compres sion
compres sion ratios
sion ratios huffman
ratios huffman encoding
huffman encoding english
encoding english texts
english texts words
texts words experiment
words experiment encoding
experiment encoding sensitive
encoding sensitive compression
sensitive compression ratios
compression ratios standard
ratios standard estimates
standard estimates frequencies
estimates frequencies actual
frequencies actual frequencies
actual frequencies symbol
symbol occurrences english
occurrences english texts
english texts card
texts card guessing
card guessing design
guessing design strategy
design strategy minimizes
strategy minimizes expected
minimizes expected questions
expected questions asked
questions asked game
asked game gar
game gar deck
gar deck cards
deck cards consists
cards consists ace
consists ace spades
ace spades deuces
spades deuces spades
deuces spades threes
spades threes nines
threes nines making
nines making cards
making cards draws
cards draws card
draws card shuffled
card shuffled deck
shuffled deck questions
deck questions answerable
questions answerable summary
answerable summary greedy
summary greedy technique
greedy technique suggests
technique suggests constructing
constructing solution optimization
optimization problem sequence
problem sequence steps
sequence steps expanding
steps expanding partially
expanding partially constructed
problem reached choice
reached choice feasible
choice feasible locally
feasible locally optimal
locally optimal irrevocable
optimal irrevocable prim
irrevocable prim algorithm
prim algorithm greedy
greedy algorithm constructing
connected graph works
graph works attaching
works attaching previously
attaching previously constructed
previously constructed subtree
constructed subtree vertex
subtree vertex closest
vertex closest vertices
closest vertices tree
vertices tree kruskal
tree kruskal algorithm
kruskal algorithm greedy
tree problem constructs
problem constructs minimum
spanning tree selecting
tree selecting edges
selecting edges nondecreasing
nondecreasing weights provided
weights provided inclusion
provided inclusion create
inclusion create checking
create checking condition
checking condition efficiently
condition efficiently requires
efficiently requires application
requires application called
application called union
called union algorithms
union algorithms dijkstra
algorithms dijkstra algorithm
dijkstra algorithm solves
algorithm solves single
solves single source
source shortest path
path problem finding
paths vertex source
vertex source vertices
source vertices weighted
graph digraph works
digraph works prim
works prim algorithm
lengths edge lengths
edge lengths dijkstra
lengths dijkstra algorithm
dijkstra algorithm yields
algorithm yields solution
yields solution graph
solution graph nonnegative
nonnegative weights huffman
weights huffman tree
huffman tree binary
binary tree minimizes
tree minimizes weighted
minimizes weighted path
root leaves predefined
leaves predefined weights
predefined weights important
weights important application
important application huffman
application huffman trees
huffman trees huffman
trees huffman codes
huffman codes huffman
codes huffman code
huffman code optimal
code optimal prefix
optimal prefix free
prefix free variable
free variable length
length encoding scheme
encoding scheme assigns
scheme assigns bit
assigns bit strings
bit strings symbols
strings symbols based
symbols based frequencies
based frequencies text
frequencies text accomplished
text accomplished greedy
accomplished greedy construction
greedy construction binary
construction binary tree
tree leaves represent
leaves represent alphabet
represent alphabet symbols
alphabet symbols edges
symbols edges labeled
problem solved algorithm
algorithm tower hanoi
log key comparisons
general comparison based
vertices colored color
problem partition problem
pair problem convex
problem convex hull
set points cartesian
figure binary tree
stable sorting algorithm
general algorithm design
prime factors prime
factors prime factors
assign smallest colors
sorted array binary
quadratic worst case
problem exercises estimate
efficient algorithm solving
zeros main diagonal
trees avl trees
keys subtree smaller
subtree smaller keys
smaller keys subtree
key node tree
subtree keys greater
node ordered keys
numbers design algorithm
graph undirected directed
general method solving
optimizing linear function
constraints linear equations
algorithm computing greatest
solution instance problem
algorithm illustrated figure
tree rooted tree
solution obtained solution
fast algorithm runs
algorithm runs space
binary representation positive
representation positive decimal
important analysis algorithms
analysis algorithm efficiency
recurrence relation multiplications
relation multiplications algorithm
rithm basic operation
asymptotic efficiency class
input size elements
algorithm discussed section
science removed brute
removed brute sword
brute sword crowbar
sword crowbar edward
crowbar edward lytton
edward lytton leila
lytton leila chapter
leila chapter thing
chapter thing robert
thing robert byrne
robert byrne master
byrne master pool
master pool billiards
pool billiards player
billiards player writer
player writer introducing
writer introducing framework
introducing framework methods
framework methods algorithm
algorithm analysis preceding
analysis preceding chapter
preceding chapter ready
chapter ready embark
ready embark discussion
embark discussion algorithm
discussion algorithm design
design strategies chapters
strategies chapters devoted
chapters devoted design
devoted design strategy
design strategy subject
strategy subject chapter
subject chapter brute
chapter brute important
brute important special
special case exhaustive
case exhaustive brute
exhaustive brute straightforward
concepts involved implied
involved implied strategy
implied strategy definition
strategy definition intellect
definition intellect prescription
intellect prescription brute
prescription brute approach
approach brute strategy
brute strategy easiest
strategy easiest apply
easiest apply exponentiation
apply exponentiation problem
exponentiation problem compute
problem compute nonzero
compute nonzero nonnegative
nonzero nonnegative integer
nonnegative integer problem
integer problem trivial
problem trivial vehicle
trivial vehicle illustrating
vehicle illustrating algorithm
illustrating algorithm design
design strategies brute
strategies brute computing
brute computing mod
computing mod large
mod large integers
large integers principal
integers principal component
principal component leading
component leading encryption
leading encryption algorithm
encryption algorithm definition
algorithm definition exponentiation
definition exponentiation times
exponentiation times suggests
times suggests simply
suggests simply computing
simply computing multiplying
computing multiplying times
multiplying times encountered
times encountered brute
encountered brute algorithms
brute algorithms consecutive
algorithms consecutive integer
computing gcd section
gcd section definition
section definition based
multiplication section examples
section examples chapter
examples chapter algorithms
chapter algorithms based
algorithms based brute
brute approach rarely
approach rarely source
rarely source clever
source clever efficient
clever efficient algorithms
efficient algorithms brute
algorithms brute proach
brute proach overlooked
proach overlooked important
overlooked important algorithm
algorithm design strategy
design strategy strategies
strategy strategies brute
strategies brute applicable
brute applicable wide
applicable wide riety
wide riety problems
riety problems fact
problems fact general
fact general approach
general approach difficult
approach difficult problems
difficult problems tackle
problems tackle impor
tackle impor tant
impor tant problems
sorting searching matrix
searching matrix multiplication
matrix multiplication string
multiplication string matching
string matching brute
matching brute approach
brute approach yields
approach yields reasonable
yields reasonable algorithms
reasonable algorithms practi
algorithms practi cal
practi cal limitation
cal limitation instance
limitation instance size
instance size expense
size expense designing
expense designing efficient
designing efficient algorithm
efficient algorithm unjustifiable
algorithm unjustifiable instances
unjustifiable instances prob
instances prob lem
prob lem solved
lem solved brute
algorithm solve instances
solve instances acceptable
instances acceptable speed
acceptable speed fourth
speed fourth inefficient
fourth inefficient general
inefficient general brute
general brute algo
algo rithm solving
rithm solving small
solving small size
small size instances
size instances problem
instances problem finally
problem finally brute
finally brute algorithm
brute algorithm important
algorithm important theoretical
important theoretical educational
theoretical educational pur
educational pur pose
pur pose yardstick
pose yardstick efficient
yardstick efficient alternatives
efficient alternatives solving
alternatives solving problem
solving problem selection
problem selection sort
section application brute
approach problem sorting
problem sorting orderable
sorting orderable items
orderable items numbers
items numbers characters
character strings rearrange
strings rearrange nondecreasing
rearrange nondecreasing mentioned
nondecreasing mentioned section
mentioned section dozens
section dozens algorithms
dozens algorithms developed
algorithms developed solving
developed solving important
solving important problem
important problem learned
problem learned forget
learned forget problem
forget problem afresh
problem afresh mind
afresh mind unburdened
mind unburdened previous
unburdened previous knowledge
previous knowledge sorting
knowledge sorting algo
sorting algo rithms
algo rithms straightforward
rithms straightforward method
straightforward method solving
method solving sorting
solving sorting problem
sorting problem reasonable
problem reasonable people
reasonable people algorithms
people algorithms discussed
algorithms discussed selection
discussed selection sort
selection sort prime
sort prime candidates
prime candidates selection
candidates selection sort
selection sort scanning
sort scanning entire
scanning entire smallest
entire smallest element
smallest element exchange
element exchange element
position sorted scan
sorted scan starting
scan starting element
starting element smallest
element smallest elements
smallest elements exchange
elements exchange element
final position generally
position generally ith
generally ith algorithm
ith algorithm searches
algorithm searches smallest
searches smallest item
smallest item elements
item elements swaps
elements swaps amin
swaps amin final
amin final positions
final positions elements
positions elements passes
elements passes sorted
passes sorted pseudocode
sorted pseudocode algorithm
pseudocode algorithm simplicity
algorithm simplicity assumes
simplicity assumes implemented
assumes implemented array
implemented array algorithm
array algorithm selectionsort
algorithm selectionsort sorts
selectionsort sorts array
sorts array selection
array selection sort
selection sort input
sorted nondecreasing min
nondecreasing min swap
min swap min
swap min action
min action algorithm
illustrated figure analysis
figure analysis selection
analysis selection sort
selection sort straightforward
sort straightforward input
straightforward input size
size elements basic
elements basic operation
key comparison min
comparison min times
min times executed
times executed depends
executed depends array
depends array size
array size sum
size sum figure
sum figure sorting
figure sorting selection
sorting selection sort
selection sort line
sort line corresponds
line corresponds iteration
corresponds iteration algorithm
iteration algorithm tail
algorithm tail vertical
tail vertical element
vertical element bold
element bold smallest
bold smallest element
smallest element elements
element elements left
elements left vertical
left vertical final
subsequent iterations encountered
iterations encountered sum
encountered sum analyzing
sum analyzing algorithm
analyzing algorithm section
algorithm section compute
section compute sum
compute sum distributing
sum distributing summation
distributing summation symbol
summation symbol immediately
symbol immediately sum
immediately sum decreasing
sum decreasing integers
decreasing integers selection
integers selection sort
selection sort algorithm
sort algorithm inputs
algorithm inputs key
inputs key swaps
key swaps precisely
swaps precisely repetition
precisely repetition loop
repetition loop property
loop property distinguishes
property distinguishes selection
distinguishes selection sort
selection sort positively
sort positively sorting
positively sorting algorithms
algorithms sort brute
sort brute application
brute application sorting
sorting problem adjacent
problem adjacent elements
adjacent elements exchange
elements exchange repeatedly
exchange repeatedly bubbling
repeatedly bubbling largest
bubbling largest element
largest element position
element position bubbles
position bubbles largest
bubbles largest element
largest element passes
element passes sorted
passes sorted sort
sorted sort represented
sort represented diagram
represented diagram final
diagram final positions
pseudocode algorithm bubblesort
algorithm bubblesort sorts
bubblesort sorts array
array sort input
sorted nondecreasing swap
nondecreasing swap action
swap action algorithm
illustrated figure key
figure key comparisons
key comparisons sort
comparisons sort version
sort version arrays
arrays size obtained
size obtained sum
obtained sum identical
sum identical sum
identical sum selection
sum selection sort
selection sort figure
sort figure passes
figure passes sort
passes sort line
sort line shown
line shown swap
shown swap elements
swap elements vertical
elements vertical final
subsequent iterations algorithm
iterations algorithm key
algorithm key swaps
key swaps depends
swaps depends input
depends input worst
worst case decreasing
case decreasing arrays
decreasing arrays key
key comparisons sworst
comparisons sworst case
sworst case application
case application brute
application brute strategy
brute strategy version
strategy version algorithm
version algorithm obtained
algorithm obtained improved
obtained improved modest
modest effort specifically
effort specifically crude
specifically crude version
crude version sort
version sort exploiting
sort exploiting observation
exploiting observation makes
observation makes exchanges
section exercises version
exercises version runs
version runs faster
runs faster inputs
faster inputs worst
inputs worst average
average cases fact
cases fact elementary
fact elementary sorting
elementary sorting methods
methods sort inferior
sort inferior choice
inferior choice catchy
choice catchy heard
catchy heard general
heard general lesson
general lesson learned
lesson learned important
learned important repeating
important repeating application
repeating application brute
modest effort exercises
effort exercises algorithm
exercises algorithm considered
algorithm considered appli
considered appli cation
appli cation brute
cation brute approach
approach problem solved
problem solved brute
brute algorithm efficiency
algorithm efficiency brute
algorithm computing function
computing function bits
representation compute mod
compute mod large
mod large positive
positive integer circumvent
integer circumvent problem
circumvent problem large
problem large magnitude
large magnitude algorithms
magnitude algorithms problems
algorithms problems exercises
problems exercises algorithm
exercises algorithm based
brute approach design
approach design brute
algorithm computing polynomial
polynomial anxn determine
anxn determine worst
class design linear
linear algorithm designed
algorithm designed problem
designed problem design
design algorithm linear
algorithm linear efficiency
linear efficiency problem
efficiency problem network
problem network topology
network topology specifies
topology specifies computers
specifies computers printers
computers printers devices
printers devices connected
devices connected network
connected network figure
network figure illustrates
figure illustrates common
illustrates common topologies
common topologies networks
topologies networks ring
networks ring star
connected mesh ring
mesh ring star
connected mesh boolean
mesh boolean matrix
boolean matrix supposed
matrix supposed adjacency
supposed adjacency matrix
matrix graph modeling
graph modeling network
modeling network topologies
network topologies task
topologies task determine
task determine topologies
determine topologies matrix
topologies matrix represents
matrix represents design
represents design brute
brute algorithm task
algorithm task efficiency
task efficiency class
efficiency class tetromino
class tetromino tilings
tetromino tilings tetrominoes
tilings tetrominoes tiles
tetrominoes tiles squares
tiles squares types
squares types tetrominoes
types tetrominoes shown
tetrominoes shown straight
shown straight tetromino
straight tetromino square
tetromino square tetromino
square tetromino tile
tetromino tile overlaps
tile overlaps chessboard
overlaps chessboard straight
chessboard straight tetrominoes
straight tetrominoes square
tetrominoes square tetrominoes
square tetrominoes stack
tetrominoes stack fake
fake coins stacks
coins stacks identical
stacks identical coins
identical coins stacks
coins stacks counterfeit
stacks counterfeit coins
counterfeit coins stacks
coins stacks genuine
stacks genuine coin
genuine coin weighs
coin weighs grams
weighs grams fake
grams fake weighs
fake weighs grams
weighs grams analytical
grams analytical scale
analytical scale determine
scale determine exact
determine exact weight
exact weight coins
weight coins devise
coins devise brute
devise brute algorithm
brute algorithm stack
algorithm stack fake
fake coins determine
coins determine worst
efficiency class minimum
class minimum weighings
minimum weighings needed
weighings needed stack
needed stack fake
fake coins sort
coins sort alphabetical
sort alphabetical selection
alphabetical selection sort
selection sort stable
sort stable definition
stable definition stable
definition stable sorting
sorting algorithm section
algorithm section implement
section implement selection
implement selection sort
selection sort linked
sort linked lists
array version sort
version sort alphabetical
alphabetical sort prove
sort prove sort
prove sort makes
sort makes exchanges
sorted algorithm stopped
algorithm stopped write
stopped write pseudocode
write pseudocode method
pseudocode method incorporates
method incorporates improvement
incorporates improvement prove
improvement prove worst
prove worst case
case efficiency improved
efficiency improved version
improved version quadratic
version quadratic sort
quadratic sort stable
sort stable alternating
stable alternating disks
alternating disks row
disks row disks
row disks colors
disks colors dark
colors dark light
dark light alternate
light alternate dark
alternate dark light
light dark light
light dark disks
dark disks light
disks light disks
light disks left
disks left moves
left moves allowed
moves allowed make
allowed make interchange
make interchange positions
interchange positions neighboring
positions neighboring disks
neighboring disks design
disks design algorithm
solving puzzle determine
puzzle determine moves
determine moves takes
moves takes gar
takes gar sequential
gar sequential brute
sequential brute string
string matching previous
matching previous section
previous section applications
section applications brute
applications brute approach
brute approach sorting
approach sorting porblem
sorting porblem discuss
porblem discuss applications
discuss applications strategy
applications strategy problem
strategy problem searching
problem searching deals
searching deals canonical
deals canonical problem
canonical problem searching
problem searching item
searching item deals
item deals string
deals string matching
matching problem sequential
problem sequential encountered
sequential encountered brute
encountered brute algorithm
brute algorithm general
algorithm general searching
general searching problem
searching problem called
problem called sequential
called sequential section
sequential section algorithm
section algorithm simply
algorithm simply compares
simply compares successive
compares successive elements
elements key encountered
key encountered successful
encountered successful exhausted
successful exhausted finding
exhausted finding unsuccessful
finding unsuccessful simple
unsuccessful simple extra
simple extra employed
extra employed implementing
employed implementing sequential
implementing sequential append
sequential append key
append key successful
key successful eliminate
successful eliminate altogether
eliminate altogether pseudocode
altogether pseudocode enhanced
pseudocode enhanced version
enhanced version algorithm
version algorithm sequentialsearch
algorithm sequentialsearch implements
sequentialsearch implements sequential
implements sequential key
sequential key sentinel
key sentinel input
sentinel input array
input array elements
array elements key
elements key output
index element equal
equal element straightforward
element straightforward improvement
straightforward improvement incorporated
improvement incorporated sequential
incorporated sequential sorted
sequential sorted searching
sorted searching stopped
searching stopped element
stopped element greater
equal key encountered
key encountered sequential
encountered sequential excellent
sequential excellent illustration
excellent illustration brute
illustration brute proach
brute proach characteristic
proach characteristic strength
characteristic strength simplicity
strength simplicity weakness
simplicity weakness inferior
weakness inferior effi
inferior effi ciency
effi ciency efficiency
ciency efficiency results
efficiency results obtained
results obtained section
obtained section standard
section standard version
standard version sequential
version sequential enhanced
sequential enhanced version
enhanced version slightly
version slightly algorithm
slightly algorithm remains
algorithm remains linear
remains linear worst
linear worst average
average cases discuss
cases discuss searching
discuss searching algorithms
searching algorithms efficiency
algorithms efficiency brute
efficiency brute string
matching recall string
recall string matching
matching problem introduced
introduced section string
section string characters
called text string
text string characters
called pattern substring
pattern substring text
substring text matches
text matches pattern
matches pattern precisely
pattern precisely index
precisely index leftmost
index leftmost character
leftmost character matching
character matching substring
substring text pattern
text pattern matches
pattern matches string
matches string matching
matching algorithm simply
algorithm simply working
simply working entire
working entire text
entire text exhausted
text exhausted brute
exhausted brute algorithm
brute algorithm string
matching problem obvious
problem obvious align
obvious align pattern
align pattern characters
characters text matching
text matching pairs
matching pairs characters
pairs characters left
characters left pairs
pairs characters algorithm
characters algorithm mismatching
algorithm mismatching pair
encountered case shift
pattern position resume
position resume character
resume character comparisons
character comparisons starting
comparisons starting character
character pattern counterpart
counterpart text position
text position text
position text beginning
text beginning matching
beginning matching substring
matching substring provided
substring provided text
provided text positions
text positions indexed
positions indexed position
indexed position characters
position characters entire
characters entire pattern
entire pattern algorithm
pattern algorithm make
make comparisons algorithm
comparisons algorithm bruteforcestringmatch
algorithm bruteforcestringmatch implements
bruteforcestringmatch implements brute
implements brute string
matching input array
input array characters
characters representing text
representing text array
text array characters
characters representing pattern
representing pattern output
pattern output index
output index character
index character text
character text starts
text starts matching
starts matching substring
matching substring unsuccessful
substring unsuccessful operation
unsuccessful operation algorithm
illustrated figure algorithm
figure algorithm shifts
shifts pattern single
pattern single character
single character comparison
character comparison worst
comparison worst case
worst case worse
case worse algorithm
worse algorithm make
make comparisons shifting
comparisons shifting pattern
shifting pattern problem
pattern problem section
exercises asks specific
asks specific situation
specific situation worst
situation worst case
case algorithm makes
algorithm makes figure
makes figure brute
figure brute string
string matching pattern
matching pattern characters
pattern characters compared
characters compared text
compared text counterparts
text counterparts bold
counterparts bold character
bold character comparisons
character comparisons puts
comparisons puts class
puts class typical
class typical word
typical word natural
word natural language
language text shifts
text shifts comparisons
shifts comparisons average
comparisons average case
efficiency considerably worst
considerably worst case
case efficiency searching
efficiency searching random
searching random texts
random texts shown
texts shown linear
shown linear sophisticated
linear sophisticated efficient
sophisticated efficient algorithms
efficient algorithms string
algorithms string searching
string searching widely
searching widely boyer
widely boyer moore
boyer moore outlined
moore outlined section
outlined section simplification
section simplification suggested
simplification suggested horspool
suggested horspool exercises
horspool exercises comparisons
exercises comparisons sentinel
comparisons sentinel version
sentinel version sequential
version sequential worst
sequential worst case
average case probability
case probability successful
probability successful shown
successful shown section
shown section average
section average key
comparisons sequential sentinel
sequential sentinel standard
sentinel standard assumptions
standard assumptions inputs
assumptions inputs formula
inputs formula cavg
formula cavg probability
cavg probability successful
probability successful determine
successful determine fixed
determine fixed values
fixed values formula
values formula yields
formula yields maximum
yields maximum cavg
maximum cavg minimum
cavg minimum cavg
minimum cavg gadget
cavg gadget testing
gadget testing firm
testing firm determine
firm determine highest
determine highest floor
highest floor story
floor story headquarters
story headquarters gadget
headquarters gadget fall
gadget fall breaking
fall breaking firm
breaking firm identical
firm identical gadgets
identical gadgets experiment
gadgets experiment broken
experiment broken repaired
broken repaired experiment
repaired experiment completed
experiment completed remaining
completed remaining gadget
remaining gadget design
gadget design algorithm
efficiency class solve
class solve problem
solve problem determine
problem determine character
determine character comparisons
searching pattern gandhi
pattern gandhi text
gandhi text life
text life increasing
life increasing speed
increasing speed assume
speed assume length
assume length text
length text characters
text characters starts
characters starts comparisons
starts comparisons successful
successful unsuccessful brute
unsuccessful brute algorithm
zeros text length
pattern length constitutes
length constitutes worst
constitutes worst case
case input brute
input brute string
matching algorithm character
algorithm character comparisons
character comparisons input
comparisons input solving
input solving string
solving string matching
matching problem advantage
problem advantage comparing
advantage comparing pattern
comparing pattern text
text characters left
characters left problem
left problem counting
problem counting text
counting text substrings
text substrings cabaaxbya
substrings cabaaxbya design
cabaaxbya design brute
algorithm problem determine
determine effi ciency
effi ciency class
class design efficient
algorithm problem gin
problem gin write
gin write visualization
write visualization brute
visualization brute string
matching algorithm word
algorithm word popular
word popular diversion
popular diversion united
diversion united states
states word puzzles
word puzzles player
puzzles player set
player set words
set words square
words square table
square table filled
table filled single
filled single letters
single letters word
letters word read
word read horizontally
read horizontally left
horizontally left vertically
left vertically degree
vertically degree diagonal
degree diagonal directions
diagonal directions formed
directions formed consecutively
formed consecutively adjacent
consecutively adjacent cells
adjacent cells table
cells table boundaries
table boundaries read
boundaries read direction
read direction zigzagging
direction zigzagging cell
zigzagging cell table
cell table words
table words word
words word cell
word cell write
cell write solving
write solving puzzle
solving puzzle battleship
puzzle battleship game
battleship game write
game write based
write based version
based version brute
version brute pattern
brute pattern matching
pattern matching playing
matching playing game
playing game battleship
game battleship rules
battleship rules game
rules game opponents
game opponents game
opponents game case
game case human
case human player
human player game
player game played
game played identical
played identical boards
identical boards tables
boards tables squares
tables squares opponent
squares opponent places
opponent places ships
places ships opponent
ships opponent player
opponent player ships
player ships occupies
ships occupies squares
occupies squares board
squares board destroyer
board destroyer squares
destroyer squares submarine
squares submarine squares
submarine squares cruiser
squares cruiser squares
cruiser squares battleship
squares battleship squares
battleship squares aircraft
squares aircraft carrier
aircraft carrier squares
carrier squares ship
squares ship horizontally
ship horizontally vertically
horizontally vertically ships
vertically ships touching
ships touching game
touching game played
game played opponents
played opponents taking
opponents taking turns
taking turns shooting
turns shooting ships
shooting ships result
ships result shot
result shot displayed
shot displayed hit
displayed hit case
hit case hit
case hit player
hit player playing
player playing missing
playing missing goal
missing goal sink
goal sink opponent
sink opponent ships
opponent ships opponent
ships opponent succeeds
opponent succeeds sink
succeeds sink ship
sink ship squares
ship squares occupied
squares occupied ship
occupied ship hit
ship hit closest
hit closest pair
hull problems brute
problems brute section
brute section straightforward
section straightforward approach
straightforward approach prob
approach prob lems
prob lems dealing
lems dealing finite
dealing finite set
finite set points
points plane problems
plane problems theoretical
problems theoretical arise
theoretical arise important
arise important applied
important applied areas
applied areas computational
areas computational ometry
computational ometry operations
ometry operations research
operations research closest
research closest pair
pair problem closest
pair problem calls
problem calls finding
calls finding closest
finding closest points
closest points set
set points simplest
points simplest variety
simplest variety problems
variety problems computational
computational geometry deals
geometry deals proximity
deals proximity points
proximity points plane
higher dimensional spaces
dimensional spaces points
spaces points represent
points represent physical
represent physical objects
physical objects airplanes
objects airplanes offices
airplanes offices database
offices database records
database records statistical
records statistical samples
statistical samples dna
samples dna sequences
dna sequences air
sequences air traffic
air traffic controller
traffic controller interested
controller interested closest
interested closest planes
closest planes probable
planes probable collision
probable collision candidates
collision candidates regional
candidates regional postal
regional postal service
postal service manager
service manager solution
manager solution closest
pair problem candidate
problem candidate office
candidate office locations
office locations closed
locations closed important
closed important applications
important applications closest
applications closest pair
pair problem cluster
problem cluster analy
cluster analy sis
analy sis statistics
sis statistics based
statistics based data
based data points
data points hierarchical
points hierarchical cluster
hierarchical cluster analysis
cluster analysis seeks
analysis seeks orga
seeks orga nize
orga nize hierarchy
nize hierarchy clusters
hierarchy clusters based
clusters based similarity
based similarity metric
similarity metric numerical
metric numerical data
numerical data metric
data metric euclidean
metric euclidean distance
euclidean distance text
distance text nonnumerical
text nonnumerical data
nonnumerical data metrics
data metrics hamming
metrics hamming distance
hamming distance problem
distance problem section
problem section ercises
section ercises algorithm
ercises algorithm begins
algorithm begins element
begins element cluster
element cluster merges
cluster merges successively
merges successively larger
successively larger clusters
larger clusters combining
clusters combining closest
combining closest pair
closest pair clusters
pair clusters simplicity
clusters simplicity dimensional
simplicity dimensional case
dimensional case closest
case closest pair
pair prob lem
prob lem assume
lem assume points
assume points standard
points standard fashion
standard fashion cartesian
fashion cartesian coordinates
cartesian coordinates distance
coordinates distance points
distance points standard
points standard euclidean
standard euclidean distance
euclidean distance brute
distance brute approach
solving problem leads
problem leads vious
leads vious algorithm
vious algorithm compute
algorithm compute distance
distance pair distinct
pair distinct points
distinct points pair
points pair smallest
pair smallest distance
smallest distance compute
distance compute distance
pair points pairs
pairs points pseudocode
points pseudocode computes
pseudocode computes distance
computes distance closest
closest points closest
points closest points
closest points requires
points requires trivial
requires trivial modification
trivial modification algorithm
modification algorithm bruteforceclosestpair
algorithm bruteforceclosestpair finds
bruteforceclosestpair finds distance
finds distance closest
closest points plane
points plane brute
plane brute input
brute input points
input points output
points output distance
output distance closest
points min sqrt
min sqrt square
sqrt square root
square root basic
root basic operation
operation algorithm computing
algorithm computing square
square root age
root age electronic
age electronic calculators
electronic calculators square
calculators square root
square root button
root button led
button led computing
led computing square
square root simple
root simple operation
simple operation addition
operation addition multiplication
addition multiplication starters
multiplication starters integers
starters integers square
integers square roots
square roots irrational
roots irrational numbers
irrational numbers approximately
numbers approximately computing
approximately computing approximations
computing approximations trivial
approximations trivial fact
trivial fact computing
fact computing square
square roots loop
roots loop avoided
loop avoided realize
avoided realize simply
realize simply square
simply square root
root function values
function values smaller
values smaller square
square root smaller
root smaller square
square root mathematicians
root mathematicians square
mathematicians square root
root function strictly
function strictly increasing
strictly increasing basic
increasing basic operation
operation algorithm squaring
algorithm squaring times
squaring times executed
times executed computed
executed computed speeding
computed speeding innermost
speeding innermost loop
loop algorithm decrease
decrease algorithm running
algorithm running constant
running constant factor
constant factor problem
factor problem section
section exercises asymptotic
exercises asymptotic efficiency
efficiency class chapter
class chapter discuss
chapter discuss linearithmic
discuss linearithmic algorithm
linearithmic algorithm problem
algorithm problem based
problem based sophisticated
based sophisticated design
sophisticated design technique
design technique convex
technique convex hull
hull problem computing
problem computing convex
computing convex hull
convex hull finding
hull finding convex
finding convex hull
higher dimensional space
dimensional space important
space important people
people important problems
computational geometry prominence
geometry prominence variety
prominence variety applications
variety applications problem
applications problem solved
problem solved larger
solved larger task
larger task sev
task sev eral
sev eral applications
eral applications based
applications based fact
based fact convex
fact convex hulls
convex hulls convenient
hulls convenient approximations
convenient approximations shapes
approximations shapes data
shapes data sets
data sets imation
sets imation replacing
imation replacing objects
replacing objects convex
objects convex hulls
convex hulls speeds
hulls speeds collision
speeds collision detection
collision detection idea
detection idea path
idea path planning
path planning mars
planning mars mission
mars mission rovers
mission rovers convex
rovers convex hulls
convex hulls computing
hulls computing accessibility
computing accessibility maps
accessibility maps produced
maps produced satellite
produced satellite images
satellite images geographic
images geographic information
geographic information systems
information systems detecting
systems detecting outliers
detecting outliers statisti
outliers statisti cal
statisti cal techniques
cal techniques efficient
techniques efficient algorithm
algorithm computing diameter
computing diameter set
diameter set points
set points largest
points largest distance
largest distance points
distance points set
convex hull largest
hull largest distance
largest distance extreme
distance extreme points
extreme points finally
points finally convex
finally convex hulls
convex hulls important
hulls important solving
important solving optimization
optimization problems extreme
problems extreme points
points set solution
set solution candidates
solution candidates definition
candidates definition convex
definition convex set
convex set definition
definition set points
set points finite
points finite infinite
finite infinite plane
infinite plane called
plane called convex
called convex points
convex points set
points set entire
set entire line
entire line segment
segment endpoints belongs
endpoints belongs set
belongs set sets
set sets depicted
depicted figure convex
figure convex straight
convex straight line
straight line triangle
line triangle rectangle
convex polygon circle
polygon circle entire
circle entire plane
entire plane sets
plane sets depicted
depicted figure finite
figure finite set
finite set distinct
set distinct points
distinct points boundary
points boundary convex
boundary convex polygon
convex polygon circumference
polygon circumference examples
circumference examples sets
examples sets convex
sets convex ready
convex ready notion
ready notion convex
notion convex hull
convex hull intuitively
hull intuitively convex
intuitively convex hull
points plane smallest
plane smallest convex
convex polygon boundary
polygon boundary formulation
boundary formulation enthusiasm
formulation enthusiasm problem
enthusiasm problem barricading
problem barricading sleeping
barricading sleeping tigers
sleeping tigers shortest
tigers shortest length
shortest length interpretation
length interpretation harel
interpretation harel har
harel har lively
har lively fenceposts
lively fenceposts erected
fenceposts erected spots
erected spots tigers
spots tigers sleep
tigers sleep tamer
sleep tamer interpretation
tamer interpretation notion
interpretation notion points
notion points represented
points represented nails
represented nails driven
nails driven large
driven large sheet
large sheet plywood
sheet plywood representing
plywood representing plane
representing plane rubber
plane rubber band
rubber band nails
band nails snap
nails snap convex
snap convex hull
convex hull area
hull area bounded
area bounded snapped
bounded snapped rubber
snapped rubber band
rubber band figure
band figure formal
formal definition convex
convex hull applicable
hull applicable arbitrary
applicable arbitrary sets
arbitrary sets points
sets points line
points line definition
line definition convex
set points smallest
points smallest convex
smallest convex set
convex set smallest
set smallest requirement
smallest requirement means
requirement means convex
means convex hull
convex hull subset
hull subset convex
subset convex set
points set triangle
set triangle rectangle
convex polygon region
polygon region set
region set points
set points boundary
points boundary shape
boundary shape figure
shape figure convex
figure convex sets
convex sets convex
sets convex figure
convex figure rubber
figure rubber band
rubber band interpretation
band interpretation convex
interpretation convex hull
convex hull points
hull points line
convex hull triangle
hull triangle vertices
endpoints points farthest
points farthest convex
farthest convex hull
convex hull larger
hull larger set
larger set figure
set figure study
figure study examples
study examples makes
examples makes theorem
makes theorem expected
theorem expected result
expected result theorem
result theorem convex
theorem convex hull
line convex polygon
points line polygon
line polygon degenerates
polygon degenerates line
degenerates line segment
endpoints points figure
points figure convex
figure convex hull
points convex polygon
polygon vertices convex
vertices convex hull
hull problem constructing
problem constructing convex
constructing convex hull
set points solve
points solve points
solve points vertices
points vertices polygon
vertices polygon mathematicians
polygon mathematicians vertices
mathematicians vertices polygon
vertices polygon extreme
polygon extreme points
extreme points definition
points definition extreme
definition extreme convex
extreme convex set
convex set middle
set middle line
middle line segment
segment endpoints set
endpoints set extreme
extreme points triangle
triangle vertices extreme
vertices extreme points
extreme points circle
points circle points
circle points circumference
points circumference extreme
circumference extreme points
set points figure
points figure extreme
figure extreme points
extreme points special
points special properties
special properties points
properties points convex
points convex set
convex set exploited
set exploited simplex
exploited simplex method
simplex method important
important algorithm discussed
section algorithm solves
programming problems finding
problems finding minimum
finding minimum maximum
minimum maximum linear
maximum linear function
variables subject linear
subject linear constraints
linear constraints problem
constraints problem section
section exercises sections
exercises sections general
sections general discussion
general discussion interested
discussion interested extreme
interested extreme points
extreme points identification
points identification solves
identification solves convex
solves convex hull
hull problem solve
solve problem completely
problem completely bit
completely bit points
bit points set
points set extreme
convex hull pairs
hull pairs points
pairs points connected
points connected boundary
connected boundary convex
convex hull issue
hull issue addressed
issue addressed listing
addressed listing extreme
listing extreme points
extreme points clockwise
points clockwise counterclockwise
clockwise counterclockwise solve
counterclockwise solve convex
solve convex hull
hull problem brute
problem brute manner
brute manner frontal
manner frontal dismayed
frontal dismayed convex
dismayed convex hull
hull problem obvious
problem obvious algorithmic
obvious algorithmic solution
algorithmic solution simple
solution simple inefficient
simple inefficient algorithm
inefficient algorithm based
algorithm based observation
based observation line
observation line segments
line segments making
segments making boundary
making boundary convex
hull boundary points
boundary points set
points set straight
set straight line
line points verify
points verify property
verify property set
property set figure
set figure repeating
figure repeating pair
repeating pair points
pair points yields
points yields line
yields line segments
line segments make
segments make convex
make convex hull
hull boundary elementary
boundary elementary facts
elementary facts analytical
facts analytical geometry
analytical geometry needed
geometry needed implement
needed implement algorithm
implement algorithm straight
algorithm straight line
coordinate plane defined
plane defined equation
defined equation line
equation line divides
planes points line
points line simply
line simply expression
simply expression points
expression points leave
points leave implementation
leave implementation details
implementation details efficiency
details efficiency algorithm
efficiency algorithm pairs
algorithm pairs distinct
pairs distinct points
distinct points efficient
points efficient algorithms
efficient algorithms important
algorithms important problem
important problem discuss
problem discuss exercises
discuss exercises assuming
exercises assuming sqrt
assuming sqrt takes
sqrt takes times
times longer oper
longer oper ations
oper ations innermost
innermost loop bruteforceclosestpoints
loop bruteforceclosestpoints assumed
bruteforceclosestpoints assumed estimate
assumed estimate faster
estimate faster algorithm
algorithm run improvement
run improvement discussed
improvement discussed section
discussed section design
section design efficient
efficient algorithm based
based brute strategy
brute strategy solve
strategy solve closest
problem points real
points real line
line real numbers
real numbers representing
numbers representing coordinates
straight road office
road office built
office built villages
built villages design
villages design efficient
location minimizing average
minimizing average distance
villages office design
office design efficient
location minimizing maximum
minimizing maximum distance
maximum distance village
distance village office
village office sake
office sake simplicity
assume points set
points set line
set line modification
line modification needed
modification needed general
needed general case
general case left
case left exercises
left exercises alternative
exercises alternative ways
alternative ways define
ways define distance
define distance points
distance points cartesian
cartesian plane manhat
plane manhat tan
manhat tan distance
tan distance defined
distance defined prove
defined prove satisfies
prove satisfies axioms
satisfies axioms distance
axioms distance function
distance function points
function points iii
points iii sketch
iii sketch points
sketch points cartesian
cartesian plane manhattan
plane manhattan distance
manhattan distance origin
distance origin equal
origin equal euclidean
equal euclidean distance
euclidean distance true
distance true false
true false solution
false solution closest
pair problem metrics
problem metrics euclidean
metrics euclidean manhattan
euclidean manhattan hamming
manhattan hamming distance
hamming distance strings
distance strings equal
strings equal length
equal length defined
length defined positions
defined positions symbols
positions symbols named
symbols named richard
named richard hamming
richard hamming prominent
hamming prominent american
prominent american scientist
american scientist engineer
scientist engineer introduced
engineer introduced seminal
introduced seminal paper
seminal paper error
paper error detecting
error detecting error
detecting error correcting
error correcting codes
correcting codes hamming
codes hamming distance
hamming distance axioms
distance axioms distance
axioms distance metric
distance metric listed
metric listed problem
listed problem efficiency
brute algorithm closest
problem points strings
points strings symbols
strings symbols distance
symbols distance measured
distance measured hamming
measured hamming distance
hamming distance odd
distance odd pie
odd pie fight
pie fight people
fight people positioned
people positioned field
positioned field euclidean
field euclidean plane
euclidean plane unique
plane unique nearest
unique nearest neighbor
nearest neighbor person
neighbor person cream
person cream pie
cream pie hurls
pie hurls pie
hurls pie nearest
pie nearest neighbor
nearest neighbor assuming
neighbor assuming odd
assuming odd target
odd target true
target true false
true false remains
false remains person
remains person hit
person hit pie
hit pie car
pie car closest
car closest pair
pair problem posed
problem posed dimensional
posed dimensional space
dimensional space euclidean
space euclidean distance
euclidean distance points
distance points defined
points defined efficiency
defined efficiency class
brute algorithm dimensional
algorithm dimensional closest
problem convex hulls
convex hulls sets
hulls sets extreme
sets extreme points
extreme points line
line segment square
segment square boundary
square boundary square
boundary square straight
square straight line
straight line design
line design linear
linear algorithm determine
algorithm determine extreme
determine extreme points
points plane modification
plane modification brute
modification brute algorithm
hull problem points
problem points straight
points straight line
straight line write
line write implementing
write implementing brute
implementing brute algorithm
hull problem small
problem small instance
small instance linear
maximize subject sketch
subject sketch cartesian
sketch cartesian plane
cartesian plane problem
plane problem feasible
feasible region defined
region defined set
defined set points
set points satisfying
points satisfying problem
satisfying problem constraints
problem constraints region
constraints region extreme
region extreme points
extreme points solve
points solve optimization
solve optimization problem
optimization problem theorem
problem theorem linear
feasible region solution
region solution extreme
solution extreme points
feasible region exhaustive
region exhaustive important
exhaustive important problems
important problems require
problems require finding
require finding element
finding element special
element special property
special property domain
property domain grows
exponentially faster instance
faster instance size
instance size typically
size typically problems
typically problems arise
problems arise situations
arise situations involve
situations involve explicitly
involve explicitly implicitly
implicitly combinatorial objects
combinatorial objects permutations
objects permutations combinations
permutations combinations subsets
subsets set problems
set problems optimization
optimization problems element
problems element maximizes
element maximizes minimizes
maximizes minimizes desired
minimizes desired characteristic
desired characteristic path
characteristic path length
path length assignment
length assignment cost
assignment cost exhaustive
cost exhaustive simply
exhaustive simply brute
simply brute approach
approach combinatorial prob
combinatorial prob lems
prob lems suggests
lems suggests generating
suggests generating element
generating element problem
element problem domain
problem domain lecting
domain lecting constraints
lecting constraints finding
finding desired element
desired element optimizes
element optimizes objective
optimizes objective function
objective function idea
function idea exhaustive
idea exhaustive straightforward
exhaustive straightforward implementation
straightforward implementation typically
implementation typically requires
typically requires algorithm
requires algorithm generating
algorithm generating combinatorial
combinatorial objects dis
objects dis cussion
dis cussion algorithms
cussion algorithms chapter
algorithms chapter assume
chapter assume illustrate
assume illustrate exhaustive
illustrate exhaustive applying
exhaustive applying important
applying important problems
important problems traveling
assignment problem traveling
salesman problem traveling
problem tsp intriguing
tsp intriguing researchers
intriguing researchers years
researchers years seemingly
years seemingly simple
seemingly simple formulation
simple formulation important
formulation important applications
important applications interesting
applications interesting connections
interesting connections combinatorial
connections combinatorial problems
combinatorial problems layman
problems layman terms
layman terms problem
terms problem asks
problem asks shortest
asks shortest set
shortest set cities
set cities visits
visits city returning
city returning city
returning city started
city started problem
started problem conveniently
problem conveniently modeled
conveniently modeled weighted
modeled weighted graph
graph vertices representing
vertices representing cities
representing cities edge
cities edge weights
edge weights distances
weights distances problem
distances problem stated
stated problem finding
finding shortest hamiltonian
circuit defined passes
defined passes vertices
passes vertices graph
vertices graph named
graph named irish
named irish mathematician
sir william rowan
william rowan hamilton
rowan hamilton interested
hamilton interested cycles
interested cycles application
cycles application algebraic
application algebraic discoveries
algebraic discoveries easy
discoveries easy hamiltonian
easy hamiltonian circuit
circuit defined sequence
sequence adjacent vertices
adjacent vertices vin
vertices vin vertex
vin vertex sequence
vertex sequence vertices
sequence vertices distinct
vertices distinct assume
distinct assume loss
assume loss generality
loss generality circuits
generality circuits vertex
circuits vertex cycles
vertex cycles tours
cycles tours generating
tours generating permutations
generating permutations intermediate
permutations intermediate cities
intermediate cities compute
cities compute lengths
compute lengths shortest
lengths shortest figure
shortest figure presents
problem solution method
solution method inspection
method inspection figure
inspection figure reveals
figure reveals pairs
reveals pairs tours
pairs tours differ
tours differ direction
differ direction cut
direction cut vertex
cut vertex permutations
vertex permutations half
permutations half choose
half choose intermediate
choose intermediate vertices
intermediate vertices permutations
vertices permutations precedes
permutations precedes implicitly
precedes implicitly defines
implicitly defines direction
defines direction improvement
direction improvement brighten
improvement brighten efficiency
brighten efficiency picture
efficiency picture total
picture total permutations
total permutations needed
permutations needed makes
needed makes exhaustive
makes exhaustive approach
exhaustive approach impractical
approach impractical small
impractical small values
small values glass
values glass half
glass half cutting
half cutting half
cutting half solve
half solve small
solve small instance
instance problem investigation
problem investigation circuits
investigation circuits starting
circuits starting vertex
starting vertex permutations
vertex permutations larger
permutations larger factor
larger factor knapsack
factor knapsack problem
knapsack problem algorithmics
problem algorithmics items
algorithmics items weights
items knapsack idea
knapsack idea putting
idea putting shoes
putting shoes thief
shoes thief steal
thief steal optimal
steal optimal figure
optimal figure solution
figure solution small
solution small instance
small instance traveling
instance traveling salesman
problem exhaustive valuable
exhaustive valuable loot
valuable loot fits
loot fits knapsack
fits knapsack plane
knapsack plane valuable
plane valuable set
valuable set items
set items remote
items remote location
remote location exceeding
location exceeding plane
exceeding plane capacity
plane capacity figure
capacity figure presents
small instance knapsack
knapsack problem exhaustive
problem exhaustive approach
exhaustive approach problem
approach problem leads
problem leads generating
leads generating subsets
set items computing
items computing total
computing total weight
total weight subset
weight subset feasible
subset feasible subsets
feasible subsets total
subsets total weight
total weight exceeding
weight exceeding knapsack
exceeding knapsack capacity
knapsack capacity finding
capacity finding subset
finding subset largest
subset largest solution
largest solution instance
instance figure subsets
figure subsets element
element set exhaustive
set exhaustive leads
exhaustive leads algorithm
leads algorithm efficiently
algorithm efficiently individual
efficiently individual subsets
individual subsets generated
subsets generated traveling
generated traveling salesman
salesman knapsack problems
knapsack problems considered
problems considered exhaustive
considered exhaustive leads
exhaustive leads algorithms
leads algorithms extremely
algorithms extremely inefficient
extremely inefficient input
inefficient input fact
input fact problems
fact problems examples
problems examples socalled
examples socalled hard
socalled hard problems
hard problems polynomial
polynomial algorithm nphard
algorithm nphard problem
nphard problem scientists
problem scientists algorithms
scientists algorithms important
algorithms important conjecture
important conjecture proven
conjecture proven sophisticated
proven sophisticated approaches
sophisticated approaches backtracking
approaches backtracking bound
bound sections enable
sections enable solve
enable solve instances
solve instances knapsack
instances knapsack item
knapsack item subset
item subset total
subset total weight
weight total feasible
total feasible figure
feasible figure instance
figure instance knapsack
knapsack problem solution
problem solution exhaustive
solution exhaustive information
exhaustive information optimal
information optimal selection
optimal selection bold
selection bold similar
bold similar problems
similar problems exponential
problems exponential alternatively
exponential alternatively approximation
alternatively approximation algorithms
approximation algorithms section
algorithms section assignment
section assignment problem
assignment problem solved
problem solved exhaustive
solved exhaustive people
exhaustive people assigned
pair problem assignment
problem assignment minimum
assignment minimum total
minimum total cost
total cost small
cost small instance
instance problem table
problem table entries
table entries representing
entries representing assignment
representing assignment costs
assignment costs job
costs job person
job person easy
person easy instance
easy instance assignment
assignment problem completely
problem completely cost
completely cost matrix
cost matrix terms
matrix terms matrix
terms matrix problem
matrix problem select
problem select element
select element row
row matrix selected
matrix selected elements
selected elements columns
elements columns total
columns total sum
total sum selected
sum selected elements
selected elements smallest
elements smallest obvious
smallest obvious strategy
obvious strategy finding
strategy finding solution
finding solution works
solution works select
works select smallest
select smallest element
smallest element row
element row smallest
row smallest elements
smallest elements column
elements column fact
column fact smallest
fact smallest element
element entire matrix
entire matrix component
matrix component optimal
component optimal solution
optimal solution opting
solution opting exhaustive
opting exhaustive unavoidable
exhaustive unavoidable evil
unavoidable evil feasible
evil feasible solutions
feasible solutions assignment
solutions assignment problem
assignment problem tuples
problem tuples ith
tuples ith component
ith component column
component column element
column element selected
element selected ith
selected ith row
ith row job
row job assigned
job assigned ith
assigned ith person
ith person cost
person cost matrix
cost matrix assignment
matrix assignment person
assignment person job
person job requirements
job requirements assignment
requirements assignment problem
assignment problem imply
problem imply correspondence
imply correspondence feasible
correspondence feasible assignments
feasible assignments permutations
assignments permutations integers
permutations integers exhaustive
integers exhaustive approach
exhaustive approach assignment
approach assignment problem
assignment problem require
problem require generating
require generating permutations
generating permutations integers
permutations integers computing
integers computing total
computing total cost
cost assignment summing
assignment summing elements
summing elements cost
elements cost matrix
cost matrix finally
matrix finally selecting
finally selecting smallest
selecting smallest sum
smallest sum iterations
sum iterations applying
iterations applying algorithm
applying algorithm instance
algorithm instance shown
instance shown figure
shown figure asked
figure asked exercises
asked exercises cost
exercises cost figure
cost figure iterations
figure iterations solving
iterations solving small
solving small instance
small instance assignment
exhaustive permutations considered
permutations considered general
considered general case
general case assignment
case assignment problem
problem exhaustive impractical
instances problem fortunately
problem fortunately efficient
problem called hungarian
called hungarian method
hungarian method hungarian
method hungarian mathematicians
hungarian mathematicians nig
mathematicians nig egerva
nig egerva underlies
egerva underlies method
underlies method kol
method kol good
kol good news
good news fact
news fact problem
fact problem domain
problem domain grows
exponentially faster necessarily
faster necessarily imply
necessarily imply efficient
imply efficient algorithm
algorithm solving fact
solving fact examples
fact examples problems
problems examples exception
examples exception polynomial
exception polynomial algorithms
polynomial algorithms problems
algorithms problems domain
problems domain grows
grows exponentially instance
exponentially instance size
instance size provided
size provided solve
provided solve mentioned
solve mentioned algorithms
mentioned algorithms possibly
algorithms possibly exercises
possibly exercises assuming
exercises assuming generated
assuming generated constant
generated constant efficiency
constant efficiency class
efficiency class exhaustive
class exhaustive algorithm
exhaustive algorithm outlined
outlined text traveling
text traveling salesman
salesman problem algorithm
problem algorithm programmed
algorithm programmed makes
programmed makes additions
makes additions estimate
additions estimate maximum
estimate maximum cities
maximum cities problem
cities problem solved
problem solved hour
solved hour hours
hour hours iii
hours iii year
iii year century
year century outline
century outline exhaustive
outline exhaustive algorithm
exhaustive algorithm hamiltonian
algorithm hamiltonian circuit
circuit problem outline
problem outline algorithm
outline algorithm determine
algorithm determine connected
determine connected graph
connected graph represented
adjacency matrix eulerian
matrix eulerian circuit
eulerian circuit efficiency
circuit efficiency class
class algorithm application
algorithm application exhaustive
application exhaustive instance
exhaustive instance assign
instance assign ment
assign ment problem
ment problem started
problem started text
started text assignment
text assignment problem
assignment problem optimal
optimal solution smallest
solution smallest element
smallest element cost
element cost matrix
cost matrix partition
matrix partition problem
positive integers partition
integers partition disjoint
subsets sum elements
sum elements prob
elements prob lem
prob lem solution
lem solution design
solution design exhaustive
algorithm problem minimize
problem minimize subsets
minimize subsets algorithm
subsets algorithm generate
algorithm generate clique
generate clique problem
clique problem graph
problem graph positive
positive integer deter
integer deter graph
deter graph clique
graph clique size
clique size subgraph
size subgraph vertices
subgraph vertices design
vertices design exhaustive
algorithm problem exhaustive
problem exhaustive applied
exhaustive applied sorting
applied sorting problem
sorting problem determine
class algorithm queens
algorithm queens problem
queens problem classic
problem classic puzzle
classic puzzle placing
puzzle placing queens
placing queens chessboard
queens chessboard queens
chessboard queens row
row column diagonal
column diagonal positions
diagonal positions queens
positions queens square
queens square queens
square queens row
queens row queens
row queens row
row column estimate
column estimate solutions
estimate solutions problem
solutions problem exhaustive
problem exhaustive based
exhaustive based approaches
based approaches capable
approaches capable checking
capable checking positions
checking positions magic
positions magic squares
magic squares magic
squares magic square
magic square arrangement
square arrangement integers
arrangement integers matrix
integers matrix occurring
matrix occurring row
occurring row column
row column main
column main diagonal
main diagonal sum
diagonal sum prove
sum prove magic
prove magic square
magic square exists
square exists sum
exists sum equal
sum equal design
equal design exhaustive
exhaustive algorithm generating
magic squares internet
squares internet library
internet library algorithm
library algorithm generating
magic squares implement
squares implement algorithms
implement algorithms exhaustive
algorithms exhaustive run
exhaustive run experiment
experiment determine largest
determine largest algorithms
largest algorithms magic
algorithms magic square
magic square minute
square minute famous
minute famous alphametic
famous alphametic puzzle
alphametic puzzle digits
puzzle digits mathematical
digits mathematical expression
mathematical expression sum
expression sum replaced
sum replaced letters
replaced letters called
letters called cryptarithm
called cryptarithm addition
cryptarithm addition puzzle
addition puzzle words
puzzle words make
words make sense
make sense alphametic
sense alphametic published
alphametic published renowned
published renowned british
renowned british puzzlist
british puzzlist henry
puzzlist henry dudeney
henry dudeney money
dudeney money conditions
money conditions assumed
conditions assumed correspondence
assumed correspondence letters
correspondence letters decimal
letters decimal digits
decimal digits letter
digits letter represents
letter represents digit
represents digit dif
digit dif ferent
dif ferent letters
ferent letters represent
letters represent digits
represent digits digit
digits digit left
digit left digit
left digit numbers
digit numbers solve
numbers solve alphametic
solve alphametic means
alphametic means digit
means digit letter
digit letter represents
letter represents solution
represents solution uniqueness
solution uniqueness assumed
uniqueness assumed verified
assumed verified solver
verified solver write
solver write solving
write solving cryptarithms
solving cryptarithms exhaustive
cryptarithms exhaustive assume
exhaustive assume cryptarithm
assume cryptarithm sum
cryptarithm sum words
sum words solve
words solve dudeney
solve dudeney puzzle
dudeney puzzle expected
puzzle expected solved
expected solved published
solved published depth
published depth breadth
depth breadth term
breadth term exhaustive
term exhaustive applied
exhaustive applied important
applied important algorithms
important algorithms systematically
algorithms systematically process
systematically process vertices
process vertices edges
vertices edges graph
edges graph traversal
algorithms depth dfs
breadth bfs algorithms
bfs algorithms proved
algorithms proved applications
proved applications involving
applications involving graphs
involving graphs artificial
graphs artificial intelligence
artificial intelligence operations
intelligence operations research
operations research addition
research addition indispensable
addition indispensable efficient
indispensable efficient investigation
efficient investigation fundamental
investigation fundamental properties
fundamental properties graphs
properties graphs connectivity
graphs connectivity presence
connectivity presence depth
presence depth starts
depth starts graph
starts graph traversal
graph traversal arbitrary
arbitrary vertex marking
vertex marking visited
marking visited iteration
iteration algorithm proceeds
algorithm proceeds unvisited
proceeds unvisited vertex
unvisited vertex adjacent
vertex adjacent vertices
adjacent vertices resolved
vertices resolved arbitrarily
resolved arbitrarily practical
arbitrarily practical adjacent
practical adjacent unvisited
adjacent unvisited candidates
unvisited candidates chosen
candidates chosen dictated
chosen dictated data
dictated data structure
representing graph examples
graph examples break
examples break ties
break ties alphabetical
ties alphabetical vertices
alphabetical vertices process
vertices process continues
process continues dead
continues dead vertex
dead vertex adjacent
vertex adjacent unvisited
adjacent unvisited vertices
unvisited vertices encountered
vertices encountered dead
encountered dead algorithm
dead algorithm backs
algorithm backs edge
backs edge vertex
edge vertex visiting
vertex visiting unvisited
visiting unvisited vertices
vertices algorithm eventually
algorithm eventually halts
eventually halts backing
halts backing starting
backing starting vertex
starting vertex dead
vertex dead vertices
dead vertices connected
unvisited vertices depth
vertices depth restarted
depth restarted convenient
restarted convenient stack
convenient stack operation
stack operation depth
operation depth vertex
depth vertex stack
stack vertex reached
vertex reached figure
reached figure dfs
figure dfs traversal
dfs traversal graph
graph traversal stack
stack subscript vertex
subscript vertex visited
vertex visited pushed
visited pushed stack
pushed stack dead
stack dead popped
dead popped stack
popped stack dfs
stack dfs forest
dfs forest tree
shown solid dashed
solid dashed lines
dashed lines vertex
lines vertex starts
starts vertex stack
vertex stack dead
stack dead vertex
dead vertex ends
vertex ends accompany
ends accompany depth
accompany depth traversal
depth traversal constructing
constructing called depth
called depth forest
depth forest starting
forest starting vertex
starting vertex traversal
vertex traversal serves
traversal serves root
vertex reached attached
reached attached child
tree edge set
edge set edges
set edges forms
edges forms forest
forms forest algorithm
forest algorithm encounter
algorithm encounter edge
encounter edge leading
parent tree edge
tree edge called
called edge connects
connects vertex ancestor
vertex ancestor parent
ancestor parent depth
parent depth forest
forest figure depth
figure depth traversal
depth traversal stack
traversal stack depth
stack depth forest
depth forest shown
forest shown pseudocode
shown pseudocode depth
pseudocode depth algorithm
depth algorithm dfs
algorithm dfs implements
dfs implements depth
implements depth traversal
depth traversal graph
consecutive integers encountered
integers encountered dfs
encountered dfs traversal
dfs traversal vertex
vertex marked dfs
marked dfs visits
dfs visits recursively
visits recursively unvisited
recursively unvisited vertices
path numbers encountered
numbers encountered global
encountered global variable
global variable vertex
variable vertex adjacent
vertex adjacent marked
adjacent marked dfs
marked dfs brevity
dfs brevity dfs
brevity dfs pseudocode
dfs pseudocode ease
pseudocode ease formed
ease formed create
formed create wrong
wrong impression sophistication
impression sophistication algorithm
sophistication algorithm true
algorithm true power
true power depth
power depth algorithm
depth algorithm action
algorithm action graph
action graph diagram
graph diagram adjacency
diagram adjacency matrix
graph figure smaller
figure smaller efficient
smaller efficient depth
efficient depth difficult
depth difficult algorithm
difficult algorithm fact
algorithm fact efficient
fact efficient takes
efficient takes proportional
takes proportional size
proportional size data
size data structure
representing graph adjacency
matrix representation traversal
representation traversal adjacency
traversal adjacency representation
adjacency representation graph
representation graph vertices
vertices edges dfs
dfs forest obtained
forest obtained product
obtained product dfs
product dfs traversal
dfs traversal deserves
traversal deserves comments
deserves comments begin
comments begin forest
begin forest graph
forest graph edges
graph edges classified
edges classified dfs
classified dfs traversal
dfs traversal disjoint
traversal disjoint classes
disjoint classes tree
classes tree edges
tree edges types
edges types dfs
types dfs forest
dfs forest undirected
undirected graph tree
edges dfs traversal
dfs traversal previously
traversal previously unvisited
vertices edges class
edges class forest
class forest edges
forest edges vertices
edges vertices previously
vertices previously visited
previously visited vertices
visited vertices predecessors
vertices predecessors traversal
predecessors traversal vertices
traversal vertices ancestors
vertices ancestors forest
ancestors forest parents
forest parents dfs
parents dfs traversal
dfs traversal forest
traversal forest representation
forest representation graph
representation graph pro
graph pro vides
pro vides proved
vides proved extremely
proved extremely helpful
extremely helpful development
helpful development efficient
development efficient gorithms
efficient gorithms checking
gorithms checking important
checking important properties
properties graphs dfs
graphs dfs yields
dfs yields orderings
yields orderings vertices
orderings vertices reached
reached pushed stack
pushed stack vertices
popped stack orders
stack orders qualitatively
orders qualitatively applications
qualitatively applications advantage
applications advantage important
advantage important elementary
important elementary applications
elementary applications dfs
applications dfs checking
dfs checking connectivity
connectivity checking acyclicity
checking acyclicity graph
acyclicity graph dfs
graph dfs halts
dfs halts visiting
halts visiting vertices
visiting vertices discovery
vertices discovery applications
discovery applications important
applications important breakthrough
important breakthrough achieved
breakthrough achieved american
achieved american scientists
american scientists john
scientists john hopcroft
john hopcroft robert
hopcroft robert tarjan
robert tarjan contributions
tarjan contributions turing
contributions turing award
turing award prestigious
award prestigious prize
prestigious prize computing
prize computing field
computing field tar
field tar nected
tar nected path
nected path starting
path starting vertex
starting vertex checking
vertex checking graph
checking graph connectivity
graph connectivity dfs
connectivity dfs traversal
dfs traversal arbitrary
arbitrary vertex algorithm
vertex algorithm halts
algorithm halts vertices
halts vertices graph
vertices graph visited
graph visited graph
visited graph connected
graph connected generally
connected generally dfs
generally dfs identifying
dfs identifying connected
identifying connected components
components graph checking
graph checking presence
checking presence graph
presence graph advantage
graph advantage graph
advantage graph representation
graph representation dfs
representation dfs forest
dfs forest edges
forest edges graph
edges graph acyclic
graph acyclic edge
acyclic edge vertex
edge vertex ancestor
vertex ancestor edge
ancestor edge figure
edge figure graph
figure graph comprises
graph comprises path
comprises path sequence
path sequence tree
sequence tree edges
dfs forest edge
forest edge applications
edge applications dfs
applications dfs sophisticated
dfs sophisticated applications
sophisticated applications finding
articulation points graph
points graph included
graph included vertex
included vertex connected
vertex connected graph
connected graph articulation
graph articulation removal
articulation removal edges
removal edges incident
edges incident breaks
incident breaks graph
breaks graph disjoint
graph disjoint pieces
disjoint pieces breadth
pieces breadth depth
breadth depth traversal
depth traversal brave
traversal brave algorithm
brave algorithm home
algorithm home breadth
home breadth traversal
breadth traversal cautious
traversal cautious proceeds
cautious proceeds concentric
proceeds concentric manner
concentric manner visiting
manner visiting vertices
visiting vertices adjacent
vertices adjacent starting
adjacent starting vertex
starting vertex unvisited
edges vertices connected
vertices algorithm restarted
algorithm restarted arbitrary
restarted arbitrary vertex
arbitrary vertex connected
vertex connected component
connected component graph
component graph convenient
graph convenient difference
convenient difference depth
difference depth operation
depth operation breadth
operation breadth initialized
breadth initialized traversal
initialized traversal starting
starting vertex marked
vertex marked visited
marked visited iteration
iteration algorithm identifies
algorithm identifies unvisited
identifies unvisited vertices
unvisited vertices adjacent
adjacent vertex marks
vertex marks visited
marks visited adds
visited adds vertex
adds vertex removed
vertex removed similarly
removed similarly dfs
similarly dfs traversal
dfs traversal accompany
traversal accompany bfs
accompany bfs traversal
bfs traversal constructing
constructing called breadth
called breadth forest
breadth forest traversal
forest traversal starting
starting vertex serves
vertex serves root
reached vertex attached
vertex attached child
tree edge leading
parent tree encountered
tree encountered edge
encountered edge noted
edge noted edge
noted edge figure
edge figure breadth
figure breadth traversal
breadth traversal breadth
traversal breadth forest
breadth forest shown
forest shown figure
shown figure bfs
figure bfs traversal
graph traversal numbers
traversal numbers indicating
numbers indicating vertices
indicating vertices visited
vertices visited added
visited added removed
added removed bfs
removed bfs forest
bfs forest tree
shown solid dotted
solid dotted lines
dotted lines pseudocode
lines pseudocode breadth
pseudocode breadth algorithm
breadth algorithm bfs
algorithm bfs implements
bfs implements breadth
implements breadth traversal
breadth traversal graph
consecutive integers visited
integers visited bfs
visited bfs traversal
bfs traversal vertex
vertex marked bfs
marked bfs visits
bfs visits unvisited
visits unvisited vertices
path numbers visited
numbers visited global
visited global variable
global variable initialize
variable initialize vertex
initialize vertex adjacent
adjacent vertex marked
vertex marked vertex
marked vertex figure
vertex figure illustration
figure illustration bfs
illustration bfs based
finding minimum edge
edge path graph
path graph bfs
graph bfs tree
bfs tree identifies
tree identifies minimum
identifies minimum edge
edge path breadth
path breadth efficiency
breadth efficiency depth
efficiency depth adjacency
depth adjacency matrix
adjacency representation depth
representation depth yields
depth yields single
yields single ordering
single ordering vertices
ordering vertices fifo
vertices fifo structure
fifo structure vertices
structure vertices added
vertices added removed
added removed structure
removed structure bfs
structure bfs forest
bfs forest undirected
undirected graph kinds
graph kinds edges
kinds edges tree
tree edges previously
edges previously unvisited
edges vertices visited
vertices visited edges
visited edges dfs
edges dfs tree
dfs tree vertices
bfs tree bfs
tree bfs connectivity
bfs connectivity acyclicity
acyclicity graph essentially
graph essentially manner
essentially manner dfs
manner dfs applicable
dfs applicable straightforward
applicable straightforward applications
straightforward applications finding
articulation points helpful
points helpful situations
helpful situations dfs
situations dfs bfs
dfs bfs finding
bfs finding path
finding path fewest
path fewest edges
fewest edges vertices
edges vertices bfs
bfs traversal vertices
traversal vertices vertex
vertices vertex reached
vertex reached simple
reached simple path
path root bfs
root bfs tree
bfs tree vertex
tree vertex path
vertex path sought
path sought path
sought path graph
graph figure fewest
figure fewest edges
fewest edges paths
edges paths vertices
paths vertices correctness
vertices correctness application
correctness application appears
application appears stem
appears stem immediately
stem immediately bfs
immediately bfs operates
bfs operates mathematical
operates mathematical proof
mathematical proof validity
proof validity elementary
validity elementary cor
elementary cor section
cor section table
section table summarizes
table summarizes main
summarizes main facts
facts depth breadth
depth breadth table
breadth table main
table main facts
facts depth dfs
breadth bfs dfs
bfs dfs bfs
dfs bfs data
bfs data structure
structure stack vertex
stack vertex orderings
vertex orderings ordering
orderings ordering edge
ordering edge types
edge types undirected
types undirected graphs
undirected graphs tree
graphs tree edges
tree edges applications
edges applications connectivity
connectivity acyclicity articulation
acyclicity articulation points
articulation points minimum
points minimum edge
minimum edge paths
edge paths efficiency
paths efficiency adjacency
matrix efficiency adjacency
efficiency adjacency lists
adjacency lists exercises
lists exercises graph
exercises graph write
graph write adjacency
write adjacency matrix
lists graph assume
graph assume matrix
assume matrix rows
matrix rows columns
rows columns vertices
columns vertices adjacency
vertices adjacency lists
adjacency lists alphabetical
lists alphabetical vertex
alphabetical vertex labels
vertex labels starting
labels starting vertex
starting vertex resolving
vertex resolving ties
resolving ties vertex
vertex alphabetical traverse
alphabetical traverse graph
graph depth construct
depth construct depth
construct depth tree
depth tree vertices
tree vertices reached
reached pushed traversal
pushed traversal stack
traversal stack vertices
popped stack define
stack define sparse
define sparse graphs
sparse graphs implemen
graphs implemen tation
implemen tation dfs
tation dfs efficiency
dfs efficiency graphs
efficiency graphs adjacency
lists graph vertices
vertices edges true
edges true false
dfs forests traversals
forests traversals starting
traversals starting ver
starting ver tices
ver tices trees
tices trees true
dfs forests tree
forests tree edges
tree edges traverse
edges traverse graph
traverse graph problem
graph problem breadth
problem breadth construct
breadth construct breadth
construct breadth tree
breadth tree traversal
tree traversal vertex
traversal vertex resolve
vertex resolve ties
resolve ties vertex
vertex alphabetical prove
alphabetical prove edge
prove edge bfs
edge bfs tree
bfs tree undirected
tree undirected graph
bfs tree graph
tree graph acyclicity
graph acyclicity breadth
acyclicity breadth traversals
breadth traversals dfs
traversals dfs bfs
dfs bfs faster
bfs faster case
faster case examples
case examples supporting
examples supporting connected
supporting connected components
components graph depth
depth breadth graph
breadth graph bipartite
bipartite vertices partitioned
partitioned disjoint subsets
disjoint subsets edge
subsets edge connects
connects vertex graph
vertex graph bipartite
colors graphs called
graphs called colorable
called colorable graph
colorable graph bipartite
graph design dfs
design dfs based
graph bipartite design
bipartite design bfs
design bfs based
graph bipartite write
bipartite write graph
write graph outputs
graph outputs vertices
outputs vertices connected
connected component message
component message graph
message graph acyclic
graph acyclic model
acyclic model maze
model maze vertex
maze vertex starting
vertex starting finishing
starting finishing dead
finishing dead ends
dead ends points
ends points maze
points maze path
maze path connecting
path connecting vertices
connecting vertices paths
vertices paths maze
paths maze construct
maze construct graph
construct graph maze
graph maze traversal
maze traversal dfs
traversal dfs bfs
dfs bfs maze
bfs maze jugs
maze jugs sime
jugs sime denis
sime denis poisson
denis poisson famous
poisson famous french
famous french mathemati
french mathemati cian
mathemati cian physicist
cian physicist interested
physicist interested mathematics
interested mathematics encountering
mathematics encountering version
encountering version puzzle
version puzzle pint
puzzle pint jug
pint jug jugs
jug jugs pint
jugs pint capacity
pint capacity pints
capacity pints jugs
pints jugs completely
jugs completely filling
completely filling emptying
filling emptying jugs
emptying jugs solve
jugs solve puzzle
solve puzzle breadth
puzzle breadth summary
breadth summary brute
summary brute straightforward
concepts involved principal
involved principal strengths
principal strengths brute
strengths brute approach
brute approach wide
approach wide applicability
wide applicability simplicity
applicability simplicity principal
simplicity principal weakness
principal weakness subpar
weakness subpar efficiency
subpar efficiency brute
efficiency brute algorithms
brute algorithms application
algorithms application brute
modest effort noted
effort noted algorithms
noted algorithms considered
algorithms considered examples
considered examples brute
examples brute approach
brute approach definition
approach definition based
matrix multiplication selection
multiplication selection sort
selection sort sequential
sort sequential straightforward
sequential straightforward string
straightforward string matching
matching algorithm exhaustive
algorithm exhaustive brute
exhaustive brute approach
approach combinatorial problems
combinatorial problems suggests
problems suggests generating
suggests generating combinatorial
generating combinatorial problem
combinatorial problem selecting
problem selecting constraints
selecting constraints finding
finding desired traveling
desired traveling salesman
assignment problem typical
problem typical examples
typical examples problems
examples problems solved
problems solved theoretically
solved theoretically exhaustive
theoretically exhaustive algorithms
exhaustive algorithms exhaustive
algorithms exhaustive impractical
instances problems applied
problems applied depth
applied depth dfs
breadth bfs principal
bfs principal graph
principal graph traversal
traversal algorithms representing
algorithms representing graph
representing graph depth
depth breadth forest
breadth forest investigation
forest investigation important
investigation important properties
properties graph algorithms
graph algorithms efficiency
algorithms efficiency adjacency
design algorithm problem
algorithm solving problem
worst case input
algorithm worst case
programming problem maximize
case input case
algorithm brute algorithm
input case input
positive integers necessarily
algorithm extra memory
columns adjacency matrix
tree figure root
tree levels starting
binary tree root
approaches solving problems
modeled digraph vertices
digraph vertices represent
exists directed path
pseudocode simple algorithm
fits knapsack capacity
figure binary trees
digraph dag directed
dag directed acyclic
algorithm run faster
length longest path
binary tree design
tree design algorithm
products matrices computed
algorithm matrices multiplications
solving problem determine
numbers shown figure
mentioned beginning section
tree equal root
root key left
algorithm takes advantage
total multiplications computing
knapsack problem instance
binary tree key
algorithm problem efficiency
important data structures
algorithm space efficient
shown bold pseudocode
fibonacci numbers dis
sequence defined simple
defined simple recurrence
simple recurrence initial
row problem row
initial conditions max
coins denominations coin
denominations coin denominations
coin denominations united
denominations united states
cells adjacent cells
upper left corner
horizontally vertically square
minimum sum descent
discussed section problem
knapsack capacity valuable
capacity valuable subset
introduced section discussed
optimal solution feasible
shown figure maximal
knapsack capacity item
entry table entry
algorithm knapsack prob
tree left child
tree root node
design algorithm finding
section exercises make
shortest paths weighted
paths problem weighted
problem weighted connected
paths problem asks
distances lengths shortest
paths vertex vertices
applicable undirected directed
directed weighted graphs
weighted graph vertices
illustrated figure pseudocode
weight matrix prove
problem based idea
representation adjacency representation
efficient algorithm problem
design linear algorithm
case efficiency class
problem assignment problem
graph input graph
tree edges tree
intellect distinguishes impossible
distinguishes impossible reason
impossible reason distinguishes
reason distinguishes senseless
distinguishes senseless max
senseless max born
max born life
born life views
life views preceding
views preceding chapters
preceding chapters encountered
chapters encountered dozens
encountered dozens algorithms
dozens algorithms solving
solving variety problems
variety problems fair
problems fair assessment
fair assessment algorithms
assessment algorithms problem
algorithms problem solving
problem solving tools
solving tools inescapable
tools inescapable powerful
inescapable powerful instruments
powerful instruments executed
instruments executed modern
executed modern computers
modern computers power
computers power algorithms
power algorithms unlimited
algorithms unlimited limits
unlimited limits subject
limits subject chapter
subject chapter problems
chapter problems solved
algorithm problems solved
problems solved algorithmically
solved algorithmically polynomial
algorithmically polynomial problem
solved polynomial algorithms
polynomial algorithms lower
algorithms lower bounds
bounds efficiency section
efficiency section methods
section methods obtaining
methods obtaining lower
obtaining lower bounds
lower bounds estimates
bounds estimates minimum
estimates minimum needed
minimum needed solve
problem general obtaining
general obtaining nontrivial
obtaining nontrivial lower
nontrivial lower bound
lower bound simple
bound simple sounding
simple sounding problem
sounding problem difficult
problem difficult task
difficult task opposed
task opposed ascertaining
opposed ascertaining efficiency
ascertaining efficiency algorithm
efficiency algorithm task
algorithm task establish
task establish limit
establish limit efficiency
limit efficiency algorithm
efficiency algorithm unknown
algorithm unknown necessitates
unknown necessitates careful
necessitates careful description
careful description operations
description operations algorithms
operations algorithms allowed
algorithms allowed define
allowed define carefully
define carefully rules
carefully rules game
rules game speak
game speak claims
speak claims large
claims large dustbin
large dustbin impossibility
dustbin impossibility related
impossibility related statements
related statements celebrated
statements celebrated british
celebrated british physicist
british physicist lord
physicist lord kelvin
lord kelvin heavier
kelvin heavier air
heavier air flying
air flying machines
flying machines impossible
machines impossible section
impossible section discusses
section discusses decision
discusses decision trees
trees technique applications
technique applications establish
applications establish lower
bounds efficiency comparison
efficiency comparison based
searching sorted arrays
sorted arrays result
arrays result questions
result questions faster
questions faster sorting
algorithm mergesort binary
mergesort binary fastest
binary fastest algorithm
fastest algorithm searching
sorted array intuition
array intuition answers
intuition answers questions
answers questions incidentally
questions incidentally decision
incidentally decision trees
decision trees great
trees great vehicle
great vehicle directing
vehicle directing solution
directing solution puzzles
solution puzzles coin
puzzles coin weighing
coin weighing problem
weighing problem discussed
discussed section deals
section deals intractability
deals intractability problems
intractability problems solved
solved polynomial developed
polynomial developed area
developed area theoretical
area theoretical science
theoretical science called
science called computational
computational complexity theory
complexity theory basic
theory basic elements
basic elements theory
elements theory discuss
theory discuss informally
discuss informally fundamental
informally fundamental notions
fundamental notions problems
notions problems important
problems important unresolved
important unresolved theoretical
unresolved theoretical science
theoretical science relationship
science relationship problems
relationship problems section
problems section chapter
section chapter deals
chapter deals numerical
deals numerical analysis
analysis science concerns
science concerns algorithms
concerns algorithms solving
solving problems continuous
computing integrals nature
integrals nature problems
nature problems imposes
problems imposes types
imposes types limitations
types limitations solved
limitations solved solving
solved solving approximately
solving approximately requires
approximately requires dealing
requires dealing numbers
dealing numbers rep
numbers rep resented
rep resented digital
resented digital precision
digital precision manipulating
precision manipulating approximate
manipulating approximate numbers
approximate numbers proper
numbers proper lead
proper lead inaccurate
lead inaccurate results
inaccurate results solving
results solving basic
solving basic quadratic
basic quadratic equation
quadratic equation poses
equation poses sig
poses sig nificant
sig nificant difficulties
nificant difficulties require
difficulties require modification
require modification canonical
modification canonical formula
canonical formula equation
formula equation roots
equation roots lower
roots lower bound
lower bound arguments
bound arguments efficiency
arguments efficiency algorithm
efficiency algorithm ways
algorithm ways establish
ways establish asymp
establish asymp totic
asymp totic efficiency
worst case class
case class stands
class stands respect
stands respect hierarchy
respect hierarchy efficiency
hierarchy efficiency classes
efficiency classes outlined
classes outlined section
outlined section exam
section exam ple
exam ple selection
ple selection sort
selection sort efficiency
sort efficiency quadratic
efficiency quadratic fast
quadratic fast algorithm
fast algorithm tower
hanoi problem ficiency
problem ficiency exponential
ficiency exponential comparison
exponential comparison akin
comparison akin proverbial
akin proverbial comparison
proverbial comparison apples
comparison apples oranges
apples oranges algorithms
oranges algorithms solve
algorithms solve problems
solve problems alternative
problems alternative possibly
alternative possibly fairer
possibly fairer approach
fairer approach efficient
approach efficient algorithm
efficient algorithm respect
algorithms problem light
problem light selection
light selection sort
selection sort considered
sort considered log
considered log sorting
log sorting algorithms
sorting algorithms tower
hanoi algorithm turns
algorithm turns fastest
turns fastest problem
fastest problem solves
problem solves ascertain
solves ascertain efficiency
ascertain efficiency algorithm
efficiency algorithm respect
algorithms problem desirable
problem desirable efficiency
desirable efficiency algorithm
efficiency algorithm solving
solving problem knowing
problem knowing lower
knowing lower bound
lower bound improvement
bound improvement achieve
improvement achieve quest
achieve quest algorithm
quest algorithm problem
problem bound tight
bound tight algorithm
tight algorithm efficiency
efficiency class lower
class lower bound
lower bound constant
bound constant factor
constant factor improvement
factor improvement gap
improvement gap efficiency
gap efficiency fastest
efficiency fastest algorithm
fastest algorithm lower
lower bound door
bound door improvement
door improvement remains
improvement remains faster
remains faster algorithm
faster algorithm matching
lower bound proved
bound proved section
proved section methods
section methods establishing
methods establishing lower
lower bounds illustrate
bounds illustrate specific
illustrate specific examples
specific examples analyzing
examples analyzing efficiency
analyzing efficiency specific
specific algorithms preceding
algorithms preceding chapters
preceding chapters distinguish
chapters distinguish lower
distinguish lower bound
bound class minimum
class minimum times
minimum times operation
operation executed problem
executed problem difficult
problem difficult immediately
difficult immediately conclude
immediately conclude algorithm
conclude algorithm finding
algorithm finding median
finding median numbers
median numbers simple
numbers simple prove
simple prove comparison
algorithm problem comparisons
problem comparisons worst
worst case odd
case odd trivial
odd trivial lower
lower bounds simplest
bounds simplest method
simplest method obtaining
method obtaining lower
obtaining lower bound
bound class based
class based counting
items produced algorithm
produced algorithm read
algorithm read items
read items process
items process write
process write outputs
write outputs yields
outputs yields trivial
yields trivial lower
bound algorithm generating
generating permutations distinct
distinct items size
items size output
size output bound
output bound tight
bound tight good
tight good algorithms
good algorithms generating
algorithms generating permutations
generating permutations spend
permutations spend constant
spend constant initial
constant initial section
initial section problem
section problem evaluating
evaluating polynomial degree
degree anxn coefficients
anxn coefficients easy
coefficients easy coefficients
easy coefficients processed
coefficients processed polynomial
processed polynomial evaluation
evaluation algorithm case
algorithm case unprocessed
case unprocessed coefficient
unprocessed coefficient polynomial
coefficient polynomial nonzero
polynomial nonzero means
nonzero means algorithm
means algorithm lower
bound tight left
tight left evaluation
left evaluation algorithm
evaluation algorithm problem
problem exercises horner
exercises horner section
horner section linear
section linear similar
linear similar vein
similar vein trivial
vein trivial lower
lower bound computing
bound computing product
product matrices algorithm
matrices algorithm process
algorithm process elements
process elements input
input matrices generate
matrices generate elements
generate elements product
elements product unknown
product unknown bound
unknown bound tight
bound tight trivial
tight trivial lower
lower bounds low
bounds low trivial
low trivial bound
trivial bound traveling
bound traveling salesman
salesman problem input
problem input intercity
input intercity distances
intercity distances output
distances output cities
output cities making
cities making optimal
making optimal bound
optimal bound useless
bound useless algorithm
useless algorithm running
algorithm running polynomial
running polynomial function
polynomial function degree
function degree obstacle
degree obstacle deriving
obstacle deriving meaningful
deriving meaningful lower
meaningful lower bound
lower bound method
bound method lies
method lies determining
lies determining input
determining input processed
input processed algorithm
processed algorithm solving
solving problem searching
problem searching element
sorted array require
array require processing
require processing elements
processing elements problem
elements problem determining
problem determining connectivity
determining connectivity undirected
connectivity undirected graph
undirected graph defined
adjacency matrix plausible
matrix plausible algorithm
plausible algorithm existence
algorithm existence potential
existence potential edges
potential edges proof
edges proof fact
proof fact trivial
fact trivial information
trivial information theoretic
information theoretic arguments
theoretic arguments approach
arguments approach outlined
approach outlined takes
outlined takes account
takes account size
account size problem
size problem output
problem output information
output information theoretical
information theoretical approach
theoretical approach seeks
approach seeks establish
seeks establish lower
establish lower bound
bound based information
based information game
information game deducing
game deducing positive
deducing positive integer
positive integer selected
integer selected person
selected person questions
person questions answers
questions answers uncertainty
answers uncertainty algorithm
uncertainty algorithm solving
solving problem resolve
problem resolve measured
resolve measured log
measured log bits
log bits needed
bits needed possibilities
needed possibilities accurate
possibilities accurate yielding
accurate yielding bit
yielding bit information
bit information algorithm
information algorithm output
algorithm output selected
output selected algorithm
selected algorithm log
algorithm log steps
log steps determine
steps determine output
determine output worst
output worst case
worst case approach
case approach exploited
approach exploited called
exploited called information
theoretic argument connection
argument connection information
connection information theory
information theory proved
theory proved finding
proved finding called
finding called information
theoretic lower bounds
lower bounds problems
bounds problems involving
problems involving comparisons
involving comparisons sorting
comparisons sorting searching
sorting searching underlying
searching underlying idea
underlying idea realized
idea realized precisely
realized precisely mechanism
precisely mechanism decision
mechanism decision trees
decision trees importance
trees importance technique
importance technique discuss
technique discuss separately
discuss separately section
separately section adversary
section adversary arguments
adversary arguments revisit
arguments revisit game
revisit game guessing
game guessing idea
guessing idea information
idea information theoretic
theoretic argument prove
argument prove algorithm
prove algorithm solves
solves problem log
problem log questions
log questions worst
questions worst case
worst case playing
case playing role
playing role hostile
role hostile adversary
hostile adversary make
adversary make algorithm
make algorithm questions
algorithm questions adversary
questions adversary starts
adversary starts numbers
starts numbers potentially
numbers potentially selected
potentially selected cheating
selected cheating game
cheating game concerned
game concerned prove
concerned prove assertion
prove assertion adversary
assertion adversary leaves
adversary leaves largest
leaves largest set
largest set numbers
set numbers consistent
numbers consistent previously
consistent previously answers
previously answers strategy
answers strategy leaves
strategy leaves half
leaves half numbers
half numbers algorithm
numbers algorithm stops
algorithm stops size
stops size set
size set reduced
set reduced adversary
reduced adversary exhibit
adversary exhibit legitimate
exhibit legitimate input
legitimate input algorithm
input algorithm failed
algorithm failed simple
failed simple technical
simple technical log
technical log iterations
log iterations shrink
iterations shrink element
shrink element set
element set halving
set halving rounding
halving rounding size
rounding size remaining
size remaining set
remaining set log
set log questions
log questions asked
questions asked algorithm
asked algorithm worst
worst case illustrates
case illustrates adversary
illustrates adversary method
logic malevolent honest
malevolent honest adversary
honest adversary malevolence
adversary malevolence makes
malevolence makes algorithm
makes algorithm consuming
consuming path honesty
path honesty forces
honesty forces consistent
forces consistent choices
consistent choices lower
choices lower bound
bound obtained measuring
obtained measuring needed
measuring needed shrink
needed shrink set
shrink set potential
set potential inputs
potential inputs single
inputs single input
single input consuming
input consuming path
consuming path problem
path problem merging
problem merging sorted
merging sorted lists
sorted lists size
lists size single
size single sorted
single sorted size
sorted size simplicity
size simplicity assume
simplicity assume distinct
assume distinct problem
distinct problem unique
unique solution encountered
solution encountered problem
problem discussing mergesort
discussing mergesort section
mergesort section recall
section recall merging
recall merging repeatedly
merging repeatedly comparing
repeatedly comparing elements
comparing elements remaining
elements remaining lists
remaining lists outputting
lists outputting smaller
outputting smaller key
smaller key comparisons
case algorithm merging
algorithm merging algorithm
merging algorithm merging
algorithm merging faster
merging faster turns
faster turns knuth
turns knuth knuiii
knuth knuiii quotes
knuiii quotes adversary
quotes adversary method
adversary method proving
method proving lower
proving lower bound
algorithm problem adversary
problem adversary true
adversary true comparison
true comparison merging
comparison merging algorithm
merging algorithm combined
algorithm combined consistent
combined consistent combined
consistent combined algorithm
combined algorithm explicitly
algorithm explicitly adjacent
explicitly adjacent pairs
adjacent pairs elements
pairs elements comparisons
elements comparisons compared
comparisons compared transpose
compared transpose keys
transpose keys consistent
keys consistent comparisons
consistent comparisons distinguished
comparisons distinguished configuration
distinguished configuration lower
configuration lower bound
comparisons needed merging
needed merging algorithm
merging algorithm problem
problem reduction encountered
reduction encountered problem
encountered problem reduction
problem reduction approach
reduction approach section
approach section discussed
section discussed algorithm
discussed algorithm problem
algorithm problem reducing
reducing problem solvable
problem solvable algorithm
solvable algorithm similar
algorithm similar reduction
similar reduction idea
reduction idea finding
idea finding lower
finding lower bound
bound problem hard
problem hard problem
hard problem lower
lower bound words
bound words arbitrary
words arbitrary instance
arbitrary instance problem
instance problem transformed
problem transformed efficient
transformed efficient fashion
efficient fashion instance
fashion instance problem
algorithm solving solve
solving solve lower
lower bound table
bound table lists
table lists important
lists important problems
important problems purpose
problems purpose table
purpose table problems
table problems establishing
problems establishing lower
lower bounds problem
bounds problem reduction
reduction problem lower
lower bound tightness
bound tightness sorting
tightness sorting log
sorting log searching
log searching sorted
array log element
log element uniqueness
uniqueness problem log
problem log multiplication
log multiplication digit
multiplication digit integers
digit integers unknown
integers unknown multiplication
unknown multiplication matrices
multiplication matrices unknown
matrices unknown establish
unknown establish lower
lower bounds sorting
bounds sorting searching
sorting searching sec
searching sec tion
sec tion element
tion element uniqueness
uniqueness problem asks
problem asks duplicates
asks duplicates numbers
duplicates numbers encountered
numbers encountered problem
encountered problem sections
problem sections proof
sections proof lower
proof lower bound
lower bound seemingly
bound seemingly simple
seemingly simple problem
simple problem based
based sophisti cated
sophisti cated mathematical
mathematical analysis scope
analysis scope pre
scope pre elementary
pre elementary exposition
elementary exposition algebraic
exposition algebraic prob
algebraic prob lems
prob lems table
lems table lower
table lower bounds
lower bounds quoted
bounds quoted trivial
quoted trivial improved
trivial improved remains
improved remains unknown
remains unknown establishing
unknown establishing lower
establishing lower bound
lower bound reduction
bound reduction euclidean
reduction euclidean minimum
tree problem points
cartesian plane construct
plane construct tree
construct tree minimum
tree minimum total
minimum total length
total length vertices
length vertices points
vertices points problem
points problem lower
lower bound element
bound element uniqueness
uniqueness problem transform
problem transform set
transform set real
real numbers set
numbers set points
cartesian plane simply
plane simply adding
simply adding points
adding points coordinate
points coordinate minimum
coordinate minimum spanning
tree set points
set points shortest
points shortest edge
shortest edge checking
edge checking length
checking length edge
length edge uniqueness
edge uniqueness numbers
uniqueness numbers reduction
numbers reduction implies
reduction implies log
implies log lower
lower bound euclidean
bound euclidean minimum
tree problem final
problem final results
final results complexity
results complexity problems
complexity problems reduction
problems reduction technique
reduction technique relative
technique relative complexity
relative complexity prob
complexity prob lems
prob lems formulas
lems formulas problems
formulas problems computing
problems computing product
digit integers squaring
integers squaring digit
squaring digit integer
digit integer complexity
integer complexity class
complexity class seemingly
class seemingly simpler
seemingly simpler similar
simpler similar results
similar results matrix
results matrix operations
matrix operations multi
operations multi plying
multi plying symmetric
plying symmetric matrices
symmetric matrices turns
matrices turns complexity
turns complexity class
complexity class multiplying
class multiplying arbitrary
square matrices result
matrices result based
result based observation
based observation problem
observation problem special
special case problem
case problem multiplying
problem multiplying arbitrary
square matrices problem
matrices problem multiplying
problem multiplying symmetric
multiplying symmetric matrices
symmetric matrices transpose
matrices transpose matrices
transpose matrices stands
matrices stands matrix
stands matrix elements
elements zeros needed
zeros needed product
needed product easily
product easily extracted
easily extracted true
extracted true matrices
true matrices original
matrices original size
original size minor
size minor technical
minor technical complication
technical complication impact
complication impact complexity
impact complexity classes
complexity classes results
classes results interesting
results interesting encounter
interesting encounter important
encounter important applications
important applications reduction
applications reduction approach
reduction approach comparing
approach comparing problem
comparing problem complexity
problem complexity section
complexity section exercises
exercises prove algorithm
prove algorithm solving
algorithm solving alternating
solving alternating disk
alternating disk puzzle
disk puzzle problem
problem exercises make
exercises make moves
make moves solve
moves solve lower
bound tight prove
tight prove classic
prove classic recursive
hanoi puzzle section
puzzle section makes
section makes minimum
makes minimum disk
minimum disk moves
disk moves needed
moves needed solve
solve problem trivial
problem trivial lower
bound class problems
class problems indi
problems indi cate
indi cate bound
cate bound tight
bound tight finding
tight finding largest
element array checking
array checking completeness
checking completeness graph
completeness graph represented
adjacency matrix generating
matrix generating subsets
generating subsets element
element set determining
set determining real
determining real numbers
real numbers distinct
numbers distinct problem
distinct problem identifying
problem identifying lighter
identifying lighter fake
lighter fake coin
fake coin identical
coin identical coins
identical coins scale
coins scale information
scale information theoretic
theoretic argument text
argument text ques
text ques tions
ques tions guessing
tions guessing game
guessing game conclude
game conclude algorithm
conclude algorithm identifying
algorithm identifying fake
identifying fake log
fake log weighings
case prove comparison
largest element set
element set real
real numbers make
numbers make comparisons
make comparisons worst
worst case tight
case tight lower
lower bound sorting
bound sorting array
sorting array exchanging
array exchanging adjacent
exchanging adjacent elements
adjacent elements adversary
elements adversary argument
adversary argument proof
argument proof efficiency
proof efficiency algorithm
efficiency algorithm checks
algorithm checks connectivity
checks connectivity graph
graph vertices provided
vertices provided operation
provided operation allowed
operation allowed algorithm
allowed algorithm inquire
algorithm inquire presence
inquire presence edge
presence edge vertices
edge vertices graph
vertices graph lower
graph lower bound
bound tight minimum
tight minimum comparisons
minimum comparisons needed
needed comparison based
algorithm merge sorted
merge sorted lists
sorted lists sizes
lists sizes elements
sizes elements prove
elements prove validity
prove validity product
validity product matrices
product matrices transformation
matrices transformation product
transformation product symmetric
product symmetric matrices
symmetric matrices section
matrices section formulas
section formulas complexity
formulas complexity equiva
complexity equiva lence
equiva lence multiplication
lence multiplication squaring
multiplication squaring integers
squaring integers complexity
integers complexity equivalence
complexity equivalence multiplication
equivalence multiplication squaring
multiplication squaring square
squaring square matrices
square matrices multiplication
matrices multiplication matrices
multiplication matrices reduced
matrices reduced squaring
reduced squaring matrix
squaring matrix tight
matrix tight lower
bound class problem
closest numbers real
real numbers tight
numbers tight lower
bound class placement
class placement problem
placement problem exercises
problem exercises decision
exercises decision trees
decision trees important
trees important algorithms
important algorithms sorting
sorting searching comparing
searching comparing items
comparing items inputs
items inputs study
inputs study performance
study performance algorithms
performance algorithms device
algorithms device called
device called decision
called decision tree
figure presents decision
presents decision tree
tree algorithm finding
minimum numbers internal
numbers internal node
internal node binary
node binary decision
decision tree represents
tree represents key
represents key comparison
key comparison node
comparison node left
left subtree information
subtree information subsequent
information subsequent comparisons
subsequent comparisons subtree
comparisons subtree case
subtree case sake
case sake simplicity
assume section input
section input items
input items distinct
items distinct leaf
distinct leaf represents
leaf represents outcome
represents outcome algorithm
outcome algorithm run
input size leaves
size leaves greater
leaves greater outcomes
greater outcomes algorithms
outcomes algorithms outcome
algorithms outcome arrived
outcome arrived chain
arrived chain comparisons
chain comparisons case
comparisons case decision
case decision tree
tree figure important
figure important leaves
important leaves large
leaves large outcomes
large outcomes algorithm
outcomes algorithm input
input size traced
size traced path
traced path root
root leaf decision
leaf decision tree
decision tree comparisons
tree comparisons algorithm
comparisons algorithm figure
algorithm figure decision
decision tree finding
tree finding minimum
minimum numbers run
numbers run equal
run equal length
equal length path
length path comparisons
path comparisons worst
worst case equal
case equal height
equal height algorithm
height algorithm decision
algorithm decision tree
decision tree central
tree central idea
central idea model
idea model lies
model lies observation
lies observation tree
observation tree leaves
tree leaves dictated
leaves dictated outcomes
dictated outcomes tall
outcomes tall leaves
tall leaves specifically
leaves specifically difficult
specifically difficult prove
difficult prove binary
prove binary tree
tree leaves height
leaves height log
height log binary
height largest leaves
largest leaves largest
leaves largest leaves
largest leaves tree
leaves tree words
tree words immediately
words immediately implies
immediately implies inequality
implies inequality puts
inequality puts lower
puts lower bound
lower bound heights
bound heights binary
heights binary decision
decision trees worst
trees worst case
case comparisons comparison
problem bound called
bound called informationtheoretic
called informationtheoretic lower
informationtheoretic lower bound
lower bound section
bound section illustrate
section illustrate technique
illustrate technique important
technique important problems
important problems sorting
sorted array decision
decision trees sorting
trees sorting algorithms
sorting algorithms comparison
algorithms comparison based
comparison based comparing
based comparing elements
comparing elements sorted
elements sorted studying
sorted studying properties
studying properties decision
properties decision trees
decision trees algorithms
trees algorithms derive
algorithms derive important
derive important lower
important lower bounds
lower bounds efficiencies
bounds efficiencies interpret
efficiencies interpret outcome
interpret outcome sorting
outcome sorting algorithm
sorting algorithm finding
algorithm finding permutation
finding permutation element
permutation element indices
element indices input
indices input puts
input puts elements
puts elements ascending
elements ascending element
ascending element orderable
element orderable items
orderable items real
items real numbers
real numbers strings
numbers strings outcome
strings outcome obtained
outcome obtained sorting
obtained sorting figure
sorting figure permutation
figure permutation general
permutation general outcomes
general outcomes sorting
outcomes sorting arbitrary
sorting arbitrary element
arbitrary element equal
element equal abc
equal abc cba
abc cba bac
cba bac cba
bac cba figure
cba figure decision
tree element selection
element selection sort
selection sort triple
sort triple node
triple node state
node state array
state array sorted
array sorted redundant
sorted redundant comparisons
redundant comparisons single
comparisons single outcome
single outcome results
outcome results previously
results previously comparisons
previously comparisons inequality
comparisons inequality implies
inequality implies height
implies height binary
height binary decision
decision tree comparison
tree comparison based
sorting algorithm worst
worst case parisons
case parisons algorithm
parisons algorithm log
algorithm log cworst
cworst log stirling
log stirling formula
stirling formula log
formula log words
log words log
words log comparisons
worst case sort
case sort arbitrary
sort arbitrary element
arbitrary element comparison
element comparison based
algorithm mergesort makes
mergesort makes comparisons
makes comparisons worst
worst case asymptotically
case asymptotically optimal
asymptotically optimal implies
optimal implies asymptotic
implies asymptotic lower
asymptotic lower bound
bound log tight
log tight substantially
tight substantially improved
substantially improved lower
improved lower bound
bound log improved
log improved values
improved values log
values log proved
log proved comparisons
proved comparisons sufficient
comparisons sufficient sort
sufficient sort array
sort array elements
worst case decision
case decision trees
decision trees analyzing
trees analyzing average
analyzing average case
case efficiencies comparison
efficiencies comparison based
based sorting algorithms
sorting algorithms compute
algorithms compute average
compute average comparisons
comparisons algorithm average
algorithm average depth
average depth decision
depth decision tree
decision tree leaves
tree leaves average
leaves average path
average path length
root leaves abc
leaves abc bac
abc bac acb
bac acb bca
acb bca figure
bca figure decision
tree element insertion
sort element insertion
insertion sort decision
sort decision tree
figure standard assumption
standard assumption outcomes
assumption outcomes sorting
outcomes sorting equally
sorting equally lower
equally lower bound
lower bound average
bound average comparisons
average comparisons cavg
cavg comparison based
sorting element proved
element proved cavg
proved cavg log
cavg log earlier
log earlier lower
earlier lower bound
bound log surprised
log surprised lower
surprised lower bounds
lower bounds average
bounds average worst
worst cases identical
cases identical bounds
identical bounds obtained
bounds obtained maximizing
obtained maximizing compar
maximizing compar isons
compar isons average
isons average worst
worst cases sorting
cases sorting algorithm
sorting algorithm average
case efficiency significantly
efficiency significantly worst
case efficiency decision
efficiency decision trees
decision trees searching
trees searching sorted
sorted array section
array section decision
section decision trees
decision trees establishing
trees establishing lower
lower bounds key
bounds key comparisons
sorted array keys
array keys principal
keys principal algorithm
principal algorithm problem
algorithm problem binary
problem binary section
binary section comparisons
section comparisons binary
comparisons binary worst
binary worst case
worst case cwbsorst
case cwbsorst formula
cwbsorst formula cwbsorst
formula cwbsorst log
cwbsorst log figure
log figure ternary
figure ternary decision
element array decision
decision trees determine
trees determine smallest
determine smallest comparisons
smallest comparisons dealing
comparisons dealing comparisons
dealing comparisons key
comparisons key compared
compared element natural
element natural ternary
natural ternary decision
trees figure presents
figure presents tree
presents tree case
tree case internal
case internal nodes
nodes tree array
tree array elements
array elements compared
elements compared key
compared key leaves
key leaves matching
leaves matching element
matching element case
element case successful
case successful interval
successful interval key
interval key belongs
key belongs case
belongs case unsuccessful
case unsuccessful represent
unsuccessful represent algorithm
represent algorithm searching
sorted array comparisons
array comparisons ternary
comparisons ternary decision
decision tree similar
tree similar figure
similar figure array
array elements decision
elements decision trees
decision trees leaves
trees leaves successful
leaves successful searches
searches unsuccessful minimum
unsuccessful minimum height
minimum height ternary
height ternary tree
ternary tree leaves
tree leaves log
leaves log lower
lower bound worst
bound worst case
case comparisons cworst
comparisons cworst log
cworst log lower
lower bound smaller
bound smaller log
smaller log worst
comparisons binary large
binary large values
large values smaller
values smaller equal
smaller equal log
equal log positive
positive integer problem
integer problem section
exercises prove lower
prove lower bound
bound binary optimal
binary optimal turns
optimal turns lower
turns lower bound
bound binary ternary
binary ternary decision
trees figure internal
figure internal nodes
tree correspond comparisons
correspond comparisons terminal
comparisons terminal nodes
terminal nodes successful
nodes successful searches
successful searches leaves
searches leaves represent
leaves represent unsuccessful
represent unsuccessful searches
unsuccessful searches searching
searches searching element
searching element array
element array figure
array figure binary
figure binary decision
element array comparison
array comparison decision
comparison decision trees
decision trees figures
trees figures illustrates
figures illustrates binary
illustrates binary decision
decision tree simply
tree simply ternary
simply ternary decision
decision tree middle
tree middle subtrees
middle subtrees eliminated
subtrees eliminated applying
eliminated applying inequality
applying inequality binary
inequality binary decision
decision trees immediately
trees immediately yields
immediately yields cworst
yields cworst log
cworst log inequality
log inequality closes
inequality closes gap
closes gap lower
gap lower bound
lower bound worstcase
bound worstcase comparisons
worstcase comparisons binary
comparisons binary log
binary log sophisticated
log sophisticated analysis
sophisticated analysis knuiii
analysis knuiii section
knuiii section shows
section shows standard
shows standard assumptions
standard assumptions searches
assumptions searches binary
searches binary makes
binary makes smallest
makes smallest comparisons
smallest comparisons average
comparisons algorithm turns
algorithm turns log
turns log successful
log successful unsuccessful
unsuccessful searches exercises
searches exercises prove
exercises prove mathematical
mathematical induction log
induction log binary
height leaves log
leaves log ternary
log ternary tree
ternary tree height
height leaves problem
leaves problem finding
problem finding median
finding median element
median element set
element set orderable
orderable items information
items information theoretic
lower bound comparison
bound comparison based
comparison based gorithms
based gorithms solving
solving problem draw
problem draw decision
tree algorithm solving
solving problem worst
problem worst case
comparisons algorithm greater
algorithm greater information
greater information theoretic
bound algorithm matching
lower bound exists
bound exists algorithm
exists algorithm prove
algorithm prove impossibility
prove impossibility draw
impossibility draw decision
decision tree key
tree key comparisons
comparisons worst average
average cases element
cases element basic
element basic sort
basic sort element
sort element enhanced
element enhanced sort
enhanced sort stops
sort stops swaps
stops swaps design
swaps design comparison
element array smallest
smallest element comparisons
element comparisons design
comparisons design comparison
element array comparisons
array comparisons worst
case draw binary
draw binary decision
decision tree searching
tree searching element
element sorted sequen
sorted sequen tial
sequen tial lower
tial lower bounds
lower bounds searching
bounds searching sorted
array log positive
integer log positive
positive integer information
integer information theoretic
lower bound finding
bound finding maximum
finding maximum numbers
maximum numbers comparison
numbers comparison based
based algorithms bound
algorithms bound tight
bound tight tournament
tight tournament tree
tournament tree binary
binary tree reflecting
tree reflecting results
reflecting results knockout
results knockout tournament
knockout tournament leaves
tournament leaves represent
leaves represent players
represent players entering
players entering tournament
entering tournament internal
tournament internal node
internal node represents
node represents winner
represents winner played
winner played players
played players represented
players represented node
represented node children
node children winner
children winner tournament
winner tournament represented
tournament represented root
represented root tree
root tree total
tree total games
total games played
games played tournament
played tournament rounds
tournament rounds tournament
rounds tournament design
tournament design efficient
efficient algorithm determine
algorithm determine player
determine player information
player information produced
information produced tournament
produced tournament extra
tournament extra games
extra games algorithm
games algorithm require
algorithm require advanced
require advanced fake
advanced fake coin
coin problem coins
problem coins identical
coins identical appearance
identical appearance genuine
appearance genuine fake
genuine fake unknown
fake unknown fake
unknown fake coin
heavier genuine scale
genuine scale sets
heavier problem coins
problem coins genuine
coins genuine fake
genuine fake coin
fake coin establish
coin establish lighter
establish lighter heavier
heavier genuine prove
genuine prove algorithm
prove algorithm problem
algorithm problem make
problem make log
make log weighings
case draw decision
coins weighings prove
weighings prove exists
prove exists algorithm
exists algorithm solves
coins weighings draw
weighings draw decision
weighings extra coin
extra coin genuine
coin genuine draw
genuine draw decision
algorithm solves classic
solves classic version
classic version problem
version problem coins
weighings extra coins
extra coins jigsaw
coins jigsaw puzzle
jigsaw puzzle jigsaw
puzzle jigsaw puzzle
jigsaw puzzle pieces
puzzle pieces section
pieces section puzzle
section puzzle set
puzzle set pieces
set pieces connected
pieces connected consists
connected consists connecting
consists connecting sections
connecting sections algorithm
sections algorithm minimize
algorithm minimize moves
minimize moves required
moves required puzzle
required puzzle problems
puzzle problems study
problems study computational
study computational complexity
computational complexity problems
complexity problems scientists
problems scientists computing
scientists computing professionals
computing professionals problem
professionals problem solved
definition algorithm solves
solves problem polynomial
problem polynomial worst
case efficiency belongs
efficiency belongs polynomial
belongs polynomial problem
polynomial problem input
problem input size
input size big
size big notation
big notation problems
notation problems solvable
problems solvable logarithmic
solvable logarithmic solvable
logarithmic solvable polynomial
solvable polynomial problems
polynomial problems solved
polynomial called tractable
called tractable problems
tractable problems solved
polynomial called intractable
called intractable reasons
intractable reasons drawing
reasons drawing intractability
drawing intractability line
intractability line entries
line entries table
entries table discussion
table discussion section
discussion section imply
section imply solve
imply solve arbitrary
solve arbitrary instances
arbitrary instances intractable
instances intractable problems
intractable problems reasonable
problems reasonable instances
reasonable instances small
instances small huge
small huge difference
huge difference running
running times polynomials
times polynomials drastically
polynomials drastically degrees
drastically degrees polynomial
degrees polynomial algorithms
polynomial algorithms degree
algorithms degree polynomial
degree polynomial higher
polynomial higher addition
higher addition polynomials
addition polynomials bound
polynomials bound running
bound running times
times algorithms extremely
algorithms extremely large
extremely large coefficients
large coefficients polynomial
coefficients polynomial functions
polynomial functions convenient
functions convenient properties
convenient properties sum
properties sum composition
sum composition polynomials
composition polynomials fourth
polynomials fourth choice
fourth choice class
choice class led
class led development
led development extensive
development extensive theory
extensive theory called
theory called computational
computational complexity seeks
complexity seeks classify
classify problems inherent
problems inherent difficulty
inherent difficulty theory
difficulty theory problem
theory problem intractability
problem intractability remains
intractability remains principal
remains principal models
principal models computations
models computations reasonable
computations reasonable input
reasonable input encoding
input encoding schemes
encoding schemes problem
schemes problem consideration
problem consideration basic
consideration basic notions
basic notions ideas
notions ideas complexity
ideas complexity theory
complexity theory section
theory section interested
section interested formal
interested formal treatment
formal treatment theory
treatment theory finding
theory finding wealth
finding wealth textbooks
wealth textbooks devoted
textbooks devoted subject
devoted subject aro
subject aro problems
aro problems discussed
problems discussed solved
discussed solved polynomial
polynomial algorithm computing
computing product greatest
product greatest common
divisor integers sorting
integers sorting searching
sorting searching key
searching key pattern
key pattern text
pattern text string
text string checking
string checking connectivity
checking connectivity acyclicity
acyclicity graph finding
graph finding minimum
spanning tree shortest
weighted graph invited
graph invited examples
invited examples informally
examples informally problems
informally problems solved
solved polynomial set
polynomial set science
set science theoreticians
science theoreticians formal
theoreticians formal definition
formal definition includes
definition includes decision
includes decision problems
problems answers definition
answers definition class
polynomial deterministic algorithms
deterministic algorithms class
problems called polynomial
called polynomial restriction
polynomial restriction decision
restriction decision problems
decision problems justified
problems justified reasons
justified reasons exclude
reasons exclude problems
exclude problems solvable
problems solvable polynomial
solvable polynomial exponentially
polynomial exponentially large
exponentially large output
large output problems
output problems arise
problems arise naturally
arise naturally generating
naturally generating subsets
subsets set permutations
set permutations distinct
distinct items apparent
items apparent outset
apparent outset solved
outset solved polynomial
solved polynomial important
important problems decision
decision problems natural
problems natural formulation
natural formulation reduced
formulation reduced series
reduced series decision
series decision problems
decision problems easier
problems easier study
easier study minimum
study minimum colors
minimum colors needed
colors needed color
needed color vertices
color vertices graph
colored color exists
color exists coloring
exists coloring graph
coloring graph vertices
graph vertices colors
vertices colors called
colors called coloring
called coloring problem
coloring problem series
problem series decision
series decision problem
decision problem coloring
problem coloring solution
coloring solution solves
solution solves optimization
solves optimization version
optimization version graph
version graph coloring
coloring problem natural
problem natural decision
natural decision problem
solved polynomial turns
polynomial turns fact
turns fact decision
fact decision problems
algorithm problems called
problems called undecidable
called undecidable opposed
undecidable opposed decidable
opposed decidable problems
decidable problems solved
solved algorithm famous
algorithm famous undecidable
famous undecidable problem
undecidable problem alan
problem alan turing
alan turing problem
turing problem called
problem called halting
called halting problem
problem input determine
input determine halt
determine halt input
halt input working
input working indefinitely
working indefinitely surprisingly
indefinitely surprisingly short
surprisingly short proof
short proof remarkable
proof remarkable fact
remarkable fact contra
fact contra diction
contra diction assume
diction assume algorithm
assume algorithm solves
algorithm solves halting
solves halting problem
problem input halts
input halts input
halts input halt
input halt input
halt input output
input output algorithm
output algorithm pair
algorithm pair construct
pair construct halts
construct halts halt
halts input substituting
input substituting halts
substituting halts halt
halts input contradiction
input contradiction outcomes
contradiction outcomes completes
outcomes completes proof
completes proof decidable
proof decidable intractable
decidable intractable problems
intractable problems examples
problems examples surprisingly
examples surprisingly small
surprisingly small arise
small arise naturally
arise naturally constructed
naturally constructed sake
constructed sake theoretical
sake theoretical argument
theoretical argument important
argument important problems
important problems polynomial
polynomial algorithm impossibility
algorithm impossibility algorithm
impossibility algorithm proved
algorithm proved classic
proved classic monograph
classic monograph garey
monograph garey johnson
garey johnson gar
johnson gar problems
gar problems areas
problems areas science
areas science mathematics
science mathematics operations
mathematics operations research
operations research small
research small sample
small sample problems
sample problems fall
problems fall category
fall category hamiltonian
category hamiltonian circuit
circuit problem determine
problem determine graph
determine graph hamiltonian
circuit path starts
path starts ends
ends vertex passes
vertex passes vertices
passes vertices traveling
vertices traveling salesman
salesman problem shortest
problem shortest cities
shortest cities positive
cities positive integer
positive integer distances
integer distances shortest
distances shortest hamiltonian
circuit graph positive
integer weights breakthrough
weights breakthrough contributions
breakthrough contributions theoretical
theoretical science english
science english mathematician
english mathematician science
mathematician science pioneer
science pioneer alan
pioneer alan turing
alan turing recognition
turing recognition acm
recognition acm principal
acm principal society
principal society computing
society computing professionals
computing professionals researchers
professionals researchers named
researchers named award
named award outstanding
award outstanding contributions
outstanding contributions theoretical
theoretical science lecture
science lecture occasion
lecture occasion richard
occasion richard karp
richard karp kar
karp kar interesting
kar interesting historical
interesting historical account
historical account development
account development complexity
development complexity theory
complexity theory knapsack
theory knapsack problem
knapsack problem valuable
problem valuable subset
subset items positive
items positive integer
integer weights values
values knapsack positive
knapsack positive integer
positive integer capacity
integer capacity partition
capacity partition problem
positive integers determine
integers determine possi
determine possi ble
possi ble partition
ble partition disjoint
subsets sum bin
sum bin packing
packing problem items
problem items sizes
items sizes positive
sizes positive rational
positive rational num
rational num bers
num bers larger
bers larger smallest
larger smallest bins
smallest bins size
bins size graph
size graph coloring
problem graph chromatic
graph chromatic smallest
chromatic smallest colors
smallest colors assigned
colors assigned graph
assigned graph vertices
adjacent vertices assigned
vertices assigned color
assigned color integer
color integer linear
programming problem maximum
problem maximum minimum
maximum minimum linear
minimum linear function
linear function integer
function integer valued
integer valued variables
valued variables subject
variables subject finite
subject finite set
finite set constraints
set constraints linear
constraints linear equalities
linear equalities inequalities
equalities inequalities problems
inequalities problems decision
decision problems decision
problems decision version
decision version counterparts
version counterparts coloring
counterparts coloring problem
coloring problem problems
problem problems common
problems common exponential
common exponential worse
exponential worse growth
worse growth choices
growth choices function
choices function input
input size solution
size solution problems
solution problems fall
problems fall umbrella
fall umbrella solved
umbrella solved polynomial
solved polynomial eulerian
polynomial eulerian circuit
eulerian circuit problem
circuit problem existence
problem existence traverses
existence traverses edges
traverses edges graph
edges graph solved
graph solved checking
solved checking addition
checking addition graph
addition graph connectivity
vertices degrees striking
degrees striking counterintuitive
striking counterintuitive problem
counterintuitive problem cycles
problem cycles traversing
cycles traversing edges
traversing edges eulerian
edges eulerian circuits
eulerian circuits easier
circuits easier seemingly
easier seemingly similar
seemingly similar problem
similar problem cycles
problem cycles visiting
cycles visiting vertices
visiting vertices hamiltonian
vertices hamiltonian circuits
hamiltonian circuits common
circuits common feature
common feature vast
feature vast majority
decision problems fact
problems fact solving
fact solving problems
solving problems computationally
problems computationally difficult
computationally difficult checking
difficult checking proposed
solves problem computationally
problem computationally easy
computationally easy polynomial
easy polynomial proposed
polynomial proposed solution
proposed solution randomly
solution randomly generated
randomly generated leaving
generated leaving task
leaving task verifying
task verifying validity
verifying validity easy
validity easy proposed
easy proposed vertices
proposed vertices hamiltonian
vertices hamiltonian circuit
circuit graph vertices
graph vertices distinct
vertices distinct consecutive
distinct consecutive pair
connected edge general
edge general observation
general observation decision
observation decision problems
decision problems led
problems led scientists
led scientists notion
scientists notion nondeterministic
notion nondeterministic algorithm
nondeterministic algorithm definition
algorithm definition nondeterministic
definition nondeterministic algorithm
nondeterministic algorithm stage
algorithm stage procedure
stage procedure takes
procedure takes input
takes input instance
input instance decision
instance decision problem
decision problem nondeterministic
problem nondeterministic guessing
guessing stage arbitrary
stage arbitrary string
arbitrary string generated
string generated thought
generated thought candidate
thought candidate solution
candidate solution instance
solution instance gibberish
instance gibberish deterministic
gibberish deterministic verification
deterministic verification stage
verification stage deterministic
stage deterministic algorithm
deterministic algorithm takes
algorithm takes input
takes input outputs
input outputs represents
outputs represents solution
represents solution instance
solution instance algorithm
instance algorithm returns
algorithm returns allowed
returns allowed halt
allowed halt nondeterministic
halt nondeterministic algorithm
nondeterministic algorithm solves
algorithm solves decision
solves decision problem
decision problem instance
instance problem returns
problem returns execution
returns execution words
execution words require
words require nondeterministic
require nondeterministic algorithm
nondeterministic algorithm capable
algorithm capable guessing
capable guessing solution
guessing solution verify
solution verify validity
verify validity output
validity output instance
output instance finally
instance finally nondeterministic
finally nondeterministic algorithm
nondeterministic algorithm nondeterministic
algorithm nondeterministic polynomial
nondeterministic polynomial efficiency
polynomial efficiency verification
efficiency verification stage
verification stage polynomial
stage polynomial define
polynomial define class
define class problems
class problems definition
problems definition class
problems solved nondeterministic
solved nondeterministic polynomial
nondeterministic polynomial algorithms
polynomial algorithms class
problems called nondeterministic
called nondeterministic polynomial
nondeterministic polynomial decision
polynomial decision problems
decision problems class
problems class includes
class includes problems
includes problems true
true problem deterministic
problem deterministic polynomialtime
deterministic polynomialtime algorithm
polynomialtime algorithm solves
algorithm solves verification
solves verification stage
verification stage nondeterministic
stage nondeterministic algorithm
nondeterministic algorithm simply
algorithm simply ignores
simply ignores string
ignores string generated
string generated nondeterministic
generated nondeterministic guessing
guessing stage hamiltonian
stage hamiltonian circuit
circuit problem partition
partition problem decision
problem decision versions
decision versions traveling
versions traveling salesman
salesman knapsack graph
knapsack graph coloring
graph coloring hundreds
coloring hundreds difficult
difficult combinatorial optimization
combinatorial optimization problems
optimization problems cataloged
problems cataloged gar
cataloged gar halting
gar halting problem
halting problem rare
problem rare examples
rare examples decision
examples decision problems
decision problems leads
problems leads important
leads important theoretical
important theoretical science
theoretical science proper
science proper subset
proper subset classes
subset classes fact
classes fact symbolically
fact symbolically imply
symbolically imply hundreds
imply hundreds difficult
difficult combinatorial decision
combinatorial decision problems
polynomial algorithm scientists
algorithm scientists failed
scientists failed algorithms
failed algorithms persistent
algorithms persistent efforts
efforts years decision
years decision problems
decision problems cast
problems cast doubts
cast doubts possibility
doubts possibility problems
possibility problems informally
problems informally problem
informally problem difficult
difficult problem class
class definition problem
definition problem reduced
problem reduced polynomial
reduced polynomial shown
polynomial shown symbolically
shown symbolically figure
symbolically figure formal
figure formal definitions
formal definitions concepts
concepts definition decision
decision problem polynomially
reducible decision problem
decision problem exists
problem exists function
exists function transforms
function transforms instances
transforms instances maps
instances maps instances
maps instances computable
instances computable polynomial
computable polynomial algorithm
algorithm definition immediately
definition immediately implies
immediately implies problem
implies problem polynomially
polynomially reducible problem
reducible problem solved
solved polynomial problem
solved polynomial definition
polynomial definition decision
decision problem belongs
problem belongs class
belongs class problem
class problem polynomially
polynomially reducible fact
reducible fact closely
fact closely related
closely related decision
related decision problems
decision problems polynomially
polynomially reducible surprising
reducible surprising prove
surprising prove hamiltonian
prove hamiltonian circuit
circuit problem polynomially
decision version traveling
version traveling problems
traveling problems problem
problems problem figure
problem figure notion
figure notion problem
notion problem polynomial
problem polynomial reductions
polynomial reductions problems
reductions problems problem
problems problem shown
problem shown arrows
shown arrows salesman
arrows salesman problem
salesman problem stated
problem stated existence
stated existence problem
existence problem hamil
problem hamil tonian
tonian circuit longer
circuit longer positive
longer positive integer
positive integer graph
integer graph positive
integer weights map
weights map graph
map graph instance
graph instance hamiltonian
circuit problem weighted
weighted graph representing
graph representing stance
representing stance traveling
salesman problem assigning
problem assigning weight
assigning weight edge
weight edge adding
adding edge weight
edge weight pair
weight pair nonadjacent
pair nonadjacent vertices
nonadjacent vertices upper
vertices upper bound
upper bound hamiltonian
bound hamiltonian circuit
circuit length vertices
length vertices transformation
vertices transformation polynomial
transformation polynomial instance
polynomial instance hamiltonian
circuit problem hamiltonian
hamiltonian circuit image
circuit image length
image length making
length making image
making image instance
salesman problem conversely
problem conversely hamiltonian
conversely hamiltonian circuit
circuit length larger
length larger length
larger length circuit
length circuit edges
circuit edges making
edges making inverse
making inverse image
inverse image instance
salesman problem instance
problem instance hamiltonian
circuit problem completes
problem completes proof
completes proof notion
proof notion completeness
notion completeness requires
completeness requires polynomial
requires polynomial reducibility
polynomial reducibility problems
reducibility problems unknown
problems unknown problem
unknown problem bewildering
problem bewildering variety
bewildering variety decision
variety decision problems
decision problems short
problems short amazing
short amazing specific
amazing specific examples
examples problems neverthe
problems neverthe mathematical
neverthe mathematical feat
mathematical feat accomplished
feat accomplished independently
accomplished independently stephen
independently stephen cook
stephen cook united
cook united states
united states leonid
states leonid levin
leonid levin soviet
levin soviet union
soviet union paper
union paper cook
paper cook coo
cook coo showed
coo showed called
showed called cnf
called cnf satisfiability
satisfiability problem cnf
problem cnf satisfiability
satisfiability problem deals
problem deals boolean
deals boolean expressions
boolean expressions boolean
expressions boolean expression
boolean expression represented
expression represented conjunctive
represented conjunctive normal
conjunctive normal expression
normal expression involving
expression involving boolean
involving boolean variables
boolean variables negations
variables negations denoted
negations denoted cnf
denoted cnf satisfiability
satisfiability problem asks
problem asks assign
asks assign values
assign values true
values true false
true false variables
false variables boolean
variables boolean expression
boolean expression cnf
expression cnf make
cnf make entire
make entire expression
expression true easy
true easy formula
easy formula true
formula true false
true false entire
false entire expression
expression true cook
true cook levin
cook levin discovery
levin discovery problems
discovery problems scientists
problems scientists hundreds
scientists hundreds thousands
hundreds thousands exam
thousands exam ples
exam ples problems
ples problems decision
problems decision versions
decision versions men
versions men tioned
men tioned hamiltonian
tioned hamiltonian circuit
hamiltonian circuit traveling
circuit traveling salesman
traveling salesman partition
salesman partition bin
partition bin packing
bin packing graph
packing graph coloring
graph coloring problems
coloring problems history
problems history science
history science breakthrough
science breakthrough discoveries
breakthrough discoveries independently
discoveries independently simultaneously
independently simultaneously scientists
simultaneously scientists fact
scientists fact levin
fact levin introduced
levin introduced general
introduced general notion
general notion completeness
notion completeness decision
completeness decision problems
decision problems paper
problems paper lev
paper lev published
lev published years
published years cook
years cook leading
cook leading candidate
leading candidate problem
candidate problem determining
determining integer prime
integer prime composite
prime composite portant
composite portant theoretical
portant theoretical breakthrough
theoretical breakthrough professor
breakthrough professor manindra
professor manindra agrawal
manindra agrawal students
agrawal students neeraj
students neeraj kayal
neeraj kayal nitin
kayal nitin saxena
nitin saxena indian
saxena indian institute
indian institute technology
institute technology kanpur
technology kanpur announced
kanpur announced discovery
announced discovery deterministic
discovery deterministic polynomial
polynomial algorithm primality
algorithm primality testing
primality testing agr
testing agr algorithm
agr algorithm solve
algorithm solve related
solve related problem
related problem factoring
problem factoring large
factoring large composite
large composite integers
composite integers lies
integers lies heart
lies heart widely
heart widely encryption
widely encryption method
encryption method called
method called rsa
called rsa algorithm
rsa algorithm riv
algorithm riv showing
riv showing decision
showing decision problem
decision problem steps
problem steps problem
steps problem randomly
problem randomly generated
randomly generated string
generated string checked
string checked polynomial
checked polynomial determine
polynomial determine represents
determine represents solution
represents solution problem
solution problem typically
problem typically easy
typically easy problem
easy problem reducible
problem reducible problem
problem polynomial transitivity
polynomial transitivity polynomial
transitivity polynomial reduction
polynomial reduction showing
reduction showing problem
showing problem transformed
transformed problem polynomial
problem polynomial figure
polynomial figure transformation
figure transformation ingenious
transformation ingenious incomparably
ingenious incomparably simpler
incomparably simpler proving
simpler proving existence
proving existence transformation
existence transformation problem
transformation problem hamiltonian
circuit problem polynomial
problem polynomial reducibility
polynomial reducibility decision
reducibility decision traveling
salesman problem implies
problem implies easy
implies easy decision
easy decision traveling
salesman problem class
class definition completeness
definition completeness immediately
completeness immediately implies
immediately implies exists
implies exists deterministic
exists deterministic polynomial
polynomial algorithm problem
polynomial deterministic algo
deterministic algo rithm
algo rithm words
rithm words finding
words finding polynomial
finding polynomial algorithm
polynomial algorithm problems
algorithm problems problem
problems problem candidate
problem candidate completeness
candidate completeness figure
completeness figure proving
figure proving completeness
proving completeness reduction
completeness reduction problem
reduction problem qualitative
problem qualitative difference
qualitative difference complexity
difference complexity checking
complexity checking proposed
proposed solution finding
solution finding polyno
finding polyno mial
polyno mial vast
mial vast majority
decision problems kinds
problems kinds implications
kinds implications make
implications make scientists
make scientists successful
scientists successful finding
successful finding mathematical
finding mathematical proof
mathematical proof intriguing
proof intriguing conjecture
intriguing conjecture sur
conjecture sur prisingly
sur prisingly interviews
prisingly interviews authors
interviews authors lives
authors lives discoveries
lives discoveries prominent
discoveries prominent scientists
prominent scientists sha
scientists sha cook
sha cook uncertain
cook uncertain eventual
uncertain eventual resolution
eventual resolution dilemma
resolution dilemma levin
dilemma levin contended
levin contended outcome
contended outcome eventual
outcome eventual proves
eventual proves knowing
proves knowing problem
knowing problem important
problem important practical
important practical implications
practical implications today
implications today means
today means faced
means faced problem
faced problem aim
problem aim gaining
aim gaining fame
gaining fame fortune
fame fortune designing
fortune designing polynomial
designing polynomial algorithm
algorithm solving instances
solving instances approaches
instances approaches seek
approaches seek alleviate
seek alleviate intractability
alleviate intractability problems
intractability problems approaches
problems approaches outlined
approaches outlined chapter
outlined chapter exercises
chapter exercises game
exercises game chess
game chess posed
chess posed decision
posed decision problem
decision problem legal
problem legal positioning
legal positioning chess
positioning chess pieces
chess pieces information
pieces information determine
information determine win
determine win decision
win decision problem
decision problem decidable
problem decidable problem
decidable problem solved
solved algorithm running
algorithm running nlog
running nlog assertions
nlog assertions true
assertions true problem
true problem tractable
problem tractable problem
tractable problem intractable
problem intractable impossible
intractable impossible examples
impossible examples graphs
examples graphs examples
graphs examples graph
examples graph hamiltonian
circuit graph eulerian
graph eulerian circuit
eulerian circuit hamiltonian
circuit graph includes
graph includes vertices
includes vertices hamil
vertices hamil tonian
tonian circuit eulerian
eulerian circuit clay
circuit clay mathematics
clay mathematics institute
mathematics institute cmi
institute cmi cambridge
cmi cambridge massachusetts
cambridge massachusetts designated
massachusetts designated prize
designated prize solution
prize solution problem
solution problem graphs
problem graphs chromatic
graphs chromatic design
chromatic design polynomial
design polynomial algorithm
polynomial algorithm graph
algorithm graph coloring
coloring problem deter
problem deter vertices
deter vertices graph
vertices graph colored
graph colored colors
colored colors adjacent
colors adjacent vertices
colored color brute
color brute algorithm
algorithm solving composite
solving composite num
composite num ber
num ber problem
ber problem successive
problem successive integers
successive integers divisors
integers divisors divides
divisors divides evenly
divides evenly composite
evenly composite algorithm
composite algorithm problem
algorithm problem class
problem class state
class state decision
state decision version
decision version problems
version problems outline
problems outline polynomial
outline polynomial algorithm
polynomial algorithm verifies
algorithm verifies proposed
verifies proposed solution
solves problem assume
problem assume proposed
assume proposed solution
proposed solution represents
solution represents legitimate
represents legitimate input
legitimate input verification
input verification algorithm
verification algorithm knapsack
knapsack problem bin
problem bin packing
packing problem partition
partition problem polynomially
decision version knapsack
knapsack problem problems
problem problems polynomially
polynomially reducible determine
reducible determine graph
positive integer clique
integer clique size
clique size graph
size graph subgraph
graph subgraph vertices
subgraph vertices determine
vertices determine graph
positive integer vertex
integer vertex size
vertex size vertex
size vertex size
vertex size graph
subset edge belongs
edge belongs iii
belongs iii determine
iii determine graph
positive integer independent
integer independent set
set size independent
size independent set
set size graph
graph subset vertices
subset vertices adjacent
vertices adjacent determine
adjacent determine problem
determine problem sequences
problem sequences uppercase
sequences uppercase lowercase
uppercase lowercase letters
lowercase letters select
letters select letter
select letter sequence
letter sequence selecting
sequence selecting upper
selecting upper lowercase
upper lowercase versions
lowercase versions letter
versions letter sequences
letter sequences abc
sequences abc choose
abc choose sequence
choose sequence fourth
sequence fourth make
fourth make required
make required selections
required selections sequences
selections sequences kar
sequences kar diagrams
kar diagrams contradict
diagrams contradict current
contradict current state
current state knowledge
state knowledge complexity
knowledge complexity classes
complexity classes npc
classes npc problems
npc problems npc
problems npc king
npc king arthur
king arthur expects
arthur expects knights
expects knights annual
knights annual dinner
annual dinner camelot
dinner camelot unfortu
camelot unfortu nately
unfortu nately knights
nately knights quarrel
knights quarrel arthur
quarrel arthur quarrels
arthur quarrels arthur
quarrels arthur seat
arthur seat guests
seat guests table
guests table quarreling
table quarreling knights
quarreling knights sit
knights sit standard
sit standard problem
standard problem model
problem model king
model king arthur
king arthur task
arthur task research
task research project
research project proof
project proof arthur
proof arthur problem
arthur problem solution
problem solution knight
solution knight quarrel
knight quarrel knights
quarrel knights challenges
knights challenges numerical
challenges numerical algorithms
algorithms numerical analysis
analysis science cerned
science cerned algorithms
cerned algorithms solving
algorithms solving mathematical
solving mathematical problems
mathematical problems description
problems description important
description important clarification
important clarification problems
clarification problems continuous
computing integrals opposed
integrals opposed problems
opposed problems discrete
problems discrete mathematics
discrete mathematics dealing
mathematics dealing structures
dealing structures graphs
structures graphs trees
graphs trees permutations
trees permutations combinations
permutations combinations efficient
combinations efficient algorithms
efficient algorithms mathematical
mathematical problems stems
problems stems fact
fact problems arise
problems arise models
arise models real
models real life
real life phe
life phe nomena
phe nomena natural
nomena natural world
natural world social
world social sciences
social sciences fact
sciences fact numerical
fact numerical analysis
numerical analysis main
analysis main area
main area research
area research study
research study application
study application science
application science rapid
science rapid proliferation
rapid proliferation computers
proliferation computers business
computers business everyday
business everyday life
everyday life applications
life applications deal
applications deal primarily
deal primarily storage
primarily storage retrieval
storage retrieval information
retrieval information relative
information relative importance
relative importance numerical
importance numerical analysis
numerical analysis shrunk
analysis shrunk years
shrunk years applications
years applications enhanced
applications enhanced power
enhanced power modern
power modern computers
modern computers areas
computers areas fundamental
areas fundamental research
fundamental research technology
research technology inter
technology inter ests
inter ests wide
ests wide world
wide world modern
world modern computing
modern computing important
computing important understanding
important understanding special
understanding special challenges
special challenges posed
challenges posed continuous
posed continuous mathematical
mathematical problems discuss
problems discuss variety
discuss variety difficulties
variety difficulties posed
difficulties posed modeling
posed modeling task
modeling task describing
task describing real
describing real life
real life phenomenon
life phenomenon mathematical
phenomenon mathematical terms
mathematical terms assuming
terms assuming principal
assuming principal obstacles
principal obstacles solving
obstacles solving mathematical
solving mathematical problem
mathematical problem major
problem major obstacle
major obstacle fact
obstacle fact numerical
fact numerical analy
numerical analy sis
analy sis problems
sis problems solved
solved approximately replacing
approximately replacing infinite
replacing infinite finite
infinite finite approximation
finite approximation computed
approximation computed approximating
computed approximating infinite
approximating infinite taylor
infinite taylor series
taylor series finite
series finite sum
finite sum terms
sum terms called
terms called nth
called nth degree
nth degree taylor
taylor polynomial definite
polynomial definite integral
definite integral function
integral function approximated
function approximated finite
approximated finite weighted
finite weighted sum
weighted sum values
sum values composite
values composite trapezoidal
composite trapezoidal calculus
trapezoidal calculus class
calculus class figure
class figure errors
figure errors approximations
errors approximations called
approximations called truncation
called truncation errors
truncation errors major
errors major tasks
major tasks numerical
tasks numerical analysis
numerical analysis estimate
analysis estimate magnitudes
estimate magnitudes truncation
magnitudes truncation solving
truncation solving linear
linear equations polynomial
equations polynomial evaluation
polynomial evaluation discussed
evaluation discussed sections
discussed sections rare
sections rare exceptions
rare exceptions figure
exceptions figure composite
figure composite trapezoidal
composite trapezoidal errors
trapezoidal errors typically
errors typically calculus
typically calculus tools
calculus tools elementary
tools elementary advanced
elementary advanced approximation
advanced approximation max
approximation max segment
max segment endpoints
segment endpoints formula
endpoints formula makes
formula makes determine
makes determine degree
determine degree taylor
taylor polynomial needed
polynomial needed predefined
needed predefined accuracy
predefined accuracy approximation
accuracy approximation compute
approximation compute formula
compute formula truncation
formula truncation error
error smaller proceed
smaller proceed estimate
proceed estimate formula
estimate formula max
formula max bound
max bound desired
bound desired accuracy
desired accuracy solve
accuracy solve inequality
solve inequality compute
inequality compute values
compute values smallest
values smallest inequality
smallest inequality holds
inequality holds similarly
holds similarly approximation
similarly approximation standard
approximation standard bound
standard bound truncation
bound truncation error
truncation error inequality
error inequality max
inequality max interval
max interval asked
interval asked inequality
asked inequality exercises
inequality exercises section
exercises section problems
section problems errors
problems errors called
errors called errors
called errors caused
errors caused accuracy
caused accuracy represent
accuracy represent real
represent real numbers
real numbers digital
numbers digital errors
digital errors arise
errors arise irrational
arise irrational numbers
irrational numbers definition
numbers definition require
definition require infinite
require infinite digits
infinite digits exact
digits exact representation
exact representation rational
representation rational numbers
rational numbers overwhelming
numbers overwhelming majority
overwhelming majority situations
majority situations real
situations real numbers
floating numbers base
numbers base unsophisticated
base unsophisticated calculators
unsophisticated calculators digits
calculators digits representing
digits representing fractional
representing fractional called
fractional called mantissa
called mantissa integer
mantissa integer exponent
integer exponent range
exponent range values
range values approximately
values approximately symmetric
approximately symmetric accuracy
symmetric accuracy floating
accuracy floating representation
floating representation depends
representation depends significant
depends significant digits
significant digits representation
digits representation computers
representation computers levels
computers levels precision
levels precision single
precision single precision
single precision typically
precision typically equivalent
typically equivalent significant
equivalent significant decimal
decimal digits precision
digits precision significant
decimal digits extended
digits extended precision
extended precision significant
decimal digits higher
digits higher precision
higher precision arithmetic
precision arithmetic slows
arithmetic slows computations
slows computations overcome
computations overcome problems
overcome problems caused
problems caused errors
caused errors higher
errors higher precision
higher precision algorithm
precision algorithm approximation
algorithm approximation kind
approximation kind important
kind important distinguish
important distinguish absolute
distinguish absolute error
error representing approximation
representing approximation absolute
approximation absolute error
relative error relative
relative error undefined
error undefined large
undefined large small
large small numbers
small numbers represented
represented floating arithmetic
floating arithmetic phenomena
arithmetic phenomena called
phenomena called underflow
called underflow respec
underflow respec tively
respec tively arithmetic
tively arithmetic operation
arithmetic operation yields
operation yields result
yields result range
result range floating
range floating numbers
floating numbers typical
numbers typical examples
typical examples arise
examples arise multiplication
arise multiplication large
multiplication large numbers
large numbers division
numbers division small
division small eliminate
small eliminate problem
eliminate problem making
problem making simple
making simple expression
simple expression evaluated
expression evaluated replacing
evaluated replacing expression
replacing expression equal
expression equal computing
equal computing logarithm
computing logarithm expression
logarithm expression underflow
expression underflow occurs
underflow occurs result
occurs result operation
result operation nonzero
operation nonzero fraction
nonzero fraction small
fraction small magnitude
small magnitude represented
magnitude represented nonzero
represented nonzero floating
nonzero floating underflow
floating underflow numbers
underflow numbers replaced
numbers replaced special
replaced special generated
special generated hardware
generated hardware event
hardware event occurred
event occurred important
occurred important addition
important addition inaccurate
addition inaccurate representation
inaccurate representation numbers
representation numbers arithmetic
numbers arithmetic operations
operations performed exact
performed exact subtracting
exact subtracting equal
floating numbers large
numbers large relative
relative error phenomenon
error phenomenon called
phenomenon called subtractive
called subtractive cancellation
subtractive cancellation irrational
cancellation irrational numbers
irrational numbers represented
floating numbers relative
numbers relative errors
errors approximations small
approximations small relative
small relative error
error representing difference
representing difference floating
difference floating representations
floating representations large
representations large relative
relative error accurate
error accurate approximations
accurate approximations significant
approximations significant magnification
significant magnification error
magnification error lowaccuracy
error lowaccuracy difference
lowaccuracy difference divisor
difference divisor encountered
divisor encountered problem
problem discussing gaussian
discussing gaussian elimination
gaussian elimination section
elimination section solution
section solution partial
solution partial pivoting
partial pivoting numerical
pivoting numerical algorithms
numerical algorithms involve
algorithms involve thousands
involve thousands millions
thousands millions arithmetic
millions arithmetic operations
arithmetic operations typical
operations typical inputs
typical inputs algorithms
inputs algorithms propagation
algorithms propagation errors
propagation errors major
errors major practical
major practical theoretical
practical theoretical standpoints
theoretical standpoints algorithms
standpoints algorithms errors
algorithms errors propagate
errors propagate algorithm
propagate algorithm operations
algorithm operations increasing
operations increasing effect
increasing effect highly
effect highly undesirable
highly undesirable property
undesirable property numerical
property numerical algorithm
numerical algorithm called
algorithm called instability
called instability problems
instability problems exhibit
problems exhibit high
exhibit high sensitivity
high sensitivity input
sensitivity input impossible
input impossible design
impossible design stable
design stable algorithm
stable algorithm solve
algorithm solve problems
solve problems called
problems called ill
called ill conditioned
ill conditioned linear
conditioned linear equations
unknowns solution sensitive
solution sensitive small
sensitive small coefficient
small coefficient matrix
coefficient matrix slightly
matrix slightly values
slightly values solution
values solution previous
solution previous coefficient
previous coefficient matrix
coefficient matrix singular
matrix singular minor
singular minor coefficients
minor coefficients yield
coefficients yield solutions
yield solutions infinitely
infinitely solutions depending
solutions depending values
depending values formal
values formal detailed
formal detailed discussion
detailed discussion degree
discussion degree ill
degree ill condition
ill condition coefficient
condition coefficient matrix
coefficient matrix numerical
matrix numerical analysis
numerical analysis textbooks
analysis textbooks ger
textbooks ger conclude
ger conclude problem
conclude problem finding
problem finding real
quadratic equation real
equation real coefficients
real coefficients secondary
coefficients secondary school
secondary school algebra
school algebra equation
algebra equation real
equation real roots
real roots discriminant
roots discriminant nonnegative
discriminant nonnegative roots
nonnegative roots formula
roots formula solution
formula solution posed
solution posed problem
posed problem mathematician
problem mathematician concerned
mathematician concerned solution
concerned solution algorithm
solution algorithm designer
algorithm designer major
designer major obstacle
major obstacle evaluating
obstacle evaluating square
evaluating square root
square root positive
root positive integers
positive integers irrational
integers irrational computed
irrational computed approximately
computed approximately method
approximately method computing
method computing square
square roots commonly
roots commonly taught
commonly taught secondary
taught secondary school
secondary school ton
school ton method
ton method important
important algorithm solving
algorithm solving equations
solving equations discuss
equations discuss section
discuss section method
section method generates
method generates sequence
generates sequence approximations
sequence approximations nonnegative
approximations nonnegative formula
nonnegative formula initial
formula initial approximation
initial approximation chosen
approximation chosen possibilities
chosen possibilities difficultto
possibilities difficultto prove
difficultto prove sequence
prove sequence decreasing
sequence decreasing converges
decreasing converges generating
converges generating elements
generating elements difference
elements difference consecutive
difference consecutive elements
consecutive elements predefined
elements predefined error
predefined error tolerance
error tolerance sufficiently
tolerance sufficiently approximation
sufficiently approximation sequence
approximation sequence converges
sequence converges fast
converges fast values
fast values prove
values prove iterations
prove iterations needed
iterations needed scale
needed scale interval
scale interval formula
interval formula integer
formula integer apply
integer apply newton
apply newton algorithm
newton algorithm compute
algorithm compute simplicity
compute simplicity scaling
simplicity scaling numbers
scaling numbers decimal
numbers decimal places
decimal places standard
places standard numerical
standard numerical analysis
numerical analysis notation
analysis notation offs
notation offs approximations
offs approximations exact
approximations exact issue
exact issue computing
issue computing square
square roots squared
roots squared pun
squared pun intended
pun intended home
intended home free
home free write
free write based
write based formula
based formula impact
formula impact errors
impact errors obstacles
errors obstacles faced
obstacles faced menace
faced menace subtractive
menace subtractive cancellation
subtractive cancellation larger
cancellation larger root
larger root computed
root computed formula
computed formula large
formula large relative
relative error paper
error paper george
paper george forsythe
george forsythe equation
forsythe equation true
equation true roots
true roots significant
roots significant digits
significant digits george
digits george forsythe
george forsythe noted
forsythe noted numerical
noted numerical analyst
numerical analyst played
analyst played leading
played leading role
leading role establishing
role establishing science
establishing science academic
science academic discipline
academic discipline united
discipline united states
united states words
states words epigraph
words epigraph preface
epigraph preface formula
preface formula computations
formula computations decimal
computations decimal floating
decimal floating arithmetic
floating arithmetic significant
arithmetic significant digits
significant digits relative
digits relative error
relative error approximating
error approximating small
approximating small root
small root large
root large possibility
large possibility subtractive
possibility subtractive cancellation
subtractive cancellation formula
cancellation formula obtained
formula obtained danger
obtained danger subtractive
subtractive cancellation denominator
cancellation denominator computed
denominator computed standard
computed standard formula
standard formula danger
formula danger cancellation
danger cancellation positive
cancellation positive case
positive case symmetric
case symmetric formulas
symmetric formulas case
formulas case considered
case considered cases
considered cases obstacles
cases obstacles applying
obstacles applying formula
applying formula related
formula related limitations
related limitations floating
limitations floating arithmetic
floating arithmetic small
arithmetic small division
small division fight
division fight danger
fight danger subtractive
subtractive cancellation computing
cancellation computing calculating
computing calculating precision
calculating precision problems
precision problems overcome
problems overcome william
overcome william kahan
william kahan university
kahan university toronto
university toronto algorithm
toronto algorithm considered
algorithm considered significant
considered significant achievement
significant achievement history
achievement history numerical
history numerical analysis
numerical analysis overview
analysis overview piqued
overview piqued seek
piqued seek information
seek information books
information books devoted
books devoted exclusively
devoted exclusively numerical
exclusively numerical algorithms
algorithms discuss topic
discuss topic chapter
topic chapter classic
chapter classic methods
classic methods solving
methods solving equations
equations unknown exercises
unknown exercises textbooks
exercises textbooks define
textbooks define significant
define significant digits
digits approximation largest
approximation largest nonnegative
largest nonnegative integer
integer definition significant
definition significant digits
digits approximation approximate
approximation approximate absolute
approximate absolute error
absolute error exceeding
error exceeding range
exceeding range values
values range relative
range relative errors
errors approximations approximate
approximations approximate obtained
approximate obtained degree
obtained degree taylor
taylor polynomial compute
polynomial compute truncation
compute truncation error
truncation error approx
error approx imation
approx imation result
imation result theoretical
result theoretical prediction
theoretical prediction section
prediction section derive
section derive formula
derive formula composite
formula composite trapezoidal
composite trapezoidal composite
trapezoidal composite trapezoidal
composite trapezoidal approximate
trapezoidal approximate definite
approximate definite integrals
definite integrals truncation
integrals truncation error
truncation error approximation
error approximation pare
approximation pare formula
pare formula esin
formula esin xdx
esin xdx computed
xdx computed composite
computed composite trapezoidal
composite trapezoidal large
trapezoidal large subintervals
large subintervals truncation
subintervals truncation error
error smaller solve
smaller solve systems
solve systems linear
linear equations ill
equations ill conditioned
ill conditioned write
conditioned write solve
write solve equation
solve equation prove
equation prove nonnegative
prove nonnegative sequence
nonnegative sequence newton
sequence newton method
newton method computing
method computing strictly
computing strictly decreasing
strictly decreasing converges
decreasing converges initial
converges initial approximation
initial approximation prove
approximation prove iterations
prove iterations newton
newton method needed
method needed apply
needed apply iterations
apply iterations newton
newton method compute
method compute estimate
compute estimate absolute
estimate absolute relative
absolute relative errors
relative errors approximation
errors approximation summary
approximation summary class
summary class algorithms
class algorithms solving
solving problem lower
lower bound efficiency
bound efficiency algorithm
efficiency algorithm class
algorithm class trivial
class trivial lower
bound based counting
items produced information
produced information theoretic
bound obtained mecha
obtained mecha nism
mecha nism decision
nism decision trees
trees technique comparison
technique comparison based
sorting searching specifically
searching specifically general
specifically general comparison
sorting algorithm log
algorithm log key
worst case general
case general comparison
based algorithm searching
array log key
worst case adversary
case adversary method
logic malevolent adversary
malevolent adversary forces
adversary forces algorithm
forces algorithm consuming
consuming path lower
path lower bound
lower bound established
bound established reduction
established reduction reducing
reduction reducing problem
reducing problem lower
bound problem complexity
problem complexity theory
complexity theory seeks
theory seeks classify
classify problems computational
problems computational complexity
computational complexity principal
complexity principal split
principal split tractable
split tractable intractable
tractable intractable problems
intractable problems solved
solved polynomial purely
polynomial purely technical
purely technical reasons
technical reasons complexity
reasons complexity theory
complexity theory concentrates
theory concentrates decision
concentrates decision problems
problems answers halting
answers halting problem
halting problem undecidable
problem undecidable decision
undecidable decision problem
solved algorithm class
algorithm class decision
solved polynomial class
polynomial class decision
decision problems randomly
problems randomly guessed
randomly guessed solutions
guessed solutions verified
solutions verified polynomial
verified polynomial important
important problems hamiltonian
problems hamiltonian circuit
circuit problem problems
problem problems reducible
problems reducible problem
problem polynomial proof
polynomial proof problem
proof problem completeness
problem completeness published
completeness published cook
published cook cnf
cook cnf satisfiability
satisfiability problem proper
problem proper subset
proper subset important
subset important unresolved
theoretical science discovery
science discovery polynomial
discovery polynomial algorithm
polynomial algorithm thousands
algorithm thousands problems
thousands problems imply
problems imply numerical
imply numerical analysis
analysis science dealing
science dealing solving
dealing solving continuous
solving continuous mathematical
mathematical problems types
problems types errors
types errors solving
errors solving majority
solving majority problems
majority problems truncation
problems truncation error
truncation error truncation
error truncation errors
truncation errors stem
errors stem replacing
stem replacing infinite
replacing infinite objects
infinite objects finite
objects finite approximations
finite approximations errors
approximations errors inaccuracies
errors inaccuracies representing
inaccuracies representing numbers
representing numbers digital
numbers digital subtractive
digital subtractive cancellation
subtractive cancellation result
cancellation result subtracting
result subtracting equal
floating numbers lead
numbers lead sharp
lead sharp relative
sharp relative roundoff
relative roundoff error
roundoff error avoided
error avoided changing
avoided changing expression
changing expression higher
expression higher precision
higher precision computing
precision computing difference
computing difference writing
difference writing general
writing general solving
general solving quadratic
solving quadratic equations
quadratic equations difficult
equations difficult task
difficult task problem
task problem computing
problem computing square
square roots solved
roots solved utilizing
solved utilizing newton
utilizing newton method
newton method problem
method problem subtractive
problem subtractive cancellation
subtractive cancellation dealt
cancellation dealt formulas
dealt formulas depending
formulas depending coefficient
depending coefficient positive
coefficient positive negative
positive negative computing
negative computing discriminant
computing discriminant precision
plutarch sertorius teach
sertorius teach soldiers
teach soldiers perseverance
soldiers perseverance wit
perseverance wit brute
wit brute horses
brute horses brought
horses brought set
brought set men
set men tails
men tails men
tails men burly
men burly hercules
burly hercules tugged
hercules tugged purpose
tugged purpose sharp
purpose sharp weasel
sharp weasel faced
weasel faced tailor
faced tailor plucked
tailor plucked hair
plucked hair roars
hair roars laughter
roars laughter left
laughter left tail
left tail cobham
tail cobham brewer
cobham brewer dictionary
brewer dictionary phrase
dictionary phrase fable
phrase fable decrease
fable decrease conquer
conquer technique based
smaller instance relationship
instance relationship established
established exploited leads
exploited leads naturally
leads naturally recursive
naturally recursive implementa
recursive implementa tion
implementa tion examples
examples chapter ultimate
chapter ultimate implementation
ultimate implementation nonrecursive
implementation nonrecursive variation
nonrecursive variation implemented
variation implemented iteratively
implemented iteratively starting
iteratively starting solution
starting solution smallest
solution smallest instance
smallest instance problem
instance problem called
problem called incremental
called incremental approach
incremental approach major
approach major variations
constant factor variable
factor variable size
size decrease constant
decrease constant variation
constant variation size
variation size instance
size instance reduced
instance reduced constant
reduced constant iteration
constant iteration algorithm
iteration algorithm typically
algorithm typically constant
typically constant equal
constant equal figure
equal figure constant
figure constant size
constant size reductions
size reductions occasionally
reductions occasionally exponentiation
occasionally exponentiation problem
exponentiation problem computing
problem computing nonnegative
nonnegative integer relationship
integer relationship solution
solution instance size
instance size obtained
size obtained obvious
obtained obvious formula
obvious formula function
formula function computed
function computed recursive
computed recursive definition
recursive definition problem
definition problem size
figure decrease conquer
conquer technique multiplying
technique multiplying times
multiplying times brute
times brute algorithm
brute algorithm thought
algorithm thought process
thought process interesting
process interesting examples
interesting examples decrease
examples decrease algorithms
decrease algorithms sections
algorithms sections decrease
sections decrease constant
constant factor technique
factor technique suggests
technique suggests reducing
suggests reducing problem
reducing problem instance
problem instance constant
instance constant factor
iteration algorithm applications
algorithm applications constant
applications constant factor
constant factor equal
factor equal algorithm
equal algorithm decrease
algorithm decrease half
decrease half idea
half idea illustrated
idea illustrated figure
illustrated figure revisit
figure revisit exponentiation
revisit exponentiation problem
exponentiation problem instance
instance size compute
size compute instance
compute instance half
half size compute
size compute obvious
compute obvious relationship
obvious relationship instances
relationship instances integer
instances integer exponents
integer exponents odd
exponents odd compute
odd compute valued
compute valued exponents
valued exponents result
exponents result summarize
result summarize formula
summarize formula problem
formula problem size
figure decrease half
decrease half conquer
half conquer technique
conquer technique positive
technique positive odd
positive odd compute
odd compute recursively
compute recursively formula
recursively formula algorithm
formula algorithm efficiency
algorithm efficiency multiplications
efficiency multiplications algorithm
multiplications algorithm log
algorithm log iteration
log iteration size
iteration size reduced
size reduced half
reduced half expense
half expense multiplications
expense multiplications examples
multiplications examples decrease
examples decrease constant
factor algorithms section
algorithms section exercises
section exercises algorithms
exercises algorithms efficient
algorithms efficient examples
efficient examples kind
examples kind finally
kind finally variable
finally variable size
size decrease variety
decrease variety decrease
common divisor good
divisor good situation
good situation recall
situation recall algorithm
recall algorithm based
algorithm based formula
based formula gcd
formula gcd mod
gcd mod argument
mod argument smaller
argument smaller left
smaller left decreases
left decreases constant
decreases constant factor
constant factor examples
factor examples algorithms
examples algorithms section
algorithms section insertion
section insertion sort
insertion sort section
section application decrease
decrease technique sorting
technique sorting array
sorting array technique
array technique idea
technique idea assume
idea assume smaller
assume smaller problem
smaller problem sorting
sorting array solved
array solved sorted
solved sorted array
array size advantage
size advantage solution
advantage solution smaller
solution smaller problem
smaller problem solution
original problem taking
problem taking account
taking account element
account element position
position sorted elements
sorted elements insert
elements insert scanning
insert scanning sorted
scanning sorted subarray
sorted subarray left
subarray left element
left element smaller
smaller equal encountered
equal encountered insert
encountered insert element
insert element resulting
element resulting algorithm
resulting algorithm called
algorithm called straight
called straight insertion
insertion sort simply
sort simply insertion
simply insertion sort
insertion sort based
sort based recursive
recursive idea efficient
idea efficient implement
efficient implement algorithm
implement algorithm iteratively
algorithm iteratively shown
iteratively shown figure
shown figure starting
figure starting ending
starting ending inserted
ending inserted elements
inserted elements array
elements array sorted
array sorted selection
sorted selection sort
selection sort generally
sort generally final
generally final positions
pseudocode algorithm insertionsort
algorithm insertionsort sorts
insertionsort sorts array
sorts array insertion
array insertion sort
insertion sort input
sorted nondecreasing smaller
nondecreasing smaller equal
smaller equal greater
equal greater figure
greater figure iteration
figure iteration insertion
insertion sort inserted
sort inserted proper
inserted proper position
proper position preceding
position preceding elements
preceding elements previously
elements previously sorted
previously sorted figure
sorted figure sorting
figure sorting insertion
sorting insertion sort
insertion sort vertical
sort vertical separates
vertical separates sorted
separates sorted array
array remaining elements
remaining elements element
elements element inserted
element inserted bold
inserted bold operation
bold operation algorithm
illustrated figure basic
figure basic operation
operation algorithm key
algorithm key comparison
key comparison faster
comparison faster actual
faster actual implementation
actual implementation germane
implementation germane algorithm
germane algorithm implementation
algorithm implementation sentinel
implementation sentinel problem
sentinel problem section
section exercises eliminates
exercises eliminates altogether
eliminates altogether key
altogether key comparisons
comparisons algorithm depends
algorithm depends nature
depends nature input
nature input worst
worst case executed
case executed largest
executed largest times
largest times fact
times fact ith
fact ith iteration
ith iteration insertion
insertion sort elements
sort elements preceding
preceding elements input
elements input albeit
input albeit sorted
albeit sorted worst
sorted worst case
case input words
input words worst
words worst case
input array strictly
array strictly decreasing
strictly decreasing values
decreasing values key
values key comparisons
comparisons input cworst
input cworst worst
worst case insertion
case insertion sort
makes comparisons selection
sort section case
section case comparison
case comparison executed
comparison executed iteration
executed iteration outer
iteration outer loop
outer loop input
loop input array
sorted nondecreasing makes
nondecreasing makes sense
makes sense case
sense case algorithm
case algorithm problem
problem solved case
solved case discussion
case discussion quicksort
discussion quicksort chapter
quicksort chapter sorted
chapter sorted arrays
sorted arrays key
key comparisons cbest
comparisons cbest good
cbest good performance
good performance case
performance case sorted
case sorted arrays
sorted arrays convenient
arrays convenient inputs
convenient inputs sorted
inputs sorted files
sorted files arise
files arise variety
arise variety applications
variety applications insertion
applications insertion sort
insertion sort preserves
sort preserves excellent
preserves excellent performance
excellent performance inputs
performance inputs rigorous
inputs rigorous analysis
rigorous analysis algorithm
analysis algorithm average
case efficiency based
efficiency based investigating
based investigating element
investigating element pairs
element pairs problem
pairs problem section
section exercises shows
exercises shows randomly
shows randomly ordered
ordered arrays insertion
arrays insertion sort
sort makes average
makes average half
average half comparisons
half comparisons decreasing
comparisons decreasing arrays
decreasing arrays cavg
arrays cavg fast
cavg fast average
fast average case
case performance coupled
performance coupled excellent
coupled excellent efficiency
excellent efficiency sorted
efficiency sorted arrays
sorted arrays makes
arrays makes insertion
makes insertion sort
insertion sort stand
sort stand principal
stand principal petitors
principal petitors elementary
petitors elementary sorting
sort addition extension
addition extension named
extension named shellsort
named shellsort inventor
shellsort inventor shell
inventor shell algorithm
shell algorithm sorting
algorithm sorting moderately
sorting moderately large
moderately large files
large files problem
files problem section
section exercises ferrying
exercises ferrying soldiers
ferrying soldiers detachment
soldiers detachment soldiers
detachment soldiers wide
soldiers wide deep
wide deep river
deep river bridge
river bridge sight
bridge sight year
sight year boys
year boys playing
boys playing rowboat
playing rowboat shore
rowboat shore boat
shore boat tiny
boat tiny hold
tiny hold boys
hold boys soldier
boys soldier soldiers
soldier soldiers river
soldiers river leave
river leave boys
leave boys joint
boys joint possession
joint possession boat
possession boat times
boat times boat
times boat shore
boat shore alternating
shore alternating glasses
alternating glasses standing
glasses standing row
standing row filled
row filled soda
filled soda drink
soda drink remaining
drink remaining glasses
remaining glasses make
glasses make glasses
make glasses alternate
glasses alternate filled
alternate filled pattern
filled pattern minimum
pattern minimum glass
minimum glass moves
glass moves gar
moves gar solve
gar solve problem
solve problem glasses
problem glasses drink
glasses drink initially
drink initially random
initially random marking
random marking cells
marking cells design
cells design algorithm
design algorithm task
algorithm task cells
task cells infinite
cells infinite sheet
infinite sheet graph
sheet graph paper
graph paper marked
paper marked cell
marked cell odd
cell odd marked
odd marked neighbors
marked neighbors cells
neighbors cells considered
cells considered neighbors
considered neighbors horizontally
neighbors horizontally vertically
horizontally vertically diagonally
vertically diagonally marked
diagonally marked cells
marked cells contiguous
cells contiguous region
contiguous region path
region path pair
path pair marked
pair marked cells
marked cells sequence
cells sequence marked
sequence marked neighbors
marked neighbors kor
neighbors kor design
kor design decrease
design decrease algorithm
decrease algorithm generating
algorithm generating power
generating power set
power set elements
set elements power
elements power set
power set subsets
subsets set algorithm
set algorithm connectivity
algorithm connectivity graph
connectivity graph defined
matrix algorithm connected
algorithm connected input
connected input adjacency
output true connected
true connected false
connected false vertex
vertex graph connected
graph connected definition
connected definition connected
definition connected algorithm
connected algorithm correctly
algorithm correctly undirected
correctly undirected graph
graph vertices algorithm
vertices algorithm efficiency
worst case team
case team ordering
team ordering results
ordering results completed
results completed robin
completed robin tournament
robin tournament teams
tournament teams played
teams played game
played game ended
game ended victory
ended victory teams
victory teams design
teams design algorithm
design algorithm lists
algorithm lists teams
lists teams sequence
teams sequence team
sequence team lose
team lose game
lose game team
game team listed
team listed immediately
listed immediately efficiency
immediately efficiency class
class algorithm apply
algorithm apply insertion
apply insertion sort
insertion sort alphabetical
sort alphabetical sentinel
alphabetical sentinel element
sentinel element array
element array sorted
array sorted checking
sorted checking bound
checking bound condition
bound condition iteration
condition iteration loop
iteration loop insertion
loop insertion sort
insertion sort sentinel
sort sentinel version
sentinel version efficiency
version efficiency class
efficiency class original
class original version
original version implement
version implement insertion
implement insertion sort
insertion sort sorting
sort sorting linked
sorting linked lists
array version text
version text implementation
text implementation insertion
implementation insertion sort
insertion sort ver
sort ver sion
ver sion algorithm
sion algorithm insertsort
algorithm insertsort swap
insertsort swap efficiency
swap efficiency algorithm
efficiency algorithm compared
algorithm compared version
compared version section
version section array
section array sortable
array sortable elements
sortable elements simplicity
elements simplicity assume
simplicity assume elements
assume elements distinct
elements distinct pair
distinct pair called
pair called inversion
called inversion arrays
inversion arrays size
arrays size largest
size largest inversions
largest inversions questions
inversions questions smallest
questions smallest inversions
smallest inversions average
inversions average case
key comparisons insertion
comparisons insertion sort
insertion sort formula
sort formula cavg
formula cavg shellsort
cavg shellsort accurately
shellsort accurately shell
accurately shell sort
shell sort important
algorithm works applying
works applying insertion
applying insertion sort
insertion sort interleaving
sort interleaving sublists
interleaving sublists formed
sublists formed stepping
formed stepping increment
stepping increment predefined
increment predefined decreasing
predefined decreasing sequence
decreasing sequence sizes
sequence sizes algorithm
sizes algorithm works
algorithm works sequence
works sequence sequences
sequence sequences yield
sequences yield efficiency
yield efficiency sequence
efficiency sequence reverse
sequence reverse purpose
reverse purpose apply
purpose apply shellsort
apply shellsort stable
shellsort stable sorting
sorting algorithm implement
algorithm implement shellsort
implement shellsort straight
shellsort straight insertion
insertion sort selection
selection sort language
language choice performance
choice performance random
performance random arrays
arrays sizes increasing
sizes increasing decreasing
increasing decreasing arrays
decreasing arrays sizes
arrays sizes topological
sizes topological sorting
topological sorting section
sorting section discuss
section discuss important
discuss important problem
important problem directed
problem directed graphs
directed graphs variety
graphs variety applications
variety applications involving
applications involving prerequisite
involving prerequisite restricted
prerequisite restricted tasks
restricted tasks pose
tasks pose problem
pose problem review
problem review basic
review basic facts
basic facts directed
facts directed graphs
graph digraph short
digraph short graph
short graph directions
directions edges figure
edges figure adjacency
adjacency lists principal
lists principal means
principal means representing
means representing digraph
representing digraph notable
digraph notable differences
notable differences undirected
differences undirected directed
directed graphs representing
graphs representing adjacency
representing adjacency matrix
adjacency matrix directed
matrix directed graph
graph symmetric edge
symmetric edge directed
edge directed graph
directed graph nodes
graph nodes digraph
nodes digraph adjacency
digraph adjacency lists
lists figure digraph
figure digraph dfs
digraph dfs forest
forest digraph dfs
dfs traversal started
traversal started depth
started depth breadth
depth breadth principal
breadth principal traversal
traversal algorithms traversing
algorithms traversing digraphs
traversing digraphs structure
digraphs structure forests
structure forests complex
forests complex undirected
complex undirected graphs
undirected graphs simple
graphs simple figure
simple figure depth
figure depth forest
forest figure exhibits
figure exhibits types
exhibits types edges
types edges dfs
tree edges vertices
edges vertices ancestors
vertices ancestors forward
ancestors forward edges
forward edges vertices
edges vertices descendants
vertices descendants tree
descendants tree children
tree children edges
children edges aforementioned
edges aforementioned types
aforementioned types edge
types edge dfs
edge dfs forest
directed graph vertex
graph vertex parent
vertex parent case
parent case presence
case presence edge
presence edge digraph
edge digraph directed
digraph directed digraph
directed digraph sequence
digraph sequence vertices
sequence vertices starts
ends vertex connected
vertex connected predecessor
connected predecessor edge
predecessor edge directed
edge directed predecessor
directed predecessor successor
predecessor successor directed
successor directed digraph
directed digraph figure
digraph figure conversely
figure conversely dfs
conversely dfs forest
forest digraph edges
edges digraph dag
digraph dag acronym
dag acronym directed
acronym directed acyclic
acyclic graph edge
graph edge directions
edge directions lead
directions lead questions
lead questions digraphs
questions digraphs meaningless
digraphs meaningless trivial
meaningless trivial undirected
trivial undirected graphs
undirected graphs section
graphs section discuss
section discuss motivating
discuss motivating set
motivating set required
set required courses
required courses student
courses student degree
student degree courses
degree courses prerequisites
courses prerequisites met
prerequisites met prerequisites
met prerequisites requires
prerequisites requires student
requires student term
student term student
term student courses
student courses situation
courses situation modeled
situation modeled digraph
vertices represent courses
represent courses directed
courses directed edges
directed edges prerequisite
edges prerequisite requirements
prerequisite requirements figure
requirements figure terms
figure terms digraph
terms digraph vertices
digraph vertices edge
vertices edge graph
edge graph vertex
graph vertex edge
vertex edge starts
edge starts listed
listed vertex edge
vertex edge ends
edge ends ordering
ends ordering digraph
ordering digraph vertices
digraph vertices problem
problem called topological
called topological sorting
topological sorting posed
sorting posed figure
posed figure digraph
figure digraph representing
digraph representing prerequisite
representing prerequisite structure
prerequisite structure courses
structure courses popping
courses popping topologically
popping topologically sorted
topologically sorted figure
sorted figure digraph
figure digraph topological
digraph topological sorting
sorting problem solved
problem solved dfs
solved dfs traversal
dfs traversal stack
stack subscript numbers
subscript numbers indicating
numbers indicating popping
indicating popping solution
popping solution problem
solution problem arbitrary
problem arbitrary digraph
arbitrary digraph easy
digraph easy problem
easy problem solution
solution digraph directed
digraph directed topological
directed topological sorting
sorting digraph dag
digraph dag turns
dag turns dag
turns dag sufficient
dag sufficient topological
sufficient topological sorting
sorting digraph directed
digraph directed cycles
directed cycles topological
cycles topological sorting
problem solution efficient
solution efficient algorithms
efficient algorithms verify
algorithms verify digraph
verify digraph dag
digraph dag ordering
dag ordering vertices
ordering vertices solves
vertices solves topological
solves topological sorting
problem algorithm simple
algorithm simple application
simple application depth
application depth dfs
depth dfs traversal
dfs traversal vertices
traversal vertices dead
ends popped traversal
popped traversal stack
traversal stack reversing
stack reversing yields
reversing yields solution
sorting problem provided
problem provided edge
provided edge encountered
edge encountered traversal
encountered traversal edge
traversal edge encountered
edge encountered digraph
encountered digraph dag
digraph dag topological
dag topological sorting
topological sorting vertices
sorting vertices impossible
vertices impossible algorithm
impossible algorithm vertex
algorithm vertex popped
vertex popped dfs
popped dfs stack
dfs stack vertex
stack vertex edge
vertex edge vertices
edge vertices popped
vertices popped edge
popped edge vertex
edge vertex listed
vertex listed popped
listed popped reversed
popped reversed figure
reversed figure illustrates
figure illustrates application
illustrates application algorithm
digraph fig ure
fig ure figure
ure figure drawn
figure drawn edges
drawn edges digraph
edges digraph left
digraph left problem
left problem statement
problem statement requires
statement requires venient
requires venient visually
venient visually correctness
visually correctness solution
correctness solution instance
solution instance topological
instance topological sorting
sorting problem delete
problem delete solution
delete solution obtained
solution obtained figure
obtained figure illustration
figure illustration source
illustration source removal
removal algorithm topological
sorting problem iteration
problem iteration vertex
iteration vertex incoming
incoming edges deleted
edges deleted digraph
deleted digraph algorithm
digraph algorithm based
algorithm based direct
based direct implementation
direct implementation decrease
implementation decrease conquer
conquer technique repeatedly
technique repeatedly remaining
repeatedly remaining digraph
remaining digraph source
digraph source vertex
source vertex incoming
incoming edges delete
delete edges outgoing
edges outgoing sources
outgoing sources break
sources break arbitrarily
break arbitrarily problem
arbitrarily problem solved
solved problem section
section exercises vertices
exercises vertices deleted
vertices deleted yields
deleted yields solution
sorting problem application
problem application algorithm
algorithm digraph representing
digraph representing courses
representing courses figure
courses figure solution
figure solution obtained
solution obtained source
obtained source removal
removal algorithm obtained
algorithm obtained dfs
obtained dfs based
sorting problem alternative
problem alternative solutions
alternative solutions tiny
solutions tiny size
tiny size create
size create wrong
wrong impression topological
impression topological sorting
sorting problem large
problem large project
large project construction
project construction research
construction research software
research software development
software development involves
development involves multitude
involves multitude interrelated
multitude interrelated tasks
interrelated tasks prerequisites
tasks prerequisites thing
prerequisites thing situation
thing situation make
situation make set
make set prerequisites
set prerequisites contradictory
prerequisites contradictory convenient
contradictory convenient solve
convenient solve topological
sorting problem project
problem project digraph
project digraph thinking
digraph thinking scheduling
thinking scheduling tasks
scheduling tasks minimize
tasks minimize total
minimize total completion
total completion project
completion project require
project require algorithms
require algorithms general
algorithms general books
general books operations
books operations research
operations research special
research special cpm
special cpm critical
cpm critical path
critical path method
path method pert
method pert evaluation
pert evaluation review
evaluation review technique
review technique methodologies
technique methodologies applications
methodologies applications topological
applications topological sorting
topological sorting science
sorting science instruction
science instruction scheduling
instruction scheduling compilation
scheduling compilation cell
compilation cell evaluation
cell evaluation ordering
evaluation ordering spreadsheet
ordering spreadsheet formulas
spreadsheet formulas resolving
formulas resolving symbol
resolving symbol dependencies
symbol dependencies linkers
dependencies linkers exercises
linkers exercises apply
exercises apply dfs
apply dfs based
based algorithm solve
algorithm solve topological
sorting problem digraphs
problem digraphs prove
digraphs prove topological
prove topological sorting
problem solution dag
solution dag digraph
dag digraph vertices
digraph vertices largest
vertices largest distinct
largest distinct solutions
distinct solutions topological
solutions topological sorting
sorting problem efficiency
problem efficiency dfs
efficiency dfs based
topological sorting modify
sorting modify dfs
modify dfs based
based algorithm reversing
algorithm reversing vertex
reversing vertex ordering
vertex ordering generated
ordering generated dfs
generated dfs vertices
dfs vertices pushed
vertices pushed dfs
pushed dfs stack
dfs stack popped
stack popped solve
popped solve topological
sorting problem apply
problem apply source
apply source removal
removal algorithm digraphs
algorithm digraphs problem
digraphs problem prove
problem prove nonempty
prove nonempty dag
nonempty dag source
dag source determine
matrix efficiency operation
efficiency operation source
operation source determine
lists efficiency operation
efficiency operation implement
operation implement source
implement source removal
removal algorithm digraph
algorithm digraph represented
adjacency lists running
lists running implement
running implement topological
implement topological sorting
topological sorting algorithms
sorting algorithms language
run experiment running
experiment running times
running times digraph
times digraph called
digraph called strongly
strongly connected pair
connected pair distinct
pair distinct vertices
distinct vertices exists
vertices exists directed
directed path general
path general digraph
general digraph vertices
digraph vertices partitioned
partitioned disjoint maximal
disjoint maximal subsets
maximal subsets vertices
subsets vertices mutually
vertices mutually accessible
mutually accessible directed
accessible directed paths
directed paths subsets
paths subsets called
subsets called strongly
connected components digraph
components digraph dfs
digraph dfs based
dfs based algorithms
based algorithms identifying
algorithms identifying strongly
identifying strongly connected
connected components simpler
components simpler efficient
simpler efficient dfs
efficient dfs traversal
traversal digraph vertices
digraph vertices dead
dead ends reverse
ends reverse directions
reverse directions edges
directions edges digraph
edges digraph dfs
traversal digraph starting
digraph starting restarting
starting restarting traversal
restarting traversal highest
traversal highest numbered
highest numbered vertex
numbered vertex unvisited
unvisited vertices strongly
vertices strongly connected
components vertices dfs
vertices dfs trees
dfs trees obtained
trees obtained traversal
obtained traversal apply
traversal apply algorithm
apply algorithm digraph
algorithm digraph determine
digraph determine strongly
determine strongly connected
connected components efficiency
components efficiency class
class algorithm answers
algorithm answers adjacency
answers adjacency matrix
adjacency representation input
representation input digraph
input digraph strongly
digraph strongly connected
connected components dag
components dag spider
dag spider web
spider web spider
web spider sits
spider sits web
sits web fly
web fly sits
fly sits ways
sits ways spider
ways spider fly
spider fly moving
fly moving web
moving web lines
web lines directions
lines directions arrows
directions arrows kor
arrows kor algorithms
kor algorithms generating
combinatorial objects section
objects section discuss
algorithms generating combi
generating combi natorial
combi natorial objects
natorial objects important
objects important types
important types combinatorial
types combinatorial objects
objects permuta tions
permuta tions combinations
subsets set typically
set typically arise
typically arise problems
arise problems require
problems require consideration
require consideration choices
consideration choices encountered
choices encountered chapter
encountered chapter discussed
chapter discussed exhaustive
discussed exhaustive combinatorial
exhaustive combinatorial objects
combinatorial objects stud
objects stud ied
stud ied discrete
ied discrete mathematics
discrete mathematics called
mathematics called combinatorics
called combinatorics mathematicians
combinatorics mathematicians primarily
mathematicians primarily interested
primarily interested counting
interested counting formulas
counting formulas ful
formulas ful formulas
ful formulas items
formulas items generated
items generated combinatorial
generated combinatorial objects
typically grows exponentially
exponentially faster function
faster function problem
function problem size
problem size primary
size primary lies
primary lies algorithms
lies algorithms generating
combinatorial objects counting
objects counting generating
counting generating permutations
generating permutations simplicity
permutations simplicity assume
simplicity assume underlying
assume underlying set
underlying set elements
set elements permuted
elements permuted simply
permuted simply set
simply set integers
set integers generally
integers generally interpreted
generally interpreted indices
interpreted indices elements
indices elements element
elements element set
element set decrease
set decrease technique
decrease technique problem
technique problem generating
problem generating permutations
permutations smaller problem
smaller problem generate
problem generate permutations
generate permutations assuming
permutations assuming smaller
assuming smaller problem
smaller problem solved
problem solved solution
solved solution larger
solution larger inserting
larger inserting positions
inserting positions elements
positions elements permutation
elements permutation elements
permutation elements permu
elements permu tations
permu tations obtained
tations obtained fashion
obtained fashion distinct
fashion distinct total
distinct total permutations
total permutations insert
permutations insert previously
insert previously generated
previously generated permutations
generated permutations left
permutations left turns
left turns beneficial
turns beneficial inserting
beneficial inserting moving
inserting moving left
moving left direction
left direction permutation
direction permutation processed
permutation processed applying
processed applying approach
applying approach figure
approach figure advantage
figure advantage generating
advantage generating permutations
generating permutations stems
permutations stems fact
stems fact satisfies
fact satisfies minimal
satisfies minimal requirement
minimal requirement permutation
requirement permutation tained
permutation tained predecessor
tained predecessor exchanging
predecessor exchanging elements
exchanging elements method
elements method discussed
method discussed elements
discussed elements adjacent
elements adjacent insert
adjacent insert left
insert left figure
left figure generating
figure generating permutations
generating permutations generated
permutations generated figure
generated figure minimal
figure minimal requirement
minimal requirement beneficial
requirement beneficial algorithm
beneficial algorithm speed
algorithm speed applications
speed applications permutations
applications permutations section
permutations section needed
section needed permutations
needed permutations cities
permutations cities solve
cities solve traveling
solve traveling salesman
exhaustive permutations generated
permutations generated minimal
generated minimal algorithm
minimal algorithm compute
algorithm compute length
compute length predecessor
length predecessor constant
predecessor constant linear
constant linear ordering
linear ordering permutations
ordering permutations elements
permutations elements explicitly
elements explicitly generating
explicitly generating permutations
permutations smaller values
smaller values associating
values associating direction
associating direction element
direction element permutation
element permutation direction
permutation direction small
direction small arrow
small arrow written
arrow written element
written element mobile
element mobile arrow
mobile arrow marked
arrow marked permutation
marked permutation arrow
permutation arrow points
arrow points smaller
points smaller adjacent
smaller adjacent permutation
adjacent permutation mobile
permutation mobile notion
mobile notion mobile
notion mobile element
mobile element description
element description johnson
description johnson trotter
generating permutations algorithm
permutations algorithm johnsontrotter
algorithm johnsontrotter implements
johnsontrotter implements johnson
implements johnson trotter
output permutations initialize
permutations initialize permutation
initialize permutation mobile
permutation mobile element
mobile element largest
element largest mobile
mobile element swap
element swap adjacent
swap adjacent element
adjacent element arrow
element arrow points
arrow points reverse
points reverse direction
reverse direction elements
direction elements larger
elements larger permutation
larger permutation application
permutation application algorithm
application algorithm largest
algorithm largest mobile
mobile element shown
element shown bold
shown bold algorithm
bold algorithm efficient
algorithm efficient generating
efficient generating permutations
generating permutations implemented
permutations implemented run
implemented run proportional
run proportional permutations
proportional permutations horribly
permutations horribly small
horribly small values
small values algorithm
values algorithm fault
algorithm fault problem
fault problem simply
problem simply asks
simply asks generate
asks generate items
generate items permutation
items permutation ordering
permutation ordering generated
ordering generated johnsontrotter
generated johnsontrotter algorithm
johnsontrotter algorithm natural
algorithm natural permutation
natural permutation case
permutation case permutations
case permutations listed
permutations listed increasing
listed increasing called
increasing called lexicographic
called lexicographic der
lexicographic der listed
der listed dictionary
listed dictionary numbers
dictionary numbers interpreted
numbers interpreted letters
interpreted letters alphabet
letters alphabet generate
alphabet generate permutation
generate permutation lexi
permutation lexi cographic
lexi cographic case
cographic case half
case half permutations
half permutations simply
permutations simply transpose
simply transpose elements
transpose elements permutation
elements permutation longest
permutation longest decreasing
longest decreasing suffix
decreasing suffix exchanging
suffix exchanging smallest
exchanging smallest element
smallest element suffix
element suffix greater
suffix greater reverse
greater reverse suffix
reverse suffix increasing
suffix increasing pseudocode
increasing pseudocode simple
simple algorithm origins
algorithm origins century
origins century india
century india algorithm
india algorithm lexicographicpermute
algorithm lexicographicpermute generates
lexicographicpermute generates permutations
generates permutations lexicographic
permutations lexicographic input
lexicographic input positive
output permutations lexicographic
permutations lexicographic initialize
lexicographic initialize permutation
initialize permutation consecutive
permutation consecutive elements
consecutive elements increasing
elements increasing largest
increasing largest index
largest index largest
index largest index
largest index swap
index swap decreasing
swap decreasing reverse
decreasing reverse elements
reverse elements inclusive
elements inclusive permutation
inclusive permutation generating
permutation generating subsets
generating subsets recall
subsets recall section
recall section examined
section examined knapsack
examined knapsack problem
knapsack problem asks
problem asks valuable
asks valuable subset
knapsack capacity exhaustive
capacity exhaustive approach
exhaustive approach solving
solving problem discussed
problem discussed based
discussed based generating
based generating subsets
set items section
items section discuss
algorithms generating subsets
generating subsets abstract
subsets abstract set
abstract set mathematicians
set mathematicians set
mathematicians set subsets
subsets set power
set power set
power set decrease
set decrease idea
decrease idea immediately
idea immediately applicable
immediately applicable problem
applicable problem subsets
problem subsets divided
subsets divided groups
divided groups group
groups group subsets
group subsets element
subsets element obtained
element obtained adding
obtained adding subset
adding subset subsets
subset subsets adding
subsets adding elements
adding elements application
elements application algorithm
application algorithm generate
generate subsets illustrated
subsets illustrated figure
illustrated figure similarly
figure similarly generating
similarly generating permutations
generating permutations generate
permutations generate power
generate power sets
power sets smaller
sets smaller sets
smaller sets convenient
sets convenient solving
convenient solving problem
directly based correspondence
based correspondence subsets
correspondence subsets element
set subsets figure
subsets figure generating
figure generating subsets
generating subsets bit
strings length easiest
length easiest establish
easiest establish correspondence
establish correspondence assign
correspondence assign subset
assign subset bit
subset bit string
bit string belongs
string belongs subset
belongs subset mentioned
subset mentioned idea
mentioned idea bit
idea bit vectors
bit vectors section
vectors section bit
section bit string
bit string correspond
string correspond subset
correspond subset element
subset element set
element set correspond
set correspond set
correspond set represent
set represent correspondence
represent correspondence generate
correspondence generate bit
strings length generating
length generating successive
generating successive binary
successive binary numbers
binary numbers padded
numbers padded leading
padded leading case
leading case bit
case bit strings
bit strings subsets
strings subsets bit
bit strings generated
strings generated algorithm
generated algorithm lexicographic
algorithm lexicographic symbol
lexicographic symbol alphabet
symbol alphabet subsets
alphabet subsets natural
subsets natural called
natural called squashed
called squashed subset
squashed subset involving
subset involving listed
involving listed subsets
listed subsets involving
subsets involving case
involving case element
case element set
element set figure
set figure easy
figure easy adjust
easy adjust bit
adjust bit string
based algorithm yield
algorithm yield squashed
yield squashed ordering
squashed ordering subsets
ordering subsets involved
subsets involved problem
involved problem section
section exercises challenging
exercises challenging exists
challenging exists minimal
exists minimal algorithm
minimal algorithm generating
bit strings differs
strings differs predecessor
differs predecessor single
predecessor single bit
single bit language
bit language subsets
language subsets subset
subsets subset differ
subset differ predecessor
differ predecessor addition
predecessor addition deletion
addition deletion single
deletion single element
single element sequence
element sequence bit
sequence bit strings
bit strings called
strings called binary
called binary reflected
gray code frank
code frank gray
frank gray researcher
gray researcher bell
researcher bell laboratories
bell laboratories reinvented
laboratories reinvented minimize
reinvented minimize effect
minimize effect errors
effect errors transmitting
errors transmitting digital
transmitting digital signals
digital signals ros
signals ros years
ros years earlier
years earlier french
earlier french engineer
french engineer mile
engineer mile baudot
mile baudot codes
baudot codes telegraphy
codes telegraphy pseudocode
telegraphy pseudocode generates
pseudocode generates binary
generates binary reflected
gray code recursively
code recursively algorithm
recursively algorithm brgc
algorithm brgc generates
brgc generates recursively
generates recursively binary
recursively binary reflected
gray code input
code input positive
integer output bit
output bit strings
strings length composing
length composing gray
composing gray code
gray code make
code make bit
make bit strings
bit strings generate
strings generate bit
bit strings size
strings size calling
size calling brgc
calling brgc reversed
brgc reversed bit
reversed bit string
bit string append
string append correctness
append correctness algorithm
correctness algorithm stems
algorithm stems fact
stems fact generates
fact generates bit
generates bit strings
bit strings distinct
strings distinct assertions
distinct assertions easy
assertions easy mathematical
easy mathematical induction
mathematical induction binary
induction binary reflected
gray code cyclic
code cyclic bit
cyclic bit string
bit string differs
string differs single
differs single bit
single bit nonrecursive
bit nonrecursive algorithm
algorithm generating binary
gray code problem
code problem section
section exercises realistic
exercises realistic implement
realistic implement algorithm
implement algorithm requires
algorithm requires generating
requires generating permu
generating permu tations
permu tations element
subsets set generate
set generate permutations
generate permutations minimal
permutations minimal algorithm
minimal algorithm johnson
algorithm johnson trotter
trotter algorithm lexicographic
algorithm lexicographic algorithm
lexicographic algorithm apply
algorithm apply lexicographicpermute
apply lexicographicpermute multiset
lexicographicpermute multiset generate
multiset generate correctly
generate correctly permutations
correctly permutations lexicographic
permutations lexicographic implementation
lexicographic implementation algorithm
implementation algorithm generating
algorithm generating mutations
generating mutations discovered
mutations discovered hea
discovered hea algorithm
hea algorithm heappermute
algorithm heappermute implements
heappermute implements algorithm
implements algorithm generating
positive integer global
integer global array
global array output
array output permutations
output permutations elements
permutations elements write
elements write heappermute
write heappermute odd
heappermute odd swap
odd swap algorithm
swap algorithm prove
correctness algorithm efficiency
algorithm efficiency heappermute
efficiency heappermute generate
heappermute generate subsets
element set algorithms
set algorithms outlined
algorithms outlined section
outlined section simple
section simple make
simple make bit
make bit string
based algorithm generate
generate subsets squashed
subsets squashed write
squashed write pseudocode
write pseudocode recursive
pseudocode recursive algorithm
recursive algorithm generating
strings length write
length write nonrecursive
write nonrecursive algorithm
strings length implements
length implements bit
implements bit strings
bit strings arrays
strings arrays binary
arrays binary additions
binary additions generate
additions generate binary
generate binary reflexive
binary reflexive gray
reflexive gray code
gray code nonrecursive
code nonrecursive algorithm
nonrecursive algorithm generate
algorithm generate binary
generate binary flexive
binary flexive gray
flexive gray code
gray code bit
code bit string
bit string generate
string generate ith
generate ith bit
ith bit string
bit string flipping
string flipping bit
flipping bit previ
bit previ ous
previ ous bit
ous bit string
bit string position
string position significant
position significant binary
significant binary representation
binary representation design
representation design decrease
design decrease conquer
conquer algorithm generating
algorithm generating combinations
generating combinations items
combinations items chosen
items chosen element
chosen element subsets
element set algorithm
set algorithm minimal
algorithm minimal algorithm
minimal algorithm gray
algorithm gray code
gray code tower
code tower hanoi
tower hanoi disk
hanoi disk moves
disk moves classic
moves classic recursive
hanoi puzzle generating
puzzle generating binary
gray code binary
code binary reflected
gray code solving
code solving tower
solving tower hanoi
hanoi puzzle fair
puzzle fair attraction
fair attraction olden
attraction olden days
olden days encounter
days encounter attraction
encounter attraction fair
attraction fair light
fair light bulb
light bulb connected
bulb connected switches
connected switches lighted
switches lighted switches
lighted switches closed
switches closed controlled
closed controlled button
controlled button pressing
button pressing button
pressing button toggled
button toggled state
toggled state light
state light bulb
light bulb design
bulb design algorithm
design algorithm light
algorithm light bulb
light bulb minimum
bulb minimum button
minimum button pushes
button pushes needed
pushes needed worst
needed worst case
worst case switches
case switches decrease
switches decrease constant
factor algorithms recall
algorithms recall introduction
recall introduction chapter
introduction chapter decrease
chapter decrease constant
constant factor major
factor major variety
major variety decrease
conquer algorithm based
algorithm based technique
based technique mentioned
technique mentioned exponentiation
mentioned exponentiation squar
exponentiation squar ing
squar ing defined
ing defined formula
defined formula section
formula section examples
examples algorithms important
algorithms important binary
important binary decrease
binary decrease constant
factor algorithms run
algorithms run logarithmic
run logarithmic ing
logarithmic ing efficient
ing efficient reduction
efficient reduction factor
reduction factor rare
factor rare binary
rare binary remarkably
binary remarkably efficient
remarkably efficient algorithm
sorted array works
array works comparing
works comparing key
comparing key array
key array middle
array middle element
middle element algorithm
element algorithm stops
algorithm stops operation
stops operation repeated
operation repeated recursively
repeated recursively half
recursively half array
array half apply
half apply binary
apply binary searching
binary searching array
searching array iterations
array iterations algorithm
iterations algorithm table
algorithm table index
table index iteration
index iteration binary
iteration binary based
binary based recursive
recursive idea easily
idea easily implemented
easily implemented nonrecursive
implemented nonrecursive algorithm
nonrecursive algorithm pseudocode
algorithm pseudocode nonre
pseudocode nonre cursive
nonre cursive version
version algorithm binarysearch
algorithm binarysearch implements
binarysearch implements nonrecursive
implements nonrecursive binary
nonrecursive binary input
binary input array
array sorted ascending
sorted ascending key
ascending key output
output index array
equal element standard
element standard analyze
standard analyze efficiency
analyze efficiency binary
efficiency binary times
binary times key
times key compared
compared element array
element array sake
array sake simplicity
sake simplicity called
simplicity called comparisons
called comparisons assumes
comparisons assumes comparison
assumes comparison algorithm
comparison algorithm determine
algorithm determine smaller
determine smaller equal
equal larger comparisons
larger comparisons algorithm
algorithm make array
make array elements
array elements depends
elements depends specifics
depends specifics instance
specifics instance problem
instance problem key
problem key comparisons
case cworst worst
case inputs arrays
inputs arrays key
arrays key successful
key successful searches
successful searches comparison
searches comparison algorithm
comparison algorithm faces
algorithm faces situation
faces situation array
situation array half
array half size
half size recurrence
size recurrence relation
recurrence relation cworst
relation cworst convince
cworst convince rounded
convince rounded initial
rounded initial condition
initial condition written
condition written encountered
written encountered recurrence
encountered recurrence initial
initial condition section
condition section recurrence
section recurrence solution
recurrence solution initial
solution initial condition
initial condition cworst
condition cworst log
cworst log similarly
log similarly case
similarly case recurrence
case recurrence problem
recurrence problem exercises
problem exercises solution
exercises solution formula
solution formula tweaked
formula tweaked solution
tweaked solution valid
solution valid arbitrary
valid arbitrary positive
arbitrary positive integer
positive integer cworst
integer cworst log
cworst log formula
log formula deserves
formula deserves attention
deserves attention implies
attention implies worst
implies worst case
efficiency binary log
binary log fully
log fully expected
fully expected algorithm
expected algorithm simply
algorithm simply reduces
simply reduces size
reduces size remaining
size remaining array
remaining array half
array half iteration
half iteration iterations
iteration iterations needed
iterations needed initial
needed initial size
initial size final
size final size
final size log
size log reiterate
log reiterate section
reiterate section logarithmic
section logarithmic function
grows slowly values
slowly values small
values small large
small large values
large values formula
values formula log
formula log comparisons
log comparisons element
comparisons element establish
element establish element
establish element sorted
array elements log
log comparisons sorted
comparisons sorted array
array size average
size average case
efficiency binary phisticated
binary phisticated analysis
phisticated analysis shows
analysis shows average
shows average key
comparisons binary slightly
binary slightly smaller
slightly smaller worst
smaller worst case
worst case cavg
case cavg log
cavg log accurate
log accurate formulas
accurate formulas average
formulas average comparisons
successful unsuccessful cayvegs
unsuccessful cayvegs log
cayvegs log canvog
log canvog log
canvog log binary
log binary optimal
binary optimal searching
optimal searching algorithm
searching algorithm restrict
algorithm restrict erations
restrict erations comparisons
erations comparisons keys
comparisons keys section
keys section searching
section searching algorithms
searching algorithms interpolation
algorithms interpolation section
interpolation section hashing
hashing section average
section average case
case efficiency hashing
efficiency hashing quire
hashing quire array
quire array sorted
array sorted algorithms
sorted algorithms require
algorithms require special
require special calculations
special calculations addition
calculations addition key
addition key comparisons
key comparisons finally
comparisons finally idea
finally idea binary
idea binary applications
binary applications searching
applications searching ben
searching ben addition
ben addition applied
addition applied solving
applied solving nonlinear
nonlinear equations unknown
equations unknown discuss
unknown discuss continuous
discuss continuous analogue
continuous analogue binary
analogue binary called
binary called method
called method bisection
method bisection section
bisection section fake
section fake coin
coin problem versions
problem versions fake
versions fake coin
fake coin identification
coin identification problem
identification problem illustrates
problem illustrates decrease
illustrates decrease constant
constant factor strategy
factor strategy identical
strategy identical coins
identical coins fake
coins fake scale
fake scale sets
heavier problem design
problem design efficient
efficient algorithm detecting
algorithm detecting fake
detecting fake coin
fake coin easier
coin easier version
easier version problem
version problem discuss
problem discuss assumes
discuss assumes fake
assumes fake coin
coin lighter genuine
lighter genuine natural
genuine natural idea
natural idea solving
idea solving problem
solving problem coins
problem coins piles
piles coins leaving
coins leaving extra
leaving extra coin
extra coin odd
coin odd challenging
odd challenging version
challenging version assumes
version assumes additional
assumes additional information
additional information relative
information relative weights
relative weights fake
weights fake genuine
fake genuine coins
genuine coins presence
coins presence fake
presence fake coin
fake coin coins
coin coins pursue
coins pursue difficult
pursue difficult version
difficult version exercises
version exercises section
exercises section piles
section piles scale
piles scale piles
scale piles coin
piles coin fake
coin fake proceed
fake proceed manner
proceed manner lighter
manner lighter pile
lighter pile fake
pile fake coin
fake coin easily
coin easily set
easily set recurrence
relation weighings needed
weighings needed algorithm
needed algorithm worst
case recurrence familiar
recurrence familiar identical
familiar identical worst
identical worst case
comparisons binary difference
binary difference initial
difference initial condition
initial condition similarity
condition similarity surprising
similarity surprising algorithms
surprising algorithms based
based technique halving
technique halving instance
halving instance size
instance size solution
size solution recurrence
solution recurrence weighings
recurrence weighings similar
weighings similar binary
similar binary log
binary log elementary
log elementary outright
elementary outright boring
outright boring interesting
boring interesting fact
interesting fact algorithm
fact algorithm efficient
algorithm efficient solution
solution efficient coins
efficient coins piles
piles coins details
coins details precise
details precise formulation
precise formulation developed
formulation developed section
developed section exercises
section exercises instructor
exercises instructor forgets
instructor forgets demand
forgets demand instructor
demand instructor assign
instructor assign problem
assign problem weighing
problem weighing piles
weighing piles instance
piles instance size
instance size factor
size factor weighings
factor weighings log
weighings log smaller
smaller log russian
log russian peasant
peasant multiplication nonorthodox
multiplication nonorthodox algorithm
nonorthodox algorithm multiplying
algorithm multiplying positive
multiplying positive integers
positive integers called
integers called multiplication
called multiplication russe
multiplication russe russian
russe russian peasant
peasant method positive
method positive integers
positive integers product
integers product compute
product compute instance
compute instance size
size instance half
half size deal
size deal obvious
deal obvious formula
obvious formula relating
formula relating solution
solution problem larger
problem larger instance
larger instance solution
instance solution smaller
solution smaller odd
smaller odd slight
odd slight adjustment
slight adjustment formula
adjustment formula formulas
formula formulas trivial
formulas trivial case
trivial case compute
case compute product
compute product recursively
product recursively iteratively
recursively iteratively computing
iteratively computing algorithm
computing algorithm figure
algorithm figure extra
figure extra addends
extra addends shown
addends shown parentheses
shown parentheses figure
parentheses figure rows
figure rows odd
rows odd values
odd values column
values column product
column product simply
product simply adding
simply adding elements
adding elements column
elements column odd
column odd column
odd column figure
column figure algorithm
figure algorithm involves
algorithm involves simple
involves simple operations
simple operations halving
operations halving doubling
halving doubling adding
doubling adding feature
adding feature attractive
feature attractive figure
attractive figure computing
figure computing russian
computing russian peasant
peasant method memorize
method memorize table
memorize table multiplications
table multiplications feature
multiplications feature algorithm
feature algorithm attractive
algorithm attractive russian
attractive russian peasants
russian peasants accord
peasants accord ing
accord ing western
ing western visitors
western visitors widely
visitors widely nineteenth
widely nineteenth century
nineteenth century method
century method named
method named fact
named fact method
fact method egyptian
method egyptian mathematicians
egyptian mathematicians early
mathematicians early cha
early cha leads
cha leads fast
leads fast hardware
fast hardware implementa
hardware implementa tion
implementa tion doubling
tion doubling halving
doubling halving binary
halving binary numbers
binary numbers performed
numbers performed shifts
performed shifts basic
shifts basic operations
basic operations machine
operations machine josephus
machine josephus problem
josephus problem josephus
problem josephus problem
josephus problem named
problem named flavius
named flavius josephus
flavius josephus famous
josephus famous jewish
famous jewish historian
jewish historian participated
historian participated chronicled
participated chronicled jewish
chronicled jewish revolt
jewish revolt romans
revolt romans josephus
romans josephus general
josephus general managed
general managed hold
managed hold fortress
hold fortress jotapata
fortress jotapata days
jotapata days fall
days fall city
fall city refuge
city refuge diehards
refuge diehards nearby
diehards nearby cave
nearby cave rebels
cave rebels voted
rebels voted perish
voted perish surrender
perish surrender josephus
surrender josephus proposed
josephus proposed dispatch
proposed dispatch neighbor
dispatch neighbor determined
neighbor determined casting
determined casting lots
casting lots josephus
lots josephus contrived
josephus contrived draw
contrived draw lot
draw lot surviving
lot surviving men
surviving men cave
men cave prevailed
cave prevailed intended
prevailed intended victim
intended victim surrender
victim surrender romans
surrender romans people
romans people numbered
people numbered stand
numbered stand circle
stand circle starting
circle starting grim
starting grim person
grim person eliminate
person eliminate person
eliminate person survivor
person survivor left
survivor left problem
left problem determine
problem determine survivor
determine survivor figure
survivor figure people
figure people positions
positions eliminated circle
eliminated circle people
circle people initial
people initial positions
initial positions eliminated
positions eliminated leaving
eliminated leaving sole
leaving sole survivor
sole survivor initial
survivor initial position
initial position people
position people positions
positions eliminated convenient
eliminated convenient people
convenient people positions
people positions convenience
positions convenience figure
convenience figure instances
figure instances josephus
instances josephus problem
josephus problem subscript
problem subscript numbers
subscript numbers person
numbers person position
person position eliminated
position eliminated solutions
eliminated solutions convenient
solutions convenient cases
convenient cases odd
cases odd separately
odd separately circle
separately circle yields
circle yields instance
yields instance problem
instance problem half
problem half initial
half initial size
initial size difference
size difference position
difference position numbering
position numbering person
numbering person initial
position person initial
initial position figure
position figure easy
figure easy initial
easy initial position
position person simply
person simply position
simply position relationship
position relationship hold
relationship hold survivor
hold survivor case
survivor case odd
case odd eliminates
odd eliminates people
eliminates people positions
people positions elimination
positions elimination person
elimination person position
person position left
position left instance
left instance size
instance size initial
size initial position
initial position corresponds
position corresponds position
corresponds position numbering
position numbering position
numbering position figure
position figure odd
figure odd values
odd values closed
values closed solution
closed solution case
solution case recurrence
case recurrence subject
recurrence subject initial
subject initial condition
initial condition requires
condition requires ingenuity
requires ingenuity applying
ingenuity applying backward
applying backward substitutions
backward substitutions fact
substitutions fact solution
fact solution apply
solution apply forward
apply forward substitutions
forward substitutions values
substitutions values discern
values discern pattern
discern pattern prove
pattern prove general
general validity mathematical
validity mathematical induction
mathematical induction leave
induction leave execution
leave execution exercises
execution exercises alternatively
exercises alternatively gkp
alternatively gkp exposition
gkp exposition josephus
exposition josephus problem
josephus problem interestingly
problem interestingly elegant
interestingly elegant closed
elegant closed involves
closed involves binary
involves binary representation
binary representation size
representation size obtained
size obtained bit
obtained bit cyclic
shift left exercises
left exercises cutting
exercises cutting stick
cutting stick inches
stick inches cut
inches cut inch
cut inch pieces
inch pieces outline
pieces outline algorithm
outline algorithm performs
algorithm performs task
performs task minimum
task minimum cuts
minimum cuts pieces
cuts pieces stick
pieces stick cut
stick cut formula
cut formula minimum
formula minimum cuts
minimum cuts design
cuts design decrease
design decrease half
decrease half algorithm
half algorithm computing
algorithm computing log
computing log determine
log determine efficiency
determine efficiency largest
efficiency largest key
comparisons binary searching
binary searching key
searching key array
key array keys
keys array require
array require largest
require largest key
key comparisons searched
comparisons searched binary
searched binary average
binary average key
comparisons binary successful
binary successful array
successful array assume
array assume key
assume key searched
key searched probability
searched probability average
probability average key
comparisons binary unsuccessful
binary unsuccessful array
unsuccessful array assume
array assume searches
assume searches keys
searches keys intervals
keys intervals formed
intervals formed array
formed array elements
array elements equally
elements equally estimate
equally estimate times
times faster average
faster average successful
average successful sorted
successful sorted array
array elements binary
elements binary sequential
binary sequential efficiency
sequential efficiency sequential
efficiency sequential implemented
sequential implemented array
implemented array linked
array linked true
linked true searching
true searching sorted
searching sorted binary
sorted binary design
binary design version
design version binary
version binary comparisons
binary comparisons implement
comparisons implement algorithm
implement algorithm language
language choice carefully
choice carefully debug
carefully debug programs
debug programs notorious
programs notorious prone
notorious prone bugs
prone bugs analyze
bugs analyze efficiency
analyze efficiency comparison
efficiency comparison version
comparison version designed
version designed picture
designed picture guessing
picture guessing version
guessing version popular
version popular problem
popular problem solving
problem solving task
solving task involves
task involves pre
involves pre senting
pre senting people
senting people array
people array pictures
array pictures rows
pictures rows pictures
rows pictures target
pictures target picture
target picture questions
picture questions answered
questions answered people
answered people required
people required picture
required picture questions
picture questions efficient
questions efficient algorithm
algorithm problem largest
problem largest questions
largest questions ternary
questions ternary algorithm
ternary algorithm searching
sorted array simply
array simply key
simply key single
key single element
single element array
element array recursively
array recursively comparing
recursively comparing larger
comparing larger determine
larger determine array
determine array design
array design technique
technique algorithm based
algorithm based set
based set recurrence
set recurrence key
recurrence key comparisons
case assume solve
assume solve recurrence
recurrence algorithm efficiency
algorithm efficiency binary
efficiency binary array
binary array integers
array integers increasing
integers increasing integer
increasing integer range
integer range missing
range missing design
missing design efficient
efficient algorithm missing
algorithm missing integer
missing integer efficiency
integer efficiency write
efficiency write pseudocode
pseudocode algorithm fake
coin problem make
problem make algorithm
make algorithm handles
algorithm handles properly
handles properly values
properly values multiples
values multiples set
multiples set recurrence
relation weighings algorithm
weighings algorithm fake
coin problem solve
problem solve large
solve large values
large values times
values times faster
times faster algorithm
faster algorithm based
algorithm based dividing
based dividing coins
dividing coins piles
coins piles apply
piles apply russian
apply russian peasant
peasant algorithm compute
algorithm compute standpoint
compute standpoint efficiency
standpoint efficiency russian
efficiency russian peasant
peasant algorithm write
write pseudocode russian
pseudocode russian peasant
peasant multiplication algorithm
multiplication algorithm efficiency
efficiency class russian
class russian peasant
peasant multiplication solution
multiplication solution josephus
josephus problem prove
prove solution josephus
josephus problem power
problem power josephus
power josephus problem
josephus problem compute
problem compute discern
compute discern pattern
discern pattern solutions
pattern solutions values
solutions values prove
values prove general
general validity prove
prove validity bit
validity bit cyclic
shift left binary
left binary representation
binary representation variable
representation variable size
decrease algorithms principal
algorithms principal variety
principal variety decrease
common divisor section
divisor section good
section good kind
good kind algorithm
kind algorithm section
algorithm section encounter
section encounter examples
encounter examples variety
examples variety computing
variety computing median
computing median selection
median selection problem
selection problem finding
problem finding kth
finding kth smallest
smallest element numbers
element numbers called
numbers called kth
called kth statistic
kth statistic simply
statistic simply scan
simply scan smallest
scan smallest largest
largest element interesting
element interesting case
interesting case problem
case problem asks
problem asks element
asks element larger
element larger half
larger half elements
half elements smaller
elements smaller half
smaller half middle
half middle called
middle called median
called median important
median important notions
important notions mathematical
notions mathematical statistics
mathematical statistics kth
statistics kth smallest
smallest element sorting
element sorting selecting
sorting selecting kth
selecting kth element
kth element output
element output sorting
output sorting algorithm
sorting algorithm determined
determined efficiency sorting
sorting algorithm fast
algorithm fast sorting
fast sorting algorithm
algorithm mergesort discussed
mergesort discussed chapter
chapter algorithm efficiency
efficiency log immediately
log immediately sorting
immediately sorting entire
sorting entire overkill
entire overkill problem
overkill problem asks
problem asks entire
asks entire kth
entire kth smallest
smallest element advantage
element advantage idea
advantage idea partitioning
idea partitioning element
partitioning element general
element general rearrangement
general rearrangement elements
rearrangement elements left
left elements smaller
elements smaller equal
equal pivot elements
pivot elements greater
greater equal principal
equal principal algorithmic
principal algorithmic alternatives
algorithmic alternatives partition
alternatives partition array
partition array discuss
array discuss lomuto
discuss lomuto partitioning
lomuto partitioning ben
partitioning ben hoare
ben hoare algorithm
hoare algorithm chapter
algorithm chapter idea
chapter idea lomuto
idea lomuto parti
lomuto parti tioning
parti tioning helpful
tioning helpful array
helpful array generally
generally subarray consideration
subarray consideration composed
consideration composed contiguous
composed contiguous seg
contiguous seg ments
seg ments listed
ments listed pivot
listed pivot segment
pivot segment elements
elements smaller segment
smaller segment elements
greater equal segment
equal segment elements
segment elements compared
elements compared fig
compared fig ure
fig ure segments
ure segments case
segments case segments
case segments algorithm
segments algorithm starts
algorithm starts starting
starts starting algorithm
starting algorithm scans
algorithm scans subarray
scans subarray left
subarray left maintaining
left maintaining structure
maintaining structure partition
structure partition achieved
partition achieved iteration
achieved iteration pares
iteration pares element
pares element unknown
element unknown segment
unknown segment pointed
segment pointed scanning
pointed scanning index
scanning index figure
index figure pivot
figure pivot simply
pivot simply incremented
simply incremented segment
incremented segment elements
greater equal shrinking
equal shrinking processed
shrinking processed segment
processed segment elements
elements smaller expanded
smaller expanded incrementing
expanded incrementing index
incrementing index figure
index figure illustration
figure illustration lomuto
illustration lomuto partitioning
lomuto partitioning element
partitioning element segment
element segment swapping
segment swapping incrementing
swapping incrementing element
incrementing element shrunk
element shrunk unprocessed
shrunk unprocessed segment
unprocessed segment unprocessed
segment unprocessed elements
unprocessed elements figure
elements figure algorithm
figure algorithm swaps
algorithm swaps pivot
swaps pivot achieve
pivot achieve partition
achieve partition sought
partition sought figure
sought figure pseudocode
figure pseudocode implementing
procedure algorithm lomutopartition
algorithm lomutopartition partitions
lomutopartition partitions subarray
partitions subarray lomuto
subarray lomuto algorithm
lomuto algorithm element
output partition position
partition position pivot
position pivot swap
pivot swap advantage
swap advantage partition
advantage partition kth
partition kth smallest
smallest element assume
element assume implemented
implemented array elements
array elements indexed
elements indexed starting
indexed starting partition
starting partition split
split position index
position index array
array element occupied
element occupied pivot
occupied pivot partitioning
pivot partitioning pivot
partitioning pivot kth
pivot kth smallest
smallest element solves
element solves problem
solves problem kth
problem kth smallest
element entire array
entire array kth
array kth smallest
smallest element left
element left partitioned
left partitioned array
partitioned array smallest
smallest element solve
element solve problem
solve problem outright
problem outright instance
outright instance smaller
instance smaller solved
smaller solved approach
solved approach recursively
approach recursively algorithm
recursively algorithm called
algorithm called quickselect
called quickselect kth
quickselect kth smallest
element array algorithm
array algorithm quickselect
algorithm quickselect algorithm
quickselect algorithm quickselect
algorithm quickselect solves
quickselect solves selection
selection problem recursive
problem recursive partition
recursive partition based
algorithm input subarray
subarray array orderable
orderable elements integer
elements integer output
integer output kth
output kth smallest
smallest element lomutopartition
element lomutopartition partition
lomutopartition partition algorithm
partition algorithm quickselect
algorithm quickselect fact
quickselect fact idea
fact idea implemented
idea implemented recursion
implemented recursion nonrecursive
recursion nonrecursive version
nonrecursive version adjust
version adjust apply
adjust apply partition
apply partition based
based algorithm median
algorithm median fol
median fol lowing
fol lowing numbers
lowing numbers task
numbers task smallest
task smallest element
element array version
version array partitioning
array partitioning showing
partitioning showing pivots
showing pivots bold
pivots bold smaller
bold smaller proceed
smaller proceed array
proceed array median
array median greater
median greater smaller
greater smaller efficient
smaller efficient quickselect
efficient quickselect partitioning
quickselect partitioning element
partitioning element array
element array requires
array requires key
requires key comparisons
key comparisons produces
comparisons produces split
produces split solves
split solves selection
selection problem requiring
problem requiring iterations
requiring iterations case
iterations case cbest
case cbest algorithm
cbest algorithm extremely
algorithm extremely unbalanced
extremely unbalanced partition
unbalanced partition array
partition array elements
worst case iterations
case iterations specific
iterations specific worst
specific worst case
input case strictly
case strictly increasing
increasing array implies
array implies cworst
implies cworst compares
cworst compares poorly
compares poorly straightforward
poorly straightforward sorting
straightforward sorting based
sorting based approach
based approach mentioned
approach mentioned beginning
mentioned beginning selection
beginning selection problem
selection problem discussion
problem discussion usefulness
discussion usefulness partition
usefulness partition based
based algorithm depends
depends algorithm efficiency
algorithm efficiency average
average case fortunately
case fortunately careful
fortunately careful mathematical
careful mathematical analysis
mathematical analysis shown
analysis shown average
shown average case
case efficiency linear
efficiency linear fact
linear fact scientists
fact scientists discovered
scientists discovered sophisticated
discovered sophisticated choosing
sophisticated choosing pivot
choosing pivot quickselect
pivot quickselect guarantees
quickselect guarantees linear
guarantees linear worst
worst case blo
case blo complicated
blo complicated recommended
complicated recommended practical
recommended practical applications
practical applications noting
applications noting partition
noting partition based
based algorithm solves
algorithm solves general
solves general problem
general problem identifying
problem identifying smallest
identifying smallest largest
largest elements kth
elements kth smallest
smallest element interpolation
element interpolation variable
sorted array called
array called interpolation
called interpolation binary
interpolation binary compares
binary compares key
compares key middle
key middle sorted
middle sorted array
sorted array reduces
array reduces problem
reduces problem instance
instance size half
size half interpolation
half interpolation takes
interpolation takes account
takes account key
account key array
key array element
array element compared
element compared key
compared key sense
key sense algorithm
sense algorithm mimics
algorithm mimics index
mimics index figure
figure index computation
index computation interpolation
computation interpolation searching
interpolation searching named
searching named brown
named brown middle
brown middle beginning
middle beginning action
beginning action searching
action searching named
searching named smith
named smith precisely
smith precisely iteration
precisely iteration dealing
iteration dealing array
dealing array portion
array portion leftmost
portion leftmost element
leftmost element rightmost
element rightmost element
rightmost element algorithm
element algorithm assumes
algorithm assumes array
assumes array values
array values linearly
values linearly straight
linearly straight line
line points accuracy
points accuracy assumption
accuracy assumption algorithm
assumption algorithm efficiency
algorithm efficiency correctness
efficiency correctness key
correctness key compared
compared element index
element index computed
index computed coordinate
computed coordinate straight
coordinate straight line
points coordinate equal
coordinate equal figure
equal figure writing
figure writing standard
writing standard equation
standard equation straight
equation straight line
straight line passing
line passing points
passing points substituting
points substituting solving
substituting solving leads
solving leads formula
leads formula logic
formula logic approach
logic approach straightforward
approach straightforward array
straightforward array values
array values increasing
values increasing accurately
increasing accurately decreasing
accurately decreasing values
decreasing values increased
values increased linearly
increased linearly simplest
linearly simplest manner
simplest manner index
manner index computed
index computed formula
computed formula expected
formula expected location
expected location array
location array element
element equal formula
equal formula applied
formula applied comparing
applied comparing algorithm
comparing algorithm stops
algorithm stops equal
stops equal proceeds
equal proceeds searching
proceeds searching manner
searching manner elements
manner elements indexed
elements indexed depending
indexed depending smaller
smaller larger size
larger size problem
size problem instance
problem instance reduced
instance reduced priori
reduced priori analysis
priori analysis algorithm
algorithm efficiency shows
efficiency shows interpolation
shows interpolation log
interpolation log key
key comparisons average
comparisons average searching
average searching random
searching random keys
random keys function
keys function grows
grows slowly comparisons
slowly comparisons small
comparisons small constant
small constant practically
constant practically feasible
practically feasible inputs
feasible inputs problem
inputs problem section
section exercises worst
exercises worst case
worst case interpolation
case interpolation linear
interpolation linear considered
linear considered bad
considered bad performance
bad performance assessing
performance assessing worthiness
assessing worthiness interpolation
worthiness interpolation binary
interpolation binary robert
binary robert sedgewick
robert sedgewick wrote
sedgewick wrote edition
wrote edition algorithms
edition algorithms binary
algorithms binary smaller
binary smaller files
smaller files interpolation
files interpolation large
interpolation large files
large files applications
files applications comparisons
applications comparisons expensive
comparisons expensive access
expensive access costs
access costs high
costs high section
high section discuss
section discuss continuous
discuss continuous counterpart
continuous counterpart interpolation
counterpart interpolation variable
algorithm searching insertion
binary tree revisit
tree revisit binary
revisit binary tree
tree recall binary
recall binary tree
element node elements
node elements left
elements left subtree
subtree smaller elements
smaller elements subtree
subtree greater element
greater element subtree
root element tree
element tree recursively
tree recursively manner
recursively manner tree
manner tree ends
tree ends failure
ends failure tree
failure tree root
tree root desired
root desired element
desired element stopped
element stopped left
stopped left subtree
root subtree iteration
subtree iteration algorithm
iteration algorithm problem
algorithm problem searching
problem searching binary
binary tree reduced
tree reduced searching
reduced searching smaller
searching smaller binary
smaller binary tree
binary tree size
size tree height
tree height decrease
height decrease tree
decrease tree height
tree height iteration
height iteration binary
iteration binary tree
binary tree giving
tree giving excellent
giving excellent variable
excellent variable size
decrease algorithm worst
worst case binary
case binary tree
binary tree severely
tree severely skewed
severely skewed tree
skewed tree constructed
successive insertions increasing
insertions increasing decreasing
increasing decreasing sequence
sequence keys figure
keys figure tree
figure tree requires
tree requires comparisons
requires comparisons making
comparisons making worst
making worst case
case efficiency operation
efficiency operation fall
operation fall fortunately
fall fortunately average
fortunately average case
efficiency turns log
turns log precisely
log precisely key
precisely key comparisons
comparisons needed binary
needed binary tree
binary tree built
tree built random
built random keys
random keys log
keys log insertion
log insertion key
insertion key binary
binary tree identical
tree identical searching
identical searching exemplifies
searching exemplifies variablesize
exemplifies variablesize decrease
variablesize decrease technique
decrease technique efficiency
technique efficiency characteristics
efficiency characteristics operation
characteristics operation figure
operation figure binary
binary trees increasing
trees increasing sequence
increasing sequence keys
sequence keys decreasing
keys decreasing sequence
sequence keys game
keys game nim
game nim games
nim games features
games features players
features players randomness
players randomness hidden
randomness hidden information
hidden information permitted
information permitted players
permitted players information
players information gameplay
information gameplay game
gameplay game impartial
game impartial player
impartial player moves
player moves game
moves game position
game position finite
position finite moves
finite moves leads
moves leads smaller
leads smaller instance
smaller instance game
instance game ends
game ends win
ends win players
win players ties
players ties winner
ties winner player
winner player prototypical
player prototypical games
prototypical games nim
games nim generally
nim generally game
generally game played
game played piles
piles chips pile
chips pile version
pile version single
version single pile
single pile chips
pile chips players
chips players turns
players turns removing
turns removing pile
removing pile chips
pile chips vary
chips vary lower
vary lower upper
upper limits wins
limits wins game
wins game taking
game taking chip
taking chip player
chip player moving
player moving players
moving players make
players make moves
make moves instance
moves instance game
instance game winning
game winning position
position player winning
player winning strategy
winning strategy sequence
strategy sequence moves
sequence moves results
moves results victory
results victory moves
victory moves opponent
moves opponent makes
opponent makes instance
makes instance game
instance game losing
game losing position
losing position player
position player leads
player leads winning
leads winning position
winning position opponent
position opponent standard
opponent standard approach
standard approach determining
approach determining positions
determining positions winning
positions winning losing
winning losing investigate
losing investigate small
investigate small values
small values logical
values logical instance
logical instance losing
instance losing player
losing player make
player make instance
make instance chips
position player instance
player instance chips
instance chips losing
chips losing taking
losing taking allowed
taking allowed chips
allowed chips puts
chips puts opponent
winning position illustration
position illustration figure
illustration figure instance
figure instance chips
position player leaves
player leaves opponent
leaves opponent chips
opponent chips losing
chips losing figure
losing figure illustration
figure illustration pile
illustration pile nim
pile nim maximum
nim maximum chips
maximum chips numbers
chips numbers chips
numbers chips pile
chips pile losing
pile losing positions
positions player circled
player circled winning
circled winning moves
winning moves winning
moves winning positions
winning positions shown
positions shown bold
shown bold position
bold position chips
position chips losing
chips losing position
losing position difficult
position difficult pattern
difficult pattern formally
pattern formally proved
formally proved mathematical
mathematical induction instance
induction instance chips
position player multiple
player multiple winning
multiple winning strategy
winning strategy mod
strategy mod chips
mod chips deviation
chips deviation strategy
deviation strategy puts
strategy puts opponent
winning position pile
position pile nim
pile nim appeared
nim appeared summation
appeared summation game
summation game published
game published recreational
published recreational mathematics
recreational mathematics authored
mathematics authored claude
authored claude gaspar
claude gaspar bachet
gaspar bachet french
bachet french aristocrat
french aristocrat mathematician
aristocrat mathematician player
mathematician player picks
player picks positive
picks positive integer
positive integer opponent
integer opponent turns
opponent turns adding
turns adding integer
adding integer player
integer player winner
player winner dud
winner dud general
dud general nim
general nim played
nim played piles
piles chips sizes
chips sizes player
sizes player chips
player chips single
chips single pile
single pile goal
pile goal player
goal player make
player make easy
make easy figure
easy figure wins
figure wins game
wins game hint
game hint game
hint game instances
game instances differs
instances differs solution
differs solution general
solution general case
general case nim
case nim unexpected
nim unexpected based
unexpected based binary
based binary representation
binary representation pile
representation pile sizes
pile sizes pile
sizes pile sizes
pile sizes binary
sizes binary compute
binary compute binary
compute binary digital
binary digital sum
digital sum nim
sum nim sum
nim sum defined
defined sum binary
sum binary digits
binary digits discarding
digits discarding words
discarding words binary
words binary digit
binary digit sum
digit sum ith
sum ith position
ith position addends
position addends odd
addends odd turns
odd turns instance
turns instance nim
instance nim winning
nim winning player
winning player nim
player nim sum
nim sum nim
sum nim instance
nim instance losing
instance losing instance
losing instance nim
nim sum zeros
sum zeros commonly
zeros commonly played
commonly played instance
played instance nim
nim sum instance
sum instance winning
instance winning player
winning player moving
player moving winning
moving winning position
position player bit
player bit strings
bit strings nim
strings nim sum
nim sum difficult
sum difficult accomplish
difficult accomplish chips
accomplish chips pile
chips pile ingenious
pile ingenious solution
ingenious solution game
solution game nim
game nim discovered
nim discovered harvard
discovered harvard math
harvard math ematics
math ematics professor
ematics professor bouton
professor bouton years
bouton years ago
years ago mathemati
ago mathemati cians
mathemati cians developed
cians developed general
developed general theory
general theory games
theory games excellent
games excellent account
excellent account theory
account theory applications
theory applications specific
applications specific games
specific games monograph
games monograph berlekamp
monograph berlekamp conway
berlekamp conway guy
conway guy ber
guy ber exercises
ber exercises instance
exercises instance size
instance size computing
size computing greatest
common divisor size
divisor size decrease
size decrease iteration
decrease iteration euclid
iteration euclid algorithm
euclid algorithm prove
algorithm prove instance
prove instance size
instance size decrease
size decrease factor
decrease factor successive
factor successive iterations
successive iterations euclid
iterations euclid algorithm
euclid algorithm apply
algorithm apply quickselect
apply quickselect median
quickselect median numbers
median numbers write
numbers write pseudocode
write pseudocode nonrecursive
pseudocode nonrecursive implementation
nonrecursive implementation quickselect
implementation quickselect derive
quickselect derive formula
derive formula underlying
formula underlying interpolation
underlying interpolation worst
interpolation worst case
case input interpolation
input interpolation algorithm
interpolation algorithm linear
algorithm linear worst
worst case smallest
case smallest log
smallest log greater
log greater determine
greater determine assertions
determine assertions true
assertions true log
true log iii
log iii log
iii log outline
log outline algorithm
largest key binary
case outline algorithm
outline algorithm deleting
algorithm deleting key
deleting key binary
case outline variable
outline variable size
decrease algorithm constructing
algorithm constructing eulerian
constructing eulerian circuit
eulerian circuit connected
circuit connected graph
connected graph vertices
vertices degrees mise
degrees mise pile
mise pile nim
pile nim called
nim called mise
called mise version
mise version pile
version pile nim
pile nim player
nim player taking
player taking chip
taking chip loses
chip loses game
loses game conditions
game conditions game
conditions game pile
game pile chips
pile chips player
chips player takes
player takes chips
takes chips winning
chips winning losing
winning losing positions
positions player game
player game moldy
game moldy chocolate
moldy chocolate players
chocolate players turns
players turns breaking
turns breaking chocolate
breaking chocolate spoiled
chocolate spoiled square
spoiled square break
square break single
break single straight
single straight line
straight line cutting
line cutting boundaries
cutting boundaries squares
boundaries squares break
squares break player
break player broke
player broke eats
broke eats piece
eats piece spoiled
piece spoiled square
spoiled square player
square player left
player left spoiled
left spoiled square
spoiled square loses
square loses game
loses game write
game write interactive
write interactive game
interactive game make
game make winning
make winning position
winning position random
position random legitimate
random legitimate losing
legitimate losing position
losing position flipping
position flipping pancakes
flipping pancakes sizes
pancakes sizes stacked
sizes stacked allowed
stacked allowed flipper
allowed flipper pancakes
flipper pancakes flip
pancakes flip stack
flip stack flipper
stack flipper purpose
flipper purpose pancakes
purpose pancakes size
pancakes size biggest
size biggest visualization
biggest visualization puzzle
visualization puzzle interactive
puzzle interactive mathematics
interactive mathematics miscellany
mathematics miscellany puzzles
miscellany puzzles site
puzzles site bog
site bog design
bog design algorithm
solving puzzle matrix
puzzle matrix row
row column sorted
column sorted increasing
sorted increasing design
increasing design algorithm
algorithm problem laa
problem laa summary
laa summary decrease
summary decrease conquer
decrease conquer general
design technique based
smaller instance problem
instance problem relationship
problem relationship established
established exploited recursively
exploited recursively major
recursively major variations
decrease constant insertion
constant insertion sort
insertion sort decrease
sort decrease constant
constant factor binary
factor binary variable
binary variable size
size decrease euclid
euclid algorithm insertion
insertion sort direct
sort direct application
application decrease conquer
conquer technique sorting
technique sorting problem
problem algorithm worst
algorithm worst average
average cases fast
cases fast average
fast average worst
case algorithm notable
algorithm notable advantage
notable advantage good
advantage good performance
good performance sorted
performance sorted arrays
sorted arrays digraph
arrays digraph graph
digraph graph directions
directions edges topological
edges topological sorting
sorting problem asks
problem asks vertices
asks vertices digraph
vertices digraph edge
edge digraph vertex
digraph vertex starts
vertex starts listed
listed vertex points
vertex points problem
points problem solution
solution digraph dag
acyclic graph directed
graph directed cycles
directed cycles algorithms
cycles algorithms solving
algorithms solving topological
solving topological sorting
sorting problem based
problem based depth
based depth based
depth based direct
based direct application
decrease technique natural
technique natural approach
natural approach developing
approach developing algo
developing algo rithms
algo rithms generating
rithms generating elementary
generating elementary combinatorial
elementary combinatorial objects
combinatorial objects efficient
objects efficient class
efficient class algorithms
class algorithms minimal
algorithms minimal algorithms
minimal algorithms num
algorithms num ber
num ber combinatorial
ber combinatorial objects
combinatorial objects grows
objects grows fast
grows fast algorithms
fast algorithms practical
algorithms practical small
instances problems binary
problems binary efficient
binary efficient algorithm
sorted array principal
array principal decrease
principal decrease constant
factor algorithm examples
algorithm examples exponentiation
examples exponentiation squaring
exponentiation squaring identifying
squaring identifying fake
identifying fake coin
fake coin scale
coin scale russian
scale russian peasant
peasant multiplication josephus
multiplication josephus problem
josephus problem decrease
problem decrease conquer
decrease conquer algorithms
conquer algorithms size
algorithms size reduction
size reduction varies
reduction varies iteration
iteration algorithm examples
algorithm examples variable
decrease algorithms euclid
algorithms euclid algorithm
euclid algorithm partition
algorithm partition based
based algorithm selection
algorithm selection problem
selection problem interpolation
problem interpolation searching
interpolation searching insertion
binary tree nim
tree nim exemplifies
nim exemplifies games
exemplifies games proceed
games proceed series
proceed series diminishing
series diminishing instances
diminishing instances game
remaining elements array
computing positive integer
algorithms discussed previous
algorithms designed executed
array numbers algorithm
convex polygon points
numbers represented approximately
problem set points
define height tree
height defined length
defined length longest
tree root left
called left subtree
algorithms binary trees
lists binary tree
element smaller equal
average case performance
smaller equal larger
worst case recurrence
smaller equal pivot
pseudocode implementing partitioning
implementing partitioning procedure
partitioning procedure algorithm
algorithm element pivot
element pivot input
pivot input subarray
indices output partition
binary tree recall
examples variable size
computing sum numbers
algorithm formal analysis
algorithm necessarily efficient
algorithm inputs size
cworst log key
advanced sorting algorithms
pairs array elements
exercises write pseudocode
largest smallest elements
ation problem computing
positive integer set
solve set recurrence
efficiency class array
class array real
conquer algorithm problem
partition algorithm lomuto
element greater equal
key comparisons equal
quicksort average case
randomly ordered array
persistent efforts years
draw tree recursive
arrays equal elements
case efficiency log
raw binary tree
tree figure standard
binary tree section
frequently executed operation
executed operation algorithm
algorithm makes addition
binary tree left
nodes internal nodes
parental nodes leaves
size decrease technique
prove make correction
draw binary tree
matrix multiplication section
pencil algorithm mul
digits product digits
computing product digit
product digit integers
multiplying digit decimal
digit decimal integers
quality implementing algorithm
algorithm makes multipli
requires multiplications additions
algorithm outlined text
pencil algorithm multiplying
brute algorithm solve
matrix multiplication algorithm
run experiment determine
convex hull problems
brute approach solving
simplicity assume points
solve closest pair
distance pair points
distance closest pair
closest pair points
line set points
set points line
fact convex hull
fact analytical geometry
analytical geometry arbitrary
geometry arbitrary points
problem finding closest
finding closest numbers
dimensional closest pair
polygon vertices points
original problem efficient
original array sorted
array sorted algorithm
case efficiency classic
important problems computational
instance problem algorithm
problems combinatorial problems
problems geometric problems
adjacency matrix graph
figure adjacency matrix
adjacency matrix undirected
matrix undirected graph
weighted graphs weighted
graphs weighted graph
valuable subset items
partic ularly important
real life applications
mod remainder division
prime common divisor
elements positions sorted
discuss algorithms based
idea boyer moore
algorithm comparisoncountingsort sorts
comparisoncountingsort sorts array
sorts array comparison
array comparison counting
comparison counting input
edges relative vertices
hashing balanced trees
dictionary abstract data
comparisons selection sort
selection sort addition
principal traversal algorithms
choice run experiment
searching binary tree
constructed successive insertions
case efficiency turns
outline algorithm finding
finding largest key
efficiency algorithm quadratic
case efficiency brute
tree perfectly balanced
tree root created
height smallest keys
smallest keys tree
lower upper bounds
binary trees avl
tree nodes height
sorting algorithms mergesort
algorithms mergesort quicksort
mergesort quicksort heapsort
examples algorithms based
efficient data structure
data structure represent
traversal algorithms depth
depends data structure
data structure repre
graphs adjacency matrix
technique solving problem
solving problem discuss
application sorting problem
basic operation comparison
lower bound upper
array left element
frequencies compute frequencies
string matching recall
characters called pattern
characters called text
case comparisons worst
left pairs characters
shifts pattern shifts
characters pattern character
pattern character pattern
table entries initialize
pattern text characters
pair encountered case
pattern characters text
string matching input
character pattern character
algorithm shifts pattern
shift pattern position
case shift pattern
pattern text character
algorithm runs fast
algorithm searching patterns
text length pattern
length pattern length
character comparisons brute
comparisons brute algorithm
pattern counterpart text
algorithm section language
section exercises fact
function simple function
size factor size
successful unsuccessful searches
knui knuii knuiii
natural language text
keys leaf keys
nodes tree correspond
ascertain efficiency class
node keys node
node parent node
tree balanced tree
average case efficiency
sorting algorithm mergesort
lower bound lower
bound lower bound
left subtree root
key comparisons needed
total key comparisons
section exercises asks
linear function variables
function variables subject
version knapsack problem
problem yields optimal
route subway passenger
subway passenger designated
passenger designated station
designated station developed
station developed subway
pointer chain node
edge connecting vertices
vertex weight edge
weight edge figure
connected graph figure
numbers assigned vertices
require dynamic partition
dynamic partition element
partition element set
element set collection
set collection disjoint
disjoint subsets initialized
subsets initialized collection
initialized collection element
collection element subsets
collection subjected sequence
subjected sequence intermixed
sequence intermixed union
intermixed union operations
undirected directed graphs
discussed chapter algorithm
directed acyclic graphs
algorithms based greedy
intervals real line
data structures implementing
subtree rooted node
length path root
tree construction algorithm
scan bit string
airline crew scheduling
locally optimal local
problem weighted graph
discussed section greedy
solution obtained greedy
board diagonally corner
problems traveling salesman
weights assigned edges
sum weights edges
efficient algorithms problem
prim algorithm pri
iterations total iterations
spanning tree set
element insertion element
assignment problem section
prim algorithm prim
tree connected graph
edges sum edge
figure connected component
efficient sorting algorithm
operations union operations
subsets collection subset
case efficiency single
usefulness amortized efficiency
node tree root
efficiency single operation
vertex called source
space graphs section
shortest paths graph
paths shown bold
graph negative weights
edges labeled edges
labeled edges labeled
symbols strings symbols
solve problem general
structing optimal binary
solution optimization problem
path length root
length root leaves
binary tree leaves
algorithm euclid algorithm
instance size instance
directed acyclic graph
successful men success
men success result
success result steady
result steady accretion
steady accretion alexander
accretion alexander graham
alexander graham bell
graham bell greedy
bell greedy strategy
greedy strategy considered
strategy considered preceding
considered preceding chapter
preceding chapter constructs
chapter constructs solution
constructs solution optimization
optimization problem piece
problem piece adding
piece adding locally
adding locally optimal
locally optimal piece
optimal piece partially
piece partially constructed
constructed solution chapter
solution chapter discuss
chapter discuss approach
discuss approach designing
approach designing algorithms
designing algorithms optimization
algorithms optimization problems
optimization problems starts
problems starts feasible
starts feasible solution
feasible solution satisfies
solution satisfies constraints
constraints problem proceeds
problem proceeds repeated
proceeds repeated applications
repeated applications simple
applications simple typically
simple typically involves
small localized yielding
localized yielding feasible
yielding feasible solution
feasible solution improved
solution improved objective
objective function improves
function improves objective
optimal stops obstacles
stops obstacles successful
obstacles successful implementation
successful implementation idea
implementation idea initial
idea initial feasible
initial feasible solution
feasible solution problems
solution problems trivial
problems trivial solution
trivial solution approximate
approximate solution obtained
algorithm finding initial
finding initial solution
initial solution require
solution require effort
require effort solving
effort solving problem
solving problem feasible
problem feasible solution
feasible solution identified
solution identified allowed
identified allowed feasible
allowed feasible solution
feasible solution efficiently
solution efficiently current
efficiently current solution
current solution locally
solution locally optimal
locally optimal fundamental
optimal fundamental difficulty
fundamental difficulty issue
difficulty issue local
issue local global
local global extremum
global extremum maximum
extremum maximum minimum
maximum minimum problem
minimum problem finding
problem finding highest
finding highest hilly
highest hilly area
hilly area map
area map foggy
map foggy day
foggy day logical
day logical thing
logical thing walking
thing walking hill
walking hill impossible
hill impossible direction
impossible direction lead
direction lead reached
lead reached local
reached local highest
local highest feasibility
highest feasibility simple
feasibility simple highest
simple highest global
highest global maximum
global maximum entire
maximum entire area
entire area fortunately
area fortunately important
fortunately important problems
problems solved iterativeimprovement
solved iterativeimprovement algorithms
iterativeimprovement algorithms important
algorithms important linear
important linear programming
linear programming encountered
programming encountered topic
encountered topic section
topic section simplex
section simplex method
classic algorithm linear
algorithm linear programming
linear programming discovered
programming discovered mathematician
george dantzig algorithm
dantzig algorithm proved
algorithm proved consequential
proved consequential achievements
consequential achievements history
achievements history algorithmics
history algorithmics section
algorithmics section important
problem maximizing network
maximizing network links
network links capacities
links capacities problem
capacities problem special
special case linear
case linear programming
linear programming special
programming special structure
special structure makes
structure makes solve
solve problem algorithms
problem algorithms efficient
algorithms efficient simplex
simplex method outline
method outline classic
outline classic iterative
classic iterative improvement
algorithm problem discovered
problem discovered american
discovered american mathematicians
american mathematicians ford
mathematicians ford fulkerson
ford fulkerson sections
fulkerson sections chapter
chapter deal bipartite
deal bipartite matching
bipartite matching problem
problem finding optimal
finding optimal pairing
optimal pairing elements
pairing elements disjoint
elements disjoint sets
disjoint sets examples
sets examples matching
examples matching workers
matching workers jobs
workers jobs high
jobs high school
high school graduates
school graduates colleges
graduates colleges men
colleges men women
men women marriage
women marriage section
marriage section deals
section deals problem
deals problem maximizing
problem maximizing matched
maximizing matched pairs
matched pairs section
pairs section concerned
section concerned matching
concerned matching stability
matching stability discuss
stability discuss iterative
discuss iterative improvement
improvement algorithms section
algorithms section approximation
section approximation algorithms
approximation algorithms traveling
salesman knap problems
knap problems examples
problems examples iterative
examples iterative improvement
improvement algorithms textbook
algorithms textbook moret
textbook moret shapiro
moret shapiro mor
shapiro mor books
mor books continuous
books continuous discrete
continuous discrete optimization
discrete optimization nem
optimization nem literature
nem literature heuristic
literature heuristic mic
heuristic mic simplex
mic simplex method
simplex method encountered
method encountered linear
encountered linear programming
linear programming section
programming section general
section general problem
general problem optimizing
variables subject set
subject set linear
set linear constraints
linear constraints maximize
constraints maximize minimize
subject ainxn mentioned
ainxn mentioned important
mentioned important practical
important practical problems
practical problems modeled
problems modeled instances
modeled instances linear
instances linear programming
linear programming researchers
programming researchers kantorovich
researchers kantorovich soviet
kantorovich soviet union
soviet union dutch
union dutch american
dutch american koopmans
american koopmans awarded
koopmans awarded nobel
awarded nobel prize
nobel prize contributions
prize contributions linear
contributions linear programming
linear programming theory
programming theory applications
theory applications economics
applications economics apparently
economics apparently nobel
apparently nobel prize
nobel prize mathematics
prize mathematics royal
mathematics royal swedish
royal swedish academy
swedish academy sciences
academy sciences failed
sciences failed honor
failed honor mathematician
honor mathematician dantzig
mathematician dantzig universally
dantzig universally recognized
universally recognized father
recognized father linear
father linear programming
linear programming modern
programming modern inventor
modern inventor simplex
inventor simplex method
solving problems geometric
problems geometric interpretation
geometric interpretation linear
interpretation linear programming
linear programming general
programming general method
programming problems small
problems small fundamental
small fundamental prop
fundamental prop erties
prop erties problems
erties problems linear
problems linear programming
programming problem vari
problem vari ables
vari ables maximize
ables maximize subject
maximize subject definition
subject definition feasible
definition feasible solution
solution problem satisfies
problem satisfies constraints
feasible region set
region set feasible
set feasible points
feasible points instructive
points instructive sketch
instructive sketch feasible
sketch feasible region
feasible region cartesian
region cartesian plane
cartesian plane recall
plane recall equation
recall equation coefficients
equation coefficients equal
coefficients equal defines
equal defines straight
defines straight line
straight line divides
planes points easy
points easy determine
easy determine half
determine half planes
half planes line
planes line inequalities
line inequalities hold
inequalities hold set
hold set points
points line set
line points feasible
feasible region constraints
region constraints problem
feasible region obtained
region obtained intersection
obtained intersection half
intersection half planes
half planes quadrant
planes quadrant cartesian
quadrant cartesian plane
cartesian plane defined
plane defined nonnegativity
defined nonnegativity constraints
nonnegativity constraints figure
constraints figure feasible
region problem convex
problem convex polygon
polygon vertices intersection
vertices intersection lines
intersection lines obtained
lines obtained solving
obtained solving linear
linear equations task
equations task optimal
task optimal solution
solution feasible region
feasible region largest
region largest objective
objective function feasible
function feasible solutions
feasible solutions objective
solutions objective function
objective function equals
function equals points
equals points objective
function equal line
equal line common
line common points
common points george
points george dantzig
george dantzig received
dantzig received honors
received honors national
honors national medal
national medal science
medal science presented
science presented president
presented president united
president united states
united states citation
states citation states
citation states national
states national medal
national medal awarded
medal awarded inventing
awarded inventing linear
inventing linear programming
linear programming discovering
programming discovering methods
discovering methods led
methods led wide
led wide scale
wide scale scientific
scale scientific technical
scientific technical applications
technical applications important
applications important problems
important problems logistics
problems logistics scheduling
logistics scheduling network
scheduling network optimization
network optimization computers
optimization computers making
computers making efficient
making efficient mathematical
efficient mathematical theory
mathematical theory figure
theory figure feasible
region problem feasible
feasible region figure
region figure posed
figure posed infinitely
posed infinitely feasible
infinitely feasible points
feasible points objective
function equal intersection
equal intersection points
intersection points line
points line feasible
line feasible region
feasible region lines
region lines slope
lines slope line
slope line defined
line defined equation
defined equation constant
equation constant lines
constant lines called
lines called lines
called lines objective
lines objective function
function problem restated
problem restated finding
restated finding largest
finding largest parameter
largest parameter line
parameter line common
line common feasible
common feasible region
feasible region line
region line shifting
line shifting line
shifting line south
line south west
south west changing
west changing slope
changing slope feasible
slope feasible region
feasible region hits
region hits region
hits region shifting
region shifting line
shifting line north
line north east
north east hits
east hits feasible
hits feasible region
feasible region means
region means optimal
means optimal solution
programming problem maximal
problem maximal objective
function equal maximize
equal maximize objective
maximize objective function
function problem line
problem line largest
line largest coincide
largest coincide boundary
coincide boundary line
boundary line segment
line segment slope
segment slope lines
slope lines draw
lines draw line
draw line figure
line figure points
figure points line
line segment vertices
segment vertices optimal
vertices optimal solutions
optimal solutions yielding
solutions yielding maximal
yielding maximal objective
objective function figure
function figure solving
figure solving dimensional
solving dimensional linear
dimensional linear programming
programming problem geometrically
problem geometrically linear
geometrically linear programming
optimal solution vertex
solution vertex feasible
vertex feasible region
feasible region qualifications
region qualifications begin
qualifications begin feasible
begin feasible region
problem constraints contradictory
constraints contradictory requirements
contradictory requirements points
requirements points problem
programming problems feasible
feasible region called
region called infeasible
called infeasible problems
infeasible problems optimal
problems optimal solutions
optimal solutions complication
solutions complication arise
complication arise problem
arise problem feasible
feasible region unbounded
region unbounded demonstrates
unbounded demonstrates reverse
demonstrates reverse inequalities
reverse inequalities problem
inequalities problem feasible
region problem unbounded
problem unbounded figure
unbounded figure feasible
problem unbounded objective
unbounded objective function
objective function attain
function attain finite
attain finite optimal
finite optimal problem
optimal problem maximizing
problem maximizing subject
maximizing subject constraints
optimal solution points
solution points feasible
feasible region making
region making large
making large problems
large problems called
problems called unbounded
called unbounded problem
unbounded problem minimizing
problem minimizing subject
minimizing subject constraints
optimal solution figure
solution figure unbounded
figure unbounded feasible
problem constraints lines
constraints lines function
lines function fortunately
function fortunately important
fortunately important features
important features examples
features examples considered
examples considered hold
considered hold problems
hold problems variables
problems variables feasible
variables feasible region
feasible region typical
region typical linear
typical linear programming
programming problem ways
problem ways similar
ways similar convex
similar convex polygons
convex polygons dimensional
polygons dimensional cartesian
dimensional cartesian plane
cartesian plane specifically
plane specifically finite
specifically finite vertices
finite vertices mathematicians
vertices mathematicians extreme
mathematicians extreme points
extreme points section
points section optimal
section optimal solution
programming problem extreme
problem extreme points
feasible region reiterate
region reiterate properties
reiterate properties theorem
properties theorem extreme
theorem extreme theorem
extreme theorem linear
optimal solution timal
solution timal solution
timal solution extreme
solution extreme problem
feasible region theorem
region theorem implies
theorem implies solve
implies solve linear
programming problem case
problem case bounded
case bounded feasible
feasible region finite
region finite degenerate
finite degenerate instances
degenerate instances maximizing
instances maximizing subject
maximizing subject linear
problem unbounded feasible
optimal solution extreme
solution extreme feasible
feasible region points
region points feasible
feasible region principle
region principle solve
principle solve problem
problem computing objective
computing objective function
function extreme selecting
extreme selecting major
selecting major obstacles
major obstacles implementing
obstacles implementing lies
implementing lies mechanism
lies mechanism generating
mechanism generating extreme
generating extreme points
feasible region straightforward
region straightforward algebraic
straightforward algebraic procedure
algebraic procedure task
procedure task discovered
task discovered obstacle
discovered obstacle lies
obstacle lies extreme
lies extreme points
extreme points typical
points typical feasible
typical feasible region
feasible region news
region news bad
news bad extreme
bad extreme points
grow exponentially size
exponentially size problem
size problem makes
problem makes exhaustive
makes exhaustive inspection
exhaustive inspection extreme
inspection extreme points
extreme points unrealistic
points unrealistic linear
unrealistic linear programming
programming problems nontrivial
problems nontrivial sizes
nontrivial sizes fortunately
sizes fortunately turns
fortunately turns exists
turns exists algorithm
exists algorithm typically
algorithm typically inspects
typically inspects small
inspects small fraction
small fraction extreme
fraction extreme points
feasible region reaching
region reaching optimal
reaching optimal famous
optimal famous algorithm
famous algorithm called
algorithm called simplex
simplex method idea
method idea algorithm
idea algorithm geometric
algorithm geometric terms
geometric terms identifying
terms identifying extreme
identifying extreme feasible
feasible region improved
region improved objective
objective function adjacent
function adjacent extreme
adjacent extreme case
extreme case current
case current optimal
current optimal case
optimal case proceed
case proceed adjacent
proceed adjacent extreme
adjacent extreme improved
extreme improved objective
objective function finite
function finite steps
finite steps algorithm
steps algorithm extreme
algorithm extreme optimal
extreme optimal solution
optimal solution occurs
solution occurs determine
occurs determine optimal
determine optimal solution
optimal solution exists
solution exists outline
exists outline simplex
outline simplex method
simplex method task
method task translate
task translate geometric
translate geometric description
geometric description simplex
description simplex method
simplex method algorithmically
method algorithmically precise
algorithmically precise language
precise language algebra
language algebra begin
algebra begin apply
begin apply simplex
simplex method linear
method linear programming
programming problem represented
problem represented special
represented special called
special called standard
called standard requirements
standard requirements maximization
requirements maximization problem
maximization problem constraints
problem constraints nonnegativity
nonnegativity constraints linear
linear equations nonnegative
equations nonnegative sides
nonnegative sides variables
sides variables required
required nonnegative general
nonnegative general linear
problem standard constraints
standard constraints unknowns
constraints unknowns maximize
unknowns maximize cnxn
maximize cnxn subject
subject ainxn written
ainxn written compact
written compact matrix
compact matrix notations
matrix notations maximize
notations maximize subject
maximize subject amn
subject amn linear
amn linear programming
programming problem transformed
problem transformed equivalent
transformed equivalent problem
equivalent problem standard
problem standard objective
standard objective function
objective function minimized
function minimized replaced
minimized replaced equivalent
replaced equivalent problem
equivalent problem maximizing
problem maximizing objective
maximizing objective function
objective function coefficients
function coefficients replaced
coefficients replaced section
replaced section general
section general discussion
general discussion transformations
discussion transformations constraint
transformations constraint inequality
constraint inequality replaced
inequality replaced equivalent
replaced equivalent equation
equivalent equation adding
equation adding slack
adding slack variable
slack variable representing
variable representing difference
representing difference sides
difference sides original
sides original inequality
original inequality inequalities
inequality inequalities problem
inequalities problem transformed
problem transformed equations
transformed equations finally
equations finally linear
finally linear programming
programming problems variables
problems variables required
required nonnegative begin
nonnegative begin represent
begin represent physical
represent physical quantities
physical quantities case
quantities case initial
case initial statement
initial statement problem
statement problem unconstrained
problem unconstrained variable
unconstrained variable replaced
variable replaced difference
replaced difference nonnegative
difference nonnegative variables
nonnegative variables problem
variables problem standard
problem standard linear
standard linear programming
programming problem variables
problem variables maximize
variables maximize subject
maximize subject easy
subject easy optimal
easy optimal solution
solution problem optimal
solution problem simply
problem simply ignoring
simply ignoring coordinates
ignoring coordinates principal
coordinates principal advantage
principal advantage standard
advantage standard lies
standard lies simple
lies simple mechanism
simple mechanism identifying
mechanism identifying extreme
identifying extreme points
region problem set
problem set variables
set variables straint
variables straint equations
straint equations linear
equations unknowns solve
unknowns solve general
solve general case
general case problem
case problem equations
problem equations unknowns
equations unknowns variables
unknowns variables set
variables set equations
set equations unknowns
equations unknowns obtained
unknowns obtained unique
obtained unique solution
unique solution nondegenerate
solution nondegenerate linear
nondegenerate linear equations
linear equations equal
equations equal unknowns
equal unknowns basic
unknowns basic solution
basic solution coordinates
solution coordinates set
coordinates set solving
set solving called
solving called nonbasic
called nonbasic coordinates
nonbasic coordinates obtained
coordinates obtained solving
obtained solving called
solving called basic
called basic terminology
basic terminology linear
terminology linear algebra
linear algebra specifically
algebra specifically rewrite
specifically rewrite constraint
rewrite constraint equations
constraint equations basis
equations basis dimensional
basis dimensional vector
dimensional vector space
vector space composed
space composed vectors
composed vectors proportional
vectors proportional basis
proportional basis chosen
basis chosen vector
chosen vector uniquely
vector uniquely expressed
uniquely expressed sum
expressed sum multiples
sum multiples basis
multiples basis vectors
basis vectors basic
vectors basic nonbasic
basic nonbasic variables
nonbasic variables vectors
variables vectors included
vectors included excluded
included excluded basis
excluded basis choice
basis choice coordinates
choice coordinates basic
coordinates basic solution
basic solution nonnegative
solution nonnegative basic
nonnegative basic solution
basic solution called
solution called basic
called basic feasible
resulting basic feasible
resulting basic solution
basic solution feasible
solution feasible importance
feasible importance basic
importance basic feasible
feasible solutions lies
solutions lies correspondence
lies correspondence extreme
correspondence extreme points
feasible region extreme
region extreme feasible
region problem figure
problem figure projection
figure projection plane
projection plane incidentally
plane incidentally natural
incidentally natural starting
natural starting simplex
starting simplex method
simplex method application
method application problem
application problem mentioned
problem mentioned simplex
mentioned simplex method
simplex method progresses
method progresses series
progresses series adjacent
series adjacent extreme
extreme points basic
points basic feasible
feasible solutions increasing
solutions increasing values
increasing values objective
objective function represented
function represented simplex
represented simplex tableau
simplex tableau table
tableau table storing
table storing information
storing information basic
information basic feasible
feasible solution extreme
solution extreme simplex
extreme simplex tableau
simplex tableau problem
tableau problem presented
problem presented general
presented general simplex
general simplex tableau
simplex tableau linear
tableau linear programming
problem standard unknowns
standard unknowns linear
unknowns linear equality
linear equality constraints
equality constraints rows
constraints rows columns
columns rows table
rows table coefficients
table coefficients constraint
coefficients constraint equation
constraint equation column
equation column entry
column entry equation
entry equation columns
equation columns labeled
columns labeled names
labeled names variables
names variables rows
variables rows labeled
rows labeled basic
variables basic feasible
feasible solution tableau
solution tableau represents
tableau represents values
represents values basic
basic variables solution
variables solution column
solution column columns
column columns labeled
columns labeled basic
basic variables identity
variables identity matrix
identity matrix row
matrix row simplex
row simplex tableau
simplex tableau called
tableau called objective
called objective row
objective row initialized
row initialized coefficients
initialized coefficients objective
coefficients objective function
objective function signs
function signs reversed
signs reversed columns
reversed columns objective
columns objective function
objective function initial
function initial column
initial column subsequent
column subsequent iterations
subsequent iterations objective
iterations objective row
objective row transformed
row transformed rows
transformed rows objective
objective row simplex
simplex method current
method current tableau
current tableau represents
optimal solution entries
solution entries objective
row possibly column
possibly column nonnegative
column nonnegative case
nonnegative case negative
case negative entries
negative entries nonbasic
entries nonbasic variable
nonbasic variable basic
variable basic tableau
basic tableau criterion
tableau criterion basic
criterion basic feasible
feasible solution represented
solution represented tableau
represented tableau optimal
tableau optimal negative
optimal negative column
negative column signals
column signals fact
increasing coordinate current
coordinate current basic
current basic feasible
feasible solution coefficient
solution coefficient objective
coefficient objective function
objective function positive
function positive larger
positive larger function
larger function compensate
function compensate adjusting
compensate adjusting values
adjusting values basic
basic variables feasible
variables feasible case
feasible case conditions
case conditions satisfied
conditions satisfied means
satisfied means min
adjacent extreme feasible
feasible region similarly
region similarly negative
similarly negative column
negative column objective
column objective row
objective row signals
row signals fact
increasing coordinate initial
coordinate initial basic
feasible solution requires
solution requires means
requires means min
adjacent extreme negative
extreme negative entries
negative entries objective
select negative largest
negative largest absolute
largest absolute motivated
absolute motivated observation
motivated observation choice
observation choice yields
choice yields largest
yields largest objective
objective function unit
function unit variable
unit variable feasibility
variable feasibility constraints
feasibility constraints impose
constraints impose limits
impose limits variables
limits variables choice
variables choice variable
choice variable leads
variable leads smaller
leads smaller objective
smaller objective function
objective function commonly
function commonly select
commonly select variable
select variable basic
basic variable called
variable called entering
called entering variable
entering variable column
variable column referred
column referred pivot
referred pivot column
column pivot column
pivot column choose
column choose departing
choose departing variable
departing variable basic
basic variable nonbasic
variable nonbasic tableau
nonbasic tableau total
tableau total basic
total basic variables
variables basic solution
basic solution equal
solution equal equality
equal equality constraints
equality constraints adjacent
constraints adjacent extreme
adjacent extreme larger
extreme larger objective
larger objective function
objective function entering
function entering variable
entering variable largest
variable largest make
largest make basic
make basic variables
basic variables preserving
variables preserving nonnegativity
preserving nonnegativity translate
nonnegativity translate observation
translate observation choosing
observation choosing departing
choosing departing variable
departing variable simplex
variable simplex tableau
simplex tableau positive
tableau positive entry
pivot column compute
column compute ratio
compute ratio dividing
column tableau ratios
tableau ratios row
ratios row smallest
smallest ratio determines
ratio determines departing
determines departing variable
departing variable nonbasic
variable nonbasic ties
nonbasic ties broken
broken arbitrarily variable
arbitrarily variable row
variable row departing
departing variable called
variable called pivot
called pivot row
pivot row denote
row denote positive
denote positive entries
positive entries pivot
column ratio computed
ratio computed problem
computed problem unbounded
problem unbounded algorithm
unbounded algorithm stops
algorithm stops finally
stops finally steps
finally steps transform
steps transform current
transform current tableau
current tableau transformation
tableau transformation called
transformation called pivoting
called pivoting similar
pivoting similar principal
similar principal gauss
principal gauss jordan
jordan elimination algorithm
linear equations problem
equations problem exercises
problem exercises entries
exercises entries pivot
row pivot entry
pivot entry pivot
column tableau rows
tableau rows objective
objective row difference
difference row entry
column tableau yields
tableau yields row
yields row simplex
simplex method transforms
method transforms tableau
transforms tableau represents
feasible solution increased
solution increased objective
increased objective function
function equal optimal
equal optimal iteration
optimal iteration good
iteration good yields
good yields tableau
yields tableau represents
solution optimal entries
optimal entries objective
objective row tableau
row tableau nonnegative
tableau nonnegative maximal
nonnegative maximal objective
function equal entry
equal entry objective
objective row summarize
row summarize steps
summarize steps simplex
simplex method summary
method summary simplex
summary simplex method
simplex method initialization
method initialization linear
initialization linear programming
programming problem stan
problem stan dard
stan dard set
dard set initial
set initial tableau
initial tableau nonnegative
tableau nonnegative entries
nonnegative entries rightmost
entries rightmost column
rightmost column columns
column columns composing
columns composing identity
composing identity matrix
identity matrix entries
matrix entries objective
objective row disregarded
row disregarded verifying
disregarded verifying requirements
verifying requirements columns
requirements columns define
columns define basic
define basic variables
basic variables initial
variables initial basic
feasible solution labels
solution labels tableau
labels tableau rows
tableau rows optimality
rows optimality entries
optimality entries objective
row possibly rightmost
possibly rightmost column
rightmost column represents
column represents objective
represents objective function
objective function nonnegative
function nonnegative tableau
nonnegative tableau represents
optimal solution basic
solution basic variables
basic variables values
variables values rightmost
values rightmost column
rightmost column remaining
column remaining nonbasic
remaining nonbasic variables
nonbasic variables values
variables values zeros
values zeros finding
zeros finding entering
finding entering variable
entering variable select
variable select negative
negative entry elements
entry elements objective
elements objective row
negative entry largest
entry largest absolute
largest absolute ties
absolute ties broken
broken arbitrarily column
arbitrarily column entering
column entering variable
entering variable pivot
pivot column finding
column finding departing
finding departing variable
departing variable positive
variable positive entry
column ratio dividing
row entry column
column entry pivot
pivot column entries
column entries pivot
pivot column negative
column negative problem
negative problem unbounded
problem unbounded row
unbounded row smallest
smallest ratio ties
ratio ties broken
broken arbitrarily row
arbitrarily row departing
departing variable pivot
variable pivot row
pivot row forming
row forming tableau
forming tableau entries
tableau entries pivot
pivot row entry
pivot column rows
column rows objective
objective row pivot
pivot row multiplied
row multiplied entry
multiplied entry pivot
pivot column row
column row make
row make entries
make entries pivot
column pivot row
pivot row variable
row variable pivot
pivot column notes
column notes simplex
notes simplex method
simplex method formal
method formal proofs
formal proofs validity
proofs validity simplex
validity simplex method
simplex method steps
method steps books
steps books devoted
books devoted detailed
devoted detailed discussion
detailed discussion linear
discussion linear programming
linear programming dan
programming dan important
dan important remarks
important remarks method
remarks method generally
method generally speaking
generally speaking iteration
speaking iteration simplex
iteration simplex method
simplex method leads
method leads extreme
leads extreme problem
feasible region greater
region greater objective
greater objective function
objective function degenerate
function degenerate cases
degenerate cases arise
cases arise basic
arise basic variables
basic variables equal
variables equal simplex
equal simplex method
simplex method objective
method objective function
function extreme greater
extreme greater equal
greater equal previous
equal previous opens
previous opens door
opens door possibility
door possibility objective
possibility objective function
objective function values
function values stall
values stall iterations
stall iterations row
iterations row algorithm
row algorithm previously
algorithm previously considered
previously considered terminate
considered terminate phenomenon
terminate phenomenon called
phenomenon called cycling
called cycling rarely
cycling rarely practice
rarely practice specific
practice specific examples
examples problems cycling
problems cycling constructed
cycling constructed simple
constructed simple modification
simple modification steps
modification steps simplex
method called bland
called bland eliminates
bland eliminates theoretical
eliminates theoretical possibility
theoretical possibility cycling
possibility cycling assuming
cycling assuming variables
assuming variables denoted
variables denoted subscripted
denoted subscripted letter
subscripted letter stated
letter stated modified
stated modified columns
modified columns negative
columns negative entry
negative entry objective
objective row select
row select column
select column smallest
column smallest subscript
smallest subscript modified
subscript modified resolve
modified resolve smallest
resolve smallest ratios
smallest ratios selecting
ratios selecting row
selecting row labeled
row labeled basic
labeled basic variable
basic variable smallest
variable smallest subscript
smallest subscript caveat
subscript caveat deals
caveat deals assumptions
deals assumptions automat
assumptions automat ically
automat ically satisfied
ically satisfied problem
satisfied problem constraints
problem constraints imposed
constraints imposed nonnegative
imposed nonnegative variables
nonnegative variables inequalities
variables inequalities ainxn
inequalities ainxn adding
ainxn adding nonnegative
adding nonnegative slack
nonnegative slack variable
slack variable ith
variable ith constraint
ith constraint equality
constraint equality ainxn
equality ainxn quirements
ainxn quirements imposed
quirements imposed initial
imposed initial tableau
initial tableau simplex
tableau simplex method
simplex method satisfied
method satisfied obvious
satisfied obvious basic
obvious basic feasible
solution problem finding
problem finding initial
finding initial basic
feasible solution nontrivial
solution nontrivial obstacle
nontrivial obstacle problems
obstacle problems feasible
feasible region initial
region initial basic
feasible solution exists
solution exists algorithmic
exists algorithmic problems
algorithmic problems ways
problems ways address
ways address issues
address issues exten
issues exten sion
exten sion classic
sion classic simplex
classic simplex method
method called phase
called phase simplex
phase simplex method
simplex method kol
method kol nutshell
kol nutshell method
nutshell method adds
method adds set
adds set artificial
set artificial variables
artificial variables equality
variables equality constraints
equality constraints problem
constraints problem obvious
problem obvious basic
obvious basic fea
basic fea sible
fea sible solution
sible solution solves
solution solves linear
programming problem minimizing
problem minimizing sum
minimizing sum artificial
sum artificial variables
artificial variables simplex
variables simplex method
simplex method optimal
method optimal solution
solution problem yields
problem yields initial
yields initial tableau
initial tableau original
tableau original problem
original problem feasible
feasible region original
region original problem
problem efficient simplex
method algorithm progresses
algorithm progresses sequence
progresses sequence adjacent
sequence adjacent points
adjacent points feasible
feasible region bad
region bad news
bad news extreme
news extreme points
grow exponentially problem
exponentially problem size
problem size worst
case efficiency simplex
efficiency simplex method
simplex method shown
method shown exponential
shown exponential fortunately
exponential fortunately half
fortunately half century
half century practical
century practical experience
practical experience algorithm
experience algorithm shown
algorithm shown iterations
shown iterations typical
iterations typical application
typical application ranges
application ranges operations
ranges operations iteration
operations iteration proportional
iteration proportional numbers
proportional numbers equality
numbers equality constraints
equality constraints variables
constraints variables discovery
variables discovery simplex
discovery simplex method
simplex method subject
method subject intensive
subject intensive study
intensive study researchers
study researchers worked
researchers worked improvements
worked improvements original
improvements original algorithm
original algorithm details
algorithm details efficient
details efficient implementation
efficient implementation result
implementation result efforts
result efforts programs
efforts programs implementing
programs implementing simplex
implementing simplex method
simplex method polished
method polished large
polished large problems
large problems hundreds
problems hundreds thousands
hundreds thousands constraints
thousands constraints variables
constraints variables solved
variables solved routine
solved routine manner
routine manner fact
manner fact programs
fact programs evolved
programs evolved sophisticated
evolved sophisticated software
sophisticated software packages
software packages enable
packages enable user
enable user problem
user problem constraints
problem constraints solution
constraints solution user
solution user friendly
user friendly tools
friendly tools investigating
tools investigating important
investigating important properties
important properties solution
properties solution sensitivity
solution sensitivity input
sensitivity input data
input data investigations
data investigations important
investigations important applications
important applications economics
applications economics spectrum
economics spectrum linear
spectrum linear programming
programming problems moderate
problems moderate size
moderate size nowadays
size nowadays solved
nowadays solved desktop
solved desktop standard
desktop standard spreadsheet
standard spreadsheet facility
spreadsheet facility taking
facility taking advantage
taking advantage specialized
advantage specialized software
specialized software internet
software internet researchers
internet researchers algorithms
researchers algorithms solving
algorithms solving linear
programming problems polynomial
problems polynomial efficiency
polynomial efficiency worst
worst case important
case important mile
important mile stone
mile stone history
stone history algorithms
history algorithms proof
algorithms proof khachian
proof khachian kha
khachian kha showing
kha showing ellipsoid
showing ellipsoid method
ellipsoid method solve
method solve linear
programming problem polynomial
problem polynomial ellipsoid
polynomial ellipsoid method
ellipsoid method slower
method slower simplex
slower simplex method
simplex method practice
method practice worst
practice worst case
case efficiency encouraged
efficiency encouraged alternatives
encouraged alternatives simplex
alternatives simplex method
simplex method narendra
method narendra karmarkar
narendra karmarkar published
karmarkar published algorithm
published algorithm polynomial
algorithm polynomial worst
case efficiency competitive
efficiency competitive simplex
competitive simplex method
empirical tests discuss
tests discuss karmarkar
discuss karmarkar algorithm
algorithm kar pointing
kar pointing based
pointing based iterative
based iterative improvement
improvement idea karmarkar
idea karmarkar algorithm
karmarkar algorithm generates
algorithm generates sequence
generates sequence feasible
solutions feasible region
feasible region sequence
region sequence adjacent
extreme points simplex
points simplex method
simplex method algorithms
method algorithms called
algorithms called interior
called interior methods
interior methods arb
methods arb exercises
arb exercises version
exercises version office
version office location
location problem exercises
problem exercises integers
exercises integers representing
integers representing coordinates
straight road location
road location office
location office minimizes
office minimizes average
minimizes average distance
villages office required
office required located
required located villages
located villages devise
villages devise iterative
devise iterative improvement
algorithm problem efficient
problem efficient solve
efficient solve problem
programming problems geometrically
problems geometrically maximize
geometrically maximize subject
maximize subject linear
minimize subject real
subject real numbers
real numbers equal
numbers equal coefficient
equal coefficient values
values problem unique
problem unique optimal
unique optimal solution
optimal solution coefficient
solution coefficient values
values problem infinitely
problem infinitely optimal
infinitely optimal solutions
optimal solutions coefficient
solutions coefficient values
values problem optimal
solution problem inequality
problem inequality constraints
inequality constraints strict
constraints strict simplex
strict simplex method
method problem simplex
method problem section
problem section implementations
section implementations internet
implementations internet determine
internet determine iterations
determine iterations simplex
iterations simplex method
solve problem maximize
subject apply simplex
method solve knapsack
solve knapsack problem
knapsack problem exam
problem exam ple
exam ple section
ple section good
section good algorithm
problem prove linear
prove linear programming
problem optimal solutions
optimal solutions linear
solutions linear programming
maximize subject aij
subject aij considered
aij considered primal
considered primal dual
primal dual defined
dual defined linear
defined linear programming
minimize subject aij
subject aij express
aij express primal
express primal dual
dual problems matrix
problems matrix notations
matrix notations dual
notations dual linear
dual linear programming
maximize subject solve
subject solve primal
solve primal dual
dual problems optimal
problems optimal values
optimal values objective
values objective functions
objective functions maximum
functions maximum problem
maximum problem section
problem section important
problem maximizing terial
maximizing terial transportation
terial transportation network
transportation network pipeline
network pipeline communication
pipeline communication electrical
communication electrical distribution
electrical distribution assume
distribution assume transportation
assume transportation network
transportation network represented
network represented connected
represented connected weighted
connected weighted digraph
weighted digraph vertices
digraph vertices numbered
vertices numbered set
numbered set edges
set edges properties
edges properties vertex
properties vertex entering
vertex entering edges
entering edges vertex
called source assumed
source assumed numbered
assumed numbered vertex
numbered vertex leaving
vertex leaving edges
leaving edges vertex
vertex called sink
called sink assumed
sink assumed numbered
assumed numbered weight
numbered weight uij
weight uij directed
uij directed edge
edge positive integer
positive integer called
integer called edge
called edge capacity
edge capacity represents
capacity represents upper
represents upper bound
upper bound material
bound material link
material link represented
link represented edge
represented edge digraph
edge digraph satisfying
digraph satisfying properties
satisfying properties called
properties called network
called network simply
network simply network
simply network small
network small instance
small instance network
instance network figure
network figure assumed
figure assumed source
assumed source sink
source sink source
sink source destination
source destination material
destination material vertices
material vertices points
vertices points redirected
points redirected consuming
redirected consuming adding
consuming adding material
adding material words
material words total
words total material
total material entering
material entering intermediate
entering intermediate vertex
intermediate vertex equal
vertex equal total
equal total material
material leaving vertex
leaving vertex dition
vertex dition called
dition called conservation
called conservation requirement
conservation requirement denote
requirement denote edge
denote edge xij
edge xij intermediate
xij intermediate vertex
intermediate vertex conservation
conservation requirement expressed
requirement expressed equality
expressed equality constraint
equality constraint xji
constraint xji xij
xji xij slightly
xij slightly general
slightly general model
general model network
model network sources
sources sinks capacities
sinks capacities uij
capacities uij infinitely
uij infinitely large
infinitely large figure
large figure network
figure network graph
network graph vertex
graph vertex numbers
numbers vertex names
vertex names edge
names edge numbers
edge numbers edge
numbers edge capacities
edge capacities sums
capacities sums left
sums left sides
left sides express
sides express total
express total inflow
total inflow outflow
inflow outflow entering
outflow entering leaving
entering leaving vertex
leaving vertex material
vertex material intermediate
material intermediate vertices
vertices network stands
network stands reason
stands reason total
reason total material
material leaving source
leaving source sink
source sink observation
sink observation derived
observation derived formally
derived formally equalities
formally equalities task
equalities task asked
task asked exercises
asked exercises equality
exercises equality quantity
equality quantity total
quantity total outflow
total outflow source
outflow source equivalently
source equivalently total
equivalently total inflow
total inflow sink
inflow sink called
sink called denote
called denote quantity
denote quantity maximize
quantity maximize flows
maximize flows network
flows network feasible
network feasible assignment
feasible assignment real
assignment real numbers
real numbers xij
numbers xij edges
xij edges network
edges network conservation
network conservation constraints
conservation constraints capacity
constraints capacity constraints
capacity constraints xij
constraints xij uij
uij edge maximum
edge maximum problem
maximum problem stated
problem stated formally
stated formally optimization
formally optimization problem
maximize subject xji
subject xji xij
xji xij uij
uij edge solve
edge solve linear
method algorithm general
algorithm general linear
programming problems section
problems section special
section special structure
special structure problem
structure problem exploited
problem exploited design
exploited design faster
design faster algorithms
faster algorithms natural
algorithms natural iterative
natural iterative improvement
improvement idea set
idea set xij
set xij edge
edge network iteration
network iteration path
iteration path source
source sink additional
sink additional path
additional path called
augmenting path adjust
path adjust edges
adjust edges path
edges path increased
path increased augmenting
increased augmenting path
augmenting path conclude
path conclude current
conclude current optimal
current optimal general
optimal general template
general template solving
template solving maximum
solving maximum problem
maximum problem called
problem called augmenting
path method ford
fulkerson method ford
ford fulkerson discovered
fulkerson discovered actual
discovered actual implementation
actual implementation augmenting
implementation augmenting path
path idea straightforward
idea straightforward network
straightforward network figure
network figure shown
shown figure amounts
figure amounts edge
amounts edge separated
edge separated edge
separated edge capacities
edge capacities slashes
capacities slashes notation
slashes notation examples
notation examples natural
examples natural flowaugmenting
natural flowaugmenting path
flowaugmenting path source
source sink directed
sink directed edges
directed edges current
edges current xij
current xij edge
xij edge capacity
capacity uij possibilities
uij possibilities assume
possibilities assume augmenting
assume augmenting path
path maximum units
maximum units smallest
units smallest unused
smallest unused capacity
unused capacity edges
capacity edges shown
edges shown figure
shown figure simpleminded
figure simpleminded idea
simpleminded idea augmenting
idea augmenting paths
paths shown figure
shown figure optimal
figure optimal increased
optimal increased path
increased path increasing
path increasing edges
increasing edges decreasing
edges decreasing edge
decreasing edge obtained
edge obtained result
obtained result augmentation
result augmentation shown
augmentation shown figure
figure maximal augmenting
maximal augmenting path
augmenting path paths
path paths source
paths source sink
source sink underlying
sink underlying undirected
underlying undirected graph
undirected graph consecutive
graph consecutive vertices
consecutive vertices connected
vertices connected directed
uij xij edge
xij edge rij
edge rij units
rij units connected
units connected directed
positive xji decrease
xji decrease edge
decrease edge xji
edge xji units
xji units edges
units edges kind
kind called forward
called forward edges
forward edges tail
tail listed vertex
listed vertex defining
vertex defining path
path edges kind
kind called backward
called backward edges
backward edges tail
tail listed path
listed path illustrate
path illustrate path
illustrate path forward
path forward edges
forward edges backward
edges backward edge
backward edge augmenting
augmenting path minimum
path minimum unused
minimum unused capacities
unused capacities rij
capacities rij forward
rij forward edges
forward edges flows
edges flows xji
flows xji backward
xji backward edges
backward edges easy
edges easy current
easy current forward
current forward edge
forward edge decrease
edge decrease backward
decrease backward edge
backward edge feasible
edge feasible figure
feasible figure illustration
figure illustration augmenting
illustration augmenting path
path method augmenting
method augmenting paths
shown bold amounts
bold amounts edge
amounts edge capacities
edge capacities numbers
capacities numbers slash
numbers slash units
slash units greater
units greater predecessor
greater predecessor intermediate
predecessor intermediate vertex
intermediate vertex augmenting
vertex augmenting path
augmenting path combinations
path combinations forward
combinations forward backward
forward backward edges
backward edges incident
edges incident vertex
incident vertex conservation
requirement vertex hold
vertex hold adjustments
hold adjustments edge
adjustments edge arrows
edge arrows minimum
arrows minimum positive
minimum positive unused
unused capacities forward
capacities forward edges
positive flows backward
flows backward edges
backward edges augmenting
augmenting path capacity
path capacity constraints
capacity constraints finally
constraints finally adding
finally adding edge
adding edge augmenting
augmenting path assumption
path assumption edge
assumption edge capacities
edge capacities integers
capacities integers positive
positive integer increases
integer increases iteration
increases iteration augmenting
path method maximum
method maximum bounded
maximum bounded sum
bounded sum capacities
sum capacities source
capacities source edges
source edges augmenting
path method finite
method finite iterations
finite iterations surprisingly
iterations surprisingly final
surprisingly final turns
final turns maximal
turns maximal irrespective
maximal irrespective sequence
irrespective sequence augmenting
sequence augmenting paths
augmenting paths remarkable
paths remarkable result
remarkable result stems
result stems proof
stems proof max
proof max min
cut theorem replicate
theorem replicate section
replicate section augmenting
section augmenting path
path method general
method general specific
general specific generating
specific generating augmenting
generating augmenting paths
augmenting paths bad
paths bad sequence
bad sequence paths
sequence paths dramatic
paths dramatic impact
dramatic impact method
impact method efficiency
method efficiency network
efficiency network figure
network figure stands
figure stands large
stands large positive
positive integer augment
integer augment path
augment path shown
path shown figure
augmenting path figure
path figure selecting
figure selecting pair
selecting pair augmenting
pair augmenting paths
augmenting paths total
paths total iterations
total iterations maximum
iterations maximum figure
figure maximum iterations
maximum iterations augmenting
iterations augmenting initial
augmenting initial path
initial path augmenting
augmenting path dramatic
path dramatic difference
dramatic difference iterations
difference iterations makes
iterations makes fortunately
makes fortunately ways
fortunately ways generate
ways generate augmenting
generate augmenting paths
augmenting paths ficiently
paths ficiently degradation
ficiently degradation performance
degradation performance illustrated
performance illustrated previous
illustrated previous simplest
previous simplest breadth
simplest breadth generate
breadth generate augment
generate augment ing
augment ing paths
ing paths edges
paths edges section
edges section version
section version augmenting
version augmenting path
path method called
method called shortest
called shortest augmenting
augmenting path labeled
path labeled scanned
labeled scanned algorithm
scanned algorithm suggested
algorithm suggested edmonds
suggested edmonds karp
karp edm labeling
edm labeling refers
labeling refers marking
refers marking unlabeled
marking unlabeled vertex
unlabeled vertex labels
vertex labels additional
labels additional brought
additional brought source
brought source vertex
source vertex labeled
vertex labeled reached
labeled reached left
reached left undefined
left undefined source
undefined source convenient
source convenient vertex
convenient vertex reached
vertex reached forward
reached forward backward
forward backward edge
backward edge source
edge source labeled
source labeled vertices
labeled vertices labels
vertices labels computed
labels computed capacity
computed capacity upper
capacity upper bounds
upper bounds irrational
bounds irrational numbers
irrational numbers augmenting
numbers augmenting path
path method terminate
method terminate chv
terminate chv cleverly
chv cleverly devised
cleverly devised demonstrating
devised demonstrating situation
demonstrating situation limitation
situation limitation theoretical
limitation theoretical irrational
theoretical irrational numbers
irrational numbers rational
rational numbers transformed
numbers transformed integers
transformed integers changing
integers changing capacity
changing capacity measurement
capacity measurement unit
measurement unit figure
unit figure efficiency
figure efficiency degradation
efficiency degradation augmenting
degradation augmenting path
path method unlabeled
method unlabeled vertex
uij xij vertex
xij vertex labeled
labeled min rij
min rij unlabeled
rij unlabeled vertex
positive xji vertex
xji vertex labeled
labeled min xji
min xji labeling
xji labeling enhanced
labeling enhanced traversal
enhanced traversal ends
traversal ends labeling
ends labeling sink
labeling sink current
sink current augmented
current augmented sink
augmented sink augmentation
sink augmentation performed
augmentation performed augmenting
performed augmenting path
augmenting path traced
path traced vertex
traced vertex labels
vertex labels sink
labels sink source
sink source current
source current quantities
current quantities increased
quantities increased forward
increased forward edges
forward edges decreased
edges decreased backward
decreased backward edges
backward edges path
edges path sink
path sink remains
sink remains unlabeled
remains unlabeled traversal
unlabeled traversal algorithm
traversal algorithm returns
algorithm returns current
returns current maximum
current maximum stops
maximum stops algorithm
stops algorithm shortestaugmentingpath
algorithm shortestaugmentingpath implements
shortestaugmentingpath implements shortest
implements shortest augmenting
path algorithm input
algorithm input network
input network single
single sink positive
sink positive integer
positive integer capacities
integer capacities uij
capacities uij edges
uij edges output
edges output maximum
output maximum assign
maximum assign xij
assign xij edge
edge network source
network source dequeue
source dequeue edge
dequeue edge forward
edge forward edges
forward edges unlabeled
edges unlabeled rij
unlabeled rij uij
uij xij rij
xij rij min
rij min rij
min rij enqueue
rij enqueue edge
enqueue edge backward
edge backward edges
backward edges unlabeled
edges unlabeled xji
unlabeled xji min
xji min xji
min xji enqueue
xji enqueue sink
enqueue sink labeled
sink labeled augment
labeled augment augmenting
augment augmenting path
path sink backwards
sink backwards labels
backwards labels source
labels source reached
source reached vertex
reached vertex xij
vertex xij vertex
xij vertex xji
vertex xji vertex
xji vertex erase
vertex erase vertex
erase vertex labels
vertex labels source
labels source reinitialize
source reinitialize source
reinitialize source current
source current maximum
current maximum application
application algorithm network
algorithm network figure
network figure illustrated
illustrated figure optimality
figure optimality final
optimality final obtained
path method stems
method stems theorem
stems theorem relates
theorem relates network
relates network flows
network flows network
flows network cuts
network cuts cut
cuts cut induced
cut induced partitioning
induced partitioning vertices
partitioning vertices network
vertices network subset
network subset source
subset source complement
source complement sink
complement sink set
sink set edges
set edges tail
edges tail denote
tail denote cut
denote cut simply
cut simply network
simply network figure
network figure cut
figure cut stems
cut stems property
stems property edges
property edges cut
edges cut deleted
cut deleted network
deleted network directed
network directed path
source sink cut
sink cut directed
cut directed path
source sink vertex
sink vertex path
vertex path belongs
path belongs set
belongs set vertices
set vertices augment
vertices augment sink
sink path augment
path augment sink
sink path augmenting
path sink unlabeled
sink unlabeled current
unlabeled current maximal
current maximal figure
maximal figure illustration
figure illustration shortest
illustration shortest augmenting
path algorithm diagrams
algorithm diagrams left
diagrams left current
left current iteration
current iteration begins
iteration begins diagrams
begins diagrams results
diagrams results vertex
results vertex labeling
vertex labeling iteration
labeling iteration augmenting
augmenting path bold
path bold augmentation
bold augmentation vertices
augmentation vertices deleted
vertices deleted symbol
deleted symbol sink
symbol sink source
sink source predecessor
source predecessor path
predecessor path belongs
path belongs edge
belongs edge element
edge element cut
element cut proves
cut proves property
proves property capacity
property capacity cut
capacity cut denoted
cut denoted defined
denoted defined sum
defined sum capacities
sum capacities edges
capacities edges compose
edges compose cut
compose cut examples
cut examples cuts
examples cuts capacities
cuts capacities equal
capacities equal cuts
equal cuts network
cuts network nonempty
network nonempty finite
nonempty finite exists
finite exists minimum
exists minimum cut
minimum cut smallest
smallest capacity minimum
cut network figure
network figure theorem
figure theorem establishes
theorem establishes important
establishes important relationship
important relationship notions
relationship notions maximum
notions maximum minimum
minimum cut theorem
cut theorem max
theorem max min
cut theorem maximum
theorem maximum network
maximum network equal
network equal capacity
equal capacity minimum
minimum cut proof
cut proof feasible
proof feasible cut
feasible cut capacity
cut capacity network
capacity network cut
network cut defined
cut defined difference
defined difference sum
difference sum flows
flows edges sum
edges sum flows
flows edges intuitively
edges intuitively formally
intuitively formally derived
formally derived equations
derived equations expressing
equations expressing conservation
expressing conservation requirement
conservation requirement definition
requirement definition problem
definition problem section
section exercises cut
exercises cut equal
cut equal xij
equal xij sum
xij sum nonnegative
sum nonnegative xij
nonnegative xij edge
xij edge exceed
edge exceed edge
exceed edge capacity
capacity uij equality
uij equality implies
equality implies xij
implies xij uij
xij uij feasible
uij feasible network
feasible network exceed
network exceed capacity
exceed capacity cut
capacity cut network
cut network final
network final obtained
path method cut
method cut capacity
cut capacity equal
capacity equal conclude
equal conclude view
conclude view inequality
view inequality final
inequality final maximal
final maximal feasible
maximal feasible flows
feasible flows cut
flows cut capacity
cut capacity minimal
capacity minimal cuts
minimal cuts network
cuts network iii
network iii maximum
iii maximum equal
maximum equal minimum
equal minimum cut
cut capacity cut
capacity cut set
cut set vertices
set vertices reached
vertices reached source
reached source undirected
source undirected path
undirected path composed
path composed forward
composed forward edges
edges positive unused
unused capacities respect
capacities respect final
respect final backward
final backward edges
backward edges positive
positive flows set
flows set source
set source sink
source sink augmenting
sink augmenting path
augmenting path contradict
path contradict assumption
contradict assumption final
assumption final cut
final cut definition
cut definition set
definition set edge
set edge unused
edge unused capacity
unused capacity xij
capacity xij uij
uij edge applying
edge applying equality
applying equality final
equality final set
final set defined
set defined xij
defined xij xji
xij xji uij
xji uij proves
uij proves theorem
proves theorem proof
theorem proof outlined
proof outlined accomplishes
outlined accomplishes proving
accomplishes proving equality
proving equality maximum
equality maximum minimum
cut capacity implies
capacity implies augmenting
implies augmenting path
path method terminates
method terminates yields
terminates yields maximum
yields maximum mini
maximum mini mum
mini mum cut
mum cut labeling
cut labeling kind
labeling kind utilized
kind utilized shortest
utilized shortest augmenting
path algorithm minimum
algorithm minimum cut
minimum cut formed
cut formed edges
formed edges labeled
edges labeled unlabeled
labeled unlabeled ver
unlabeled ver tices
ver tices iteration
tices iteration method
iteration method finally
method finally proof
finally proof implies
proof implies edges
implies edges flows
edges flows equal
flows equal edge
equal edge capacities
edge capacities edges
capacities edges unlabeled
edges unlabeled vertices
unlabeled vertices labeled
vertices labeled flows
labeled flows network
flows network figure
network figure algorithm
algorithm finds cut
finds cut minimum
cut minimum capacity
minimum capacity edges
capacity edges required
edges required edmonds
required edmonds karp
edmonds karp proved
karp proved paper
proved paper edm
paper edm aug
edm aug menting
aug menting paths
menting paths needed
paths needed shortest
needed shortest augmenting
path algorithm exceeds
algorithm exceeds vertices
exceeds vertices edges
vertices edges required
edges required shortest
required shortest augmenting
augmenting path breadth
path breadth networks
breadth networks represented
networks represented adjacency
lists efficiency shortest
efficiency shortest augmenting
path algorithm efficient
algorithm efficient algorithms
efficient algorithms maximum
algorithms maximum problem
maximum problem monograph
problem monograph ahu
monograph ahu chapters
ahu chapters books
chapters books cor
books cor kle
cor kle implement
kle implement augmenting
implement augmenting path
path idea efficient
idea efficient manner
efficient manner based
manner based concept
based concept preflows
concept preflows preflow
preflows preflow satisfies
preflow satisfies capacity
satisfies capacity constraints
capacity constraints conservation
constraints conservation requirement
requirement vertex allowed
vertex allowed entering
allowed entering vertex
entering vertex leaving
vertex leaving preflow
leaving preflow algorithm
preflow algorithm moves
algorithm moves excess
moves excess sink
excess sink conservation
sink conservation requirement
conservation requirement reestablished
requirement reestablished intermediate
reestablished intermediate vertices
vertices network faster
network faster gorithms
faster gorithms kind
gorithms kind worst
kind worst case
case efficiency preflow
efficiency preflow algorithms
preflow algorithms fall
algorithms fall iterative
fall iterative improvement
iterative improvement paradigm
improvement paradigm generate
paradigm generate sequence
generate sequence improving
sequence improving solutions
improving solutions constraints
solutions constraints problem
constraints problem conclude
problem conclude section
conclude section pointing
section pointing initial
pointing initial studying
initial studying network
studying network flows
network flows caused
flows caused transportation
caused transportation applications
transportation applications model
applications model proved
model proved areas
proved areas discuss
areas discuss section
discuss section exercises
section exercises maximum
exercises maximum algorithms
maximum algorithms require
algorithms require processing
require processing edges
processing edges directions
edges directions convenient
directions convenient modify
convenient modify adjacency
modify adjacency matrix
matrix representation network
representation network directed
network directed edge
directed edge vertex
edge vertex capacity
vertex capacity uij
capacity uij element
uij element ith
set uij element
uij element row
element row ith
row ith column
ith column set
set uij edge
uij edge vertices
edge vertices elements
vertices elements set
elements set outline
set outline simple
outline simple algorithm
simple algorithm identifying
algorithm identifying source
identifying source sink
source sink network
sink network presented
network presented matrix
presented matrix efficiency
matrix efficiency apply
efficiency apply shortest
apply shortest augmenting
path algorithm maximum
algorithm maximum minimum
minimum cut networks
cut networks maximum
networks maximum problem
maximum problem unique
unique solution networks
solution networks capacities
networks capacities edges
capacities edges questions
edges questions minimum
questions minimum cut
minimum cut problem
cut problem finding
problem finding cut
finding cut smallest
smallest capacity network
capacity network maximum
network maximum problem
problem network sources
sources sinks transformed
sinks transformed problem
transformed problem network
problem network single
single sink networks
sink networks capacity
networks capacity constraints
capacity constraints amounts
constraints amounts intermediate
amounts intermediate vertices
intermediate vertices maximum
vertices maximum problem
problem network transformed
network transformed maximum
transformed maximum problem
problem network edge
network edge capacity
edge capacity constraints
capacity constraints network
constraints network rooted
network rooted tree
tree root source
root source leaves
source leaves sinks
leaves sinks edges
sinks edges directed
edges directed paths
directed paths root
paths root leaves
root leaves design
leaves design efficient
finding maximum network
maximum network efficiency
network efficiency algorithm
efficiency algorithm prove
algorithm prove equality
equality prove network
prove network cut
network cut equal
cut equal cut
equal cut equality
cut equality relationship
equality relationship property
relationship property equality
property equality express
equality express maximum
express maximum problem
problem network figure
network figure linear
figure linear programming
simplex method alternative
method alternative shortest
alternative shortest augmenting
path algorithm edmonds
algorithm edmonds karp
karp edm suggested
edm suggested maximum
suggested maximum capacity
maximum capacity augmenting
capacity augmenting path
path algorithm augmented
algorithm augmented path
augmented path increases
path increases largest
increases largest implement
largest implement algorithms
implement algorithms language
language choice empirical
choice empirical investigation
empirical investigation relative
investigation relative efficiency
relative efficiency write
efficiency write advanced
write advanced maximum
advanced maximum algorithm
maximum algorithm dinitz
algorithm dinitz algorithm
dinitz algorithm karzanov
algorithm karzanov algorithm
karzanov algorithm iii
algorithm iii malhotra
iii malhotra kamar
malhotra kamar maheshwari
kamar maheshwari algorithm
maheshwari algorithm goldberg
algorithm goldberg tarjan
goldberg tarjan algorithm
tarjan algorithm dining
algorithm dining problem
dining problem families
problem families dinner
families dinner social
dinner social interaction
social interaction sit
interaction sit tables
sit tables members
tables members family
members family table
family table seating
table seating arrangement
seating arrangement meets
arrangement meets objective
meets objective prove
objective prove arrangement
prove arrangement exists
arrangement exists maximum
exists maximum problem
maximum problem assume
problem assume dinner
assume dinner contingent
dinner contingent families
contingent families ith
families ith family
ith family members
family members assume
members assume tables
assume tables table
tables table seating
table seating capacity
seating capacity ahu
capacity ahu maximum
ahu maximum matching
matching bipartite graphs
bipartite graphs situations
graphs situations faced
situations faced problem
faced problem pairing
problem pairing elements
pairing elements sets
elements sets traditional
sets traditional boys
traditional boys girls
boys girls easily
girls easily applications
easily applications convenient
applications convenient represent
convenient represent elements
represent elements sets
elements sets vertices
sets vertices graph
graph edges vertices
edges vertices paired
vertices paired matching
paired matching graph
matching graph subset
graph subset edges
subset edges property
edges property edges
property edges vertex
edges vertex maximum
vertex maximum matching
maximum matching precisely
matching precisely maximum
precisely maximum cardinality
matching largest edges
edges graph figure
graph figure unique
figure unique maximum
unique maximum matching
maximum matching problem
problem finding maximum
maximum matching graph
matching graph arbitrary
arbitrary graph difficult
graph difficult problem
difficult problem solved
problem solved jack
solved jack edmonds
jack edmonds edm
edmonds edm gal
edm gal good
gal good survey
good survey recent
survey recent references
recent references limit
references limit discussion
limit discussion section
discussion section simpler
section simpler case
simpler case bipartite
case bipartite graphs
bipartite graphs bipartite
graphs bipartite graph
partitioned disjoint sets
disjoint sets necessarily
sets necessarily size
necessarily size edge
size edge connects
connects vertex sets
vertex sets vertex
sets vertex set
vertex set words
set words graph
words graph bipartite
colors graphs colorable
graphs colorable graph
colorable graph figure
graph figure bipartite
figure bipartite difficult
bipartite difficult prove
difficult prove graph
prove graph bipartite
graph bipartite odd
bipartite odd length
odd length assume
length assume rest
assume rest section
rest section figure
section figure bipartite
figure bipartite graph
bipartite graph vertex
graph vertex set
vertex set bipartite
set bipartite graph
bipartite graph partitioned
graph partitioned sets
partitioned sets required
sets required definition
required definition problem
definition problem exercises
problem exercises apply
exercises apply iterative
apply iterative improvement
improvement technique maximumcardinality
technique maximumcardinality matching
maximumcardinality matching problem
problem matching bipartite
graph matching edges
matching edges vertex
edges vertex matched
vertex matched serves
matched serves endpoint
serves endpoint edge
endpoint edge maximum
edge maximum matching
maximum matching chance
matching chance improving
chance improving current
improving current matching
current matching unmatched
matching unmatched called
unmatched called free
called free vertices
free vertices incident
vertices incident edge
incident edge matching
edge matching graph
graph figure vertices
figure vertices free
vertices free vertices
free vertices matched
vertices matched obvious
matched obvious observation
obvious observation immediately
observation immediately current
immediately current matching
current matching adding
matching adding edge
adding edge free
edge free vertices
free vertices adding
vertices adding matching
adding matching graph
graph figure yields
figure yields larger
yields larger matching
larger matching figure
matching figure matching
figure matching larger
matching larger matching
larger matching vertex
matching vertex edge
vertex edge matching
edge matching inclusion
matching inclusion requires
inclusion requires removal
requires removal compensated
removal compensated inclusion
compensated inclusion matching
inclusion matching shown
shown figure general
figure general size
general size current
size current matching
current matching constructing
matching constructing simple
constructing simple path
simple path free
path free vertex
free vertex edges
vertex edges alternately
edges alternately edge
alternately edge path
edge path called
called augmenting respect
augmenting respect matching
respect matching path
respect matching figure
matching figure length
figure length augmenting
length augmenting path
augmenting path odd
path odd adding
odd adding matching
adding matching path
matching path edges
path edges odd
edges odd numbered
odd numbered positions
numbered positions deleting
positions deleting path
deleting path edges
path edges numbered
edges numbered positions
numbered positions yields
positions yields matching
yields matching edge
matching edge matching
edge matching adjustment
matching adjustment called
adjustment called augmentation
called augmentation figure
augmentation figure matching
figure matching obtained
path matching obtained
augmenting path moving
path moving augmenting
moving augmenting path
path matching figure
matching figure adding
figure adding edges
adding edges deleting
edges deleting matching
deleting matching shown
path maximum matching
matching figure augmenting
figure augmenting paths
augmenting paths matching
paths matching augmentations
matching augmentations matching
augmentations matching maximum
maximum matching perfect
perfect matching matches
matches vertices graph
vertices graph discuss
graph discuss algorithm
discuss algorithm finding
algorithm finding augmenting
finding augmenting path
augmenting path issue
path issue nonexistence
issue nonexistence path
nonexistence path means
path means theorem
means theorem discovered
theorem discovered french
discovered french mathematician
french mathematician claude
mathematician claude berge
claude berge means
berge means current
means current matching
current matching maximal
matching maximal theorem
maximal theorem matching
theorem matching maximum
maximum matching exists
matching exists augmenting
exists augmenting path
path respect proof
respect proof augmenting
proof augmenting path
matching exists size
exists size matching
size matching increased
matching increased augmentation
increased augmentation prove
augmentation prove difficult
prove difficult augmenting
difficult augmenting path
matching exists matching
exists matching maximum
maximum matching assume
matching assume contrary
assume contrary case
contrary case matching
case matching graph
matching graph maximum
graph maximum matching
maximum matching assumption
matching assumption edges
assumption edges symmetric
edges symmetric difference
symmetric difference set
difference set edges
set edges assumption
edges assumption subgraph
assumption subgraph edges
subgraph edges endpoints
edges endpoints definition
endpoints definition matching
definition matching vertex
matching vertex incident
vertex incident edge
incident edge vertices
edge vertices degree
vertices degree connected
degree connected component
connected component path
component path length
path length alternating
alternating edges length
edges length alternating
alternating edges path
edges path alternating
path alternating edges
alternating edges starts
edges starts ends
starts ends edge
ends edge augmenting
path matching contradicts
matching contradicts assumption
contradicts assumption path
assumption path exists
path exists discussion
exists discussion augmenting
discussion augmenting paths
augmenting paths leads
paths leads general
leads general method
general method constructing
method constructing maximum
constructing maximum matching
bipartite graph initial
graph initial matching
initial matching set
matching set augmenting
set augmenting path
augmenting path augment
path augment current
augment current matching
current matching path
augmenting path terminate
path terminate algorithm
terminate algorithm matching
algorithm matching maximum
matching maximum specific
maximum specific algorithm
specific algorithm implementing
algorithm implementing general
implementing general template
general template augmenting
template augmenting path
path matching bfs
matching bfs traversal
traversal graph starts
graph starts simultaneously
starts simultaneously free
simultaneously free vertices
vertices sets logical
sets logical select
logical select smaller
select smaller vertex
smaller vertex sets
vertex sets observation
sets observation pseudocode
observation pseudocode recall
pseudocode recall augmenting
recall augmenting path
augmenting path exists
path exists odd
exists odd length
odd length path
length path connects
path connects free
connects free vertex
free vertex consists
vertex consists single
consists single edge
single edge zigs
edge zigs vertex
zigs vertex zags
vertex zags uniquely
zags uniquely defined
uniquely defined edge
defined edge free
free vertex reached
vertex reached draw
reached draw augmenting
draw augmenting paths
augmenting paths matchings
paths matchings figure
matchings figure candidate
figure candidate path
candidate path edges
path edges alternate
edges alternate pattern
alternate pattern motivates
pattern motivates rules
motivates rules labeling
rules labeling vertices
labeling vertices bfs
traversal graph case
graph case vertex
case vertex free
vertex adjacent endpoint
adjacent endpoint augmenting
augmenting path labeling
path labeling stops
labeling stops augmentation
stops augmentation matching
augmentation matching commences
matching commences augmenting
commences augmenting path
augmenting path obtained
path obtained moving
obtained moving backward
moving backward vertex
backward vertex labels
vertex labels alternately
labels alternately delete
alternately delete edges
delete edges current
edges current matching
current matching free
matching free connected
free connected edge
connected edge labeled
edge labeled case
labeled case vertex
case vertex case
vertex case matched
case matched pseudocode
matched pseudocode algorithm
pseudocode algorithm entirety
entirety algorithm maximumbipartitematching
algorithm maximumbipartitematching finds
maximumbipartitematching finds maximum
bipartite graph bfs
graph bfs traversal
bfs traversal input
traversal input bipartite
input bipartite graph
bipartite graph output
graph output maximum
output maximum cardinality
cardinality matching input
matching input graph
input graph initialize
graph initialize set
initialize set edges
set edges valid
edges valid matching
valid matching set
matching set initialize
set initialize free
initialize free vertices
free vertices dequeue
vertices dequeue vertex
dequeue vertex adjacent
adjacent free augment
free augment labeled
augment labeled vertex
labeled vertex labels
vertex labels reinitialize
labels reinitialize free
reinitialize free vertices
free vertices break
vertices break exit
break exit loop
exit loop matched
loop matched unlabeled
matched unlabeled enqueue
unlabeled enqueue matched
enqueue matched enqueue
matched enqueue current
enqueue current matching
current matching maximum
matching maximum application
application algorithm matching
algorithm matching figure
matching figure shown
algorithm finds maximum
maximum matching differs
matching differs figure
differs figure augment
figure augment maximum
augment maximum matching
matching figure application
figure application maximum
application maximum cardinality
cardinality matching algorithm
matching algorithm left
algorithm left column
left column shows
column shows current
shows current matching
current matching initialized
matching initialized iteration
initialized iteration column
iteration column shows
column shows vertex
shows vertex labeling
vertex labeling generated
labeling generated algorithm
generated algorithm augmentation
algorithm augmentation performed
augmentation performed matching
performed matching edges
matching edges shown
shown bold vertex
bold vertex labels
vertex labels vertices
labels vertices labeling
vertices labeling discovered
labeling discovered endpoint
discovered endpoint augmenting
augmenting path shaded
path shaded labeled
shaded labeled clarity
labeled clarity vertices
clarity vertices deleted
vertices deleted efficient
deleted efficient maximum
efficient maximum matching
matching algorithm iteration
algorithm iteration matches
iteration matches previously
matches previously free
previously free vertices
vertices sets total
sets total iterations
total iterations exceed
iterations exceed vertices
exceed vertices graph
vertices graph spent
graph spent iteration
spent iteration edges
iteration edges graph
edges graph assumes
graph assumes information
assumes information status
information status vertex
status vertex free
vertex free matched
free matched vertex
matched vertex retrieved
vertex retrieved constant
retrieved constant storing
constant storing array
storing array efficiency
array efficiency algorithm
efficiency algorithm hopcroft
algorithm hopcroft karp
hopcroft karp showed
karp showed efficiency
showed efficiency improved
efficiency improved combining
improved combining iterations
combining iterations single
iterations single stage
single stage maximize
stage maximize edges
maximize edges added
edges added matching
added matching concerned
matching concerned section
concerned section matching
section matching largest
matching largest vertex
largest vertex pairs
vertex pairs bipartite
pairs bipartite graph
bipartite graph applications
graph applications require
applications require taking
require taking quality
taking quality cost
quality cost matching
cost matching pairs
matching pairs workers
pairs workers execute
workers execute jobs
execute jobs efficiencies
jobs efficiencies girls
efficiencies girls preferences
girls preferences potential
preferences potential partners
potential partners natural
partners natural model
natural model situations
model situations bipartite
situations bipartite graphs
bipartite graphs weights
graphs weights assigned
assigned edges leads
edges leads problem
leads problem maxi
problem maxi mizing
maxi mizing sum
mizing sum weights
weights edges connecting
edges connecting matched
connecting matched pairs
matched pairs vertices
pairs vertices problem
problem called maximum
called maximum weight
maximum weight matching
weight matching encountered
matching encountered differ
encountered differ ent
differ ent assignment
ent assignment problem
problem section sophisti
section sophisti cated
sophisti cated algorithms
cated algorithms problem
algorithms problem efficient
problem efficient exhaustive
efficient exhaustive pap
exhaustive pap gal
pap gal ahu
gal ahu leave
ahu leave discussion
leave discussion complexity
discussion complexity general
complexity general graphs
general graphs exercises
graphs exercises matching
exercises matching shown
matching shown bold
shown bold augmentation
bold augmentation exists
augmentation exists apply
exists apply maximum
apply maximum matching
matching algorithm bipartite
algorithm bipartite graph
bipartite graph largest
graph largest smallest
largest smallest cardinality
smallest cardinality ing
cardinality ing bipartite
ing bipartite graph
set edges largest
edges largest smallest
largest smallest distinct
smallest distinct solutions
distinct solutions maximum
solutions maximum cardinality
set edges hall
edges hall marriage
marriage theorem asserts
theorem asserts bipartite
asserts bipartite graph
graph matching matches
matches vertices set
vertices set subset
set subset set
subset set vertices
adjacent vertex property
vertex property graph
property graph devise
graph devise algorithm
devise algorithm returns
algorithm returns matching
returns matching bipartite
bipartite graph matches
graph matches vertices
matches vertices returns
vertices returns base
returns base algorithm
base algorithm checking
algorithm checking condition
checking condition hall
condition hall marriage
marriage theorem committees
theorem committees composed
committees composed persons
composed persons committee
persons committee members
committee members distinct
members distinct representatives
distinct representatives select
representatives select representative
select representative committee
representative committee selected
committee selected persons
selected persons distinct
persons distinct maximum
distinct maximum cardinality
bipartite graph reduced
graph reduced maximum
reduced maximum problem
maximum problem discussed
bipartite graph sort
graph sort vertices
sort vertices nondecreasing
vertices nondecreasing degrees
nondecreasing degrees scan
degrees scan sorted
scan sorted current
sorted current matching
current matching initially
matching initially edge
initially edge free
adjacent free vertex
free vertex lowest
vertex lowest degree
lowest degree vertex
degree vertex matched
vertex matched adjacent
matched adjacent free
adjacent free vertices
free vertices vertex
vertices vertex simply
vertex simply skipped
simply skipped algorithm
skipped algorithm maximum
algorithm maximum matching
graph design linear
linear algorithm finding
maximum matching tree
matching tree implement
tree implement maximum
implement maximum matching
matching algorithm section
language choice experiment
choice experiment performance
experiment performance bipartite
performance bipartite graphs
bipartite graphs vertices
graphs vertices vertex
vertices vertex sets
vertex sets randomly
sets randomly generated
randomly generated edges
generated edges dense
edges dense sparse
dense sparse modes
sparse modes observed
modes observed running
observed running algorithm
running algorithm theoretical
algorithm theoretical efficiency
theoretical efficiency domino
efficiency domino puzzle
domino puzzle domino
puzzle domino tile
domino tile oriented
tile oriented hori
oriented hori zontally
hori zontally vertically
zontally vertically tiling
vertically tiling board
tiling board composed
board composed squares
composed squares covering
squares covering dominoes
covering dominoes overlap
dominoes overlap tile
overlap tile dominoes
tile dominoes board
dominoes board unit
board unit squares
unit squares diagonally
squares diagonally corners
diagonally corners stable
corners stable marriage
marriage problem section
problem section interesting
section interesting version
interesting version bipartite
version bipartite matching
bipartite matching called
called stable marriage
marriage problem set
problem set men
set women preference
women preference ordering
preference ordering women
ordering women potential
women potential marriage
potential marriage partners
marriage partners ties
partners ties allowed
ties allowed similarly
allowed similarly woman
similarly woman preference
woman preference men
preference men ties
men ties examples
ties examples sets
examples sets lists
sets lists figures
lists figures information
figures information presented
information presented ranking
presented ranking matrix
ranking matrix figure
matrix figure rows
figure rows columns
rows columns matrix
columns matrix represent
matrix represent men
represent men women
men women sets
women sets cell
sets cell row
cell row column
row column rankings
column rankings position
rankings position ranking
ranking preference position
preference position ranking
ranking preference pair
preference pair jim
pair jim row
jim row ann
row ann column
ann column matrix
column matrix figure
matrix figure ann
figure ann jim
ann jim choice
jim choice jim
choice jim ann
jim ann ways
ann ways represent
ways represent information
represent information depends
information depends task
depends task easier
task easier sets
easier sets elements
sets elements ranking
elements ranking matrix
ranking matrix preference
matrix preference lists
preference lists efficient
lists efficient data
data structure implementing
structure implementing matching
implementing matching algorithm
matching algorithm marriage
algorithm marriage matching
marriage matching set
matching set pairs
set pairs members
pairs members selected
members selected disjoint
selected disjoint element
disjoint element sets
element sets fashion
sets fashion paired
fashion paired woman
paired woman vice
woman vice versa
vice versa represent
versa represent vertices
represent vertices bipartite
vertices bipartite graph
bipartite graph edges
graph edges connecting
edges connecting marriage
connecting marriage partners
marriage partners marriage
partners marriage matching
marriage matching perfect
perfect matching graph
matching graph men
graph men preferences
women preferences ranking
preferences ranking matrix
ranking matrix ann
matrix ann lea
lea sue bob
sue bob lea
bob lea ann
ann sue ann
sue ann jim
ann jim tom
bob jim lea
jim lea sue
lea sue ann
sue ann lea
ann lea tom
lea tom bob
jim tom sue
tom sue lea
sue lea ann
ann sue jim
tom bob tom
bob tom figure
tom figure data
figure data instance
data instance stable
marriage problem men
problem men preference
men preference lists
preference lists women
lists women preference
women preference lists
preference lists ranking
lists ranking matrix
ranking matrix boxed
matrix boxed cells
boxed cells composing
cells composing unstable
composing unstable matching
unstable matching pair
matching pair blocking
pair blocking pair
marriage matching woman
matching woman matched
woman matched mates
matched mates bob
mates bob lea
bob lea blocking
lea blocking pair
marriage matching bob
matching bob ann
bob ann jim
ann jim lea
jim lea tom
lea tom sue
tom sue figure
sue figure matched
figure matched bob
matched bob prefers
bob prefers lea
prefers lea ann
lea ann lea
ann lea prefers
lea prefers bob
prefers bob jim
bob jim marriage
jim marriage matching
marriage matching called
called stable blocking
stable blocking pair
blocking pair called
pair called unstable
called unstable definition
unstable definition marriage
definition marriage matching
marriage matching figure
matching figure unstable
figure unstable bob
unstable bob lea
bob lea designated
lea designated mates
designated mates union
mates union stable
union stable marriage
problem stable marriage
men women preferences
women preferences surprisingly
preferences surprisingly problem
surprisingly problem solution
problem solution instance
instance figure algorithm
figure algorithm stable
algorithm stable marriage
marriage algorithm input
algorithm input set
input set men
set women rankings
women rankings women
rankings women rankings
women rankings men
rankings men woman
men woman ties
woman ties allowed
ties allowed rankings
allowed rankings output
rankings output stable
output stable marriage
men women free
women free men
free men arbitrarily
men arbitrarily select
arbitrarily select proposal
select proposal selected
proposal selected free
selected free proposes
free proposes woman
proposes woman preference
woman preference highest
preference highest ranked
ranked woman rejected
woman rejected response
rejected response free
response free accepts
free accepts proposal
accepts proposal matched
proposal matched free
matched free compares
free compares current
compares current prefers
current prefers accepts
prefers accepts proposal
accepts proposal making
proposal making free
making free simply
free simply rejects
simply rejects proposal
rejects proposal leaving
proposal leaving free
leaving free set
free set matched
set matched pairs
matched pairs analyze
pairs analyze algorithm
analyze algorithm input
algorithm input presented
input presented figure
presented figure discuss
figure discuss properties
discuss properties stable
properties stable marriage
marriage algorithm theorem
algorithm theorem stable
theorem stable marriage
marriage algorithm terminates
algorithm terminates iterations
terminates iterations stable
iterations stable marriage
stable marriage output
marriage output proof
output proof algorithm
proof algorithm starts
algorithm starts men
starts men total
men total women
total women ranking
women ranking lists
ranking lists iteration
lists iteration makes
iteration makes proposal
makes proposal woman
proposal woman reduces
woman reduces total
reduces total women
total women men
women men propose
men propose future
propose future proposes
future proposes woman
proposes woman algorithm
woman algorithm iterations
algorithm iterations ann
iterations ann lea
bob proposed lea
proposed lea bob
lea bob jim
jim lea accepted
lea accepted tom
jim proposed lea
proposed lea jim
lea jim tom
jim lea rejected
lea rejected tom
jim proposed sue
proposed sue jim
jim sue accepted
sue accepted tom
tom proposed sue
proposed sue tom
sue tom jim
jim sue rejected
sue rejected tom
tom proposed lea
proposed lea tom
lea tom jim
jim lea replaced
lea replaced bob
replaced bob tom
bob tom ann
bob proposed ann
proposed ann bob
ann bob jim
bob jim ann
jim ann accepted
ann accepted tom
accepted tom figure
tom figure application
figure application stable
application stable marriage
marriage algorithm accepted
algorithm accepted proposal
accepted proposal boxed
proposal boxed cell
boxed cell rejected
cell rejected proposal
rejected proposal shown
proposal shown underlined
shown underlined cell
underlined cell prove
cell prove final
prove final matching
final matching stable
matching stable marriage
marriage matching algorithm
matching algorithm stops
algorithm stops men
stops men matched
men matched women
matched women thing
women thing proved
thing proved stability
proved stability contrary
stability contrary unstable
contrary unstable exists
unstable exists blocking
exists blocking pair
blocking pair woman
pair woman unmatched
woman unmatched persons
unmatched persons matched
persons matched proposes
matched proposes woman
proposes woman ranking
woman ranking decreasing
ranking decreasing preference
decreasing preference precedes
preference precedes proposed
precedes proposed iteration
proposed iteration refused
iteration refused proposal
refused proposal accepted
proposal accepted replaced
accepted replaced subsequent
replaced subsequent iteration
subsequent iteration higher
iteration higher ranked
higher ranked higher
ranked higher preference
higher preference rankings
preference rankings men
rankings men matched
men matched woman
matched woman iteration
woman iteration algorithm
iteration algorithm contradicts
algorithm contradicts assumption
contradicts assumption prefers
assumption prefers final
prefers final stable
final stable marriage
marriage algorithm notable
algorithm notable shortcoming
notable shortcoming gender
shortcoming gender neutral
gender neutral presented
neutral presented favors
presented favors men
favors men preferences
women preferences easily
preferences easily tracing
easily tracing algorithm
tracing algorithm instance
algorithm instance problem
instance problem woman
problem woman algorithm
woman algorithm yields
matching woman matching
woman matching men
matching men matched
men matched choices
matched choices case
choices case women
case women prove
women prove algorithm
stable matching optimal
matching optimal assigns
optimal assigns highest
assigns highest ranked
ranked woman stable
woman stable marriage
stable marriage gender
marriage gender bias
gender bias reversed
bias reversed eliminated
reversed eliminated reversing
eliminated reversing roles
reversing roles played
roles played men
played men women
men women algorithm
women algorithm making
algorithm making women
making women propose
women propose men
propose men proposals
men proposals important
proposals important corollary
important corollary fact
corollary fact stable
fact stable marriage
marriage algorithm yields
algorithm yields gender
yields gender optimal
gender optimal stable
stable matching easy
matching easy prove
easy prove woman
prove woman optimal
woman optimal matching
optimal matching unique
matching unique set
unique set participant
set participant preferences
participant preferences algorithm
preferences algorithm output
algorithm output free
output free men
free men women
men women make
women make proposals
make proposals data
proposals data structure
structure stack representing
stack representing set
representing set impact
set impact algorithm
impact algorithm outcome
algorithm outcome notion
outcome notion stable
notion stable matching
stable matching algorithm
matching algorithm discussed
algorithm discussed introduced
discussed introduced gale
introduced gale shapley
gale shapley paper
shapley paper titled
paper titled college
titled college admissions
college admissions stability
admissions stability marriage
stability marriage gal
marriage gal applications
gal applications mentioned
applications mentioned title
mentioned title important
title important stability
important stability matching
stability matching property
matching property desirable
property desirable variety
desirable variety applications
variety applications years
applications years united
years united states
united states matching
states matching medical
matching medical school
medical school graduates
school graduates hospitals
graduates hospitals residency
hospitals residency training
residency training history
training history application
history application depth
application depth discussion
depth discussion stable
discussion stable marriage
marriage problem extensions
problem extensions monograph
extensions monograph gusfield
monograph gusfield irwing
gusfield irwing gus
irwing gus exercises
gus exercises instance
exercises instance stable
marriage problem ranking
problem ranking matrix
ranking matrix marriage
matrix marriage matchings
marriage matchings stable
matchings stable unstable
stable unstable matchings
unstable matchings blocking
matchings blocking pair
blocking pair stable
pair stable matchings
stable matchings optimal
matchings optimal woman
optimal woman optimal
woman optimal assume
optimal assume greek
assume greek roman
greek roman letters
roman letters denote
letters denote men
denote men women
men women design
women design simple
simple algorithm checking
algorithm checking marriage
checking marriage matching
marriage matching stable
matching stable determine
stable determine efficiency
matching instance problem
instance problem apply
problem apply ing
apply ing stable
ing stable marriage
marriage algorithm men
algorithm men proposing
men proposing version
proposing version women
version women proposing
women proposing version
proposing version stable
version stable marriage
matching instance defined
instance defined ranking
defined ranking matrix
ranking matrix determine
matrix determine efficiency
marriage algorithm worst
case prove optimal
stable marriage set
marriage set unique
set unique true
unique true woman
true woman optimal
woman optimal stable
marriage matching prove
matching prove optimal
matching woman worst
woman worst partner
worst partner stable
partner stable marriage
marriage matching implement
matching implement stable
implement stable marriage
marriage algorithm section
algorithm section running
section running run
running run experiment
experiment ascertain average
ascertain average case
efficiency write college
write college admission
college admission problem
admission problem residents
problem residents hospitals
residents hospitals assign
hospitals assign ment
assign ment generalizes
ment generalizes stable
generalizes stable marriage
marriage problem college
problem college proposals
college proposals applicant
proposals applicant problem
applicant problem roommates
problem roommates related
roommates related difficult
related difficult stable
difficult stable marriage
marriage problem boys
problem boys pairs
boys pairs roommates
pairs roommates set
roommates set pairings
set pairings called
pairings called stable
called stable boys
stable boys roommates
boys roommates actual
roommates actual roommates
actual roommates gal
roommates gal instance
gal instance problem
instance problem stable
problem stable pairing
stable pairing summary
pairing summary iterative
summary iterative improvement
improvement technique involves
technique involves finding
involves finding solution
finding solution timization
solution timization problem
timization problem generating
problem generating sequence
generating sequence feasible
feasible solutions improving
solutions improving values
improving values problem
values problem objective
problem objective function
objective function subsequent
function subsequent lution
subsequent lution sequence
lution sequence typically
sequence typically involves
small localized previous
localized previous feasible
previous feasible solution
feasible solution improves
solution improves objective
optimal stops important
stops important problems
problems solved iterative
solved iterative improvement
improvement algorithms linear
algorithms linear programming
linear programming maximizing
programming maximizing network
maximizing network matching
network matching maximum
matching maximum vertices
maximum vertices graph
vertices graph simplex
graph simplex method
method classic method
classic method solving
method solving general
solving general linear
programming problem works
problem works generating
works generating sequence
generating sequence adjacent
extreme points problem
feasible region improving
region improving values
improving values objective
objective function maximum
function maximum problem
maximum problem asks
asks maximum network
maximum network weighted
network weighted directed
weighted directed graph
directed graph source
graph source sink
source sink ford
sink ford fulkerson
fulkerson method classic
method classic template
classic template solving
template solving maximumflow
solving maximumflow problem
maximumflow problem iterative
problem iterative improvement
iterative improvement approach
improvement approach shortestaugmenting
approach shortestaugmenting path
shortestaugmenting path method
path method implements
method implements idea
implements idea labeling
idea labeling network
labeling network vertices
network vertices breadth
vertices breadth manner
breadth manner ford
manner ford fulkerson
fulkerson method finds
method finds minimum
finds minimum cut
cut network maximum
network maximum cardinality
matching largest subset
largest subset edges
subset edges graph
graph edges vertex
edges vertex bipartite
vertex bipartite graph
bipartite graph sequence
graph sequence augmentations
sequence augmentations previously
augmentations previously obtained
previously obtained matchings
obtained matchings stable
matchings stable marriage
problem stable matching
stable matching elements
matching elements nelement
elements nelement sets
nelement sets based
sets based matching
based matching preferences
matching preferences problem
preferences problem solution
problem solution gale
solution gale shapley
gale shapley algorithm
size worst case
input size input
algorithm design technique
checking algorithm computing
methods algorithm analysis
salesman problem tsp
cities visits city
explicitly implicitly combinatorial
problem closest pair
irish mathematician sir
mathematician sir william
problem design algorithm
lists graph figure
applications connectivity acyclicity
defined sequence adjacent
important properties graphs
tree vertices adjacent
backtracking bound sections
sort section application
final positions pseudocode
positions pseudocode algorithm
input worst case
selection sort section
arrays key comparisons
linked lists efficiency
lists efficiency array
efficiency array version
depth forest figure
graph tree edges
traversal stack subscript
adjacency matrix efficiency
vertex unvisited vertices
combinations subsets set
salesman problem exhaustive
problem exhaustive permutations
subsets set items
comparisons successful unsuccessful
smallest element entire
line points coordinate
design algorithm solving
algorithm solving puzzle
small instances problems
algorithm solves linear
problem determine efficiency
efficiency class design
takes times longer
trees true false
computing polynomial anxn
binary representation compute
solving optimization problems
algorithm problem called
design algorithm efficiency
traverse graph depth
points triangle vertices
triangle vertices points
people assigned execute
assigned execute jobs
execute jobs person
jobs person job
job person assigned
assigned job assigned
job assigned person
assigned person cost
person cost accrue
cost accrue ith
accrue ith person
ith person assigned
assigned job quantity
job quantity pair
quantity pair problem
total cost assignment
line divides plane
divides plane half
plane half planes
half planes points
theorem linear programming
programming problem nonempty
problem nonempty bounded
nonempty bounded feasible
solves linear programming
representing coordinates villages
coordinates villages located
villages located straight
located straight road
average distance villages
distance villages office
large positive integer
bipartite vertices colored
colored colors edge
colors edge vertices
edge vertices colored
colored colors graphs
vertices bfs traversal
bipartite graph design
solution instance figure
data structure stack
based algorithm finding
algorithm finding minimum
connectivity acyclicity graph
problems polynomial algorithm
shortest hamiltonian circuit
partition problem positive
problem positive integers
partition disjoint subsets
disjoint subsets sum
graph vertices adjacent
traveling salesman knapsack
circuit graph hamiltonian
method important algorithm
basic operation key
operation key comparison
faster algorithm run
successive elements key
output index element
key comparisons sequential
case efficiency considerably
element row matrix
discussed section algorithm
function bits binary
sorted algorithm problem
tant problems sorting
version arrays size
sorting methods sort
greater equal key
text zeros text
problem determine effi
ciency class design
united states word
points pairs points
pair points min
algorithm decrease algorithm
important people important
set definition set
figure formal definition
convex set convex
ations innermost loop
total weight total
fortunately efficient algorithm
vertex stack vertex
vertex starts vertex
checking connectivity checking
vertex reached vertex
graph bipartite graph
important properties graph
binary tree nodes
efficiency class algorithm
determine efficiency class
vertex connected vertex
ideas gleaming jeweler
gleaming jeweler velvet
jeweler velvet calculus
velvet calculus algorithm
calculus algorithm calculus
algorithm calculus rich
calculus rich body
rich body mathematical
body mathematical analysis
mathematical analysis gave
analysis gave rise
gave rise modern
rise modern science
modern science algorithm
science algorithm modern
algorithm modern world
modern world david
world david berlinski
david berlinski advent
berlinski advent algorithm
advent algorithm study
algorithm study algorithms
study algorithms professional
algorithms professional practical
professional practical theoretical
practical theoretical reasons
theoretical reasons study
reasons study algo
study algo rithms
algo rithms practical
rithms practical standpoint
practical standpoint standard
standpoint standard set
standard set important
set important algorithms
algorithms areas computing
areas computing addition
computing addition design
addition design algorithms
design algorithms analyze
algorithms analyze efficiency
analyze efficiency theoretical
efficiency theoretical stand
theoretical stand study
stand study algorithms
algorithms called algorithmics
called algorithmics recognized
algorithmics recognized cornerstone
recognized cornerstone science
cornerstone science david
science david harel
david harel delightful
harel delightful pointedly
delightful pointedly titled
pointedly titled algorithmics
titled algorithmics spirit
algorithmics spirit computing
spirit computing algorithmics
computing algorithmics science
algorithmics science core
science core science
core science fairness
science fairness relevant
fairness relevant science
relevant science business
science business technology
business technology har
technology har student
har student computing
student computing related
computing related compelling
related compelling reasons
compelling reasons study
reasons study algorithms
study algorithms bluntly
algorithms bluntly programs
bluntly programs algorithms
programs algorithms applications
algorithms applications indispensable
applications indispensable aspects
indispensable aspects professional
aspects professional personal
professional personal lives
personal lives studying
lives studying algorithms
studying algorithms necessity
algorithms necessity people
necessity people reason
people reason studying
reason studying algorithms
studying algorithms usefulness
algorithms usefulness developing
usefulness developing alytical
developing alytical skills
alytical skills algorithms
skills algorithms special
algorithms special kinds
special kinds solutions
kinds solutions problems
solutions problems answers
problems answers precisely
answers precisely defined
precisely defined procedures
defined procedures answers
procedures answers specific
answers specific algorithm
specific algorithm design
design techniques interpreted
techniques interpreted problem
interpreted problem solving
problem solving strategies
solving strategies involved
strategies involved precision
involved precision inherently
precision inherently imposed
inherently imposed algorithmic
imposed algorithmic thinking
algorithmic thinking limits
thinking limits kinds
limits kinds problems
kinds problems solved
solved algorithm living
algorithm living happy
living happy life
happy life rich
life rich famous
rich famous required
famous required precision
required precision important
precision important educational
important educational advantage
educational advantage donald
advantage donald knuth
donald knuth prominent
knuth prominent scientists
prominent scientists history
scientists history algorithmics
history algorithmics person
algorithmics person trained
person trained science
trained science deal
science deal algorithms
deal algorithms construct
algorithms construct manipulate
construct manipulate understand
manipulate understand analyze
understand analyze knowledge
analyze knowledge preparation
knowledge preparation writing
preparation writing good
writing good programs
good programs general
programs general purpose
general purpose mental
purpose mental tool
mental tool definite
tool definite aid
definite aid understanding
aid understanding subjects
understanding subjects chemistry
subjects chemistry linguistics
chemistry linguistics music
linguistics music reason
music reason understood
reason understood person
understood person understand
understand teaching person
teaching person understand
understand teaching expressing
teaching expressing algorithm
expressing algorithm formalize
algorithm formalize things
formalize things algorithms
things algorithms leads
algorithms leads deeper
leads deeper understanding
deeper understanding simply
understanding simply comprehend
simply comprehend things
comprehend things traditional
things traditional knu
traditional knu notion
knu notion algorithm
algorithm section examples
examples algorithms problem
algorithms problem computing
common divisor reasons
divisor reasons choice
reasons choice deals
choice deals problem
deals problem familiar
problem familiar erybody
familiar erybody middle
erybody middle school
middle school days
school days makes
days makes important
makes important problem
important problem solved
solved algorithms typically
algorithms typically algorithms
typically algorithms differ
algorithms differ idea
differ idea sophistication
idea sophistication efficiency
sophistication efficiency algorithms
efficiency algorithms deserves
algorithms deserves introduced
deserves introduced age
introduced age peared
age peared euclid
peared euclid famous
euclid famous treatise
famous treatise years
treatise years ago
years ago enduring
ago enduring power
enduring power importance
power importance finally
importance finally investigation
finally investigation algorithms
investigation algorithms leads
algorithms leads general
leads general observations
general observations important
observations important properties
important properties algo
properties algo rithms
rithms general section
general section deals
section deals algorithmic
deals algorithmic problem
problem solving discuss
solving discuss important
discuss important issues
important issues related
issues related design
related design analysis
analysis algorithms aspects
algorithms aspects algorithmic
aspects algorithmic problem
problem solving range
solving range analysis
range analysis problem
analysis problem means
problem means expressing
means expressing algorithm
expressing algorithm establishing
algorithm establishing correctness
establishing correctness analyzing
correctness analyzing efficiency
analyzing efficiency section
efficiency section magic
section magic recipe
magic recipe designing
recipe designing algorithm
designing algorithm arbitrary
algorithm arbitrary problem
arbitrary problem established
problem established fact
established fact recipe
fact recipe material
recipe material section
material section organizing
section organizing designing
organizing designing analyzing
designing analyzing algorithms
algorithms section devoted
section devoted problem
devoted problem types
problem types proven
types proven partic
proven partic ularly
ularly important study
important study algorithms
study algorithms application
algorithms application fact
application fact textbooks
fact textbooks sed
textbooks sed organized
sed organized problem
organized problem types
problem types hold
types hold view
hold view shared
view shared organization
shared organization based
organization based algorithm
based algorithm design
design techniques superior
techniques superior case
superior case important
case important aware
important aware princi
aware princi pal
princi pal problem
pal problem types
problem types commonly
types commonly encountered
commonly encountered problem
encountered problem types
problem types real
types real life
life applications demonstrate
applications demonstrate algorithm
demonstrate algorithm design
design techniques section
techniques section review
section review fundamental
review fundamental data
data structures meant
structures meant reference
meant reference deliberate
reference deliberate discussion
deliberate discussion topic
discussion topic detailed
topic detailed exposition
detailed exposition wealth
exposition wealth good
wealth good books
good books subject
books subject tailored
subject tailored programming
tailored programming language
programming language algorithm
language algorithm universally
algorithm universally agreed
universally agreed wording
agreed wording notion
wording notion general
notion general agreement
general agreement concept
agreement concept means
concept means algorithm
means algorithm sequence
algorithm sequence unambiguous
sequence unambiguous instructions
unambiguous instructions solving
solving problem obtaining
problem obtaining required
obtaining required output
required output legitimate
output legitimate input
input finite definition
finite definition illustrated
definition illustrated simple
illustrated simple diagram
simple diagram figure
diagram figure reference
figure reference instructions
reference instructions definition
instructions definition implies
definition implies thing
implies thing capable
thing capable understanding
capable understanding instructions
understanding instructions keeping
instructions keeping mind
keeping mind electronic
mind electronic invented
electronic invented word
invented word meant
word meant human
meant human involved
human involved ing
involved ing numeric
ing numeric calculations
numeric calculations nowadays
calculations nowadays computers
nowadays computers ubiquitous
computers ubiquitous electronic
ubiquitous electronic devices
electronic devices indispensable
devices indispensable majority
indispensable majority algorithms
majority algorithms intended
algorithms intended eventual
intended eventual implementation
eventual implementation notion
implementation notion algorithm
notion algorithm assumption
algorithm assumption examples
assumption examples illustrating
examples illustrating notion
illustrating notion algorithm
algorithm section methods
section methods solving
methods solving problem
solving problem computing
divisor integers examples
integers examples illustrate
examples illustrate important
illustrate important points
important points nonambiguity
points nonambiguity requirement
nonambiguity requirement algorithm
requirement algorithm promised
algorithm promised range
promised range inputs
range inputs algorithm
inputs algorithm works
algorithm works carefully
works carefully algorithm
carefully algorithm represented
algorithm represented ways
represented ways algorithms
ways algorithms solving
problem algorithm input
algorithm input output
input output figure
output figure notion
figure notion algorithm
notion algorithm algorithms
algorithm algorithms problem
algorithms problem based
problem based ideas
based ideas solve
ideas solve problem
solve problem dramatically
problem dramatically speeds
dramatically speeds recall
speeds recall greatest
recall greatest common
common divisor nonnegative
divisor nonnegative integers
nonnegative integers denoted
integers denoted gcd
denoted gcd defined
gcd defined largest
defined largest integer
integer divides evenly
divides evenly remainder
evenly remainder euclid
remainder euclid alexandria
euclid alexandria century
alexandria century outlined
century outlined algorithm
outlined algorithm solving
solving problem volumes
problem volumes elements
volumes elements famous
elements famous systematic
famous systematic exposition
systematic exposition geometry
exposition geometry modern
geometry modern terms
modern terms euclid
terms euclid algorithm
euclid algorithm based
algorithm based applying
based applying repeatedly
applying repeatedly equality
repeatedly equality gcd
gcd mod remainder
remainder division mod
division mod equal
mod equal gcd
equal gcd greatest
gcd greatest common
common divisor initial
divisor initial gcd
initial gcd computed
computed gcd impressed
gcd impressed algorithm
impressed algorithm finding
common divisor larger
divisor larger numbers
larger numbers problem
numbers problem section
section exercises structured
exercises structured description
structured description algorithm
description algorithm euclid
computing gcd proceed
gcd proceed assign
proceed assign remainder
assign remainder assign
remainder assign alternatively
assign alternatively express
alternatively express algorithm
express algorithm pseudocode
pseudocode algorithm euclid
algorithm euclid computes
euclid computes gcd
computes gcd euclid
algorithm input nonnegative
input nonnegative integers
nonnegative integers output
integers output greatest
output greatest common
common divisor mod
divisor mod euclid
mod euclid algorithm
euclid algorithm eventually
algorithm eventually observation
eventually observation integer
observation integer pair
integer pair smaller
pair smaller iteration
smaller iteration negative
iteration negative iteration
negative iteration mod
iteration mod smaller
mod smaller integer
smaller integer eventually
integer eventually algorithm
eventually algorithm stops
algorithm stops problems
stops problems algorithms
problems algorithms computing
common divisor methods
divisor methods problem
methods problem simply
problem simply based
simply based definition
based definition greatest
definition greatest common
common divisor largest
divisor largest integer
integer divides numbers
divides numbers evenly
numbers evenly common
evenly common divisor
common divisor greater
divisor greater smaller
greater smaller numbers
smaller numbers denote
numbers denote min
denote min checking
min checking divides
checking divides simply
divides simply decrease
simply decrease process
decrease process eventually
process eventually numbers
eventually numbers algorithm
numbers algorithm reaches
algorithm reaches stops
reaches stops consecutive
stops consecutive integer
computing gcd assign
gcd assign min
assign min remainder
min remainder division
remainder division proceed
division proceed decrease
proceed decrease euclid
algorithm presented correctly
presented correctly input
correctly input numbers
input numbers illustrates
numbers illustrates important
illustrates important set
important set algorithm
set algorithm inputs
algorithm inputs explicitly
inputs explicitly carefully
explicitly carefully procedure
carefully procedure finding
procedure finding greatest
common divisor familiar
divisor familiar middle
familiar middle school
computing gcd prime
gcd prime factors
prime factors common
factors common factors
common factors prime
factors prime expansions
prime expansions common
expansions common factor
common factor occurring
factor occurring times
occurring times repeated
times repeated min
repeated min times
min times compute
times compute product
product common factors
common factors greatest
factors greatest common
common divisor numbers
divisor numbers gcd
numbers gcd nostalgia
gcd nostalgia days
nostalgia days learned
days learned method
learned method noting
method noting procedure
noting procedure complex
procedure complex slower
complex slower euclid
slower euclid algorithm
algorithm discuss methods
discuss methods finding
methods finding comparing
finding comparing running
comparing running times
times algorithms chapter
algorithms chapter addition
chapter addition inferior
addition inferior efficiency
inferior efficiency middleschool
efficiency middleschool procedure
middleschool procedure qualify
procedure qualify presented
qualify presented legitimate
presented legitimate algorithm
legitimate algorithm prime
algorithm prime factorization
prime factorization steps
factorization steps defined
steps defined unambiguously
defined unambiguously require
unambiguously require prime
require prime numbers
prime numbers strongly
numbers strongly middle
strongly middle school
middle school math
school math teacher
math teacher unnecessary
teacher unnecessary nitpicking
unnecessary nitpicking issue
nitpicking issue resolved
issue resolved write
resolved write implementing
write implementing procedure
implementing procedure incidentally
procedure incidentally defined
incidentally defined ambiguity
defined ambiguity easier
ambiguity easier rectify
easier rectify factorization
rectify factorization steps
factorization steps common
steps common elements
sorted lists simple
lists simple algorithm
simple algorithm generating
algorithm generating consecutive
generating consecutive primes
consecutive primes exceeding
primes exceeding integer
exceeding integer invented
integer invented ancient
invented ancient greece
ancient greece sieve
greece sieve eratosthenes
sieve eratosthenes algorithm
eratosthenes algorithm starts
algorithm starts initializing
starts initializing prime
initializing prime candidates
prime candidates consecutive
candidates consecutive integers
consecutive integers iteration
integers iteration algorithm
iteration algorithm eliminates
algorithm eliminates multiples
eliminates multiples moves
multiples moves item
moves item eliminates
item eliminates multiples
eliminates multiples straightforward
multiples straightforward version
straightforward version overhead
version overhead numbers
overhead numbers eliminated
numbers eliminated needed
eliminated needed multiples
needed multiples eliminated
multiples eliminated previous
eliminated previous remaining
previous remaining algorithm
remaining algorithm continues
algorithm continues fashion
continues fashion numbers
fashion numbers eliminated
numbers eliminated remaining
eliminated remaining integers
remaining integers primes
integers primes needed
primes needed application
needed application algorithm
application algorithm finding
algorithm finding primes
finding primes exceeding
primes exceeding passes
exceeding passes needed
passes needed eliminate
needed eliminate num
eliminate num bers
num bers eliminated
bers eliminated previous
eliminated previous iterations
previous iterations algorithm
iterations algorithm remaining
algorithm remaining numbers
remaining numbers consecutive
numbers consecutive primes
consecutive primes equal
primes equal largest
equal largest multiples
largest multiples make
multiples make iterations
make iterations algorithm
iterations algorithm multiples
algorithm multiples eliminated
multiples eliminated current
eliminated current multiple
current multiple smaller
multiple smaller multiples
smaller multiples eliminated
multiples eliminated earlier
eliminated earlier passes
earlier passes observation
passes observation helps
observation helps eliminating
helps eliminating greater
eliminating greater exceed
greater exceed rounded
exceed rounded denoted
rounded denoted called
denoted called floor
called floor function
floor function assume
function assume pseudocode
assume pseudocode function
pseudocode function computing
function computing alternatively
computing alternatively inequality
alternatively inequality loop
inequality loop continuation
loop continuation condition
continuation condition algorithm
condition algorithm sieve
algorithm sieve implements
sieve implements sieve
implements sieve eratosthenes
sieve eratosthenes input
eratosthenes input positive
integer output array
output array prime
array prime numbers
prime numbers equal
numbers equal ndo
equal ndo pseudocode
ndo pseudocode eliminated
pseudocode eliminated previous
eliminated previous passes
previous passes element
passes element eliminated
element eliminated remaining
eliminated remaining elements
elements array primes
array primes incorporate
primes incorporate sieve
incorporate sieve eratosthenes
sieve eratosthenes middle
eratosthenes middle school
school procedure legitimate
procedure legitimate algorithm
legitimate algorithm computing
positive integers special
integers special exercised
special exercised input
exercised input numbers
input numbers equal
numbers equal mathematicians
equal mathematicians prime
mathematicians prime strictly
prime strictly speaking
strictly speaking method
speaking method inputs
method inputs leave
inputs leave section
leave section comment
section comment examples
comment examples considered
examples considered section
considered section majority
section majority algorithms
majority algorithms today
algorithms today implemented
today implemented programs
implemented programs deal
programs deal mathematical
deal mathematical problems
mathematical problems algorithms
problems algorithms helping
algorithms helping daily
helping daily routines
daily routines professional
routines professional personal
professional personal ubiquity
personal ubiquity algorithms
ubiquity algorithms today
algorithms today world
today world resolve
world resolve fascinating
resolve fascinating engines
fascinating engines information
engines information age
information age exercises
age exercises research
exercises research khorezmi
research khorezmi khwarizmi
khorezmi khwarizmi word
khwarizmi word algorithm
word algorithm derived
algorithm derived origins
derived origins words
origins words algorithm
words algorithm algebra
algorithm algebra common
algebra common official
common official purpose
official purpose patent
purpose patent promotion
patent promotion arts
promotion arts algorithms
arts algorithms patentable
algorithms patentable country
patentable country write
country write driving
write driving directions
driving directions school
directions school home
school home precision
home precision required
required algorithm description
algorithm description write
description write recipe
write recipe cooking
recipe cooking favorite
cooking favorite dish
favorite dish precision
dish precision required
required algorithm design
algorithm computing positive
positive integer assignment
integer assignment comparison
algorithm basic arithmetical
basic arithmetical operations
arithmetical operations design
operations design algorithm
design algorithm common
algorithm common elements
sorted lists numbers
lists numbers lists
numbers lists output
lists output maximum
output maximum comparisons
maximum comparisons algorithm
comparisons algorithm makes
algorithm makes lengths
makes lengths lists
lengths lists gcd
lists gcd applying
gcd applying euclid
applying euclid algorithm
euclid algorithm estimate
algorithm estimate times
times faster gcd
faster gcd euclid
compared algorithm based
algorithm based checking
based checking secutive
checking secutive integers
secutive integers min
integers min gcd
min gcd prove
gcd prove equality
prove equality gcd
gcd mod pair
mod pair positive
pair positive integers
positive integers euclid
euclid algorithm pair
algorithm pair integers
pair integers smaller
integers smaller maximum
smaller maximum times
maximum times algorithm
times algorithm execution
algorithm execution input
execution input minimum
input minimum divisions
minimum divisions euclid
algorithm inputs maximum
inputs maximum divisions
maximum divisions euclid
algorithm inputs euclid
algorithm presented euclid
presented euclid treatise
euclid treatise subtractions
treatise subtractions integer
subtractions integer divisions
integer divisions write
divisions write pseudocode
write pseudocode version
pseudocode version euclid
version euclid algorithm
algorithm euclid game
euclid game bog
game bog starts
bog starts unequal
starts unequal positive
unequal positive integers
positive integers board
integers board players
board players player
players player write
player write board
write board positive
board positive equal
positive equal difference
equal difference numbers
difference numbers board
numbers board numbers
board numbers board
numbers board player
board player loses
player loses game
loses game choose
game choose game
choose game extended
game extended euclid
euclid algorithm determines
algorithm determines greatest
determines greatest common
integers necessarily positive
necessarily positive description
positive description extended
description extended euclid
euclid algorithm knui
algorithm knui implement
knui implement language
implement language choice
language choice modify
choice modify integer
modify integer solutions
integer solutions diophantine
solutions diophantine equation
diophantine equation set
equation set integer
set integer coefficients
integer coefficients locker
coefficients locker doors
locker doors lockers
doors lockers hallway
lockers hallway numbered
hallway numbered sequentially
numbered sequentially initially
sequentially initially locker
initially locker doors
doors closed make
closed make passes
make passes lockers
passes lockers starting
lockers starting locker
starting locker ith
locker ith toggle
ith toggle door
toggle door ith
door ith locker
ith locker door
locker door closed
door closed locker
closed locker doors
doors closed fundamentals
closed fundamentals algorithmic
fundamentals algorithmic problem
problem solving reiterating
solving reiterating important
reiterating important introduction
important introduction chapter
introduction chapter algorithms
chapter algorithms procedural
algorithms procedural solutions
procedural solutions problems
problems solutions answers
solutions answers specific
answers specific instructions
specific instructions answers
instructions answers emphasis
answers emphasis precisely
emphasis precisely defined
precisely defined constructive
defined constructive procedures
constructive procedures makes
procedures makes science
makes science distinct
science distinct disciplines
distinct disciplines distinguishes
disciplines distinguishes oretical
distinguishes oretical mathematics
oretical mathematics practitioners
mathematics practitioners typically
practitioners typically satisfied
typically satisfied proving
satisfied proving existence
proving existence solution
existence solution problem
solution problem possibly
problem possibly investigating
possibly investigating solution
investigating solution properties
solution properties briefly
properties briefly discuss
briefly discuss sequence
discuss sequence steps
sequence steps typically
steps typically designing
typically designing analyzing
designing analyzing algorithm
analyzing algorithm figure
algorithm figure understanding
figure understanding problem
understanding problem practical
problem practical perspective
practical perspective thing
perspective thing designing
thing designing algorithm
designing algorithm understand
algorithm understand completely
understand completely problem
completely problem read
problem read problem
read problem description
problem description carefully
description carefully questions
carefully questions doubts
questions doubts problem
doubts problem small
problem small examples
small examples special
examples special cases
special cases questions
cases questions needed
questions needed types
needed types problems
types problems arise
problems arise computing
arise computing applications
computing applications review
applications review section
review section problem
section problem algorithm
algorithm solving helps
solving helps understand
helps understand algorithm
understand algorithm works
algorithm works strengths
works strengths weaknesses
strengths weaknesses choose
weaknesses choose algorithms
choose algorithms readily
algorithms readily algorithm
readily algorithm design
algorithm design sequence
design sequence steps
sequence steps outlined
steps outlined section
outlined section exciting
section exciting easy
exciting easy task
easy task input
task input algorithm
algorithm solves important
solves important set
important set instances
set instances algorithm
instances algorithm recall
algorithm recall variations
recall variations set
variations set instances
set instances greatest
instances greatest common
common divisor algorithms
divisor algorithms discussed
discussed previous section
previous section algorithm
section algorithm correctly
algorithm correctly majority
correctly majority inputs
majority inputs boundary
inputs boundary algorithm
boundary algorithm works
algorithm works correctly
works correctly legitimate
correctly legitimate inputs
legitimate inputs skimp
inputs skimp algorithmic
skimp algorithmic problem
problem solving process
solving process run
process run unnecessary
run unnecessary rework
unnecessary rework ascertaining
rework ascertaining capabilities
ascertaining capabilities computational
computational device completely
device completely understand
completely understand problem
understand problem ascertain
problem ascertain capabilities
ascertain capabilities computational
computational device algorithm
device algorithm intended
algorithm intended vast
intended vast majority
vast majority understand
majority understand problem
understand problem computational
problem computational means
computational means exact
means exact approximate
exact approximate solving
approximate solving algorithm
solving algorithm design
technique design algorithm
design algorithm prove
prove correctness analyze
correctness analyze algorithm
analyze algorithm code
algorithm code algorithm
code algorithm figure
figure algorithm design
algorithm design analysis
design analysis process
analysis process algorithms
process algorithms today
algorithms today destined
today destined programmed
destined programmed closely
programmed closely resembling
closely resembling von
resembling von neumann
von neumann machine
neumann machine architecture
machine architecture outlined
architecture outlined prominent
outlined prominent hungarian
prominent hungarian american
american mathematician john
mathematician john von
john von neumann
von neumann collaboration
neumann collaboration burks
collaboration burks goldstine
burks goldstine essence
goldstine essence architecture
essence architecture captured
architecture captured called
captured called random
called random access
random access machine
access machine ram
machine ram central
ram central assumption
central assumption instructions
assumption instructions executed
instructions executed operation
executed operation algorithms
operation algorithms designed
designed executed machines
executed machines called
machines called sequential
called sequential algorithms
sequential algorithms central
algorithms central assumption
central assumption ram
assumption ram model
ram model hold
model hold newer
hold newer computers
newer computers execute
computers execute operations
execute operations concurrently
operations concurrently parallel
concurrently parallel algorithms
parallel algorithms advantage
algorithms advantage capability
advantage capability called
capability called parallel
called parallel algorithms
parallel algorithms studying
algorithms studying classic
studying classic techniques
classic techniques design
techniques design analysis
analysis algorithms ram
algorithms ram model
ram model remains
model remains cornerstone
remains cornerstone algorithmics
cornerstone algorithmics foreseeable
algorithmics foreseeable future
foreseeable future speed
future speed memory
speed memory disposal
memory disposal designing
disposal designing algorithm
designing algorithm scientific
algorithm scientific qualified
scientific qualified section
qualified section scientists
section scientists study
scientists study algorithms
study algorithms terms
algorithms terms independent
terms independent specification
independent specification parameters
specification parameters designing
parameters designing algorithm
designing algorithm practical
algorithm practical tool
practical tool problem
tool problem solve
problem solve computers
solve computers today
computers today unimaginably
today unimaginably fast
unimaginably fast situations
fast situations task
situations task important
task important problems
important problems complex
problems complex nature
complex nature process
nature process huge
process huge volumes
huge volumes data
volumes data deal
data deal applications
deal applications critical
applications critical situations
critical situations imperative
situations imperative aware
imperative aware speed
aware speed memory
speed memory choosing
memory choosing exact
choosing exact approximate
exact approximate problem
approximate problem solving
problem solving principal
solving principal decision
principal decision choose
decision choose solving
choose solving problem
problem solving approximately
solving approximately case
approximately case algorithm
algorithm called exact
called exact algorithm
exact algorithm case
algorithm called approximation
called approximation algorithm
approximation algorithm opt
algorithm opt approximation
opt approximation algorithm
approximation algorithm important
algorithm important problems
important problems simply
problems simply solved
simply solved instances
solved instances examples
instances examples extracting
examples extracting square
extracting square roots
square roots solving
roots solving nonlinear
nonlinear equations evaluating
equations evaluating definite
evaluating definite integrals
definite integrals algorithms
integrals algorithms solving
solving problem unacceptably
problem unacceptably problem
unacceptably problem intrinsic
problem intrinsic complexity
intrinsic complexity problems
complexity problems involving
problems involving large
involving large choices
large choices examples
choices examples difficult
examples difficult problems
difficult problems chapters
problems chapters approximation
chapters approximation algorithm
approximation algorithm sophisticated
algorithm sophisticated algorithm
sophisticated algorithm solves
solves problem algorithm
problem algorithm design
design techniques components
techniques components algorithmic
components algorithmic problem
problem solving design
solving design algorithm
solve problem main
problem main seeks
main seeks teaching
seeks teaching general
teaching general design
design techniques algorithm
techniques algorithm design
technique algorithm design
design technique strategy
technique strategy paradigm
strategy paradigm general
paradigm general approach
general approach solving
approach solving problems
areas computing table
computing table contents
table contents majority
contents majority chapters
majority chapters devoted
chapters devoted individual
devoted individual design
individual design techniques
design techniques distill
techniques distill key
distill key ideas
key ideas proven
ideas proven designing
proven designing algorithms
designing algorithms learning
algorithms learning techniques
learning techniques utmost
techniques utmost importance
utmost importance reasons
importance reasons guidance
reasons guidance designing
guidance designing algorithms
designing algorithms problems
algorithms problems satisfactory
problems satisfactory algorithm
satisfactory algorithm language
algorithm language famous
language famous proverb
famous proverb learning
proverb learning techniques
learning techniques akin
techniques akin learning
akin learning fish
learning fish opposed
fish opposed fish
opposed fish caught
fish caught true
caught true general
true general techniques
general techniques necessarily
techniques necessarily applicable
necessarily applicable problem
applicable problem encounter
problem encounter constitute
encounter constitute powerful
constitute powerful collection
powerful collection tools
collection tools handy
tools handy studies
handy studies algorithms
studies algorithms cornerstone
algorithms cornerstone science
cornerstone science interested
science interested classifying
interested classifying principal
classifying principal subject
principal subject science
subject science exception
science exception algorithm
exception algorithm design
design techniques make
techniques make classify
make classify algorithms
classify algorithms underlying
underlying design idea
design idea natural
idea natural categorize
natural categorize study
categorize study algorithms
study algorithms designing
designing algorithm data
algorithm data structures
structures algorithm design
design techniques powerful
techniques powerful set
powerful set general
set general proaches
general proaches algorithmic
proaches algorithmic problem
problem solving designing
solving designing algorithm
designing algorithm problem
algorithm problem challenging
problem challenging task
challenging task design
task design techniques
design techniques simply
techniques simply inapplicable
simply inapplicable problem
inapplicable problem techniques
problem techniques combined
techniques combined algorithms
combined algorithms hard
algorithms hard pinpoint
hard pinpoint applications
pinpoint applications design
applications design techniques
design technique plicable
technique plicable algorithm
plicable algorithm requires
algorithm requires nontrivial
requires nontrivial ingenuity
nontrivial ingenuity algorithm
ingenuity algorithm designer
algorithm designer practice
designer practice tasks
practice tasks choosing
tasks choosing general
choosing general techniques
general techniques applying
techniques applying easier
applying easier rarely
easier rarely easy
rarely easy pay
easy pay attention
pay attention choosing
attention choosing data
choosing data structures
data structures appro
structures appro priate
appro priate operations
priate operations performed
operations performed algorithm
performed algorithm sieve
sieve eratosthenes introduced
eratosthenes introduced section
introduced section run
section run longer
run longer linked
longer linked array
linked array implementation
array implementation gorithm
implementation gorithm design
design techniques discussed
techniques discussed chapters
discussed chapters intimately
chapters intimately structuring
intimately structuring restructuring
structuring restructuring data
restructuring data problem
data problem instance
problem instance years
instance years ago
years ago influential
ago influential textbook
influential textbook proclaimed
textbook proclaimed fundamental
proclaimed fundamental importance
fundamental importance algo
importance algo rithms
algo rithms data
rithms data structures
data structures programming
structures programming title
programming title algorithms
title algorithms data
algorithms data structures
data structures programs
structures programs wir
programs wir world
wir world oriented
world oriented pro
oriented pro gramming
pro gramming data
gramming data structures
data structures crucially
structures crucially important
crucially important design
important design analysis
analysis algorithms review
algorithms review basic
data structures section
structures section methods
section methods algorithm
methods algorithm designed
designed algorithm fashion
algorithm fashion section
fashion section euclid
section euclid algorithm
euclid algorithm words
algorithm words free
words free pseudocode
free pseudocode options
pseudocode options widely
options widely nowadays
widely nowadays algorithms
nowadays algorithms natural
natural language obvious
language obvious appeal
obvious appeal inherent
appeal inherent ambi
inherent ambi guity
ambi guity natural
guity natural language
natural language makes
language makes succinct
makes succinct description
succinct description algorithms
description algorithms surprisingly
algorithms surprisingly difficult
surprisingly difficult important
difficult important skill
important skill strive
skill strive process
strive process learning
process learning algorithms
learning algorithms pseudocode
algorithms pseudocode mixture
pseudocode mixture natural
mixture natural language
natural language programming
language programming language
programming language constructs
language constructs pseudocode
constructs pseudocode precise
pseudocode precise natural
precise natural language
natural language usage
language usage yields
usage yields succinct
yields succinct algorithm
succinct algorithm descriptions
algorithm descriptions surprisingly
descriptions surprisingly scientists
surprisingly scientists agreed
scientists agreed single
agreed single pseudocode
single pseudocode leaving
pseudocode leaving textbook
leaving textbook authors
textbook authors design
authors design dialects
design dialects fortunately
dialects fortunately dialects
fortunately dialects familiar
dialects familiar modern
familiar modern programming
modern programming language
programming language understand
language understand dialect
understand dialect selected
dialect selected minimal
selected minimal difficulty
minimal difficulty reader
difficulty reader sake
reader sake simplicity
sake simplicity omit
simplicity omit declarations
omit declarations variables
declarations variables indentation
variables indentation scope
indentation scope statements
scope statements previous
statements previous section
previous section arrow
section arrow assignment
arrow assignment operation
assignment operation slashes
operation slashes comments
slashes comments earlier
comments earlier days
earlier days computing
days computing dominant
computing dominant vehicle
dominant vehicle algorithms
vehicle algorithms flowchart
algorithms flowchart method
flowchart method expressing
method expressing algorithm
expressing algorithm collection
algorithm collection connected
collection connected geometric
connected geometric shapes
geometric shapes descriptions
shapes descriptions algorithm
descriptions algorithm steps
algorithm steps representation
steps representation technique
representation technique proved
technique proved inconvenient
proved inconvenient simple
inconvenient simple algorithms
simple algorithms nowadays
algorithms nowadays algorithm
nowadays algorithm books
algorithm books state
books state art
state art computing
art computing reached
computing reached algorithm
reached algorithm description
algorithm description natural
description natural language
language pseudocode fed
pseudocode fed electronic
fed electronic directly
electronic directly converted
directly converted written
converted written language
written language algorithm
language algorithm preferable
algorithm preferable algorithm
preferable algorithm implementation
algorithm implementation proving
implementation proving algorithm
proving algorithm correctness
correctness algorithm prove
correctness prove algorithm
algorithm yields required
yields required result
required result legitimate
result legitimate input
input finite correctness
finite correctness euclid
correctness euclid algorithm
common divisor stems
divisor stems correctness
stems correctness equality
correctness equality gcd
gcd mod proof
mod proof problem
proof problem exercises
problem exercises simple
exercises simple observation
simple observation integer
observation integer smaller
integer smaller iteration
smaller iteration algorithm
iteration algorithm fact
fact algorithm stops
algorithm stops integer
stops integer algorithms
integer algorithms proof
algorithms proof correctness
proof correctness easy
correctness easy complex
easy complex common
complex common technique
common technique proving
technique proving correctness
proving correctness mathematical
correctness mathematical induction
induction algorithm iterations
algorithm iterations natural
iterations natural sequence
natural sequence steps
sequence steps needed
steps needed proofs
needed proofs mentioning
proofs mentioning tracing
mentioning tracing algorithm
tracing algorithm performance
algorithm performance specific
performance specific inputs
specific inputs worthwhile
inputs worthwhile activity
worthwhile activity prove
activity prove algorithm
prove algorithm correctness
algorithm correctness conclusively
correctness conclusively algorithm
conclusively algorithm incorrect
algorithm incorrect instance
incorrect instance input
instance input algorithm
input algorithm fails
algorithm fails notion
fails notion correctness
notion correctness approximation
correctness approximation algorithms
approximation algorithms straightforward
algorithms straightforward exact
straightforward exact algorithms
exact algorithms approximation
approximation algorithm error
algorithm error produced
error produced algorithm
produced algorithm exceed
algorithm exceed predefined
exceed predefined limit
predefined limit examples
limit examples investigations
examples investigations chapter
investigations chapter analyzing
chapter analyzing algorithm
analyzing algorithm algorithms
algorithm algorithms qualities
algorithms qualities correctness
qualities correctness important
correctness important efficiency
important efficiency fact
efficiency fact kinds
fact kinds algorithm
algorithm efficiency indicating
efficiency indicating fast
indicating fast algorithm
runs space ficiency
space ficiency indicating
ficiency indicating extra
indicating extra memory
extra memory general
memory general framework
general framework specific
framework specific techniques
specific techniques analyzing
techniques analyzing algorithm
algorithm efficiency chapter
efficiency chapter desirable
chapter desirable characteristic
characteristic algorithm simplicity
algorithm simplicity effi
simplicity effi ciency
effi ciency precisely
ciency precisely defined
precisely defined investigated
defined investigated mathematical
investigated mathematical rigor
mathematical rigor simplicity
rigor simplicity beauty
simplicity beauty considerable
beauty considerable degree
considerable degree eye
degree eye beholder
eye beholder people
beholder people euclid
people euclid algorithm
euclid algorithm simpler
algorithm simpler middle
simpler middle school
computing gcd clid
gcd clid algorithm
clid algorithm simpler
algorithm simpler consecutive
simpler consecutive integer
checking algorithm simplicity
algorithm simplicity important
simplicity important algorithm
important algorithm characteristic
algorithm characteristic strive
characteristic strive sim
strive sim pler
sim pler algorithms
pler algorithms easier
algorithms easier understand
understand easier resulting
easier resulting programs
resulting programs bugs
programs bugs undeniable
bugs undeniable aes
undeniable aes thetic
aes thetic appeal
thetic appeal simplicity
appeal simplicity simpler
simplicity simpler algorithms
simpler algorithms efficient
algorithms efficient complicated
efficient complicated alternatives
complicated alternatives true
alternatives true case
true case judicious
case judicious compromise
judicious compromise desirable
compromise desirable characteristic
characteristic algorithm generality
algorithm generality fact
generality fact issues
fact issues generality
issues generality problem
generality problem algorithm
algorithm solves set
solves set inputs
set inputs accepts
inputs accepts issue
accepts issue easier
issue easier design
algorithm problem posed
problem posed general
posed general terms
general terms problem
terms problem determining
problem determining integers
determining integers prime
integers prime common
common divisor equal
divisor equal easier
equal easier design
design algorithm general
algorithm general problem
general problem computing
divisor integers solve
integers solve problem
solve problem gcd
problem gcd situations
gcd situations designing
situations designing general
designing general algorithm
general algorithm unnecessary
algorithm unnecessary difficult
unnecessary difficult impossible
difficult impossible unnecessary
impossible unnecessary sort
unnecessary sort numbers
sort numbers median
numbers median smallest
median smallest element
smallest element standard
element standard formula
quadratic equation generalized
equation generalized polynomials
generalized polynomials arbitrary
polynomials arbitrary degrees
arbitrary degrees set
degrees set inputs
set inputs main
inputs main designing
main designing algorithm
designing algorithm set
algorithm set inputs
set inputs natural
inputs natural problem
natural problem integers
problem integers equal
integers equal inputs
equal inputs greatest
inputs greatest common
divisor algorithm unnatural
algorithm unnatural standard
unnatural standard formula
quadratic equation holds
equation holds complex
holds complex coefficients
complex coefficients implement
coefficients implement generality
implement generality capability
generality capability explicitly
capability explicitly required
explicitly required satisfied
required satisfied algorithm
satisfied algorithm efficiency
algorithm efficiency simplicity
efficiency simplicity generality
simplicity generality drawing
generality drawing board
drawing board redesign
board redesign algorithm
redesign algorithm fact
algorithm fact evaluation
fact evaluation positive
evaluation positive searching
positive searching algorithmic
searching algorithmic solutions
algorithmic solutions recall
solutions recall algorithms
recall algorithms previous
algorithms previous section
previous section computing
section computing greatest
common divisor generally
divisor generally algorithm
generally algorithm fine
algorithm fine tune
fine tune algorithm
tune algorithm improvements
algorithm improvements implementation
improvements implementation sieve
implementation sieve eratosthenes
sieve eratosthenes compared
eratosthenes compared initial
compared initial outline
initial outline section
outline section mind
section mind observation
mind observation antoine
observation antoine saint
saint exupe french
exupe french writer
french writer pilot
writer pilot aircraft
pilot aircraft designer
aircraft designer arrived
designer arrived perfection
arrived perfection longer
perfection longer coding
longer coding algorithm
coding algorithm algorithms
algorithm algorithms destined
algorithms destined ultimately
destined ultimately implemented
ultimately implemented pro
implemented pro grams
pro grams programming
grams programming algorithm
programming algorithm presents
algorithm presents peril
presents peril opportunity
peril opportunity peril
opportunity peril lies
peril lies possibility
lies possibility making
possibility making transition
making transition algorithm
transition algorithm pro
algorithm pro gram
pro gram incorrectly
gram incorrectly inefficiently
incorrectly inefficiently influential
inefficiently influential scientists
influential scientists strongly
scientists strongly correctness
strongly correctness proven
correctness proven mathematical
proven mathematical rigor
mathematical rigor considered
rigor considered developed
considered developed special
developed special techniques
special techniques proofs
techniques proofs gri
proofs gri power
gri power techniques
power techniques formal
techniques formal verification
formal verification small
verification small programs
small programs practical
programs practical validity
practical validity programs
validity programs established
programs established testing
established testing programs
testing programs art
programs art science
art science books
science books devoted
books devoted testing
devoted testing debugging
testing debugging important
debugging important debug
important debug implement
debug implement algorithm
implement algorithm assume
algorithm assume inputs
assume inputs algorithms
inputs algorithms sets
algorithms sets require
sets require verification
require verification implementing
verification implementing algorithms
implementing algorithms programs
algorithms programs actual
programs actual applications
actual applications verifications
applications verifications implementing
verifications implementing algorithm
implementing algorithm correctly
algorithm correctly sufficient
correctly sufficient diminish
sufficient diminish algorithm
diminish algorithm power
algorithm power inefficient
power inefficient implemen
inefficient implemen tation
implemen tation modern
tation modern compilers
modern compilers safety
compilers safety net
safety net regard
net regard code
regard code optimization
code optimization mode
optimization mode aware
mode aware standard
aware standard tricks
standard tricks computing
tricks computing loop
computing loop invariant
loop invariant expression
invariant expression loop
expression loop collecting
loop collecting common
collecting common subexpressions
common subexpressions replac
subexpressions replac ing
replac ing expensive
ing expensive operations
expensive operations cheap
operations cheap ker
cheap ker ben
ker ben good
ben good discussion
good discussion code
discussion code tuning
code tuning issues
tuning issues related
issues related algorithm
related algorithm ming
algorithm ming typically
ming typically improvements
typically improvements speed
improvements speed constant
speed constant factor
factor algorithm make
algorithm make difference
make difference running
difference running orders
running orders magnitude
orders magnitude algorithm
magnitude algorithm selected
algorithm selected speedup
selected speedup effort
speedup effort design
effort design simplicity
design simplicity essay
simplicity essay collection
essay collection jon
collection jon bentley
jon bentley ben
bentley ben essays
ben essays deal
essays deal variety
deal variety issues
variety issues algorithm
issues algorithm design
algorithm design implementation
design implementation justifiably
implementation justifiably titled
justifiably titled programming
titled programming pearls
programming pearls wholeheartedly
pearls wholeheartedly recommend
wholeheartedly recommend writings
recommend writings jon
writings jon bentley
jon bentley antoine
bentley antoine saint
saint exupe working
exupe working additional
working additional opportunity
additional opportunity allowing
opportunity allowing pirical
allowing pirical analysis
pirical analysis underlying
analysis underlying algorithm
underlying algorithm analysis
algorithm analysis based
analysis based timing
based timing inputs
timing inputs analyzing
inputs analyzing results
analyzing results obtained
results obtained dis
obtained dis cuss
dis cuss advantages
cuss advantages disadvantages
advantages disadvantages approach
disadvantages approach analyzing
approach analyzing algorithms
algorithms section conclusion
section conclusion emphasize
conclusion emphasize main
emphasize main lesson
main lesson process
lesson process depicted
process depicted figure
depicted figure good
result repeated effort
repeated effort rework
effort rework fortunate
rework fortunate algorithmic
fortunate algorithmic idea
algorithmic idea perfect
idea perfect improved
perfect improved good
improved good news
good news makes
news makes ultimate
makes ultimate result
ultimate result enjoyable
result enjoyable naming
enjoyable naming joy
naming joy algorithms
joy algorithms real
algorithms real world
real world project
world project schedule
project schedule impatience
schedule impatience boss
impatience boss perfection
boss perfection expensive
perfection expensive fact
expensive fact called
fact called designing
called designing algorithm
designing algorithm engineering
algorithm engineering activity
engineering activity calls
activity calls compromises
calls compromises competing
compromises competing goals
competing goals constraints
goals constraints resources
constraints resources designer
resources designer resources
designer resources academic
resources academic world
academic world leads
world leads interesting
leads interesting difficult
interesting difficult investigation
difficult investigation algorithm
investigation algorithm optimality
algorithm optimality efficiency
optimality efficiency algorithm
efficiency algorithm complexity
algorithm complexity problem
complexity problem solves
problem solves minimum
solves minimum effort
minimum effort algorithm
effort algorithm exert
algorithm exert solve
exert solve problem
solve problem problems
problem problems algorithm
problems algorithm sorts
algorithm sorts array
sorts array comparing
array comparing values
comparing values elements
values elements log
log comparisons arrays
arrays size section
size section seemingly
section seemingly easy
seemingly easy problems
easy problems integer
problems integer multiplication
integer multiplication scientists
multiplication scientists final
scientists final important
final important issue
important issue algorithmic
issue algorithmic problem
solving problem solved
solved algorithm talking
algorithm talking problems
talking problems solution
problems solution finding
solution finding real
quadratic equation negative
equation negative discriminant
negative discriminant cases
discriminant cases output
cases output indicating
output indicating problem
indicating problem solution
problem solution algorithm
solution algorithm talking
algorithm talking ambiguously
talking ambiguously stated
ambiguously stated problems
stated problems unambiguous
problems unambiguous problems
unambiguous problems simple
problems simple undecidable
simple undecidable unsolvable
undecidable unsolvable algorithm
unsolvable algorithm important
algorithm important problem
important problem appears
problem appears section
appears section fortunately
section fortunately vast
fortunately vast majority
vast majority problems
majority problems practical
problems practical computing
practical computing solved
computing solved algorithm
solved algorithm leaving
algorithm leaving section
leaving section misconception
section misconception possibly
misconception possibly caused
possibly caused mechanical
caused mechanical nature
mechanical nature diagram
nature diagram figure
diagram figure designing
figure designing algorithm
designing algorithm dull
algorithm dull activity
dull activity truth
activity truth inventing
truth inventing discovering
inventing discovering algorithms
discovering algorithms creative
algorithms creative rewarding
creative rewarding process
rewarding process designed
process designed convince
designed convince case
convince case exercises
case exercises world
exercises world puzzle
world puzzle peasant
puzzle peasant finds
peasant finds riverbank
finds riverbank wolf
riverbank wolf goat
eat cabbage solve
solve problem peasant
problem peasant prove
peasant prove solution
prove solution peasant
solution peasant vegetarian
peasant vegetarian cabbage
vegetarian cabbage eat
cabbage eat goat
eat goat cabbage
goat cabbage solve
solve problem wolf
problem wolf protected
wolf protected species
protected species world
species world puzzle
world puzzle people
puzzle people rickety
people rickety bridge
rickety bridge begin
bridge begin minutes
begin minutes night
minutes night flashlight
night flashlight maximum
flashlight maximum people
maximum people bridge
people bridge party
bridge party crosses
party crosses people
crosses people flashlight
people flashlight walked
flashlight walked thrown
walked thrown person
thrown person takes
person takes minute
takes minute bridge
minute bridge person
bridge person takes
takes minutes pair
minutes pair rate
pair rate slower
rate slower person
slower person pace
person pace rumor
pace rumor internet
rumor internet interviewers
internet interviewers software
interviewers software company
software company located
company located seattle
located seattle problem
seattle problem interviewees
problem interviewees formulas
interviewees formulas considered
formulas considered algorithm
considered algorithm comput
comput ing area
ing area triangle
area triangle lengths
triangle lengths positive
lengths positive numbers
positive numbers angle
numbers angle sides
angle sides aha
sides aha height
aha height base
height base write
base write pseudocode
pseudocode algorithm finding
algorithm finding real
real roots equation
roots equation arbitrary
equation arbitrary real
arbitrary real coefficients
real coefficients assume
coefficients assume availability
assume availability square
availability square root
root function sqrt
function sqrt standard
sqrt standard algorithm
standard algorithm finding
algorithm finding binary
finding binary representation
decimal integer english
integer english pseudocode
english pseudocode algorithm
pseudocode algorithm favorite
algorithm favorite atm
favorite atm machine
atm machine dispensing
machine dispensing cash
dispensing cash description
cash description english
description english pseudocode
english pseudocode convenient
pseudocode convenient problem
convenient problem computing
problem computing solved
computing solved instances
solved instances problem
instances problem algorithm
algorithm problem internet
problem internet problem
internet problem computing
divisor algorithm simpler
algorithm simpler efficient
simpler efficient algorithm
algorithm finding distance
distance closest elements
closest elements array
numbers algorithm mindistance
algorithm mindistance input
mindistance input array
input array numbers
array numbers output
numbers output minimum
output minimum distance
minimum distance elements
distance elements dmin
elements dmin make
dmin make improvements
make improvements algorithmic
improvements algorithmic solution
algorithmic solution problem
solution problem algorithm
problem algorithm altogether
algorithm altogether implementation
altogether implementation influential
implementation influential books
influential books problem
books problem solving
problem solving titled
solving titled solve
titled solve pol
solve pol written
pol written hungarian
written hungarian american
american mathematician george
mathematician george lya
george lya summarized
lya summarized ideas
summarized ideas summary
ideas summary internet
summary internet outlined
internet outlined section
outlined section common
section common important
common important problem
problem types limitless
types limitless sea
limitless sea problems
sea problems encounters
problems encounters computing
encounters computing areas
computing areas attracted
areas attracted attention
attracted attention researchers
attention researchers large
researchers large driven
large driven problem
driven problem practical
problem practical importance
practical importance specific
importance specific characteristics
specific characteristics making
characteristics making problem
making problem interesting
problem interesting research
interesting research subject
research subject fortunately
subject fortunately motivating
fortunately motivating forces
motivating forces reinforce
forces reinforce cases
reinforce cases section
cases section important
numerical problems subsequent
problems subsequent chapters
subsequent chapters illustrate
chapters illustrate algorithm
illustrate algorithm design
design techniques methods
techniques methods algorithm
algorithm analysis sorting
analysis sorting problem
sorting problem rearrange
problem rearrange items
rearrange items nondecreasing
items nondecreasing problem
nondecreasing problem meaningful
problem meaningful nature
meaningful nature items
nature items ordering
items ordering mathematicians
ordering mathematicians relation
mathematicians relation total
relation total ordering
total ordering practical
ordering practical sort
practical sort lists
sort lists numbers
lists numbers characters
character strings important
strings important records
important records similar
records similar maintained
similar maintained schools
maintained schools students
schools students libraries
students libraries holdings
libraries holdings companies
holdings companies employees
companies employees case
employees case records
case records choose
records choose piece
choose piece information
piece information sorting
information sorting choose
sorting choose sort
choose sort student
sort student records
student records alphabetical
records alphabetical names
alphabetical names student
names student grade
student grade average
grade average specially
average specially chosen
specially chosen piece
chosen piece information
piece information called
information called key
called key scientists
key scientists sorting
scientists sorting keys
sorting keys items
keys items records
items records integers
records integers sorted
integers sorted begin
sorted begin sorted
begin sorted required
sorted required output
required output task
output task ranking
task ranking internet
ranking internet results
internet results ranking
results ranking students
ranking students gpa
students gpa scores
gpa scores sorting
scores sorting makes
sorting makes questions
makes questions easier
questions easier important
easier important searching
important searching dictionaries
searching dictionaries books
dictionaries books class
books class lists
class lists sorted
lists sorted examples
sorted examples usefulness
examples usefulness presorting
usefulness presorting section
presorting section similar
section similar vein
similar vein sorting
vein sorting auxiliary
sorting auxiliary important
auxiliary important algorithms
algorithms areas geometric
areas geometric algorithms
geometric algorithms data
algorithms data compression
data compression greedy
compression greedy approach
greedy approach important
approach important algorithm
design technique discussed
technique discussed requires
discussed requires sorted
requires sorted input
sorted input scientists
input scientists discovered
scientists discovered dozens
discovered dozens sorting
dozens sorting algorithms
sorting algorithms fact
algorithms fact inventing
fact inventing sorting
inventing sorting algorithm
sorting algorithm likened
algorithm likened designing
likened designing proverbial
designing proverbial mousetrap
proverbial mousetrap happy
mousetrap happy sorting
happy sorting mousetrap
sorting mousetrap continues
mousetrap continues perseverance
continues perseverance admirable
perseverance admirable view
admirable view facts
view facts good
facts good sorting
good sorting algorithms
algorithms sort arbitrary
sort arbitrary array
arbitrary array size
array size log
size log comparisons
log comparisons algorithm
comparisons algorithm sorts
algorithm sorts key
sorts key comparisons
key comparisons opposed
comparisons opposed comparing
opposed comparing small
comparing small pieces
small pieces keys
pieces keys substantially
keys substantially reason
substantially reason embarrassment
reason embarrassment algorithmic
embarrassment algorithmic riches
algorithmic riches sorting
riches sorting algorithms
sorting algorithms algorithm
algorithms algorithm solution
algorithm solution situations
solution situations algorithms
situations algorithms simple
algorithms simple faster
simple faster complex
faster complex randomly
complex randomly ordered
randomly ordered inputs
ordered inputs sorted
inputs sorted lists
sorted lists suitable
lists suitable lists
suitable lists residing
lists residing fast
residing fast memory
fast memory adapted
memory adapted sorting
adapted sorting large
sorting large files
large files stored
files stored disk
stored disk properties
disk properties sorting
properties sorting algorithms
sorting algorithms special
algorithms special mention
special mention sorting
mention sorting algorithm
algorithm called stable
called stable preserves
stable preserves relative
preserves relative equal
relative equal elements
elements input words
words input equal
input equal elements
sorted positions property
positions property desirable
property desirable students
desirable students sorted
students sorted alphabetically
sorted alphabetically sort
alphabetically sort student
sort student gpa
student gpa stable
gpa stable algorithm
stable algorithm yield
algorithm yield students
yield students gpa
students gpa sorted
gpa sorted alphabetically
sorted alphabetically generally
alphabetically generally speaking
generally speaking algorithms
speaking algorithms exchange
algorithms exchange keys
exchange keys located
keys located stable
located stable faster
stable faster general
faster general comment
general comment applies
comment applies important
applies important sorting
sorting algorithms notable
algorithms notable feature
notable feature sorting
feature sorting algorithm
sorting algorithm extra
extra memory algorithm
memory algorithm requires
algorithm require extra
extra memory possibly
memory possibly memory
possibly memory units
memory units important
units important sorting
sorting algorithms searching
searching problem deals
problem deals finding
deals finding called
finding called key
called key set
key set multiset
set multiset permits
multiset permits elements
permits elements plenty
elements plenty searching
plenty searching algorithms
searching algorithms choose
algorithms choose range
choose range straightforward
range straightforward sequential
straightforward sequential spectacularly
sequential spectacularly efficient
spectacularly efficient binary
efficient binary algorithms
binary algorithms based
algorithms based representing
based representing underlying
representing underlying set
underlying set conducive
set conducive searching
conducive searching algorithms
searching algorithms importance
algorithms importance real
importance real world
world applications indispensable
applications indispensable storing
indispensable storing retriev
storing retriev ing
retriev ing information
ing information large
information large databases
large databases searching
databases searching single
searching single algorithm
single algorithm fits
algorithm fits situations
fits situations algorithms
situations algorithms faster
algorithms faster require
faster require memory
require memory fast
memory fast applicable
fast applicable sorted
applicable sorted arrays
sorted arrays sorting
sorting algorithms stability
algorithms stability problem
stability problem issues
problem issues arise
issues arise specifically
arise specifically applications
specifically applications underlying
applications underlying data
underlying data frequently
data frequently relative
frequently relative searches
relative searches searching
searches searching considered
searching considered conjunction
considered conjunction operations
conjunction operations addition
operations addition deletion
addition deletion data
deletion data set
data set item
set item situations
item situations data
situations data structures
structures algorithms chosen
algorithms chosen strike
chosen strike requirements
strike requirements operation
requirements operation organizing
operation organizing large
organizing large data
data sets efficient
sets efficient searching
efficient searching poses
searching poses special
poses special challenges
special challenges important
challenges important implications
important implications real
implications real world
world applications string
applications string processing
string processing recent
processing recent decades
recent decades rapid
decades rapid proliferation
rapid proliferation applications
proliferation applications dealing
applications dealing nonnumer
dealing nonnumer ical
nonnumer ical data
ical data intensified
data intensified researchers
intensified researchers computing
researchers computing practitioners
computing practitioners string
practitioners string handling
string handling algorithms
handling algorithms string
algorithms string sequence
characters alphabet strings
alphabet strings text
strings text strings
text strings comprise
strings comprise letters
comprise letters numbers
letters numbers special
numbers special characters
special characters bit
characters bit strings
bit strings comprise
strings comprise zeros
comprise zeros gene
zeros gene sequences
gene sequences modeled
sequences modeled strings
modeled strings characters
strings characters character
characters character alphabet
character alphabet pointed
alphabet pointed string
pointed string processing
string processing algorithms
processing algorithms important
algorithms important science
important science conjunction
science conjunction languages
conjunction languages compiling
languages compiling issues
compiling issues problem
issues problem searching
problem searching word
searching word text
word text attracted
text attracted special
attracted special attention
special attention researchers
attention researchers string
researchers string matching
string matching algorithms
matching algorithms exploit
algorithms exploit special
exploit special nature
special nature searching
nature searching invented
searching invented simple
invented simple algorithm
simple algorithm chapter
algorithm chapter discuss
chapter discuss algorithms
algorithms based remarkable
based remarkable idea
remarkable idea boyer
boyer moore chapter
moore chapter graph
chapter graph problems
graph problems oldest
problems oldest interesting
oldest interesting areas
interesting areas algorithmics
areas algorithmics graph
algorithmics graph algorithms
graph algorithms informally
algorithms informally graph
informally graph thought
graph thought collection
collection points called
points called vertices
called vertices connected
vertices connected line
called edges formal
edges formal definition
formal definition section
definition section graphs
section graphs interesting
graphs interesting subject
interesting subject study
subject study theoretical
study theoretical practical
theoretical practical reasons
practical reasons graphs
reasons graphs modeling
graphs modeling wide
modeling wide variety
variety applications transportation
applications transportation communication
transportation communication social
communication social economic
social economic networks
economic networks project
networks project scheduling
project scheduling games
scheduling games studying
games studying technical
studying technical social
technical social aspects
social aspects internet
aspects internet active
internet active areas
active areas current
areas current research
current research involving
research involving scientists
involving scientists economists
scientists economists social
economists social scientists
social scientists eas
scientists eas basic
eas basic graph
basic graph algorithms
algorithms graph traversal
traversal algorithms points
algorithms points network
points network shortest
network shortest path
shortest path algorithms
path algorithms route
algorithms route cities
route cities topological
cities topological sorting
topological sorting graphs
sorting graphs directed
graphs directed edges
directed edges set
edges set courses
set courses prerequisites
courses prerequisites consistent
prerequisites consistent contradictory
consistent contradictory fortunately
contradictory fortunately algorithms
fortunately algorithms considered
algorithms considered illustrations
considered illustrations general
illustrations general design
design techniques chapters
techniques chapters graph
chapters graph problems
graph problems computationally
problems computationally hard
computationally hard examples
hard examples traveling
examples traveling salesman
salesman problem graph
coloring problem traveling
tsp problem finding
finding shortest cities
shortest cities visits
visits city addition
city addition obvious
addition obvious applications
obvious applications involving
applications involving route
involving route planning
route planning arises
planning arises modern
arises modern applications
modern applications circuit
applications circuit board
circuit board vlsi
board vlsi chip
vlsi chip fabrication
chip fabrication ray
fabrication ray crystallography
ray crystallography genetic
crystallography genetic engineering
genetic engineering graph
engineering graph coloring
coloring problem seeks
problem seeks assign
seeks assign smallest
vertices color problem
color problem arises
problem arises applications
arises applications event
applications event scheduling
event scheduling events
scheduling events represented
events represented vertices
represented vertices connected
connected edge events
edge events scheduled
events scheduled solution
scheduled solution graph
solution graph coloring
coloring problem yields
yields optimal schedule
optimal schedule combinatorial
schedule combinatorial problems
combinatorial problems abstract
problems abstract perspective
abstract perspective traveling
perspective traveling salesman
salesman problem graphcoloring
problem graphcoloring problem
graphcoloring problem examples
problem examples combinatorial
examples combinatorial problems
combinatorial problems explicitly
problems explicitly implicitly
implicitly combinatorial permutation
combinatorial permutation combination
permutation combination subset
combination subset satisfies
subset satisfies constraints
satisfies constraints desired
constraints desired combinatorial
desired combinatorial required
combinatorial required additional
required additional property
additional property maximum
property maximum minimum
maximum minimum cost
minimum cost generally
cost generally speaking
generally speaking combinatorial
speaking combinatorial problems
combinatorial problems difficult
difficult problems computing
problems computing theoretical
computing theoretical practical
theoretical practical standpoint
practical standpoint difficulty
standpoint difficulty stems
difficulty stems facts
stems facts combinatorial
facts combinatorial objects
typically grows extremely
grows extremely fast
extremely fast problem
fast problem size
problem size reaching
size reaching unimaginable
reaching unimaginable magnitudes
unimaginable magnitudes moderate
magnitudes moderate sized
moderate sized instances
sized instances algorithms
instances algorithms solving
solving problems acceptable
problems acceptable scientists
acceptable scientists algorithms
scientists algorithms conjecture
algorithms conjecture proved
conjecture proved disproved
proved disproved remains
disproved remains important
remains important unresolved
theoretical science discuss
science discuss topic
discuss topic section
topic section combinatorial
section combinatorial problems
combinatorial problems solved
problems solved efficient
solved efficient algorithms
efficient algorithms considered
algorithms considered fortunate
considered fortunate exceptions
fortunate exceptions shortest
exceptions shortest path
path problem mentioned
mentioned earlier exceptions
earlier exceptions geometric
exceptions geometric problems
problems geometric algorithms
algorithms deal geometric
deal geometric objects
geometric objects points
objects points lines
points lines poly
lines poly gons
poly gons ancient
gons ancient greeks
ancient greeks interested
greeks interested developing
interested developing procedures
developing procedures algorithms
procedures algorithms solving
solving variety geometric
variety geometric problems
geometric problems constructing
problems constructing simple
constructing simple geometric
simple geometric shapes
geometric shapes triangles
shapes triangles circles
triangles circles unmarked
circles unmarked ruler
unmarked ruler compass
ruler compass years
compass years intense
years intense geometric
intense geometric algorithms
geometric algorithms disappeared
algorithms disappeared resurrected
disappeared resurrected age
resurrected age computers
age computers rulers
computers rulers compasses
rulers compasses bits
compasses bits bytes
bits bytes good
bytes good human
good human ingenuity
human ingenuity today
ingenuity today people
today people interested
people interested geometric
geometric algorithms applications
algorithms applications mind
applications mind graphics
mind graphics robotics
graphics robotics tomography
robotics tomography discuss
tomography discuss algorithms
discuss algorithms classic
algorithms classic problems
classic problems computational
hull problem closest
pair problem explanatory
problem explanatory points
explanatory points plane
points plane closest
plane closest pair
hull problem asks
problem asks smallest
asks smallest convex
polygon points set
points set interested
set interested geometric
geometric algorithms wealth
algorithms wealth material
wealth material specialized
material specialized monographs
specialized monographs deb
monographs deb oro
deb oro pre
oro pre numerical
pre numerical problems
numerical problems numerical
numerical problems large
problems large special
large special area
special area applications
area applications problems
applications problems involve
problems involve mathematical
involve mathematical objects
mathematical objects continuous
objects continuous nature
continuous nature solving
nature solving equations
systems equations computing
equations computing definite
computing definite integrals
definite integrals evaluating
integrals evaluating functions
evaluating functions majority
functions majority mathematical
majority mathematical problems
mathematical problems solved
solved approximately principal
approximately principal difficulty
principal difficulty stems
difficulty stems fact
fact problems typically
problems typically require
typically require manipulating
require manipulating real
manipulating real numbers
represented approximately large
approximately large arithmetic
large arithmetic operations
operations performed approximately
performed approximately represented
approximately represented numbers
represented numbers lead
numbers lead accumulation
lead accumulation error
accumulation error drastically
error drastically distort
drastically distort output
distort output produced
output produced seemingly
produced seemingly algorithm
seemingly algorithm sophisticated
algorithm sophisticated algorithms
sophisticated algorithms developed
algorithms developed years
developed years area
years area critical
area critical role
critical role scientific
role scientific engineering
scientific engineering applications
engineering applications years
applications years computing
years computing industry
computing industry shifted
industry shifted focus
shifted focus business
focus business applications
business applications require
applications require primarily
require primarily algorithms
primarily algorithms information
algorithms information storage
information storage retrieval
storage retrieval transportation
retrieval transportation networks
transportation networks presentation
networks presentation users
presentation users result
users result revolutionary
result revolutionary numerical
revolutionary numerical analysis
numerical analysis lost
analysis lost dominating
lost dominating position
dominating position industry
position industry science
industry science programs
science programs important
programs important literate
important literate person
literate person rudimentary
person rudimentary idea
rudimentary idea numerical
idea numerical algorithms
algorithms discuss classical
discuss classical numerical
classical numerical algorithms
numerical algorithms sections
algorithms sections exercises
sections exercises algorithm
exercises algorithm sorting
algorithm sorting problem
sorting problem sorts
problem sorts array
sorts array counting
array counting elements
counting elements smaller
smaller elements information
elements information element
information element position
array algorithm comparisoncountingsort
array orderable values
orderable values output
values output array
sorted nondecreasing apply
nondecreasing apply algorithm
apply algorithm sorting
sorting algorithm stable
algorithm stable algorithms
stable algorithms searching
searching problem good
problem good succinct
good succinct description
succinct description algorithm
description algorithm english
algorithm english algorithms
english algorithms opportunity
algorithms opportunity design
opportunity design simple
simple algorithm string
matching problem nigsberg
problem nigsberg bridges
nigsberg bridges nigsberg
bridges nigsberg bridge
nigsberg bridge puzzle
bridge puzzle universally
puzzle universally accepted
universally accepted problem
accepted problem gave
problem gave birth
gave birth graph
birth graph theory
graph theory solved
theory solved great
solved great swiss
great swiss born
swiss born mathematician
born mathematician leonhard
mathematician leonhard euler
leonhard euler problem
euler problem asked
problem asked single
asked single stroll
single stroll bridges
stroll bridges city
bridges city nigsberg
city nigsberg starting
nigsberg starting sketch
starting sketch river
sketch river islands
river islands bridges
islands bridges state
bridges state problem
state problem graph
graph problem solution
problem solution draw
solution draw stroll
draw stroll smallest
stroll smallest bridges
smallest bridges required
bridges required make
required make stroll
make stroll icosian
stroll icosian game
icosian game century
game century euler
century euler discovery
euler discovery problem
discovery problem famous
problem famous puzzle
famous puzzle invented
puzzle invented renowned
invented renowned irish
renowned irish mathematician
sir william hamilton
william hamilton presented
hamilton presented world
presented world icosian
world icosian game
icosian game board
game board circular
board circular wooden
circular wooden board
wooden board graph
board graph carved
graph carved hamiltonian
carved hamiltonian circuit
circuit path visits
path visits graph
visits graph vertices
graph vertices returning
vertices returning starting
returning starting vertex
starting vertex graph
vertex graph problem
graph problem design
algorithm determine route
determine route subway
developed subway similar
subway similar cities
similar cities washington
cities washington london
washington london problem
london problem statement
problem statement vague
statement vague typical
vague typical real
typical real life
real life problems
life problems reasonable
problems reasonable criterion
reasonable criterion defining
criterion defining route
defining route model
route model problem
model problem graph
problem graph rephrase
graph rephrase traveling
rephrase traveling salesman
salesman problem combinatorial
combinatorial terms rephrase
terms rephrase graph
rephrase graph coloring
coloring problem combinatorial
combinatorial terms map
terms map graph
map graph coloring
problem color map
color map neighboring
map neighboring regions
neighboring regions colored
regions colored color
colored color map
color map smallest
map smallest colors
smallest colors design
colors design algorithm
algorithm problem set
cartesian plane determine
plane determine circumference
determine circumference write
circumference write reads
write reads inputs
reads inputs coordinates
inputs coordinates endpoints
coordinates endpoints line
endpoints line segments
line segments determines
segments determines segments
determines segments common
segments common fundamental
common fundamental data
data structures vast
structures vast majority
vast majority algorithms
majority algorithms operate
operate data ways
data ways organizing
ways organizing data
organizing data critical
data critical role
critical role design
role design analysis
analysis algorithms data
algorithms data structure
data structure defined
structure defined scheme
defined scheme organizing
scheme organizing related
organizing related data
related data items
data items nature
items nature data
nature data items
data items dictated
items dictated problem
dictated problem range
problem range elementary
range elementary data
elementary data types
data types integers
types integers characters
integers characters data
characters data structures
data structures dimensional
structures dimensional array
array dimensional arrays
dimensional arrays implementing
arrays implementing matrices
implementing matrices data
matrices data structures
data structures proved
structures proved important
proved important algorithms
important algorithms undoubtedly
algorithms undoubtedly familiar
undoubtedly familiar quick
familiar quick review
quick review provided
review provided linear
provided linear data
linear data structures
data structures important
structures important elementary
array linked dimensional
linked dimensional array
dimensional array sequence
array sequence items
sequence items data
items data stored
data stored contiguously
stored contiguously memory
contiguously memory accessible
memory accessible array
accessible array index
array index figure
index figure majority
figure majority cases
majority cases index
cases index integer
index integer shown
integer shown figure
shown figure languages
figure languages array
languages array index
array index range
index range integer
range integer bounds
integer bounds low
bounds low high
low high nonnumerical
high nonnumerical indices
nonnumerical indices data
indices data items
data items months
items months year
months year month
year month names
month names element
names element array
element array accessed
array accessed constant
accessed constant array
constant array element
array element located
element located feature
located feature positively
feature positively distinguishes
positively distinguishes arrays
distinguishes arrays linked
arrays linked lists
linked lists discussed
lists discussed arrays
discussed arrays implementing
arrays implementing variety
implementing variety data
variety data structures
data structures promi
structures promi nent
promi nent string
nent string sequence
characters alphabet termi
alphabet termi nated
termi nated special
nated special character
special character indicating
character indicating string
indicating string strings
string strings composed
strings composed zeros
composed zeros called
zeros called binary
called binary strings
binary strings bit
bit strings indispensable
strings indispensable pro
indispensable pro cessing
pro cessing textual
cessing textual data
textual data defining
data defining languages
defining languages compiling
languages compiling programs
compiling programs written
programs written studying
written studying abstract
studying abstract computational
abstract computational models
computational models operations
models operations strings
operations strings differ
strings differ typically
differ typically arrays
typically arrays numbers
arrays numbers computing
numbers computing string
computing string length
string length comparing
length comparing strings
comparing strings determine
strings determine precedes
determine precedes lexicographic
precedes lexicographic alphabetical
lexicographic alphabetical der
alphabetical der concatenating
der concatenating strings
concatenating strings forming
strings forming string
forming string strings
string strings appending
strings appending linked
appending linked sequence
linked sequence elements
sequence elements called
elements called nodes
called nodes kinds
nodes kinds information
kinds information data
information data links
data links called
links called pointers
called pointers nodes
pointers nodes linked
nodes linked special
linked special pointer
special pointer called
pointer called null
called null absence
null absence node
absence node successor
node successor singly
successor singly linked
singly linked node
linked node single
node single pointer
single pointer element
pointer element figure
element figure access
figure access node
access node linked
node linked starts
linked starts node
starts node traverses
node traverses pointer
traverses pointer chain
chain node reached
node reached needed
reached needed access
needed access element
access element singly
element singly linked
singly linked array
linked array depends
array depends element
depends element located
element located positive
located positive linked
positive linked lists
linked lists item
lists item figure
item figure array
array elements item
elements item null
null figure singly
figure singly linked
singly linked elements
linked elements null
elements null item
null item null
null figure doubly
figure doubly linked
doubly linked elements
linked elements require
elements require preliminary
require preliminary reservation
preliminary reservation memory
reservation memory insertions
memory insertions deletions
insertions deletions efficiently
deletions efficiently linked
efficiently linked reconnecting
linked reconnecting pointers
reconnecting pointers exploit
pointers exploit flexibility
exploit flexibility linked
flexibility linked structure
linked structure variety
structure variety ways
variety ways convenient
ways convenient linked
convenient linked special
linked special node
special node called
node called header
called header node
header node information
node information linked
information linked current
linked current length
current length addition
length addition pointer
addition pointer element
pointer element pointer
element pointer linked
pointer linked element
linked element extension
element extension structure
extension structure called
structure called doubly
called doubly linked
doubly linked node
linked node pointers
node pointers successor
pointers successor predecessor
successor predecessor figure
predecessor figure array
figure array linked
array linked principal
linked principal choices
principal choices representing
choices representing abstract
abstract data structure
structure called linear
called linear simply
linear simply finite
simply finite sequence
finite sequence data
sequence data items
items collection data
data items arranged
items arranged linear
arranged linear basic
linear basic operations
basic operations performed
data structure searching
structure searching inserting
searching inserting deleting
inserting deleting element
deleting element special
element special types
special types lists
types lists stacks
lists stacks queues
stacks queues important
queues important stack
important stack insertions
stack insertions deletions
insertions deletions called
deletions called stack
called stack visualized
stack visualized horizontally
visualized horizontally vertically
horizontally vertically akin
vertically akin stack
akin stack plates
stack plates operations
plates operations mimics
operations mimics closely
mimics closely result
closely result elements
result elements added
elements added pushed
added pushed stack
pushed stack deleted
stack deleted popped
deleted popped structure
popped structure operates
structure operates lifo
operates lifo fashion
lifo fashion stack
fashion stack plates
stack plates plate
plates plate stacks
plate stacks multitude
stacks multitude applications
multitude applications indispensable
applications indispensable implementing
indispensable implementing recursive
implementing recursive algorithms
recursive algorithms elements
algorithms elements deleted
elements deleted structure
deleted structure called
structure called operation
operation called dequeue
called dequeue elements
dequeue elements added
elements added called
added called rear
called rear operation
rear operation called
operation called enqueue
called enqueue operates
enqueue operates fifo
operates fifo fashion
fifo fashion akin
fashion akin customers
akin customers served
customers served single
served single teller
single teller bank
teller bank queues
bank queues important
queues important applications
important applications algorithms
applications algorithms graph
algorithms graph problems
problems important applications
important applications require
applications require selection
require selection item
selection item highest
highest priority dynamically
priority dynamically changing
dynamically changing set
changing set candidates
set candidates data
candidates data structure
data structure seeks
structure seeks applications
seeks applications called
applications called priority
called priority collection
priority collection data
data items totally
items totally ordered
totally ordered universe
ordered universe integer
universe integer real
integer real numbers
real numbers principal
numbers principal operations
principal operations priority
operations priority ing
priority ing largest
largest element deleting
element deleting largest
deleting largest element
largest element adding
element adding element
adding element priority
element priority implemented
priority implemented operations
implemented operations yield
operations yield priority
yield priority straightforward
priority straightforward implementations
straightforward implementations data
implementations data struc
data struc ture
struc ture based
ture based array
based array sorted
sorted array options
array options yields
options yields efficient
yields efficient solution
efficient solution implementation
solution implementation priority
implementation priority based
priority based ingenious
based ingenious data
ingenious data structure
structure called discuss
called discuss heaps
discuss heaps important
heaps important sorting
algorithm based section
based section graphs
section graphs mentioned
graphs mentioned previous
mentioned previous section
previous section graph
section graph informally
graph informally thought
informally thought collection
collection points plane
points plane called
plane called vertices
called vertices nodes
vertices nodes connected
nodes connected line
called edges arcs
edges arcs formally
arcs formally graph
formally graph defined
graph defined pair
defined pair sets
pair sets finite
sets finite nonempty
nonempty set items
set items called
items called vertices
called vertices set
vertices set pairs
set pairs items
pairs items called
items called edges
called edges pairs
edges pairs vertices
pairs vertices unordered
vertices unordered pair
unordered pair vertices
pair vertices adjacent
vertices adjacent connected
adjacent connected undirected
connected undirected edge
undirected edge vertices
edge vertices endpoints
vertices endpoints edge
endpoints edge incident
edge incident endpoints
incident endpoints graph
endpoints graph called
graph called undirected
called undirected edge
undirected edge undirected
edge undirected pair
undirected pair vertices
vertices pair edge
pair edge directed
directed vertex called
called edge tail
edge tail vertex
tail vertex called
called edge leaves
edge leaves enters
leaves enters graph
enters graph edge
graph edge directed
edge directed called
directed called directed
called directed graphs
directed graphs called
graphs called digraphs
called digraphs convenient
digraphs convenient vertices
convenient vertices graph
vertices graph digraph
graph digraph letters
digraph letters integer
letters integer numbers
integer numbers application
numbers application calls
application calls character
calls character strings
character strings figure
strings figure graph
figure graph depicted
graph depicted figure
figure vertices undirected
vertices undirected edges
undirected edges digraph
edges digraph depicted
digraph depicted figure
figure vertices directed
vertices directed edges
directed edges figure
edges figure undirected
figure undirected graph
undirected graph digraph
graph digraph definition
digraph definition graph
definition graph forbid
graph forbid loops
forbid loops edges
loops edges connecting
edges connecting vertices
connecting vertices explicitly
vertices explicitly stated
explicitly stated graphs
stated graphs loops
graphs loops definition
loops definition disallows
definition disallows multiple
disallows multiple edges
multiple edges vertices
edges vertices undirected
vertices undirected graph
undirected graph inequality
graph inequality edges
inequality edges undirected
edges undirected graph
graph vertices loops
vertices loops largest
loops largest edges
graph edge connecting
connecting vertices product
vertices product includes
product includes edge
includes edge graph
edge graph pair
graph pair vertices
connected edge called
edge called standard
called standard notation
standard notation graph
notation graph vertices
graph edges missing
edges missing called
missing called dense
called dense graph
dense graph edges
graph edges relative
relative vertices called
vertices called sparse
called sparse dealing
sparse dealing dense
dealing dense sparse
dense sparse graph
sparse graph choose
graph choose represent
choose represent graph
represent graph running
graph running algorithm
running algorithm designed
algorithm designed graph
designed graph representations
graph representations graphs
representations graphs algorithms
graphs algorithms represented
algorithms represented ways
represented ways adjacency
ways adjacency matrix
lists adjacency matrix
matrix graph vertices
graph vertices boolean
vertices boolean matrix
boolean matrix row
row column graph
column graph vertices
graph vertices element
vertices element ith
row column equal
column equal edge
equal edge ith
ith vertex equal
vertex equal edge
equal edge adjacency
edge adjacency matrix
matrix graph figure
undirected graph symmetric
graph symmetric adjacency
symmetric adjacency lists
lists graph digraph
graph digraph collection
digraph collection linked
collection linked lists
linked lists vertex
lists vertex vertices
vertex vertices adjacent
adjacent vertex vertices
vertex vertices connected
connected edge lists
edge lists header
lists header identifying
header identifying vertex
identifying vertex compiled
vertex compiled figure
compiled figure represents
figure represents graph
represents graph figure
lists figure adjacency
adjacency lists columns
lists columns adjacency
adjacency matrix vertex
matrix vertex graph
vertex graph sparse
graph sparse adjacency
sparse adjacency representation
adjacency representation space
representation space adjacency
space adjacency matrix
adjacency matrix extra
matrix extra storage
extra storage consumed
storage consumed pointers
consumed pointers linked
pointers linked lists
linked lists situation
lists situation dense
situation dense graphs
dense graphs general
graphs general representations
general representations convenient
representations convenient depends
convenient depends nature
depends nature problem
nature problem algorithm
algorithm solving possibly
solving possibly input
possibly input graph
input graph sparse
graph sparse dense
sparse dense weighted
dense weighted graphs
weighted digraph graph
digraph graph numbers
graph numbers assigned
numbers assigned edges
assigned edges numbers
edges numbers called
numbers called weights
called weights costs
weights costs graphs
costs graphs motivated
graphs motivated numerous
motivated numerous real
numerous real world
world applica tions
applica tions finding
shortest path points
path points transportation
points transportation communication
communication network traveling
network traveling salesman
salesman problem mentioned
mentioned earlier principal
earlier principal representations
principal representations graph
representations graph easily
graph easily adopted
easily adopted accommo
adopted accommo date
accommo date weighted
date weighted graphs
weighted graph represented
adjacency matrix element
matrix element simply
element simply weight
simply weight edge
weight edge ith
ith vertex edge
vertex edge special
edge special symbol
special symbol edge
symbol edge matrix
edge matrix called
matrix called weight
called weight matrix
weight matrix cost
cost matrix approach
matrix approach illustrated
approach illustrated figure
illustrated figure weighted
weighted graph figure
graph figure plications
figure plications convenient
plications convenient main
convenient main diagonal
main diagonal adjacency
diagonal adjacency matrix
adjacency lists weighted
lists weighted graph
weighted graph nodes
graph nodes adjacent
nodes adjacent vertex
adjacent vertex weight
edge figure paths
figure paths cycles
paths cycles properties
cycles properties graphs
properties graphs important
graphs important great
important great applications
great applications connectivity
connectivity acyclicity based
acyclicity based notion
based notion path
notion path vertex
path vertex graph
vertex graph defined
graph defined sequence
sequence adjacent connected
adjacent connected edge
connected edge vertices
edge vertices starts
starts ends vertices
ends vertices path
vertices path distinct
path distinct path
distinct path simple
simple length path
length path total
path total vertices
total vertices vertex
vertices vertex sequence
vertex sequence defining
sequence defining path
edges path simple
simple path length
path length graph
length graph figure
figure path simple
simple length figure
length figure weighted
weight matrix adjacency
lists figure graph
graph connected case
connected case directed
case directed graph
directed graph interested
graph interested directed
interested directed paths
directed path sequence
path sequence vertices
sequence vertices consecutive
vertices consecutive pair
connected edge directed
directed vertex listed
vertex listed directed
listed directed path
directed path graph
graph connected pair
connected pair vertices
pair vertices path
vertices path make
path make model
make model connected
model connected graph
connected graph connecting
graph connecting balls
connecting balls representing
balls representing graph
representing graph vertices
graph vertices strings
vertices strings representing
strings representing edges
representing edges single
edges single piece
single piece graph
piece graph connected
graph connected model
connected model connected
model connected pieces
connected pieces called
pieces called connected
called connected components
components graph formally
graph formally connected
formally connected component
connected component maximal
component maximal expandable
maximal expandable vertex
expandable vertex edge
vertex edge connected
edge connected subgraph
connected subgraph graph
subgraph graph graphs
graph graphs figures
graphs figures connected
figures connected graph
figure path graph
graph figure connected
figure connected components
components vertices graphs
vertices graphs connected
graphs connected components
connected components real
components real world
world appli cations
appli cations graph
cations graph representing
graph representing interstate
representing interstate highway
interstate highway united
highway united states
united states important
states important applications
important applications graph
applications graph consideration
graph consideration cycles
consideration cycles path
cycles path positive
positive length starts
length starts ends
ends vertex traverse
vertex traverse edge
traverse edge graph
edge graph figure
graph cycles acyclic
cycles acyclic discuss
acyclic discuss acyclic
discuss acyclic graphs
acyclic graphs subsection
graphs subsection trees
subsection trees tree
trees tree accurately
tree accurately free
accurately free tree
free tree connected
tree connected acyclic
connected acyclic graph
acyclic graph figure
graph cycles necessarily
cycles necessarily connected
necessarily connected called
connected called forest
called forest connected
forest connected components
connected components tree
components tree figure
tree figure subgraph
figure subgraph graph
subgraph graph figure
graph figure tree
figure tree forest
tree forest figure
forest figure free
figure free tree
free tree transformation
tree transformation rooted
transformation rooted tree
rooted tree trees
tree trees important
trees important properties
properties graphs par
graphs par ticular
par ticular edges
ticular edges tree
edges tree vertices
graph figure demonstrates
figure demonstrates property
demonstrates property suffi
property suffi cient
suffi cient graph
cient graph tree
graph tree connected
tree connected graphs
connected graphs sufficient
graphs sufficient convenient
sufficient convenient checking
convenient checking connected
checking connected graph
connected graph rooted
graph rooted trees
trees important property
important property trees
property trees fact
trees fact vertices
fact vertices tree
vertices tree exists
tree exists simple
exists simple path
simple path vertices
path vertices property
vertices property makes
property makes select
makes select arbitrary
select arbitrary vertex
arbitrary vertex free
free tree root
tree root called
root called rooted
called rooted tree
rooted tree depicted
tree depicted placing
depicted placing root
placing root tree
vertices adjacent root
adjacent root vertices
root vertices edges
vertices edges root
edges root figure
root figure presents
figure presents transformation
presents transformation free
transformation free tree
tree rooted trees
trees important role
important role science
role science important
science important free
important free trees
free trees fact
trees fact sake
fact sake brevity
sake brevity referred
brevity referred simply
referred simply trees
simply trees obvious
trees obvious application
obvious application trees
application trees describing
trees describing hierarchies
describing hierarchies directories
hierarchies directories organizational
directories organizational charts
organizational charts enterprises
charts enterprises obvious
enterprises obvious applications
obvious applications implementing
applications implementing dictionaries
implementing dictionaries efficient
dictionaries efficient access
data sets section
sets section data
section data encoding
data encoding section
encoding section discuss
section discuss chapter
discuss chapter trees
chapter trees helpful
trees helpful analysis
helpful analysis recursive
recursive algorithms finish
algorithms finish tree
finish tree applications
tree applications mention
applications mention called
mention called state
state space trees
space trees underline
trees underline important
underline important algorithm
design techniques backtracking
techniques backtracking bound
bound sections vertex
sections vertex tree
vertex tree vertices
tree vertices simple
vertices simple path
root vertex called
vertex called ancestors
called ancestors vertex
ancestors vertex considered
vertex considered ancestor
considered ancestor set
ancestor set ancestors
set ancestors excludes
ancestors excludes vertex
excludes vertex referred
vertex referred set
referred set proper
set proper ancestors
proper ancestors edge
ancestors edge simple
edge simple path
root vertex parent
vertex parent called
parent called child
called child vertices
child vertices parent
vertices parent siblings
parent siblings vertex
siblings vertex children
vertex children called
children called leaf
called leaf vertex
leaf vertex child
vertex child called
child called parental
called parental vertices
parental vertices vertex
vertices vertex ancestor
vertex ancestor descendants
ancestor descendants proper
descendants proper descendants
proper descendants exclude
descendants exclude vertex
exclude vertex descendants
vertex descendants vertex
descendants vertex edges
vertex edges connecting
edges connecting subtree
connecting subtree rooted
subtree rooted vertex
rooted vertex tree
figure root tree
tree vertices leaves
vertices leaves vertices
leaves vertices parental
vertices parental parent
parental parent children
parent children siblings
children siblings vertices
siblings vertices subtree
vertices subtree rooted
subtree rooted depth
rooted depth vertex
depth vertex length
vertex length simple
path root height
root height tree
height tree length
tree length longest
root leaf depth
leaf depth vertex
depth vertex tree
tree figure height
figure height tree
levels starting root
starting root depth
root depth vertex
depth vertex simply
vertex simply tree
simply tree height
tree height maximum
height maximum vertices
maximum vertices fact
vertices fact authors
fact authors define
authors define height
tree levels makes
levels makes height
makes height tree
height tree larger
tree larger height
larger height defined
root leaf ordered
leaf ordered trees
ordered trees ordered
trees ordered tree
ordered tree rooted
rooted tree children
tree children vertex
children vertex ordered
vertex ordered convenient
ordered convenient assume
convenient assume tree
assume tree diagram
tree diagram children
diagram children ordered
children ordered left
ordered left binary
left binary tree
tree defined ordered
defined ordered tree
ordered tree vertex
tree vertex children
vertex children child
children child designated
child designated left
designated left child
left child parent
child parent binary
parent binary tree
child vertex binary
vertex binary tree
binary tree called
tree called left
left subtree vertex
subtree vertex left
vertex left subtrees
subtrees binary trees
tree defined recursively
defined recursively makes
recursively makes solve
makes solve problems
solve problems involving
problems involving binary
involving binary trees
binary trees recursive
trees recursive algorithms
recursive algorithms figure
algorithms figure binary
binary tree null
tree null figure
null figure standard
figure standard implementation
standard implementation binary
tree figure numbers
figure numbers assigned
assigned vertices binary
vertices binary tree
tree figure assigned
figure assigned parental
assigned parental vertex
parental vertex larger
vertex larger numbers
larger numbers left
numbers left subtree
subtree smaller numbers
smaller numbers subtree
numbers subtree trees
subtree trees called
trees called binary
called binary trees
binary trees wide
trees wide variety
applications science encounter
science encounter binary
encounter binary trees
binary trees generalized
trees generalized general
generalized general types
general types trees
types trees called
trees called multiway
called multiway trees
multiway trees indispensable
trees indispensable efficient
indispensable efficient access
data sets efficiency
sets efficiency important
efficiency important algorithms
important algorithms binary
binary trees extensions
trees extensions depends
extensions depends tree
tree height fore
height fore inequalities
fore inequalities height
inequalities height binary
tree nodes important
nodes important analysis
algorithms log binary
binary tree implemented
tree implemented computing
implemented computing purposes
computing purposes collection
purposes collection nodes
collection nodes vertices
nodes vertices tree
vertices tree node
tree node informa
node informa tion
informa tion vertex
tion vertex assigned
vertex assigned pointers
assigned pointers nodes
pointers nodes representing
nodes representing left
representing left child
child vertex spectively
vertex spectively figure
spectively figure illustrates
figure illustrates implementation
illustrates implementation binary
tree figure representation
figure representation arbitrary
representation arbitrary ordered
arbitrary ordered tree
ordered tree simply
tree simply providing
simply providing parental
providing parental vertex
parental vertex pointers
vertex pointers equal
pointers equal children
equal children representation
children representation prove
representation prove inconvenient
prove inconvenient children
inconvenient children varies
children varies widely
varies widely nodes
widely nodes inconvenience
nodes inconvenience nodes
inconvenience nodes pointers
nodes pointers binary
pointers binary trees
binary trees left
trees left pointer
left pointer child
pointer child vertex
child vertex pointer
vertex pointer sibling
pointer sibling representation
sibling representation called
representation called child
called child sibling
sibling representation siblings
representation siblings vertex
siblings vertex linked
vertex linked nodes
linked nodes pointers
nodes pointers singly
pointers singly linked
singly linked element
linked element pointed
element pointed left
pointed left pointer
left pointer parent
pointer parent figure
parent figure illustrates
figure illustrates representation
illustrates representation tree
tree figure difficult
figure difficult representation
difficult representation effectively
representation effectively transforms
effectively transforms ordered
transforms ordered tree
ordered tree binary
binary tree ordered
ordered tree representation
tree representation rotating
representation rotating pointers
rotating pointers degrees
pointers degrees clockwise
degrees clockwise figure
clockwise figure sets
figure sets dictionaries
sets dictionaries notion
dictionaries notion set
notion set plays
set plays central
central role mathematics
role mathematics set
mathematics set unordered
unordered collection possibly
collection possibly distinct
possibly distinct items
distinct items called
items called elements
called elements null
elements null figure
null figure child
figure child sibling
sibling representation tree
tree representation set
representation set specific
set specific set
specific set defined
set defined explicit
defined explicit listing
explicit listing elements
listing elements property
elements property set
property set elements
set elements prime
elements prime smaller
prime smaller important
smaller important set
important set operations
set operations checking
operations checking membership
checking membership item
membership item set
item set finding
set finding union
finding union sets
union sets comprises
sets comprises elements
comprises elements finding
elements finding intersection
finding intersection sets
intersection sets comprises
sets comprises common
comprises common elements
common elements sets
elements sets implemented
sets implemented applications
implemented applications ways
applications ways considers
ways considers sets
considers sets subsets
sets subsets large
subsets large set
large set called
set called universal
called universal set
universal set elements
elements subset represented
subset represented bit
bit string size
string size called
size called bit
called bit vector
bit vector ith
vector ith element
ith element included
element included set
included set represented
set represented bit
string representing sets
representing sets makes
sets makes implement
makes implement standard
implement standard set
standard set operations
set operations fast
operations fast expense
fast expense potentially
expense potentially large
potentially large storage
large storage common
storage common represent
common represent set
represent set computing
set computing purposes
computing purposes structure
purposes structure set
structure set elements
set elements option
elements option feasible
option feasible finite
feasible finite sets
finite sets fortunately
sets fortunately mathematics
fortunately mathematics kind
mathematics kind sets
kind sets applications
sets applications principal
applications principal points
principal points distinction
points distinction sets
distinction sets lists
lists set identical
set identical elements
identical elements requirement
elements requirement uniqueness
requirement uniqueness circumvented
uniqueness circumvented introduction
circumvented introduction multiset
introduction multiset bag
multiset bag unordered
bag unordered collection
collection items necessarily
items necessarily distinct
necessarily distinct set
distinct set unordered
collection items changing
items changing elements
changing elements set
elements set defined
set defined ordered
defined ordered collection
ordered collection items
collection items important
items important theoretical
important theoretical distinction
theoretical distinction fortunately
distinction fortunately important
fortunately important applications
important applications mentioning
applications mentioning set
mentioning set represented
set represented depending
represented depending application
depending application maintaining
application maintaining sorted
maintaining sorted computing
sorted computing operations
computing operations set
operations set multiset
set multiset searching
multiset searching item
searching item adding
adding item deleting
deleting item collection
item collection data
collection data structure
data structure implements
structure implements operations
implements operations called
operations called dictionary
called dictionary relationship
dictionary relationship data
relationship data structure
data structure problem
structure problem searching
problem searching mentioned
searching mentioned section
mentioned section dealing
section dealing searching
dealing searching dynamic
searching dynamic context
dynamic context efficient
context efficient implementation
efficient implementation dictionary
implementation dictionary strike
dictionary strike compromise
strike compromise efficiency
compromise efficiency searching
efficiency searching efficiencies
searching efficiencies operations
efficiencies operations ways
operations ways dictionary
ways dictionary implemented
dictionary implemented range
implemented range unsophisticated
range unsophisticated arrays
unsophisticated arrays sorted
arrays sorted sophisticated
sorted sophisticated techniques
sophisticated techniques hashing
techniques hashing balanced
balanced trees discuss
trees discuss applications
discuss applications computing
applications computing require
computing require dynamic
element subsets collection
subsets collection subjected
union operations problem
operations problem called
problem called set
called set union
set union problem
union problem discuss
problem discuss efficient
discuss efficient algorithmic
efficient algorithmic solutions
algorithmic solutions problem
solutions problem section
problem section conjunction
section conjunction important
conjunction important applications
important applications noticed
applications noticed review
noticed review basic
data structures mentioned
structures mentioned specific
mentioned specific operations
specific operations typically
operations typically performed
typically performed structure
performed structure intimate
structure intimate relationship
intimate relationship data
relationship data operations
data operations recognized
operations recognized scientists
recognized scientists led
scientists led idea
led idea abstract
idea abstract data
data adt set
adt set abstract
set abstract objects
abstract objects representing
objects representing data
representing data items
items collection operations
collection operations performed
operations performed illustrations
performed illustrations notion
illustrations notion reread
notion reread definitions
reread definitions priority
definitions priority dictionary
priority dictionary abstract
data types implemented
types implemented older
implemented older procedural
older procedural languages
procedural languages pascal
languages pascal aho
pascal aho convenient
aho convenient oriented
convenient oriented languages
oriented languages java
languages java abstract
java abstract data
data types means
types means classes
means classes exercises
classes exercises implement
exercises implement operations
implement operations array
operations array takes
array takes array
takes array size
array size delete
size delete ith
ith element array
element array delete
array delete ith
ith element sorted
remaining array sorted
array sorted solve
sorted solve searching
solve searching problem
searching problem numbers
problem numbers advantage
numbers advantage fact
advantage fact sorted
fact sorted answers
sorted answers lists
answers lists represented
lists represented arrays
represented arrays lists
arrays lists represented
lists represented linked
represented linked lists
linked lists stack
lists stack operation
sequence starts stack
starts stack operation
sequence starts enqueue
starts enqueue dequeue
enqueue dequeue enqueue
dequeue enqueue dequeue
enqueue dequeue adjacency
dequeue adjacency matrix
undirected graph prop
graph prop erty
prop erty matrix
erty matrix graph
matrix graph loop
graph loop edge
loop edge connecting
connecting vertex iii
vertex iii graph
iii graph isolated
graph isolated vertex
isolated vertex edges
vertex edges incident
edges incident questions
incident questions adjacency
questions adjacency representation
adjacency representation detailed
representation detailed description
detailed description algorithm
description algorithm transforming
algorithm transforming free
transforming free tree
tree rooted vertex
rooted vertex free
free tree prove
tree prove inequalities
prove inequalities bracket
inequalities bracket height
bracket height binary
binary tree vertices
tree vertices log
vertices log adt
log adt priority
adt priority implemented
binary tree implement
tree implement dictionary
implement dictionary small
dictionary small size
small size knew
size knew elements
knew elements distinct
elements distinct names
distinct names states
names states united
united states implementation
states implementation dictionary
implementation dictionary operation
dictionary operation applications
operation applications data
applications data structure
data structure answering
structure answering calls
answering calls priorities
calls priorities sending
priorities sending backlog
sending backlog orders
backlog orders customers
orders customers received
customers received implementing
received implementing calculator
implementing calculator computing
calculator computing simple
computing simple arithmetical
simple arithmetical expressions
arithmetical expressions anagram
expressions anagram checking
anagram checking design
checking design algorithm
design algorithm checking
algorithm checking words
checking words anagrams
words anagrams word
anagrams word obtained
word obtained permuting
obtained permuting letters
permuting letters words
letters words tea
words tea eat
tea eat anagrams
eat anagrams summary
anagrams summary algorithm
summary algorithm sequence
algorithm sequence nonambiguous
sequence nonambiguous instructions
nonambiguous instructions solving
solving problem finite
problem finite input
finite input algorithm
algorithm solves algorithms
solves algorithms natural
language pseudocode implemented
pseudocode implemented programs
implemented programs ways
programs ways classify
ways classify algorithms
classify algorithms principal
algorithms principal alternatives
principal alternatives group
alternatives group algorithms
group algorithms types
algorithms types problems
types problems solve
problems solve group
solve group algorithms
group algorithms underlying
underlying design techniques
design techniques based
techniques based important
based important problem
numerical problems algorithm
problems algorithm design
design techniques strategies
techniques strategies paradigms
strategies paradigms general
paradigms general approaches
general approaches solving
areas computing designing
computing designing algorithm
designing algorithm undoubtedly
algorithm undoubtedly creative
undoubtedly creative activity
creative activity sequence
activity sequence interrelated
sequence interrelated actions
interrelated actions involved
actions involved process
involved process summarized
process summarized figure
summarized figure good
result repeated efforts
repeated efforts rework
efforts rework problem
rework problem solved
solved algorithms computing
divisor integers euclid
euclid algorithm consecutive
algorithm consecutive integer
checking algorithm middle
algorithm middle school
school method enhanced
method enhanced sieve
enhanced sieve eratosthenes
sieve eratosthenes generating
eratosthenes generating primes
generating primes algorithms
primes algorithms operate
operate data makes
data makes issue
makes issue data
issue data structuring
data structuring critical
structuring critical efficient
critical efficient algorithmic
efficient algorithmic problem
problem solving important
solving important elementary
array linked representing
linked representing abstract
abstract data structures
data structures stack
structures stack graph
stack graph adjacency
adjacency lists binary
tree set abstract
set abstract collection
abstract collection objects
collection objects operations
objects operations performed
operations performed called
performed called abstract
called abstract data
data adt stack
adt stack priority
stack priority dictionary
priority dictionary important
dictionary important examples
important examples abstract
examples abstract data
data types modern
types modern oriented
modern oriented languages
oriented languages implementation
languages implementation adts
implementation adts means
adts means classes
write pseudocode algorithm
input adjacency matrix
subset items fits
items fits knapsack
operations searching insertion
efficient algorithm computing
problem efficiency class
problem exhaustive problem
subtree keys subtree
keys subtree key
efficiency quadratic efficiency
computing product matrices
ing dynamic programming
column element column
matrix prove matrix
elements output array
sort selection sort
worst average cases
selection sort selection
graph output graph
secret life charles
life charles schulz
charles schulz american
schulz american cartoonist
american cartoonist creator
cartoonist creator peanuts
creator peanuts chapter
peanuts chapter deals
chapter deals group
deals group design
group design methods
design methods based
methods based idea
idea transformation general
transformation general technique
general technique transform
technique transform conquer
transform conquer methods
conquer methods stage
methods stage procedures
stage procedures transformation
procedures transformation stage
transformation stage problem
stage problem instance
problem instance modified
instance modified reason
modified reason amenable
reason amenable solution
amenable solution conquering
solution conquering stage
conquering stage solved
stage solved major
solved major variations
major variations idea
variations idea differ
idea differ transform
differ transform instance
transform instance figure
instance figure transformation
figure transformation simpler
transformation simpler convenient
simpler convenient instance
convenient instance problem
problem instance simplification
instance simplification transformation
simplification transformation representation
transformation representation instance
representation instance representation
instance representation transformation
representation transformation instance
transformation instance problem
problem reduction sections
reduction sections chapter
sections chapter encounter
chapter encounter examples
encounter examples instance
examples instance simplification
simplification variety section
variety section deals
section deals simple
deals simple fruitful
simple fruitful idea
fruitful idea presorting
idea presorting algorithmic
presorting algorithmic problems
algorithmic problems easier
problems easier solve
easier solve input
solve input sorted
input sorted benefits
sorted benefits sorting
benefits sorting compensate
sorting compensate simpler
compensate simpler instance
simpler instance problem
instance problem representation
problem representation solution
representation solution instance
problem instance figure
instance figure transform
figure transform conquer
conquer strategy spent
strategy spent dealing
spent dealing unsorted
dealing unsorted input
unsorted input directly
input directly section
directly section introduces
section introduces important
introduces important algorithms
important algorithms applied
algorithms applied mathematics
applied mathematics gaussian
mathematics gaussian elimination
elimination algorithm solves
solves linear equations
linear equations transforming
equations transforming special
transforming special property
property makes finding
makes finding solution
finding solution easy
solution easy section
easy section ideas
section ideas instance
ideas instance simplification
simplification representation applied
representation applied trees
applied trees results
trees results avl
results avl trees
avl trees multiway
trees multiway balanced
multiway balanced trees
balanced trees simplest
trees simplest case
case trees section
trees section presents
section presents heaps
presents heaps heapsort
heaps heapsort familiar
heapsort familiar important
familiar important data
data structure application
structure application sorting
application sorting benefit
sorting benefit light
benefit light transform
light transform conquer
transform conquer design
conquer design section
design section discuss
section discuss horner
discuss horner remarkable
horner remarkable algorithm
remarkable algorithm evaluating
algorithm evaluating polynomials
evaluating polynomials algorithm
polynomials algorithm hall
algorithm hall fame
hall fame horner
fame horner candidate
horner candidate induction
candidate induction based
induction based algorithm
based algorithm elegance
algorithm elegance efficiency
elegance efficiency interesting
efficiency interesting algorithms
interesting algorithms exponentiation
exponentiation problem based
problem based representation
representation idea chapter
idea chapter concludes
chapter concludes review
concludes review applications
review applications variety
applications variety transform
transform conquer problem
conquer problem reduction
problem reduction variety
reduction variety considered
variety considered radical
considered radical problem
radical problem reduced
problem reduced transformed
reduced transformed problem
transformed problem powerful
problem powerful idea
powerful idea extensively
idea extensively complexity
extensively complexity theory
complexity theory chapter
theory chapter application
chapter application designing
application designing practical
designing practical algorithms
practical algorithms trivial
algorithms trivial problem
trivial problem transformed
problem transformed make
transformed make transformation
make transformation algorithm
transformation algorithm solving
solving prob lem
prob lem efficient
lem efficient compared
efficient compared algorithmic
compared algorithmic alternatives
algorithmic alternatives examples
alternatives examples discuss
examples discuss important
discuss important special
special case mathematical
case mathematical modeling
mathematical modeling expressing
modeling expressing problem
expressing problem terms
problem terms purely
terms purely mathematical
purely mathematical objects
mathematical objects variables
objects variables functions
variables functions equations
functions equations presorting
equations presorting idea
presorting idea science
idea science fact
science fact sorting
fact sorting algorithms
sorting algorithms significant
algorithms significant degree
significant degree fact
degree fact questions
fact questions easier
questions easier sorted
easier sorted efficiency
sorted efficiency algorithms
efficiency algorithms involve
algorithms involve sorting
involve sorting efficiency
sorting algorithm sake
algorithm sake simplicity
assume section lists
section lists implemented
lists implemented arrays
implemented arrays sorting
sorting algorithms easier
algorithms easier implement
easier implement array
implement array representation
array representation discussed
representation discussed elementary
discussed elementary sorting
selection sort insertion
insertion sort quadratic
sort quadratic worst
quadratic worst average
average cases advanced
cases advanced algorithms
advanced algorithms mergesort
algorithms mergesort log
mergesort log quicksort
log quicksort efficiency
quicksort efficiency log
efficiency log average
log average case
average case quadratic
case quadratic worst
worst case faster
case faster sorting
faster sorting algorithms
sorting algorithms stated
algorithms stated section
stated section general
section general comparison
worst case result
case result holds
result holds average
holds average case
case efficiency examples
efficiency examples illustrate
examples illustrate idea
illustrate idea presorting
idea presorting examples
presorting examples section
examples section exercises
section exercises checking
exercises checking element
checking element uniqueness
element uniqueness array
uniqueness array element
array element unique
element unique ness
unique ness problem
ness problem familiar
problem familiar considered
familiar considered brute
considered brute algo
problem section brute
section brute algorithm
brute algorithm compared
algorithm compared pairs
compared pairs array
equal elements pairs
elements pairs left
pairs left worst
left worst case
case efficiency alternatively
efficiency alternatively sort
alternatively sort array
sort array consecutive
consecutive elements array
elements array equal
equal elements pair
elements pair vice
pair vice versa
vice versa algorithm
versa algorithm presortelementuniqueness
algorithm presortelementuniqueness solves
presortelementuniqueness solves element
solves element uniqueness
uniqueness problem sorting
sorting array input
elements output returns
returns true equal
true equal elements
equal elements false
elements false sort
false sort array
sort array false
array false true
false true running
true running algorithm
running algorithm sum
algorithm sum spent
sum spent sorting
spent sorting spent
sorting spent checking
spent checking consecutive
checking consecutive elements
consecutive elements requires
elements requires log
log comparisons sorting
comparisons sorting determine
sorting determine efficiency
determine efficiency algorithm
algorithm quadratic sorting
quadratic sorting algorithm
sorting algorithm entire
entire algorithm efficient
algorithm efficient brute
efficient brute good
brute good sorting
algorithm mergesort worst
case efficiency entire
efficiency entire presorting
entire presorting based
based algorithm log
algorithm log tsort
log tsort tscan
tsort tscan log
tscan log computing
log computing mode
computing mode occurs
mode occurs numbers
occurs numbers mode
numbers mode values
mode values considered
values considered mode
considered mode brute
mode brute approach
brute approach computing
approach computing mode
computing mode scan
mode scan compute
scan compute frequencies
compute frequencies distinct
frequencies distinct values
distinct values largest
values largest frequency
largest frequency sorting
frequency sorting algorithms
sorting algorithms called
algorithms called radix
called radix sorts
radix sorts linear
sorts linear terms
linear terms total
terms total input
total input bits
input bits algorithms
bits algorithms comparing
algorithms comparing individual
comparing individual bits
individual bits pieces
bits pieces keys
pieces keys entirety
keys entirety running
entirety running algorithms
running algorithms proportional
algorithms proportional input
proportional input bits
input bits essentially
bits essentially log
essentially log algorithms
log algorithms bits
algorithms bits key
bits key log
key log accommodate
log accommodate distinct
accommodate distinct keys
distinct keys input
keys input implement
input implement idea
implement idea values
idea values encountered
values encountered frequencies
encountered frequencies iteration
frequencies iteration ith
iteration ith element
ith element original
element original compared
original compared values
compared values encountered
values encountered traversing
encountered traversing auxiliary
traversing auxiliary matching
auxiliary matching frequency
matching frequency incremented
frequency incremented current
incremented current element
current element added
element added distinct
added distinct values
distinct values frequency
values frequency difficult
frequency difficult worst
difficult worst case
case input algorithm
input algorithm equal
algorithm equal elements
equal elements ith
elements ith element
ith element compared
element compared elements
compared elements auxiliary
elements auxiliary distinct
auxiliary distinct values
distinct values added
values added frequency
added frequency result
frequency result worst
result worst case
comparisons algorithm creating
algorithm creating frequency
creating frequency additional
frequency additional comparisons
additional comparisons needed
comparisons needed largest
needed largest frequency
largest frequency aux
frequency aux iliary
aux iliary quadratic
iliary quadratic worst
class algorithm alternative
algorithm alternative sort
alternative sort input
sort input equal
input equal values
equal values adjacent
values adjacent compute
adjacent compute mode
compute mode longest
mode longest run
longest run adjacent
run adjacent equal
adjacent equal values
equal values sorted
values sorted array
array algorithm presortmode
algorithm presortmode computes
presortmode computes mode
computes mode array
mode array sorting
array sorting input
sorting input array
output array mode
array mode sort
mode sort array
sort array current
array current run
current run begins
run begins position
begins position modef
position modef requency
modef requency highest
requency highest frequency
highest frequency runlength
frequency runlength runvalue
runvalue runlength runvalue
runvalue runlength modef
runlength modef requency
modef requency modef
requency modef requency
modef requency runlength
requency runlength modevalue
runlength modevalue runvalue
modevalue runvalue runlength
runvalue runlength modevalue
runlength modevalue analysis
modevalue analysis similar
analysis similar analysis
similar analysis running
analysis running algorithm
running algorithm dominated
algorithm dominated spent
dominated spent sorting
spent sorting remainder
sorting remainder algorithm
remainder algorithm takes
algorithm takes linear
takes linear log
linear log sort
log sort method
sort method worst
method worst case
case efficiency asymptotic
efficiency asymptotic class
asymptotic class worst
algorithm searching problem
problem searching array
searching array sortable
array sortable items
sortable items brute
items brute solution
brute solution sequential
solution sequential section
sequential section comparisons
section comparisons worst
case array sorted
array sorted apply
sorted apply binary
apply binary requires
binary requires log
case assuming efficient
assuming efficient log
efficient log sort
log sort total
sort total running
total running searching
running searching algorithm
searching algorithm worst
worst case tsort
case tsort tsearch
tsort tsearch log
tsearch log inferior
log inferior sequential
inferior sequential true
sequential true averagecase
true averagecase efficiency
averagecase efficiency spent
efficiency spent sorting
spent sorting justified
sorting justified problem
justified problem section
exercises asks estimate
asks estimate minimum
estimate minimum searches
minimum searches needed
needed justify presorting
justify presorting finish
presorting finish discussion
finish discussion presorting
discussion presorting mention
presorting mention geometric
mention geometric algorithms
geometric algorithms dealing
algorithms dealing sets
dealing sets points
sets points presorting
points presorting points
presorting points sorted
points sorted coordinates
sorted coordinates distance
coordinates distance line
distance line angle
line angle presorting
angle presorting conquer
presorting conquer algorithms
conquer algorithms closest
algorithms closest pair
hull problem discussed
discussed section problems
section problems directed
problems directed acyclic
acyclic graphs solved
graphs solved easily
solved easily topologically
easily topologically sorting
topologically sorting digraph
sorting digraph problems
digraph problems finding
problems finding longest
finding longest shortest
longest shortest paths
shortest paths digraphs
paths digraphs exercises
digraphs exercises sections
exercises sections illustrate
sections illustrate finally
illustrate finally algorithms
finally algorithms based
based greedy technique
greedy technique subject
technique subject chapter
subject chapter require
chapter require presorting
require presorting inputs
presorting inputs intrinsic
inputs intrinsic operations
intrinsic operations exercises
operations exercises problem
exercises problem finding
problem finding distance
distance closest numbers
closest numbers array
array numbers distance
numbers distance numbers
distance numbers computed
numbers computed design
computed design presorting
class efficiency algorithm
efficiency algorithm brute
problem exercises sets
exercises sets numbers
sets numbers problem
numbers problem finding
problem finding intersection
intersection set numbers
set numbers design
numbers design brute
class design presorting
efficiency class problem
problem finding smallest
finding smallest largest
largest elements array
array numbers design
numbers design presorting
class efficiency algorithms
efficiency algorithms brute
algo rithm presorting
rithm presorting based
based algorithm iii
algorithm iii conquer
iii conquer algorithm
exercises estimate searches
estimate searches needed
needed justify spent
justify spent presorting
spent presorting array
presorting array elements
array elements sorting
elements sorting mergesort
sorting mergesort searching
mergesort searching binary
searching binary assume
binary assume searches
assume searches elements
searches elements array
elements sort design
sort design efficient
solving problems determine
problems determine efficiency
efficiency class bills
class bills checks
bills checks pay
checks pay bills
pay bills assuming
bills assuming numbers
assuming numbers written
numbers written checks
written checks failed
checks failed pay
failed pay simplicity
pay simplicity assume
simplicity assume written
assume written covers
written covers student
covers student records
student records indicating
records indicating student
indicating student home
student home address
home address date
address date birth
date birth students
birth students states
students states set
states set points
cartesian plane simple
plane simple polygon
simple polygon closed
polygon closed path
closed path points
path points line
line segments polygon
segments polygon edges
polygon edges intersect
edges intersect neighboring
intersect neighboring edges
neighboring edges common
edges common vertex
common vertex problem
vertex problem solution
problem solution unique
unique solution design
solution design efficient
solving problem indi
problem indi cate
real numbers integer
numbers integer array
integer array elements
array elements sum
elements sum array
sum array design
array design algorithm
quadratic efficiency intervals
efficiency intervals real
real line interval
line interval comprises
interval comprises points
comprises points strictly
points strictly endpoints
strictly endpoints maximum
endpoints maximum intervals
maximum intervals common
intervals common intervals
common intervals maximum
intervals maximum design
maximum design algorithm
quadratic efficiency placement
efficiency placement distinct
placement distinct integers
distinct integers sequence
integers sequence boxes
sequence boxes pre
boxes pre set
pre set inequality
set inequality signs
inequality signs inserted
signs inserted design
inserted design algo
design algo rithm
algo rithm places
rithm places numbers
places numbers boxes
numbers boxes inequalities
boxes inequalities numbers
inequalities numbers boxes
numbers boxes shown
boxes shown maxima
shown maxima cartesian
maxima cartesian plane
cartesian plane dominated
plane dominated inequalities
dominated inequalities strict
inequalities strict set
strict set points
set points maximum
points maximum set
maximum set dominated
set dominated set
dominated set figure
set figure maximum
figure maximum points
set points circled
points circled design
circled design efficient
finding maximum points
cartesian plane efficiency
plane efficiency class
class algorithm real
algorithm real world
world applications algorithm
applications algorithm anagram
algorithm anagram detection
anagram detection design
detection design efficient
algorithm finding sets
finding sets anagrams
sets anagrams large
anagrams large dictionary
large dictionary english
dictionary english words
english words ben
words ben eat
ben eat ate
eat ate tea
ate tea set
tea set write
set write implementing
write implementing algorithm
implementing algorithm gaussian
gaussian elimination familiar
elimination familiar systems
familiar systems linear
equations unknowns recall
unknowns recall coefficients
recall coefficients equation
coefficients equation proportional
equation proportional coef
proportional coef ficients
coef ficients unique
ficients unique solution
unique solution standard
solution standard method
standard method finding
method finding solution
finding solution equation
solution equation express
equation express variables
express variables function
variables function substitute
function substitute result
substitute result equation
result equation yield
equation yield ing
yield ing linear
linear equation solution
equation solution variable
solution variable applications
variable applications solve
applications solve equations
solve equations unknowns
equations unknowns nxn
unknowns nxn annxn
nxn annxn large
annxn large theoretically
large theoretically solve
theoretically solve general
solve general izing
general izing substitution
izing substitution method
substitution method solving
method solving systems
linear equations general
equations general design
design technique method
technique method based
method based resulting
based resulting algorithm
resulting algorithm extremely
algorithm extremely cumbersome
extremely cumbersome fortunately
cumbersome fortunately elegant
fortunately elegant algorithm
elegant algorithm solving
linear equations called
equations called gaussian
called gaussian elimination
gaussian elimination idea
elimination idea gaussian
idea gaussian elimination
gaussian elimination transform
elimination transform linear
transform linear equations
equations unknowns equivalent
unknowns equivalent solution
equivalent solution original
coefficient matrix zeros
main diagonal method
diagonal method named
method named carl
friedrich gauss giants
gauss giants history
giants history mathematics
history mathematics isaac
mathematics isaac newton
isaac newton leonhard
newton leonhard euler
leonhard euler numerous
euler numerous fundamental
numerous fundamental contributions
fundamental contributions theoretical
contributions theoretical computational
theoretical computational mathematics
computational mathematics method
mathematics method chinese
method chinese years
chinese years europeans
years europeans rediscovered
europeans rediscovered nxn
rediscovered nxn annxn
nxn annxn matrix
annxn matrix notations
matrix notations write
notations write ann
write ann added
ann added primes
added primes matrix
primes matrix elements
matrix elements sides
elements sides stress
sides stress values
stress values differ
values differ counterparts
differ counterparts original
counterparts original upper
coefficient matrix arbitrary
matrix arbitrary coefficient
coefficient matrix easily
matrix easily solve
easily solve upper
coefficient matrix substitutions
matrix substitutions immediately
substitutions immediately equation
immediately equation substitute
equation substitute equation
substitute equation substitute
equation substitute values
substitute values variables
values variables equation
variables equation arbitrary
equation arbitrary coefficient
coefficient matrix equivalent
matrix equivalent upper
coefficient matrix series
matrix series called
series called elementary
called elementary operations
elementary operations exchanging
operations exchanging equations
exchanging equations replacing
equations replacing equation
replacing equation nonzero
equation nonzero multiple
nonzero multiple replacing
multiple replacing equation
replacing equation sum
equation sum difference
sum difference equation
difference equation multiple
equation multiple equation
multiple equation elementary
equation elementary operation
elementary operation solution
operation solution obtained
solution obtained series
obtained series operations
series operations solution
operations solution original
triangular matrix pivot
matrix pivot make
pivot make coefficients
make coefficients zeros
coefficients zeros equations
zeros equations specifically
equations specifically equation
specifically equation difference
equation difference equation
difference equation multiplied
equation multiplied equation
multiplied equation coefficient
equation coefficient fourth
coefficient fourth finally
fourth finally nth
finally nth equation
nth equation multiples
equation multiples equation
multiples equation makes
equation makes coefficients
makes coefficients equation
coefficients equation rid
equation rid coefficients
rid coefficients subtracting
coefficients subtracting multiple
subtracting multiple equation
multiple equation equations
equation equations repeating
equations repeating elimination
repeating elimination variables
elimination variables ultimately
variables ultimately yields
ultimately yields upper
coefficient matrix gaussian
matrix gaussian elimination
gaussian elimination operate
elimination operate coefficient
operate coefficient matrix
coefficient matrix augmented
matrix augmented column
augmented column equations
column equations values
equations values words
values words write
words write explicitly
write explicitly variable
explicitly variable names
variable names equality
names equality signs
equality signs solve
signs solve gaussian
gaussian elimination row
elimination row solution
row solution substitutions
solution substitutions pseudocode
substitutions pseudocode stage
pseudocode stage called
stage called forward
called forward elimination
forward elimination algorithm
elimination algorithm forwardelimination
algorithm forwardelimination applies
forwardelimination applies gaussian
applies gaussian elimination
elimination matrix coefficients
matrix coefficients augmented
coefficients augmented vector
augmented vector values
vector values input
values input matrix
values column augments
column augments matrix
augments matrix important
matrix important observations
important observations make
observations make pseudocode
make pseudocode ith
pseudocode ith row
ith row pivot
row pivot ith
pivot ith iteration
ith iteration algorithm
iteration algorithm case
algorithm case advantage
case advantage elementary
advantage elementary operation
elementary operation exchange
operation exchange ith
ith row nonzero
row nonzero coefficient
nonzero coefficient ith
ith column unique
column unique solution
unique solution normal
solution normal case
normal case systems
case systems consideration
systems consideration row
consideration row prepared
row prepared possibility
prepared possibility row
possibility row exchanges
row exchanges potential
exchanges potential difficulty
potential difficulty possibility
difficulty possibility small
possibility small scaling
small scaling factor
scaling factor large
factor large distorted
large distorted error
distorted error caused
error caused subtraction
caused subtraction numbers
subtraction numbers greatly
numbers greatly magnitudes
greatly magnitudes problem
magnitudes problem row
problem row largest
row largest absolute
largest absolute coefficient
absolute coefficient ith
ith column exchange
column exchange ith
row ith iteration
ith iteration pivot
iteration pivot modification
pivot modification called
modification called partial
called partial pivoting
partial pivoting guarantees
pivoting guarantees magnitude
guarantees magnitude scaling
magnitude scaling factor
scaling factor exceed
factor exceed observation
exceed observation fact
observation fact innermost
fact innermost loop
innermost loop written
loop written glaring
written glaring inefficiency
glaring inefficiency checking
inefficiency checking pseudocode
checking pseudocode incorporates
pseudocode incorporates partial
incorporates partial pivoting
partial pivoting eliminates
pivoting eliminates inefficiency
eliminates inefficiency algorithm
inefficiency algorithm betterforwardelimination
algorithm betterforwardelimination implements
betterforwardelimination implements gaussian
implements gaussian elimination
gaussian elimination partial
elimination partial pivoting
partial pivoting input
pivoting input matrix
values column appends
column appends column
appends column pivotrow
column pivotrow swap
pivotrow swap pivotrow
swap pivotrow temp
pivotrow temp efficiency
temp efficiency algorithm
efficiency algorithm innermost
innermost loop consists
loop consists single
consists single line
single line temp
line temp discuss
temp discuss errors
discuss errors section
errors section multiplication
section multiplication subtraction
multiplication subtraction computers
subtraction computers multi
computers multi plication
multi plication unquestionably
plication unquestionably expensive
unquestionably expensive addition
subtraction multiplication quoted
multiplication quoted algorithm
quoted algorithm basic
basic operation standard
operation standard summation
standard summation formulas
formulas rules reviewed
rules reviewed section
reviewed section appen
section appen dix
appen dix helpful
dix helpful derivation
helpful derivation substitution
derivation substitution stage
gaussian elimination asked
elimination asked exercises
asked exercises running
exercises running dominated
running dominated cubic
dominated cubic elimination
cubic elimination stage
elimination stage making
stage making entire
making entire algorithm
entire algorithm cubic
algorithm cubic theoretically
cubic theoretically gaussian
theoretically gaussian elimination
elimination yields exact
yields exact solution
exact solution linear
solution linear equations
linear equations unique
equations unique solution
unique solution discovers
solution discovers solution
discovers solution exists
solution exists case
exists case solutions
case solutions infinitely
solutions infinitely practice
infinitely practice solving
practice solving systems
solving systems significant
systems significant size
significant size method
size method straightforward
straightforward method lead
method lead principal
lead principal difficulty
principal difficulty lies
difficulty lies preventing
lies preventing accumulation
preventing accumulation errors
accumulation errors section
errors section consult
section consult textbooks
consult textbooks numerical
textbooks numerical analysis
numerical analysis analyze
analysis analyze implementation
analyze implementation issues
implementation issues great
issues great decomposition
great decomposition gaussian
decomposition gaussian elimination
gaussian elimination interesting
elimination interesting byproduct
interesting byproduct called
byproduct called composition
called composition coefficient
composition coefficient matrix
coefficient matrix fact
matrix fact modern
fact modern commercial
modern commercial implementa
commercial implementa tions
implementa tions gaussian
tions gaussian elimination
gaussian elimination based
elimination based decomposition
based decomposition basic
decomposition basic algorithm
basic algorithm outlined
algorithm outlined beginning
outlined beginning section
beginning section applied
section applied gaussian
applied gaussian elimination
elimination matrix mentioned
matrix mentioned section
mentioned section computers
section computers multiplication
computers multiplication necessarily
multiplication necessarily expensive
necessarily expensive addition
addition subtraction algorithm
subtraction algorithm moot
algorithm moot simply
moot simply times
simply times innermost
times innermost loop
loop executed multiplications
executed multiplications subtractions
multiplications subtractions lower
subtractions lower triangular
triangular matrix main
matrix main diagonal
main diagonal row
diagonal row multiples
row multiples forward
multiples forward elimination
forward elimination process
elimination process upper
process upper triangular
triangular matrix result
matrix result elimination
result elimination turns
elimination turns product
turns product matrices
product matrices equal
matrices equal matrix
equal matrix pair
matrix pair verify
pair verify fact
verify fact direct
fact direct multiplication
direct multiplication general
multiplication general proposition
general proposition proof
proposition proof omit
proof omit solving
omit solving equivalent
solving equivalent solving
equivalent solving solved
solving solved denote
solved denote solve
denote solve easy
solve easy lower
easy lower triangular
triangular matrix solve
matrix solve upper
triangular matrix beginning
matrix beginning section
beginning section solve
section solve solution
solve solution solving
solution solving means
solving means solving
means solving solution
solving solution decomposition
solution decomposition matrix
decomposition matrix solve
matrix solve systems
solve systems vectors
systems vectors distinct
vectors distinct advantage
distinct advantage classic
advantage classic gaussian
classic gaussian elimination
gaussian elimination discussed
elimination discussed earlier
discussed earlier decomposition
earlier decomposition require
decomposition require extra
extra memory nonzero
memory nonzero upper
nonzero upper triangular
upper triangular main
triangular main diagonal
main diagonal nontrivial
diagonal nontrivial main
nontrivial main diagonal
main diagonal computing
diagonal computing matrix
matrix inverse gaussian
inverse gaussian elimination
elimination algorithm tackles
algorithm tackles important
tackles important problems
important problems applied
problems applied mathematics
applied mathematics solving
mathematics solving systems
linear equations fact
equations fact gaussian
fact gaussian elimination
gaussian elimination applied
elimination applied problems
applied problems linear
problems linear algebra
linear algebra computing
algebra computing matrix
matrix inverse matrix
inverse matrix denoted
matrix denoted identity
denoted identity matrix
identity matrix elements
matrix elements main
main diagonal elements
diagonal elements square
elements square matrix
square matrix inverse
matrix inverse exists
inverse exists inverse
exists inverse unique
inverse unique matrix
unique matrix inverse
matrix inverse called
inverse called singular
called singular prove
singular prove matrix
prove matrix singular
matrix singular rows
singular rows linear
rows linear combination
linear combination sum
combination sum multiples
sum multiples rows
multiples rows convenient
rows convenient matrix
convenient matrix nonsingular
matrix nonsingular apply
nonsingular apply gaussian
elimination yields upper
triangular matrix zeros
main diagonal matrix
diagonal matrix nonsingular
matrix nonsingular singular
nonsingular singular special
singular special situation
special situation square
situation square matrices
square matrices inverses
matrices inverses theoretically
inverses theoretically inverse
theoretically inverse matrices
inverse matrices important
matrices important role
important role reciprocals
role reciprocals matrix
reciprocals matrix algebra
matrix algebra overcoming
algebra overcoming absence
overcoming absence explicit
absence explicit division
explicit division operation
division operation matrices
operation matrices analogy
matrices analogy linear
analogy linear equation
linear equation unknown
equation unknown solution
unknown solution written
solution written express
written express solution
express solution equations
solution equations unknowns
equations unknowns nonsingular
unknowns nonsingular vector
nonsingular vector definition
vector definition inverse
definition inverse matrix
inverse matrix nonsingular
matrix nonsingular matrix
nonsingular matrix compute
matrix compute numbers
compute numbers xij
numbers xij ann
xij ann xnn
ann xnn unknowns
xnn unknowns solving
unknowns solving systems
linear equations coefficient
equations coefficient matrix
coefficient matrix vector
matrix vector unknowns
vector unknowns column
unknowns column inverse
column inverse vector
inverse vector column
vector column identity
column identity matrix
identity matrix axj
matrix axj solve
axj solve systems
solve systems applying
systems applying gaussian
elimination matrix aug
matrix aug mented
aug mented identity
mented identity matrix
identity matrix forward
matrix forward elimina
forward elimina tion
elimina tion decomposition
tion decomposition solve
decomposition solve systems
solve systems explained
systems explained earlier
explained earlier computing
earlier computing determinant
computing determinant problem
determinant problem solved
problem solved gaussian
solved gaussian elimination
gaussian elimination computing
elimination computing determinant
computing determinant matrix
det defined recursively
defined recursively consists
recursively consists single
consists single element
single element det
element det equal
det equal det
equal det computed
det computed recursive
computed recursive formula
column matrix definition
matrix definition implies
definition implies formula
implies formula easy
formula easy det
easy det words
det words determinant
words determinant matrix
determinant matrix simply
matrix simply equal
simply equal difference
equal difference products
difference products diagonal
products diagonal elements
diagonal elements matrix
elements matrix det
matrix det incidentally
det incidentally formula
incidentally formula handy
formula handy variety
handy variety applications
variety applications section
applications section quickhull
section quickhull algorithm
quickhull algorithm compute
algorithm compute determinant
compute determinant large
determinant large matrix
large matrix task
matrix task rarely
task rarely needed
rarely needed practice
needed practice discussing
practice discussing recursive
discussing recursive definition
recursive definition implies
definition implies computing
implies computing sum
computing sum terms
sum terms gaussian
terms gaussian elimination
gaussian elimination central
elimination central fact
central fact determinant
fact determinant upper
determinant upper triangular
triangular matrix equal
matrix equal product
equal product elements
product elements main
main diagonal easy
diagonal easy elementary
easy elementary operations
elementary operations employed
operations employed elimination
employed elimination algorithm
elimination algorithm determinant
algorithm determinant basically
determinant basically remains
basically remains unchanged
remains unchanged multiplied
unchanged multiplied constant
multiplied constant elimination
constant elimination algorithm
elimination algorithm result
algorithm result compute
result compute determinant
compute determinant matrix
determinant matrix cubic
matrix cubic determinants
cubic determinants important
determinants important role
important role theory
role theory systems
theory systems linear
linear equations specifically
equations specifically linear
specifically linear equations
unique solution determinant
solution determinant coefficient
determinant coefficient matrix
coefficient matrix det
matrix det equal
det equal solution
equal solution formulas
solution formulas called
formulas called cramer
called cramer det
cramer det determinant
det determinant matrix
determinant matrix obtained
matrix obtained replacing
obtained replacing column
replacing column asked
column asked investigate
asked investigate exercises
investigate exercises cramer
exercises cramer good
cramer good algorithm
linear equations exercises
equations exercises solve
exercises solve gaussian
elimination solve previous
solve previous decomposition
previous decomposition method
decomposition method standpoint
method standpoint general
standpoint general algorithm
design techniques classify
techniques classify decomposition
classify decomposition method
decomposition method solve
problem computing inverse
computing inverse coefficient
inverse coefficient matrix
coefficient matrix multiplying
matrix multiplying vector
multiplying vector efficiency
vector efficiency class
efficiency class forward
class forward elimination
forward elimination stage
elimination stage gaussian
gaussian elimination write
elimination write pseudocode
write pseudocode substitution
pseudocode substitution stage
gaussian elimination running
elimination running assuming
running assuming division
assuming division numbers
division numbers takes
numbers takes times
times longer multiplication
longer multiplication estimate
multiplication estimate faster
estimate faster betterforwardelimination
faster betterforwardelimination forwardelimination
betterforwardelimination forwardelimination assume
forwardelimination assume compiler
assume compiler eliminate
compiler eliminate inefficiency
eliminate inefficiency forwardelimination
inefficiency forwardelimination linear
forwardelimination linear equations
unique solution solve
solution solve gaussian
unknowns solution apply
solution apply gaussian
equations unknowns infinitely
unknowns infinitely solutions
infinitely solutions apply
solutions apply gaussian
elimination gauss jordan
jordan elimination method
elimination method differs
method differs gaussian
differs gaussian elimination
gaussian elimination elements
elimination elements main
main diagonal coefficient
diagonal coefficient matrix
coefficient matrix pivot
matrix pivot row
pivot row elements
row elements main
main diagonal apply
diagonal apply gauss
apply gauss jordan
gauss jordan method
jordan method problem
method problem exercises
problem exercises general
exercises general design
general design strategy
design strategy algorithm
strategy algorithm based
algorithm based general
based general multiplications
general multiplications method
multiplications method solving
solving equations unknowns
equations unknowns multiplications
unknowns multiplications gaussian
multiplications gaussian elimination
gaussian elimination method
elimination method elimination
method elimination substitution
elimination substitution stages
substitution stages linear
stages linear equations
unique solution det
solution det good
det good idea
good idea condition
idea condition applying
condition applying gaussian
gaussian elimination apply
elimination apply cramer
apply cramer solve
cramer solve problem
solve problem exercises
exercises estimate times
estimate times longer
times longer solve
longer solve linear
solve linear equations
equations unknowns cramer
unknowns cramer gaussian
cramer gaussian elimination
gaussian elimination assume
elimination assume determinants
assume determinants cramer
determinants cramer formulas
cramer formulas computed
formulas computed independently
computed independently gaussian
independently gaussian elimination
gaussian elimination lights
elimination lights person
lights person game
person game played
game played board
played board composed
board composed light
composed light panels
light panels panel
panels panel turned
panel turned toggling
turned toggling state
toggling state vertically
state vertically horizontally
vertically horizontally adjacent
horizontally adjacent panels
adjacent panels toggling
panels toggling corner
toggling corner square
corner square affects
square affects total
affects total panels
total panels toggling
panels toggling noncorner
toggling noncorner panel
noncorner panel board
panel board border
board border affects
border affects total
affects total squares
total squares initial
squares initial subset
initial subset lighted
subset lighted squares
lighted squares goal
squares goal lights
goal lights solving
lights solving linear
linear equations coefficients
equations coefficients sides
coefficients sides modulo
sides modulo arithmetic
modulo arithmetic gaussian
arithmetic gaussian elimination
initially lit gaussian
lit gaussian elimination
initially lit balanced
lit balanced trees
balanced trees sections
trees sections discussed
sections discussed binary
discussed binary tree
binary tree prin
tree prin cipal
prin cipal data
cipal data structures
structures implementing dictionaries
implementing dictionaries binary
dictionaries binary tree
node ele ments
ele ments left
smaller element subtree
subtree root elements
root elements subtree
subtree greater transformation
greater transformation set
transformation set binary
set binary tree
tree representation tech
representation tech nique
tech nique gain
nique gain transformation
gain transformation compared
transformation compared straightforward
compared straightforward implementation
straightforward implementation dictionary
implementation dictionary array
dictionary array gain
array gain efficiency
gain efficiency searching
efficiency searching insertion
deletion log erage
log erage case
erage case worst
worst case operations
case operations tree
operations tree degenerate
tree degenerate severely
degenerate severely unbalanced
severely unbalanced height
unbalanced height equal
height equal scientists
equal scientists expended
scientists expended lot
expended lot effort
lot effort structure
effort structure preserves
structure preserves good
preserves good properties
good properties classical
properties classical binary
binary tree principally
tree principally logarithmic
principally logarithmic efficiency
logarithmic efficiency dictionary
dictionary operations set
operations set ele
set ele ments
ele ments sorted
ments sorted avoids
sorted avoids worst
avoids worst case
worst case degeneracy
case degeneracy approaches
degeneracy approaches approach
approaches approach instance
approach instance simplification
simplification variety unbalanced
variety unbalanced binary
unbalanced binary tree
binary tree transformed
tree transformed balanced
transformed balanced trees
balanced trees called
trees called balancing
called balancing specific
balancing specific implementations
specific implementations idea
implementations idea differ
idea differ definition
differ definition avl
tree requires difference
requires difference heights
difference heights left
heights left subtrees
subtrees node exceed
node exceed red
exceed red black
red black tree
black tree tolerates
tree tolerates height
tolerates height subtree
height subtree large
subtree large subtree
large subtree node
subtree node insertion
node insertion deletion
insertion deletion node
deletion node creates
node creates tree
creates tree violated
tree violated requirement
violated requirement tree
requirement tree restructured
tree restructured family
restructured family special
family special transformations
special transformations called
transformations called rotations
called rotations restore
rotations restore required
restore required section
required section discuss
section discuss avl
discuss avl trees
avl trees information
trees information types
information types binary
types binary trees
binary trees utilize
trees utilize idea
utilize idea rebalancing
idea rebalancing rotations
rebalancing rotations red
rotations red black
red black trees
black trees splay
trees splay trees
splay trees references
trees references cor
references cor sed
cor sed tar
sed tar approach
tar approach representation
approach representation variety
representation variety element
variety element node
element node tree
node tree specific
tree specific cases
specific cases trees
cases trees general
trees general important
general important trees
important trees differ
trees differ elements
differ elements admissible
elements admissible single
admissible single node
node tree perfectly
perfectly balanced discuss
balanced discuss simplest
discuss simplest case
case trees tree
trees tree section
tree section leaving
section leaving discussion
leaving discussion trees
discussion trees chapter
trees chapter avl
chapter avl trees
avl trees invented
trees invented russian
invented russian scientists
russian scientists adelson
scientists adelson velsky
adelson velsky landis
velsky landis ade
landis ade data
ade data structure
data structure named
structure named figure
named figure avl
tree numbers nodes
numbers nodes factors
nodes factors definition
factors definition avl
binary tree factor
tree factor node
factor node defined
node defined difference
defined difference heights
difference heights node
heights node left
left subtrees height
subtrees height tree
height tree defined
tree defined factor
defined factor computed
factor computed difference
computed difference numbers
difference numbers levels
numbers levels height
levels height difference
height difference node
difference node left
tree figure avl
avl tree figure
tree figure insertion
figure insertion node
insertion node makes
node makes avl
makes avl tree
avl tree unbalanced
tree unbalanced transform
unbalanced transform tree
transform tree rotation
tree rotation avl
avl tree local
tree local transformation
local transformation subtree
transformation subtree rooted
rooted node nodes
node nodes rotate
nodes rotate tree
rotate tree rooted
inserted leaf types
leaf types rotations
types rotations fact
rotations fact mirror
fact mirror images
mirror images simplest
images simplest rotations
simplest rotations shown
rotations shown figure
shown figure rotation
figure rotation called
rotation called single
called single rotation
single rotation rotating
rotation rotating edge
rotating edge connecting
edge connecting root
connecting root left
left child binary
child binary tree
figure presents single
presents single rotation
rotation general rotation
general rotation performed
key inserted left
root insertion symmetric
insertion symmetric single
symmetric single left
single left rotation
mirror image single
image single rotation
single rotation performed
inserted subtree child
subtree child tree
root insertion asked
insertion asked draw
asked draw diagram
draw diagram general
diagram general case
general case single
case single rotation
single rotation exercises
rotation exercises figure
exercises figure rotation
figure rotation types
rotation types avl
types avl trees
avl trees nodes
trees nodes single
nodes single rotation
single rotation single
rotation single rotation
single rotation called
rotation called left
called left rotation
left rotation fact
rotation fact combination
fact combination rotations
combination rotations rotation
rotations rotation left
rotation left subtree
subtree root rotation
root rotation tree
tree rooted figure
rooted figure performed
figure performed key
inserted subtree left
root insertion single
insertion single rotation
single rotation figure
node inserted rotation
inserted rotation figure
node inserted left
subtree root grandchild
root grandchild left
grandchild left rotation
mirror image rotation
image rotation left
rotation left exercises
left exercises rotations
exercises rotations trivial
rotations trivial transformations
trivial transformations fortunately
transformations fortunately constant
fortunately constant resulting
constant resulting tree
resulting tree balanced
tree balanced basic
balanced basic requirements
basic requirements binary
requirements binary tree
binary tree initial
tree initial tree
initial tree figure
tree figure keys
figure keys subtree
keys subtree relationships
subtree relationships key
relationships key values
key values hold
values hold balanced
hold balanced tree
balanced tree rotation
tree rotation figure
rotation figure construction
figure construction avl
construction avl tree
avl tree successive
tree successive insertions
successive insertions parenthesized
insertions parenthesized rotation
parenthesized rotation abbreviation
rotation abbreviation root
abbreviation root tree
root tree reorganized
tree reorganized constructing
reorganized constructing avl
tree numbers shown
figure algorithm operations
algorithm operations mind
operations mind nodes
mind nodes rotation
nodes rotation tree
inserted leaf efficient
leaf efficient avl
efficient avl trees
avl trees tree
trees tree critical
tree critical charac
critical charac teristic
charac teristic tree
teristic tree height
tree height turns
height turns bounded
turns bounded logarithmic
bounded logarithmic functions
logarithmic functions specifically
functions specifically height
specifically height avl
avl tree nodes
tree nodes satisfies
nodes satisfies inequalities
satisfies inequalities log
inequalities log weird
log weird constants
weird constants offs
constants offs irrational
offs irrational numbers
irrational numbers related
numbers related fibonacci
related fibonacci numbers
fibonacci numbers golden
numbers golden ratio
golden ratio section
ratio section inequalities
section inequalities immediately
inequalities immediately imply
immediately imply operations
imply operations searching
searching insertion log
insertion log worst
worst case exact
case exact formula
exact formula average
formula average height
average height avl
avl tree constructed
tree constructed random
constructed random lists
random lists keys
lists keys proved
keys proved difficult
proved difficult extensive
difficult extensive experiments
extensive experiments log
experiments log small
log small knuiii
small knuiii searching
knuiii searching avl
searching avl tree
tree requires average
requires average comparisons
average comparisons searching
array binary operation
binary operation key
operation key deletion
key deletion avl
deletion avl tree
avl tree considerably
tree considerably difficult
considerably difficult insertion
difficult insertion fortunately
insertion fortunately turns
fortunately turns efficiency
turns efficiency class
efficiency class insertion
class insertion logarithmic
insertion logarithmic impressive
logarithmic impressive efficiency
impressive efficiency characteristics
efficiency characteristics price
characteristics price drawbacks
price drawbacks avl
drawbacks avl trees
avl trees frequent
trees frequent rotations
frequent rotations maintain
rotations maintain balances
maintain balances nodes
balances nodes drawbacks
nodes drawbacks prevented
drawbacks prevented avl
prevented avl trees
avl trees standard
trees standard structure
standard structure implementing
structure implementing dictionaries
implementing dictionaries underlying
dictionaries underlying idea
underlying idea rebalancing
idea rebalancing binary
rebalancing binary tree
binary tree rotations
tree rotations proved
rotations proved fruitful
proved fruitful led
fruitful led discoveries
led discoveries interesting
discoveries interesting variations
interesting variations classical
variations classical binary
binary tree trees
tree trees mentioned
trees mentioned beginning
beginning section idea
section idea balancing
idea balancing tree
balancing tree key
node tree simplest
tree simplest implementation
simplest implementation idea
implementation idea trees
idea trees introduced
trees introduced scientist
introduced scientist john
scientist john hopcroft
john hopcroft tree
hopcroft tree nodes
tree nodes kinds
kinds nodes node
nodes node single
node single key
single key children
key children left
children left child
left child serves
subtree keys child
keys child serves
keys greater words
greater words node
words node kind
node kind node
kind node classical
node classical binary
tree node ordered
keys children leftmost
children leftmost child
leftmost child serves
subtree keys middle
keys middle child
middle child serves
subtree keys rightmost
keys rightmost child
rightmost child serves
keys greater figure
greater figure requirement
figure requirement tree
requirement tree leaves
tree leaves words
leaves words tree
words tree perfectly
tree perfectly height
perfectly height balanced
height balanced length
balanced length path
root leaf property
leaf property buy
property buy allowing
buy allowing key
allowing key node
node tree searching
tree searching key
searching key tree
key tree straightforward
tree straightforward root
straightforward root node
root node act
node act binary
act binary tree
binary tree equal
equal root key
key left node
left node figure
node figure kinds
figure kinds nodes
kinds nodes tree
nodes tree subtree
tree subtree smaller
subtree smaller larger
smaller larger root
larger root key
key root node
root node key
node key comparisons
key comparisons stopped
comparisons stopped equal
stopped equal root
equal root keys
keys root subtrees
root subtrees continued
subtrees continued inserting
continued inserting key
inserting key tree
key tree insert
tree insert key
insert key leaf
key leaf tree
tree leaf performing
leaf performing leaf
performing leaf node
leaf node insert
node insert key
insert key depending
key depending smaller
smaller larger node
larger node key
key leaf node
leaf node split
node split leaf
split leaf smallest
leaf smallest keys
smallest keys key
keys key leaf
key leaf largest
leaf largest key
largest key leaf
key leaf middle
leaf middle key
middle key promoted
key promoted leaf
promoted leaf parent
parent leaf tree
leaf tree root
root created middle
created middle key
middle key promotion
key promotion middle
promotion middle key
middle key parent
key parent node
parent node lead
node lead node
lead node splits
node splits chain
splits chain leaf
chain leaf ancestors
leaf ancestors tree
ancestors tree construction
tree construction figure
construction figure tree
figure tree efficiency
tree efficiency dictionary
dictionary operations depends
operations depends tree
tree height upper
height upper bound
upper bound tree
bound tree height
tree height smallest
tree nodes final
nodes final tree
final tree figure
figure tree height
tree height nodes
height nodes inequality
nodes inequality log
inequality log tree
log tree height
height largest keys
largest keys tree
tree nodes keys
nodes keys children
keys children tree
children tree nodes
tree nodes figure
nodes figure construction
figure construction tree
construction tree log
tree log lower
log lower upper
upper bounds height
bounds height log
height log imply
log imply efficiencies
imply efficiencies searching
efficiencies searching insertion
deletion log worst
average case important
case important generalization
important generalization trees
generalization trees called
called trees section
trees section exercises
section exercises binary
exercises binary trees
draw binary trees
binary trees nodes
trees nodes requirement
nodes requirement avl
requirement avl trees
tree height avl
avl tree smallest
tree smallest nodes
smallest nodes trees
nodes trees draw
trees draw diagrams
draw diagrams single
diagrams single rotation
rotation general lists
general lists construct
lists construct avl
construct avl tree
avl tree inserting
tree inserting ele
inserting ele ments
ele ments successively
ments successively starting
starting tree avl
avl tree real
comput ing range
ing range difference
case efficiency true
efficiency true false
true false smallest
false smallest largest
largest keys avl
keys avl tree
avl tree write
tree write constructing
write constructing avl
avl tree distinct
tree distinct integers
distinct integers construct
integers construct tree
construct tree alphabetical
tree alphabetical letters
alphabetical letters insert
letters insert successively
insert successively starting
starting tree assuming
tree assuming probabilities
assuming probabilities searching
probabilities searching keys
searching keys letters
keys letters largest
letters largest average
largest average key
successful searches tree
searches tree classical
tree classical binary
binary tree constructed
tree constructed keys
constructed keys inserted
keys inserted trees
inserted trees true
true false searching
false searching key
searching key takes
key takes key
takes key comparisons
comparisons searching tree
searching tree real
algorithm computing range
computing range difference
efficiency write constructing
write constructing tree
constructing tree integers
tree integers heaps
integers heaps heapsort
heaps heapsort data
heapsort data structure
structure called disordered
called disordered pile
disordered pile items
pile items word
items word definition
word definition standard
definition standard dictionary
standard dictionary clever
dictionary clever partially
clever partially ordered
partially ordered data
ordered data structure
data structure suitable
structure suitable implementing
suitable implementing priority
implementing priority queues
priority queues recall
queues recall priority
recall priority multiset
priority multiset items
multiset items orderable
items orderable characteristic
orderable characteristic called
characteristic called item
called item priority
item priority operations
priority operations figure
operations figure illustration
figure illustration definition
illustration definition leftmost
definition leftmost tree
leftmost tree finding
tree finding item
finding item highest
item highest largest
highest largest priority
largest priority deleting
priority deleting item
deleting item highest
highest priority adding
priority adding item
adding item multiset
item multiset primarily
multiset primarily efficient
primarily efficient implementation
efficient implementation operations
implementation operations makes
operations makes interesting
makes interesting priority
interesting priority queues
priority queues arise
queues arise naturally
arise naturally plications
naturally plications scheduling
plications scheduling job
scheduling job executions
job executions operating
executions operating systems
operating systems traf
systems traf fic
traf fic management
fic management communication
management communication networks
communication networks arise
networks arise impor
arise impor tant
impor tant algorithms
tant algorithms prim
algorithm section dijkstra
section dijkstra algorithm
algorithm sec tion
sec tion huffman
tion huffman encoding
huffman encoding section
encoding section bound
section bound applications
bound applications section
applications section data
section data structure
data structure serves
structure serves cornerstone
serves cornerstone theoretically
cornerstone theoretically important
algorithm called heapsort
called heapsort discuss
heapsort discuss algo
discuss algo rithm
algo rithm define
rithm define investigate
define investigate basic
investigate basic properties
basic properties notion
properties notion definition
notion definition defined
definition defined binary
defined binary tree
tree keys assigned
keys assigned nodes
assigned nodes key
key node provided
node provided conditions
provided conditions met
conditions met shape
met shape property
shape property binary
property binary tree
binary tree essentially
tree essentially simply
essentially simply plete
simply plete levels
plete levels possibly
levels possibly rightmost
possibly rightmost leaves
rightmost leaves missing
leaves missing parental
missing parental dominance
parental dominance property
dominance property key
property key node
key node greater
node greater equal
greater equal keys
keys children condition
children condition considered
condition considered auto
considered auto matically
auto matically satisfied
matically satisfied leaves
satisfied leaves trees
leaves trees figure
figure tree shape
tree shape property
shape property violated
property violated parental
violated parental dominance
parental dominance fails
dominance fails node
fails node key
node key values
key values ordered
values ordered sequence
ordered sequence values
sequence values path
values path root
root leaf decreasing
leaf decreasing nonincreasing
decreasing nonincreasing equal
nonincreasing equal keys
equal keys allowed
keys allowed left
allowed left key
left key values
key values authors
values authors require
authors require key
require key node
key node equal
node equal keys
keys children variation
children variation min
variation min array
min array representation
array representation index
representation index parents
index parents leaves
parents leaves figure
leaves figure array
figure array representation
array representation relationship
representation relationship key
relationship key values
key values nodes
values nodes tree
nodes tree generally
tree generally left
generally left subtrees
subtrees node important
node important properties
important properties heaps
properties heaps difficult
heaps difficult prove
difficult prove properties
prove properties figure
properties figure exists
figure exists essentially
exists essentially binary
nodes height equal
height equal log
equal log root
log root largest
root largest element
largest element node
element node considered
node considered descendants
considered descendants implemented
descendants implemented array
implemented array recording
array recording elements
recording elements left
elements left fashion
left fashion convenient
fashion convenient elements
convenient elements positions
elements positions array
positions array leaving
array leaving unused
leaving unused putting
unused putting sentinel
putting sentinel greater
sentinel greater element
greater element representation
element representation parental
representation parental node
parental node keys
node keys positions
keys positions array
positions array leaf
array leaf keys
leaf keys occupy
keys occupy positions
occupy positions children
positions children key
children key array
key array parental
array parental position
parental position positions
position positions correspondingly
positions correspondingly parent
correspondingly parent key
parent key position
key position define
position define array
define array element
array element position
element position half
position half array
half array greater
array greater equal
greater equal elements
elements positions max
positions max satisfied
max satisfied ideas
satisfied ideas majority
ideas majority algorithms
majority algorithms dealing
algorithms dealing heaps
dealing heaps easier
heaps easier understand
easier understand heaps
understand heaps binary
heaps binary trees
binary trees actual
trees actual implementations
actual implementations simpler
implementations simpler efficient
simpler efficient arrays
efficient arrays construct
arrays construct keys
construct keys principal
keys principal alternatives
principal alternatives construction
alternatives construction algorithm
construction algorithm illustrated
illustrated figure initializes
figure initializes essentially
initializes essentially binary
tree nodes placing
nodes placing keys
placing keys heapifies
keys heapifies tree
heapifies tree starting
tree starting parental
starting parental node
node algorithm checks
algorithm checks parental
checks parental figure
parental figure construction
figure construction headed
construction headed arrows
headed arrows key
arrows key comparisons
key comparisons verifying
comparisons verifying parental
verifying parental dominance
dominance holds key
holds key node
key node algorithm
node algorithm exchanges
algorithm exchanges node
exchanges node key
node key larger
key larger key
key children checks
children checks parental
checks parental dominance
dominance holds position
holds position process
position process continues
process continues parental
continues parental dominance
parental dominance satisfied
dominance satisfied eventually
satisfied eventually holds
eventually holds automatically
holds automatically key
automatically key leaf
key leaf completing
leaf completing heapification
completing heapification subtree
heapification subtree rooted
subtree rooted current
rooted current parental
current parental node
node algorithm proceeds
algorithm proceeds node
proceeds node predecessor
node predecessor algorithm
predecessor algorithm stops
algorithm stops root
stops root tree
root tree algorithm
tree algorithm heapbottomup
algorithm heapbottomup constructs
heapbottomup constructs elements
constructs elements array
elements array algorithm
array algorithm input
array orderable items
orderable items output
items output downto
output downto false
downto false children
false children true
children true efficient
true efficient algorithm
efficient algorithm worst
case assume simplicity
assume simplicity tree
simplicity tree largest
tree largest nodes
largest nodes occurs
nodes occurs height
occurs height tree
height tree property
tree property heaps
property heaps beginning
heaps beginning section
beginning section log
section log specific
log specific values
specific values key
values key tree
key tree leaf
tree leaf worst
leaf worst case
worst case construction
case construction algorithm
construction algorithm moving
algorithm moving requires
moving requires comparisons
requires comparisons larger
comparisons larger child
larger child determine
child determine exchange
determine exchange required
exchange required total
required total key
key comparisons involving
comparisons involving key
involving key total
case cworst log
cworst log keys
log keys validity
keys validity equality
validity equality proved
equality proved closed
proved closed formula
closed formula sum
formula sum appendix
sum appendix mathematical
appendix mathematical induction
induction algorithm size
algorithm size constructed
size constructed comparisons
constructed comparisons alternative
comparisons alternative efficient
alternative efficient algorithm
efficient algorithm constructs
algorithm constructs successive
constructs successive insertions
successive insertions key
insertions key previously
key previously constructed
previously constructed people
constructed people construction
people construction algorithm
construction algorithm insert
algorithm insert key
insert key node
key leaf existing
leaf existing sift
existing sift parent
sift parent key
parent key greater
key greater equal
greater equal structure
equal structure swap
structure swap keys
swap keys parent
keys parent swapping
parent swapping continues
swapping continues greater
continues greater parent
greater parent reaches
parent reaches root
reaches root illustrated
root illustrated figure
illustrated figure insertion
figure insertion operation
insertion operation require
operation require key
comparisons height nodes
height nodes log
nodes log efficiency
log efficiency insertion
efficiency insertion log
insertion log delete
log delete item
delete item important
item important case
important case deleting
case deleting root
root key leaving
key leaving deleting
leaving deleting arbitrary
deleting arbitrary key
arbitrary key exercises
key exercises authors
exercises authors textbooks
authors textbooks things
textbooks things readers
things readers deleting
readers deleting root
root key algorithm
key algorithm illustrated
illustrated figure inserting
figure inserting key
inserting key constructed
key constructed figure
constructed figure key
figure key sifted
key sifted swap
sifted swap parent
swap parent larger
parent larger parent
larger parent root
parent root figure
root figure deleting
figure deleting root
root key deleted
key deleted swapped
deleted swapped key
swapped key smaller
key smaller tree
smaller tree heapified
tree heapified exchanging
heapified exchanging key
exchanging key root
key root larger
root larger key
key children parental
children parental dominance
dominance requirement satisfied
requirement satisfied maximum
satisfied maximum key
maximum key deletion
key deletion exchange
deletion exchange root
exchange root key
root key decrease
key decrease size
decrease size heapify
size heapify smaller
heapify smaller tree
smaller tree sifting
tree sifting tree
sifting tree construction
construction algorithm verify
algorithm verify parental
verify parental dominance
dominance holds swap
holds swap larger
swap larger children
larger children operation
children operation parental
operation parental dominance
parental dominance condition
dominance condition holds
condition holds position
holds position efficiency
position efficiency deletion
efficiency deletion determined
deletion determined key
determined key comparisons
comparisons needed heapify
needed heapify tree
heapify tree swap
tree swap size
swap size tree
size tree decreased
tree decreased require
decreased require key
comparisons height efficiency
height efficiency deletion
efficiency deletion log
deletion log heapsort
log heapsort interesting
heapsort interesting sorting
interesting sorting algorithm
sorting algorithm discovered
algorithm discovered williams
discovered williams wil
williams wil stage
wil stage algorithm
stage algorithm works
algorithm works stage
works stage construction
stage construction construct
construction construct array
construct array stage
array stage maximum
maximum deletions apply
deletions apply root
apply root deletion
root deletion operation
deletion operation times
operation times remaining
times remaining result
remaining result array
result array elements
array elements eliminated
elements eliminated decreasing
eliminated decreasing array
decreasing array implementation
array implementation heaps
implementation heaps element
heaps element deleted
element deleted resulting
deleted resulting array
resulting array original
array sorted increasing
sorted increasing heapsort
increasing heapsort traced
heapsort traced specific
traced specific input
specific input figure
input figure input
figure input stage
input stage construction
stage construction stage
construction stage maximum
maximum deletions figure
deletions figure sorting
figure sorting array
sorting array heapsort
array heapsort figure
heapsort figure intentionally
figure intentionally tree
intentionally tree array
tree array implementations
array implementations construction
implementations construction algorithm
algorithm construction stage
construction stage algorithm
stage algorithm investigate
algorithm investigate efficiency
investigate efficiency stage
efficiency stage key
stage key comparisons
comparisons needed eliminating
needed eliminating root
eliminating root keys
root keys heaps
keys heaps diminishing
heaps diminishing sizes
diminishing sizes inequality
sizes inequality log
inequality log means
log means log
means log stage
log stage heapsort
stage heapsort stages
heapsort stages log
stages log detailed
log detailed analysis
detailed analysis shows
analysis shows efficiency
shows efficiency heapsort
efficiency heapsort fact
heapsort fact log
fact log worst
average cases heapsort
cases heapsort efficiency
heapsort efficiency falls
efficiency falls class
falls class mergesort
class mergesort heapsort
mergesort heapsort require
heapsort require extra
require extra storage
extra storage timing
storage timing experiments
timing experiments random
experiments random files
random files heapsort
files heapsort runs
heapsort runs slowly
runs slowly quicksort
slowly quicksort competitive
quicksort competitive mergesort
competitive mergesort exercises
mergesort exercises construct
exercises construct algorithm
algorithm construct successive
construct successive key
successive key insertions
key insertions algorithm
insertions algorithm true
algorithm true algorithms
true algorithms yield
algorithms yield input
yield input outline
input outline algorithm
outline algorithm checking
algorithm checking array
checking array determine
array determine efficiency
determine efficiency smallest
efficiency smallest largest
largest keys height
keys height prove
height prove height
prove height nodes
height nodes equal
nodes equal log
equal log prove
log prove equality
prove equality section
equality section log
section log design
log design efficient
deleting element smallest
element smallest determine
smallest determine efficiency
determine efficiency design
efficiency design efficient
deleting element determine
element determine efficiency
determine efficiency classes
efficiency classes main
classes main operations
main operations priority
operations priority implemented
avl tree sort
tree sort lists
sort lists heapsort
lists heapsort array
heapsort array representation
array representation heaps
representation heaps increasing
heaps increasing alphabetical
increasing alphabetical heapsort
alphabetical heapsort stable
heapsort stable sorting
sorting algorithm variety
algorithm variety transform
transform conquer technique
conquer technique heapsort
technique heapsort repre
heapsort repre sorting
repre sorting algorithm
sorting algorithm heapsort
algorithm heapsort priority
heapsort priority implement
priority implement advanced
implement advanced sorting
quicksort heapsort language
heapsort language choice
language choice investigate
choice investigate performance
investigate performance arrays
performance arrays sizes
arrays sizes randomly
sizes randomly generated
randomly generated files
generated files integers
files integers range
integers range increasing
range increasing files
increasing files integers
files integers decreasing
integers decreasing files
decreasing files integers
files integers spaghetti
integers spaghetti sort
spaghetti sort handful
sort handful uncooked
handful uncooked spaghetti
uncooked spaghetti individual
spaghetti individual rods
individual rods lengths
rods lengths represent
lengths represent numbers
represent numbers sorted
numbers sorted outline
sorted outline spaghetti
outline spaghetti sort
spaghetti sort sorting
sort sorting algorithm
sorting algorithm takes
takes advantage unorthodox
advantage unorthodox representation
unorthodox representation science
representation science folklore
science folklore dew
folklore dew topic
dew topic chapter
topic chapter general
chapter general heapsort
general heapsort horner
heapsort horner binary
horner binary exponentiation
binary exponentiation section
exponentiation section discuss
section discuss problem
discuss problem computing
problem computing polynomial
polynomial anxn important
anxn important special
special case computing
case computing polynomials
computing polynomials constitute
polynomials constitute important
constitute important class
important class functions
class functions wealth
functions wealth good
wealth good properties
good properties approximating
properties approximating types
approximating types functions
types functions problem
functions problem manipulating
problem manipulating polynomials
manipulating polynomials efficiently
polynomials efficiently important
efficiently important centuries
important centuries discoveries
centuries discoveries years
discoveries years important
years important fast
important fast fourier
fast fourier transform
fourier transform fft
transform fft practical
fft practical importance
practical importance remarkable
importance remarkable algorithm
remarkable algorithm based
algorithm based representing
based representing polynomial
representing polynomial values
polynomial values specially
values specially chosen
specially chosen points
chosen points people
points people important
people important algorithmic
important algorithmic discoveries
algorithmic discoveries relative
discoveries relative complexity
relative complexity discuss
complexity discuss fft
discuss fft algorithm
fft algorithm interested
algorithm interested reader
interested reader wealth
reader wealth literature
literature subject accessible
subject accessible treatments
accessible treatments textbooks
treatments textbooks kle
textbooks kle cor
kle cor horner
cor horner elegant
horner elegant efficient
elegant efficient algorithm
efficient algorithm evaluating
evaluating polynomial named
polynomial named british
named british mathematician
british mathematician horner
mathematician horner pub
horner pub lished
pub lished early
lished early century
early century knuth
century knuth knuii
knuth knuii method
knuii method isaac
method isaac newton
isaac newton years
newton years horner
years horner method
horner method design
method design algorithm
design algorithm polynomial
algorithm polynomial evalu
polynomial evalu ation
evalu ation problem
ation problem investigate
problem investigate efficiency
investigate efficiency problems
efficiency problems section
problems section exercises
section exercises horner
exercises horner good
horner good representation
good representation technique
representation technique based
technique based representing
based representing formula
representing formula obtained
formula obtained successively
obtained successively taking
successively taking common
taking common factor
common factor remaining
factor remaining polynomials
remaining polynomials diminishing
polynomials diminishing degrees
diminishing degrees anx
degrees anx polynomial
anx polynomial formula
polynomial formula substitute
formula substitute polynomial
substitute polynomial evaluated
polynomial evaluated hard
evaluated hard efficient
hard efficient algorithm
efficient algorithm unpleasant
algorithm unpleasant appearance
unpleasant appearance formula
appearance formula appearance
formula appearance explicitly
appearance explicitly transformation
explicitly transformation leading
transformation leading original
leading original polynomial
original polynomial coefficients
polynomial coefficients pen
coefficients pen pencil
pen pencil calculation
pencil calculation conveniently
calculation conveniently organized
conveniently organized tworow
organized tworow table
tworow table row
table row polynomial
row polynomial coefficients
polynomial coefficients equal
coefficients equal listed
equal listed highest
listed highest lowest
highest lowest entry
lowest entry row
entry row filled
row filled left
filled left entry
left entry computed
entry computed times
computed times entry
times entry row
entry row coefficient
row coefficient row
coefficient row final
row final entry
final entry computed
entry computed fashion
computed fashion sought
fashion sought evaluate
sought evaluate coefficients
evaluate coefficients comparing
coefficients comparing table
comparing table entries
table entries formula
entries formula finally
formula finally pseudocode
finally pseudocode algorithm
pseudocode algorithm shortest
algorithm shortest imaginable
shortest imaginable nontrivial
imaginable nontrivial algorithm
nontrivial algorithm horner
algorithm horner evaluates
horner evaluates polynomial
evaluates polynomial horner
polynomial horner input
horner input array
polynomial downto multiplications
downto multiplications additions
multiplications additions sum
additions sum efficient
sum efficient horner
efficient horner term
horner term polynomial
term polynomial degree
degree anxn computing
anxn computing single
computing single term
single term brute
algorithm require multiplications
require multiplications horner
multiplications horner computes
horner computes addition
computes addition term
addition term terms
term terms multiplications
terms multiplications surprising
multiplications surprising horner
surprising horner optimal
polynomial evaluation preprocessing
evaluation preprocessing polynomial
preprocessing polynomial coefficients
polynomial coefficients scientists
coefficients scientists years
scientists years horner
years horner publication
horner publication realization
publication realization investigating
realization investigating horner
investigating horner byproducts
horner byproducts intermediate
byproducts intermediate numbers
intermediate numbers generated
numbers generated algorithm
generated algorithm process
algorithm process evaluating
process evaluating coefficients
evaluating coefficients quotient
coefficients quotient division
quotient division final
division final result
final result addition
result addition equal
addition equal remainder
equal remainder division
remainder division quotient
division quotient remainder
quotient remainder division
remainder division algorithm
division algorithm synthetic
algorithm synthetic division
synthetic division convenient
division convenient called
convenient called division
called division binary
division binary exponentiation
binary exponentiation amazing
exponentiation amazing efficiency
amazing efficiency horner
efficiency horner fades
horner fades method
fades method applied
method applied comput
applied comput ing
comput ing fact
ing fact degenerates
fact degenerates brute
degenerates brute multiplication
brute multiplication wasteful
multiplication wasteful additions
wasteful additions zeros
additions zeros computing
zeros computing mod
computing mod essential
mod essential operation
essential operation important
operation important primality
important primality testing
primality testing encryption
testing encryption methods
encryption methods algorithms
methods algorithms computing
algorithms computing based
computing based representation
representation idea exploit
idea exploit binary
representation exponent processes
exponent processes binary
processes binary string
binary string left
string left bit
left bit string
string representing positive
representing positive integer
positive integer binary
integer binary means
binary means computed
means computed polynomial
computed polynomial bixi
polynomial bixi binary
bixi binary representation
representation compute polynomial
compute polynomial applying
polynomial applying horner
applying horner method
horner method operations
method operations imply
operations imply computing
imply computing power
computing power abi
power abi horner
abi horner binary
horner binary polynomial
binary polynomial implications
polynomial implications leading
implications leading digit
leading digit downto
digit downto abi
downto abi initializing
abi initializing accumulator
initializing accumulator scan
accumulator scan bit
representing exponent square
exponent square accumulator
square accumulator current
accumulator current binary
current binary digit
binary digit observations
digit observations lead
observations lead left
lead left binary
exponentiation method computing
method computing algorithm
computing algorithm leftrightbinaryexponentiation
algorithm leftrightbinaryexponentiation computes
leftrightbinaryexponentiation computes left
binary expansion positive
expansion positive integer
integer output product
output product downto
product downto product
downto product compute
exponentiation algorithm binary
algorithm binary digits
binary digits product
digits product accumulator
accumulator algorithm makes
algorithm makes multiplications
makes multiplications repetition
multiplications repetition loop
repetition loop total
loop total multiplications
multiplications computing length
computing length bit
length bit string
representing exponent taking
exponent taking account
taking account log
account log conclude
log conclude efficiency
conclude efficiency leftto
efficiency leftto binary
leftto binary exponentiation
binary exponentiation logarithmic
exponentiation logarithmic algorithm
logarithmic algorithm efficiency
class brute exponentiation
brute exponentiation requires
exponentiation requires multiplications
requires multiplications left
multiplications left binary
binary exponentiation binary
exponentiation binary polynomial
binary polynomial yielding
polynomial yielding applying
yielding applying horner
applying horner previous
horner previous method
previous method exploits
method exploits differently
exploits differently abi
differently abi computed
abi computed product
computed product terms
product terms abi
terms abi product
abi product consecutive
product consecutive terms
consecutive terms skipping
terms skipping binary
skipping binary digit
binary digit addition
digit addition compute
addition compute simply
compute simply squaring
simply squaring term
squaring term computed
term computed previous
computed previous compute
previous compute powers
compute powers smallest
powers smallest largest
smallest largest left
largest left product
left product accumulator
product accumulator binary
accumulator binary digit
binary digit pseudocode
digit pseudocode algorithm
pseudocode algorithm rightleftbinaryexponentiation
algorithm rightleftbinaryexponentiation computes
rightleftbinaryexponentiation computes left
binary expansion nonnegative
expansion nonnegative integer
integer output term
output term initializes
term initializes product
initializes product term
term product term
term product compute
exponentiation method table
method table filled
table filled left
filled left binary
left binary digits
binary digits terms
digits terms product
terms product accumulator
accumulator algorithm efficiency
algorithm efficiency logarithmic
efficiency logarithmic reason
logarithmic reason left
reason left binary
left binary multiplication
binary multiplication usefulness
multiplication usefulness binary
usefulness binary exponentia
binary exponentia tion
exponentia tion algorithms
tion algorithms reduced
algorithms reduced reliance
reduced reliance availability
reliance availability explicit
availability explicit binary
explicit binary expansion
binary expansion exponent
expansion exponent problem
exponent problem section
exercises asks design
asks design algorithm
design algorithm shortcoming
algorithm shortcoming exercises
shortcoming exercises brute
exercises brute algorithm
brute algorithm evaluating
evaluating polynomial algorithm
polynomial algorithm bruteforcepolynomialevaluation
algorithm bruteforcepolynomialevaluation computes
bruteforcepolynomialevaluation computes polynomial
computes polynomial highest
polynomial highest lowest
highest lowest term
lowest term brute
brute algorithm input
polynomial downto power
downto power total
power total multiplications
multiplications total additions
total additions algorithm
additions algorithm write
write pseudocode brute
pseudocode brute polynomial
brute polynomial evaluation
polynomial evaluation stems
evaluation stems substituting
stems substituting variable
substituting variable polynomial
variable polynomial formula
polynomial formula evaluating
formula evaluating lowest
evaluating lowest term
lowest term highest
term highest determine
highest determine multiplications
determine multiplications additions
multiplications additions algorithm
additions algorithm estimate
algorithm estimate faster
estimate faster horner
faster horner compared
horner compared lowest
compared lowest highest
lowest highest term
highest term brute
algorithm problem multiplication
problem multiplication significantly
multiplication significantly larger
significantly larger addition
larger addition multiplication
multiplication addition horner
addition horner efficient
horner efficient expense
efficient expense space
expense space efficient
space efficient brute
efficient brute algorithm
brute algorithm apply
algorithm apply horner
apply horner evaluate
evaluate polynomial results
polynomial results application
results application horner
application horner quo
horner quo tient
quo tient remainder
tient remainder division
remainder division apply
division apply horner
apply horner convert
horner convert binary
convert binary decimal
binary decimal multiplications
decimal multiplications additions
additions subtractions needed
subtractions needed division
needed division polynomial
division polynomial anxn
polynomial anxn constant
anxn constant operations
constant operations synthetic
operations synthetic division
synthetic division apply
division apply left
algorithm compute left
exponentiation algorithm nonnegative
algorithm nonnegative integer
nonnegative integer exponent
integer exponent apply
exponent apply left
algorithm compute design
compute design nonrecursive
design nonrecursive algorithm
algorithm computing mimics
computing mimics left
mimics left binary
binary exponentiation explicitly
exponentiation explicitly binary
explicitly binary representation
binary representation good
representation good idea
good idea general
idea general purpose
general purpose polynomial
purpose polynomial evaluation
evaluation algorithm horner
algorithm horner evaluate
evaluate polynomial corollary
polynomial corollary fundamental
corollary fundamental theorem
fundamental theorem algebra
theorem algebra polynomial
algebra polynomial anxn
polynomial anxn represented
anxn represented roots
represented roots polynomial
roots polynomial generally
polynomial generally complex
generally complex necessarily
complex necessarily distinct
necessarily distinct discuss
distinct discuss representations
discuss representations convenient
representations convenient operations
convenient operations polynomial
operations polynomial evaluation
polynomial evaluation addition
evaluation addition polynomials
addition polynomials multiplication
polynomials multiplication polynomials
multiplication polynomials polynomial
polynomials polynomial interpolation
polynomial interpolation set
interpolation set data
set data points
data points polynomial
points polynomial degree
polynomial degree problem
degree problem reduction
problem reduction version
reduction version mathematicians
version mathematicians professor
mathematicians professor noted
professor noted mathematician
noted mathematician noticed
mathematician noticed wife
noticed wife wanted
wife wanted tea
wanted tea kettle
tea kettle cupboard
kettle cupboard filled
cupboard filled stove
filled stove wife
stove wife signing
wife signing seller
signing seller local
seller local bookstore
local bookstore professor
bookstore professor kettle
professor kettle sitting
kettle sitting kitchen
sitting kitchen counter
kitchen counter professor
counter professor kettle
professor kettle cupboard
kettle cupboard proceeded
cupboard proceeded wife
proceeded wife routine
wife routine reduction
routine reduction alg
reduction alg problem
alg problem solution
problem solution solved
solution solved solvable
solved solvable alg
solvable alg problem
alg problem figure
figure problem reduction
problem reduction strategy
reduction strategy professor
strategy professor approached
professor approached task
approached task important
important problem solving
solving strategy called
strategy called problem
called problem reduction
problem reduction solve
reduction solve problem
problem solve figure
solve figure professor
figure professor idea
professor idea problem
idea problem reduction
problem reduction plays
reduction plays central
central role theoretical
role theoretical science
theoretical science classify
science classify problems
classify problems complexity
problems complexity classification
complexity classification chapter
classification chapter strategy
chapter strategy actual
strategy actual problem
actual problem solving
problem solving practical
solving practical difficulty
practical difficulty applying
difficulty applying lies
applying lies finding
lies finding problem
finding problem reduced
problem reduced efforts
reduced efforts practical
efforts practical reduction
practical reduction based
reduction based algorithm
based algorithm efficient
algorithm efficient solving
efficient solving original
solving original problem
original problem directly
problem directly encountered
directly encountered technique
encountered technique earlier
technique earlier section
earlier section mentioned
section mentioned called
mentioned called synthetic
called synthetic division
synthetic division applying
division applying horner
applying horner polynomial
polynomial evaluation section
evaluation section fact
section fact analytical
arbitrary points plane
points plane determinant
plane determinant positive
determinant positive left
positive left directed
left directed line
directed line points
line points words
points words reduced
words reduced geometric
reduced geometric relative
geometric relative locations
relative locations points
locations points determinant
points determinant fact
determinant fact entire
fact entire idea
entire idea analytical
idea analytical geometry
analytical geometry based
geometry based reducing
based reducing geometric
reducing geometric problems
geometric problems algebraic
problems algebraic vast
algebraic vast majority
vast majority geometric
majority geometric algorithms
geometric algorithms advantage
algorithms advantage historic
advantage historic insight
historic insight rene
insight rene descartes
rene descartes section
descartes section examples
algorithms based strategy
based strategy problem
strategy problem reduction
problem reduction computing
reduction computing common
common multiple recall
multiple recall common
recall common multiple
common multiple positive
multiple positive integers
positive integers denoted
integers denoted lcm
denoted lcm defined
lcm defined smallest
defined smallest integer
smallest integer divisible
integer divisible lcm
divisible lcm common
lcm common multiple
common multiple important
multiple important notions
important notions elementary
notions elementary arithmetic
elementary arithmetic algebra
arithmetic algebra middle
algebra middle school
school method computing
method computing prime
computing prime factorizations
prime factorizations compute
factorizations compute product
prime factors lcm
factors lcm computational
lcm computational procedure
computational procedure algorithm
procedure algorithm drawbacks
algorithm drawbacks middle
drawbacks middle school
middle school algorithm
school algorithm computing
common divisor discussed
divisor discussed section
discussed section inefficient
section inefficient requires
inefficient requires consecutive
requires consecutive primes
consecutive primes efficient
primes efficient algorithm
algorithm computing common
common multiple devised
multiple devised problem
devised problem reduction
problem reduction efficient
reduction efficient algorithm
efficient algorithm euclid
euclid algorithm finding
common divisor product
divisor product common
prime factors formula
factors formula relating
formula relating lcm
relating lcm gcd
lcm gcd difficult
gcd difficult product
difficult product lcm
product lcm gcd
lcm gcd includes
gcd includes factor
includes factor simply
factor simply equal
simply equal product
equal product observation
product observation leads
observation leads formula
leads formula lcm
formula lcm gcd
lcm gcd computed
gcd computed efficiently
computed efficiently euclid
efficiently euclid algorithm
euclid algorithm counting
algorithm counting paths
counting paths graph
paths graph problem
problem counting paths
counting paths vertices
paths vertices graph
vertices graph difficult
graph difficult prove
difficult prove mathematical
mathematical induction paths
induction paths length
matrix graph problem
problem counting graph
counting graph paths
graph paths solved
paths solved algorithm
solved algorithm computing
algorithm computing power
computing power adjacency
power adjacency matrix
adjacency matrix exponentiation
matrix exponentiation algorithms
exponentiation algorithms discussed
algorithms discussed computing
discussed computing powers
computing powers numbers
powers numbers applicable
numbers applicable matrices
applicable matrices specific
matrices specific graph
specific graph figure
matrix square numbers
square numbers paths
numbers paths length
paths length vertices
length vertices graph
figure graph adjacency
matrix square elements
square elements numbers
elements numbers paths
numbers paths lengths
paths length vertex
length vertex path
vertex path length
path length reduction
length reduction optimization
reduction optimization problems
optimization problems deals
problems deals solving
deals solving optimization
optimization problems problem
problems problem asks
asks maximum function
maximum function maximization
function maximization problem
maximization problem asks
problem asks function
asks function minimum
function minimum called
minimum called minimization
called minimization problem
minimization problem minimum
problem minimum function
minimum function algorithm
algorithm function maximization
function maximization advantage
maximization advantage lies
advantage lies simple
lies simple formula
simple formula min
formula min max
min max words
max words minimize
words minimize function
minimize function maximize
function maximize negative
maximize negative minimal
negative minimal function
minimal function property
function property illustrated
property illustrated function
illustrated function real
function real variable
real variable figure
variable figure formula
figure formula max
formula max min
max min valid
min valid shows
valid shows maximization
shows maximization problem
maximization problem reduced
problem reduced equivalent
reduced equivalent minimization
equivalent minimization problem
minimization problem relationship
problem relationship minimization
maximization problems general
problems general holds
general holds functions
holds functions defined
functions defined domain
defined domain figure
domain figure relationship
figure relationship minimization
maximization problems min
problems min max
min max apply
max apply functions
apply functions variables
functions variables subject
variables subject additional
subject additional constraints
additional constraints important
constraints important class
important class problems
class problems introduced
problems introduced section
introduced section topic
section topic function
topic function optimization
function optimization pointing
optimization pointing standard
pointing standard calculus
standard calculus procedure
calculus procedure finding
procedure finding extremum
extremum points function
points function fact
function fact based
fact based problem
based problem reduction
problem reduction suggests
reduction suggests finding
suggests finding function
finding function derivative
function derivative solving
derivative solving equation
solving equation function
equation function critical
function critical points
critical points words
points words optimization
words optimization problem
optimization problem reduced
reduced problem solving
problem solving equation
solving equation principal
equation principal finding
principal finding extremum
extremum points calling
points calling calculus
calling calculus procedure
calculus procedure algorithm
procedure algorithm defined
algorithm defined fact
defined fact general
fact general method
solving equations secret
equations secret calculus
secret calculus textbooks
calculus textbooks problems
textbooks problems carefully
problems carefully selected
carefully selected critical
selected critical points
critical points difficulty
points difficulty makes
difficulty makes lives
makes lives students
lives students instructors
students instructors easier
instructors easier process
easier process unintentionally
process unintentionally create
unintentionally create wrong
wrong impression students
impression students minds
students minds linear
minds linear programming
programming problems optimal
problems optimal decision
reduced instance linear
programming problem optimizing
linear inequalities university
inequalities university endowment
university endowment invest
endowment invest sum
invest sum split
sum split types
split types investments
types investments stocks
investments stocks bonds
bonds cash endowment
cash endowment managers
endowment managers annual
managers annual stock
annual stock bond
stock bond cash
bond cash investments
cash investments stocks
investments stocks risky
stocks risky bonds
risky bonds endowment
bonds endowment rules
endowment rules require
rules require invested
require invested stocks
invested stocks moneys
stocks moneys invested
moneys invested bonds
invested bonds addition
bonds addition total
addition total invested
total invested stocks
stocks bonds invested
bonds invested cash
invested cash managers
cash managers invest
managers invest money
invest money maximize
money maximize create
maximize create mathematical
create mathematical model
mathematical model problem
model problem amounts
problem amounts millions
amounts millions dollars
millions dollars invested
dollars invested stocks
bonds cash variables
cash variables pose
variables pose optimization
pose optimization problem
maximize subject small
subject small simple
small simple problem
simple problem optimal
problem optimal decision
reduced instance general
instance general linear
problem maximize minimize
subject ainxn group
ainxn group constraints
group constraints called
constraints called nonnegativity
called nonnegativity constraints
nonnegativity constraints strictly
constraints strictly speaking
strictly speaking unnecessary
speaking unnecessary special
unnecessary special cases
special cases general
cases general constraints
general constraints ainxn
constraints ainxn convenient
ainxn convenient separately
convenient separately linear
separately linear programming
linear programming proved
programming proved flexible
proved flexible model
flexible model wide
model wide variety
wide variety important
variety important applications
important applications airline
applications airline crew
crew scheduling transportation
scheduling transportation communication
communication network planning
network planning oil
planning oil exploration
oil exploration refining
exploration refining industrial
refining industrial production
industrial production optimization
production optimization fact
optimization fact linear
fact linear programming
linear programming considered
programming considered important
considered important achievements
important achievements history
achievements history applied
history applied mathematics
applied mathematics classic
mathematics classic algorithm
classic algorithm problem
problem called simplex
simplex method section
method section discovered
section discovered mathematician
george dantzig dan
dantzig dan worst
dan worst case
efficiency algorithm exponential
algorithm exponential performs
exponential performs typical
performs typical inputs
typical inputs recent
inputs recent algorithm
recent algorithm narendra
algorithm narendra karmarkar
narendra karmarkar kar
karmarkar kar proven
kar proven polynomial
proven polynomial worstcase
polynomial worstcase efficiency
worstcase efficiency performed
efficiency performed competitively
performed competitively simplex
competitively simplex method
empirical tests important
tests important stress
important stress simplex
stress simplex method
simplex method karmarkar
method karmarkar algorithm
karmarkar algorithm successfully
algorithm successfully linear
successfully linear programming
programming problems limit
problems limit variables
limit variables integer
variables integer values
integer values variables
values variables linear
variables linear programming
programming problem required
problem required integers
required integers linear
integers linear programming
programming problem integer
problem integer linear
programming problem special
problem special cases
special cases assignment
cases assignment problem
assignment problem problems
problem problems discussed
problems discussed sections
discussed sections integer
sections integer linear
programming problems difficult
problems difficult polynomial
difficult polynomial algorithm
algorithm solving arbitrary
solving arbitrary instance
arbitrary instance general
instance general integer
general integer linear
programming problem chapter
problem chapter algorithm
chapter algorithm possibly
algorithm possibly approaches
possibly approaches bound
approaches bound technique
bound technique discussed
technique discussed section
discussed section typically
section typically solving
typically solving integer
solving integer linear
programming problems knapsack
knapsack problem reduced
problem reduced linear
reduced linear programming
programming problem recall
problem recall section
recall section knapsack
section knapsack problem
problem posed knapsack
posed knapsack capacity
knapsack capacity items
capacity items weights
weights values valuable
values valuable subset
fits knapsack continuous
knapsack continuous fractional
continuous fractional version
fractional version problem
version problem fraction
problem fraction item
item knapsack variable
knapsack variable representing
variable representing fraction
representing fraction item
item knapsack inequality
knapsack inequality total
inequality total weight
total weight selected
weight selected items
selected items expressed
items expressed sum
expressed sum total
total sum continuous
sum continuous version
continuous version knapsack
problem posed linear
posed linear programming
subject apply general
apply general method
programming problems problem
problems problem solved
problem solved simple
solved simple special
simple special algorithm
special algorithm introduced
algorithm introduced section
introduced section reduction
section reduction knapsack
reduction knapsack problem
problem instance linear
programming problem prove
problem prove correctness
correctness algorithm discrete
algorithm discrete version
discrete version knapsack
knapsack problem allowed
problem allowed item
allowed item integer
item integer linear
programming problem version
problem version maximize
version maximize subject
maximize subject seemingly
subject seemingly minor
seemingly minor modification
minor modification makes
modification makes drastic
makes drastic difference
drastic difference plexity
difference plexity similar
plexity similar problems
similar problems constrained
problems constrained discrete
constrained discrete values
discrete values potential
values potential ranges
potential ranges fact
ranges fact version
fact version eas
version eas ier
eas ier subset
ier subset continuous
subset continuous version
continuous version fractional
version fractional item
fractional item version
item version fact
version fact complicated
fact complicated tinuous
complicated tinuous counterpart
tinuous counterpart reader
counterpart reader interested
reader interested specific
interested specific algorithms
specific algorithms solving
solving problem wealth
problem wealth literature
literature subject monographs
subject monographs mar
monographs mar kel
mar kel reduction
kel reduction graph
reduction graph problems
graph problems pointed
problems pointed section
pointed section problems
section problems solved
problems solved reduction
solved reduction standard
reduction standard graph
standard graph problems
graph problems true
problems true variety
true variety puzzles
variety puzzles games
puzzles games applications
games applications vertices
applications vertices graph
vertices graph typically
graph typically represent
typically represent states
represent states problem
states problem edges
problem edges permitted
edges permitted transi
permitted transi tions
transi tions states
tions states graph
states graph vertices
graph vertices represents
vertices represents initial
represents initial state
initial state represents
state represents goal
represents goal state
goal state problem
state problem vertices
problem vertices kind
vertices kind graph
kind graph called
graph called state
space graph transfor
graph transfor mation
transfor mation reduces
mation reduces problem
reduces problem path
problem path initial
state vertex goal
vertex goal state
goal state vertex
state vertex pwgc
vertex pwgc pwc
pwgc pwc pwg
pwc pwg pgc
pwg pgc pwg
pgc pwg pwc
pwg pwc pwgc
pwc pwgc figure
pwgc figure state
figure state space
space graph peasant
graph peasant wolf
goat cabbage puzzle
cabbage puzzle revisit
puzzle revisit classic
revisit classic river
classic river crossing
river crossing puzzle
crossing puzzle included
puzzle included exercises
included exercises section
exercises section peasant
section peasant finds
finds river bank
river bank wolf
eat cabbage peasant
cabbage peasant solve
peasant solve problem
solve problem prove
prove solution state
solution state space
space graph problem
graph problem figure
problem figure vertices
figure vertices labeled
vertices labeled states
labeled states represent
states represent stand
represent stand peasant
stand peasant wolf
goat cabbage bars
cabbage bars denote
bars denote river
denote river convenience
river convenience edges
convenience edges indicating
edges indicating boat
indicating boat occupants
boat occupants crossing
occupants crossing terms
crossing terms graph
terms graph interested
graph interested finding
interested finding path
finding path initial
labeled pwgc final
pwgc final state
labeled pwgc easy
pwgc easy distinct
easy distinct simple
distinct simple paths
simple paths initialstate
paths initialstate vertex
initialstate vertex final
vertex final state
state vertex applying
vertex applying breadth
applying breadth formal
breadth formal proof
formal proof paths
proof paths smallest
paths smallest edges
smallest edges puzzle
edges puzzle solutions
puzzle solutions requiring
solutions requiring river
requiring river crossings
river crossings minimum
crossings minimum crossings
minimum crossings needed
crossings needed success
needed success solving
success solving simple
solving simple puzzle
simple puzzle lead
puzzle lead generating
lead generating investigating
generating investigating state
investigating state space
space graphs straightforward
graphs straightforward task
straightforward task appreciation
task appreciation consult
appreciation consult books
consult books artificial
books artificial intelligence
artificial intelligence science
intelligence science state
science state space
space graphs principal
graphs principal subject
principal subject deal
subject deal important
deal important special
special case state
case state space
space graphs sections
graphs sections exercises
sections exercises prove
exercises prove equality
prove equality lcm
equality lcm gcd
lcm gcd underlies
gcd underlies algorithm
underlies algorithm computing
computing lcm euclid
lcm euclid algorithm
euclid algorithm log
computing gcd efficiency
gcd efficiency algorithm
efficiency algorithm computing
computing lcm numbers
lcm numbers construct
numbers construct min
construct min binary
tree key equal
key equal keys
keys children algorithm
children algorithm constructing
algorithm constructing max
constructing max defined
max defined section
defined section construct
section construct min
construct min prove
min prove paths
prove paths length
matrix graph design
graph design algorithm
algorithm efficiency cubic
efficiency cubic checking
cubic checking graph
checking graph vertices
graph vertices length
vertices length algorithm
length algorithm problem
algorithm problem starting
problem starting arbi
starting arbi trary
arbi trary vertex
trary vertex traverse
vertex traverse graph
graph depth forest
depth forest vertex
forest vertex edge
vertex edge leading
edge leading grand
leading grand parent
grand parent graph
parent graph triangle
graph triangle graph
triangle graph triangle
graph triangle subgraph
triangle subgraph algorithm
subgraph algorithm points
algorithm points coordinate
coordinate plane design
plane design algorithm
design algorithm points
algorithm points triangle
vertices points design
points design algorithm
algorithm problem finding
problem finding positive
finding positive integer
positive integer pair
integer pair integers
pair integers sum
integers sum product
sum product large
product large design
large design efficient
efficiency class assignment
class assignment problem
assignment problem introduced
introduced section stated
section stated people
stated people assigned
problem assign people
assign people jobs
people jobs minimize
jobs minimize total
minimize total cost
cost assignment express
assignment express assignment
express assignment problem
assignment problem linear
problem linear programming
problem solve instance
solve instance linear
programming problem section
problem section maximize
section maximize subject
maximize subject graph
subject graph coloring
coloring problem stated
problem stated vertex
stated vertex coloring
vertex coloring prob
coloring prob lem
prob lem assign
lem assign smallest
vertices color edge
color edge coloring
coloring problem assign
problem assign smallest
smallest colors edges
colors edges graph
edges endpoint color
endpoint color plain
color plain edge
plain edge coloring
coloring problem reduced
problem reduced vertex
reduced vertex coloring
vertex coloring problem
coloring problem dimensional
problem dimensional office
dimensional office location
location problem points
cartesian plane location
plane location average
location average manhattan
average manhattan dis
manhattan dis office
dis office minimizes
office minimizes tance
minimizes tance office
tance office points
office points problem
points problem efficiently
problem efficiently solved
efficiently solved problem
solved problem reduction
problem reduction technique
reduction technique provided
technique provided office
provided office located
office located input
located input points
input points jealous
points jealous husbands
jealous husbands married
husbands married couples
married couples river
couples river boat
river boat hold
boat hold people
hold people complicate
people complicate matters
complicate matters husbands
matters husbands jealous
husbands jealous crossing
jealous crossing procedure
crossing procedure wife
procedure wife bank
wife bank river
bank river woman
river woman husband
woman husband wife
husband wife husband
wife husband people
husband people bank
people bank river
bank river constraints
river constraints solve
constraints solve problem
solve problem classical
problem classical version
classical version problem
version problem solution
problem solution river
solution river crossings
river crossings dominoes
crossings dominoes small
dominoes small rectangular
small rectangular tiles
rectangular tiles dots
tiles dots called
dots called spots
called spots pips
spots pips embossed
pips embossed halves
embossed halves tiles
halves tiles standard
tiles standard domino
standard domino set
domino set tiles
set tiles unordered
pair integers general
integers general domino
general domino set
domino set domino
set domino tiles
domino tiles unordered
pair integers determine
integers determine values
determine values constructs
values constructs ring
constructs ring tiles
ring tiles domino
tiles domino set
domino set summary
set summary transform
summary transform conquer
transform conquer fourth
conquer fourth general
fourth general algorithm
algorithm design problem
design problem solving
solving strategy discussed
strategy discussed fact
discussed fact group
fact group techniques
group techniques based
techniques based idea
idea transformation problem
transformation problem easier
easier solve principal
solve principal varieties
principal varieties transform
varieties transform conquer
conquer strategy instance
strategy instance simplification
simplification representation problem
representation problem reduction
problem reduction instance
reduction instance simplification
instance simplification transforming
simplification transforming instance
transforming instance problem
instance problem special
problem special property
property makes problem
makes problem easier
easier solve presorting
solve presorting gaussian
presorting gaussian elimination
gaussian elimination rotations
elimination rotations avl
rotations avl trees
avl trees good
trees good examples
good examples strategy
examples strategy representation
strategy representation implies
representation implies changing
implies changing representation
changing representation problem
representation problem instance
problem instance representation
instance representation instance
representation instance examples
instance examples discussed
examples discussed chapter
discussed chapter representation
chapter representation set
representation set tree
set tree heaps
tree heaps heapsort
heaps heapsort horner
heapsort horner polynomial
polynomial evaluation binary
evaluation binary exponentiation
exponentiation algorithms problem
algorithms problem reduction
problem reduction calls
reduction calls transforming
calls transforming problem
transforming problem solved
solved algorithm examples
algorithm examples applying
examples applying idea
applying idea algorithmic
idea algorithmic problem
problem solving section
solving section reductions
section reductions linear
reductions linear programming
linear programming reductions
programming reductions graph
reductions graph problems
problems important examples
important examples illustrate
examples illustrate transform
illustrate transform conquer
transform conquer important
conquer important data
structures algorithms heaps
algorithms heaps heapsort
heaps heapsort avl
heapsort avl trees
avl trees gaussian
trees gaussian elimination
gaussian elimination horner
elimination horner essentially
horner essentially binary
tree keys node
keys node satisfying
node satisfying parental
satisfying parental dominance
dominance requirement defined
requirement defined binary
defined binary trees
binary trees heaps
trees heaps implemented
heaps implemented arrays
implemented arrays heaps
arrays heaps important
heaps important efficient
important efficient implementation
efficient implementation priority
implementation priority queues
priority queues underlie
queues underlie heapsort
underlie heapsort theoretically
heapsort theoretically important
algorithm based arranging
based arranging elements
arranging elements array
elements array successively
array successively removing
successively removing largest
removing largest element
largest element remaining
element remaining algorithm
remaining algorithm running
algorithm running log
running log worst
average case addition
case addition avl
addition avl trees
avl trees binary
binary trees balanced
trees balanced extent
balanced extent binary
extent binary tree
binary tree maintained
tree maintained transformations
maintained transformations types
transformations types called
types called rotations
called rotations basic
rotations basic operations
basic operations avl
operations avl trees
avl trees log
trees log eliminates
log eliminates bad
eliminates bad worst
bad worst case
efficiency classic binary
classic binary trees
binary trees achieve
trees achieve perfect
achieve perfect tree
perfect tree allowing
tree allowing node
allowing node ordered
keys children idea
children idea generalized
idea generalized yield
generalized yield important
yield important trees
important trees discussed
trees discussed gaussian
discussed gaussian elimination
linear equations principal
equations principal algorithm
principal algorithm linear
algorithm linear algebra
linear algebra solves
algebra solves transforming
solves transforming equivalent
transforming equivalent upper
coefficient matrix easy
matrix easy solve
easy solve substitutions
solve substitutions gaussian
substitutions gaussian elimination
gaussian elimination requires
elimination requires multiplications
requires multiplications horner
multiplications horner optimal
polynomial evaluation coefficient
evaluation coefficient preprocessing
coefficient preprocessing requires
preprocessing requires multiplications
multiplications additions evaluate
additions evaluate degree
evaluate degree polynomial
degree polynomial horner
polynomial horner byproducts
horner byproducts synthetic
byproducts synthetic division
synthetic division algorithm
division algorithm binary
algorithm binary exponentiation
exponentiation algorithms computing
algorithms computing introduced
computing introduced section
introduced section exploit
section exploit binary
representation exponent process
exponent process directions
process directions left
directions left linear
left linear programming
linear programming concerns
programming concerns optimizing
concerns optimizing linear
linear inequalities efficient
inequalities efficient algorithms
efficient algorithms capable
algorithms capable solving
capable solving large
solving large instances
large instances problem
instances problem thousands
problem thousands variables
thousands variables constraints
variables constraints provided
constraints provided variables
provided variables required
variables required integers
required integers called
called integer linear
linear programming constitute
programming constitute difficult
constitute difficult class
difficult class problems
running times algorithms
real roots quadratic
problem graph coloring
important unresolved issue
unresolved issue theoretical
issue theoretical science
algorithms solving variety
problems solved approximately
stems fact problems
real numbers represented
arithmetic operations performed
numerical algorithms discuss
hamiltonian circuit path
figure array elements
consecutive pair vertices
algorithm problem solved
classic recursive algorithm
scale sets coins
sets coins tipping
coins tipping left
tipping left staying
left staying scale
staying scale sets
scale sets heavier
sets heavier problem
case comparisons binary
array smallest element
array elements worst
graph vertices degrees
algorithm problem reduction
simplicity assume section
case comparisons algorithm
log comparisons worst
brute algorithm solving
class problem finding
algorithm problem exercises
equations unknowns solution
tree figure presents
comparisons searching sorted
tree height largest
polynomial degree anxn
polynomial evaluation algorithm
prove mathematical induction
polynomial algorithm solving
problem points cartesian
specific examples problems
polynomial worst case
problem unique solution
worst case prove
faster sorting algorithm
tower hanoi problem
algorithms tower hanoi
tower hanoi algorithm
efficiency specific algorithms
times operation executed
problem evaluating polynomial
elements input matrices
key comparisons comparison
problem reduction problem
problem based sophisti
cated mathematical analysis
matrix elements zeros
node left subtree
algorithm run input
run input size
insertion sort element
comparisons cavg comparison
significantly worst case
positive integer log
coin lighter heavier
algorithm definition algorithm
difference running times
tree shortest paths
paths weighted graph
function input size
problems true problem
definitions concepts definition
stance traveling salesman
problem determining integer
clique size clique
size clique size
graph subset edge
numerical algorithms numerical
algorithms mathematical problems
solutions infinitely solutions
solving equations unknown
range values range
estimate times faster
analyzing algorithm efficiency
algorithm comput ing
elements array numbers
closest pair convex
pair convex hull
smallest convex polygon
position sorted array
sorting algorithm based
operation algorithm illustrated
case key comparisons
language choice run
algorithms based technique
worst case assume
elements worst case
algorithm insertion sort
size instances size
largest element array
final position sorted
array equal elements
array real num
single node tree
key comparisons searching
algorithm computing product
cations additions subtractions
algorithm matrices algorithm
matrices algorithm matrices
lems computational geometry
points figure points
set real num
bers design algorithm
algorithm problem prove
section language choice
decrease euclid algorithm
solving nonlinear equations
design technique algorithm
elements log comparisons
combinatorial objects typically
objects typically grows
element position sorted
matrix row column
vertices starts ends
connected components vertices
sorted array remaining
tion examples chapter
decrease constant decrease
constant decrease constant
computing nonnegative integer
constant factor iteration
factor iteration algorithm
problem sorting array
problem solution original
case input array
key comparisons input
elementary sorting algorithms
sorting algorithms selection
algorithms selection sort
adjacency matrix algorithm
undirected graph output
graph output true
false vertex graph
average case key
sort important sorting
random arrays sizes
directed graph digraph
directed graph symmetric
directed graph tree
digraph edges digraph
vertices problem called
algorithm digraph fig
edges delete edges
adjacency lists efficiency
algorithms language choice
combinatorial objects permuta
tions combinations subsets
tations element set
prove correctness algorithm
generate subsets element
half array half
cursive version algorithm
comparisons algorithm make
logarithmic function grows
section hashing section
efficient solution efficient
array keys array
algorithm language choice
solve recurrence algorithm
algorithm write pseudocode
problem prove solution
validity prove validity
algorithm determined efficiency
efficiency sorting algorithm
array generally subarray
assume implemented array
based algorithm input
array version array
efficiency average case
smallest largest elements
index figure index
depending smaller larger
tree nodes elements
nodes elements set
elements set orderable
orderable items element
items element node
elements subtree greater
element subtree root
subtree root element
tree constructed successive
lower upper limits
proved mathematical induction
digraph edge digraph
decrease technique decrease
technique decrease technique
practical small instances
algorithms solving problem
algorithm computing gcd
rooted tree rooted
algorithm efficiency class
numbers characters alphabet
characters alphabet character
alphabet character strings
data compression data
compression data compres
algorithm quadratic algorithm
vertex ancestor vertex
pattern text pattern
boyer moore boyer
moore boyer moore
records student records
successful searches unsuccessful
searches unsuccessful searches
classic binary tree
speaking express numbers
express numbers express
numbers express numbers
express numbers knowledge
numbers knowledge meagre
knowledge meagre unsatisfactory
meagre unsatisfactory kind
unsatisfactory kind beginning
kind beginning knowledge
beginning knowledge scarcely
knowledge scarcely thoughts
scarcely thoughts advanced
thoughts advanced stage
advanced stage science
stage science lord
science lord kelvin
lord kelvin counted
kelvin counted counts
counted counts counted
counts counted albert
counted albert einstein
albert einstein chapter
einstein chapter devoted
chapter devoted analysis
devoted analysis algorithms
analysis algorithms american
algorithms american heritage
american heritage dic
heritage dic tionary
dic tionary defines
tionary defines analysis
defines analysis separation
analysis separation intellectual
separation intellectual substantial
intellectual substantial constituent
substantial constituent parts
constituent parts individual
parts individual study
individual study prin
study prin cipal
prin cipal dimensions
cipal dimensions algorithm
dimensions algorithm pointed
algorithm pointed section
pointed section legitimate
section legitimate desirable
legitimate desirable subject
desirable subject study
subject study term
study term analysis
term analysis algorithms
analysis algorithms narrower
algorithms narrower technical
narrower technical sense
technical sense investigation
sense investigation algorithm
investigation algorithm efficiency
algorithm efficiency respect
efficiency respect resources
respect resources running
resources running memory
running memory space
memory space emphasis
space emphasis efficiency
emphasis efficiency easy
efficiency easy dimensions
easy dimensions simplicity
dimensions simplicity gen
simplicity gen erality
gen erality efficiency
erality efficiency studied
efficiency studied precise
studied precise quantitative
precise quantitative terms
quantitative terms case
terms case speed
case speed memory
speed memory today
memory today computers
today computers efficiency
computers efficiency considerations
efficiency considerations primary
considerations primary importance
primary importance practical
importance practical view
practical view chapter
view chapter limit
chapter limit discussion
limit discussion algorithm
discussion algorithm efficiency
algorithm efficiency general
efficiency general framework
framework analyzing algorithm
algorithm efficiency sec
efficiency sec tion
sec tion section
tion section arguably
section arguably important
arguably important chapter
important chapter funda
chapter funda mental
funda mental nature
mental nature topic
nature topic makes
topic makes important
makes important sections
important sections entire
sections entire section
entire section notations
section notations big
big theta borrowed
theta borrowed mathematics
borrowed mathematics notations
mathematics notations language
notations language discussing
language discussing efficiency
discussing efficiency algorithms
efficiency algorithms section
algorithms section general
nonrecursive algorithms main
main tool analysis
tool analysis setting
analysis setting sum
setting sum representing
sum representing algorithm
representing algorithm running
algorithm running simplifying
running simplifying sum
simplifying sum standard
sum standard sum
standard sum manipulation
sum manipulation techniques
manipulation techniques section
techniques section general
recursive algorithms main
main tool summation
tool summation special
summation special kind
special kind equation
kind equation called
equation called recurrence
called recurrence relation
relation recurrence relations
recurrence relations set
relations set method
set method solving
method solving illustrate
solving illustrate analysis
illustrate analysis framework
analysis framework methods
framework methods appli
methods appli cations
appli cations variety
cations variety examples
variety examples sections
examples sections chapter
chapter section devoted
section devoted fibonacci
devoted fibonacci numbers
fibonacci numbers discov
numbers discov ered
discov ered years
ered years ago
years ago remarkable
ago remarkable sequence
remarkable sequence appears
sequence appears variety
appears variety applications
applications science discussion
science discussion fibonacci
discussion fibonacci sequence
fibonacci sequence serves
sequence serves natural
serves natural vehicle
natural vehicle introducing
vehicle introducing important
introducing important class
important class recurrence
class recurrence rela
recurrence rela tions
rela tions solvable
tions solvable method
solvable method section
method section discuss
discuss algorithms computing
fibonacci numbers sake
numbers sake general
sake general obser
general obser vations
obser vations efficiency
vations efficiency algorithms
efficiency algorithms methods
algorithms methods analyzing
methods analyzing methods
analyzing methods sections
methods sections powerful
sections powerful technique
powerful technique analyz
technique analyz ing
analyz ing efficiency
ing efficiency algorithms
efficiency algorithms mathematical
algorithms mathematical clarity
mathematical clarity precision
clarity precision methods
precision methods foolproof
methods foolproof sections
foolproof sections chapter
chapter deal approaches
deal approaches empirical
approaches empirical analysis
analysis algorithm visualization
algorithm visualization complement
visualization complement pure
complement pure mathematical
pure mathematical techniques
mathematical techniques sections
techniques sections newer
sections newer developed
newer developed mathematical
developed mathematical counterparts
mathematical counterparts proaches
counterparts proaches important
proaches important role
important role tools
role tools analysis
tools analysis algorithm
algorithm efficiency analysis
analysis framework section
framework section outline
section outline general
outline general framework
analyzing efficiency algo
efficiency algo rithms
algo rithms mentioned
rithms mentioned section
mentioned section kinds
section kinds efficiency
kinds efficiency space
efficiency called complexity
called complexity fast
complexity fast algorithm
efficiency called space
called space complexity
space complexity refers
complexity refers memory
refers memory units
memory units required
units required algorithm
required algorithm dition
algorithm dition space
dition space needed
space needed input
needed input output
input output early
output early days
early days electronic
days electronic computing
electronic computing resources
computing resources space
resources space premium
space premium half
premium half century
half century relentless
century relentless technological
relentless technological innovations
technological innovations improved
innovations improved speed
improved speed memory
speed memory size
memory size orders
size orders magnitude
orders magnitude extra
magnitude extra space
extra space quired
space quired algorithm
quired algorithm typically
algorithm typically caveat
typically caveat difference
caveat difference fast
difference fast main
fast main memory
main memory slower
memory slower secondary
slower secondary memory
secondary memory cache
memory cache issue
cache issue diminished
issue diminished extent
diminished extent addition
extent addition research
addition research experience
research experience shown
experience shown problems
shown problems achieve
problems achieve spectacular
achieve spectacular progress
spectacular progress speed
progress speed space
speed space established
space established tradition
established tradition algorithm
tradition algorithm textbooks
algorithm textbooks primarily
textbooks primarily efficiency
primarily efficiency analytical
efficiency analytical framework
analytical framework introduced
framework introduced applicable
introduced applicable analyzing
applicable analyzing space
analyzing space efficiency
space efficiency measuring
efficiency measuring input
input size obvious
size obvious observation
obvious observation algorithms
observation algorithms run
algorithms run longer
run longer larger
longer larger inputs
larger inputs takes
inputs takes longer
takes longer sort
longer sort larger
sort larger arrays
larger arrays larger
arrays larger matrices
larger matrices logical
matrices logical investigate
logical investigate algorithm
investigate algorithm efficiency
parameter indicating algorithm
indicating algorithm input
input size cases
size cases selecting
cases selecting parameter
selecting parameter straightforward
parameter straightforward size
straightforward size problems
size problems sorting
sorting searching finding
searching finding smallest
finding smallest element
smallest element problems
element problems dealing
problems dealing lists
dealing lists problem
lists problem evaluating
evaluating polynomial anxn
polynomial anxn degree
anxn degree polynomial
polynomial degree coefficients
degree coefficients larger
coefficients larger degree
larger degree discussion
degree discussion minor
discussion minor difference
minor difference inconsequential
difference inconsequential efficiency
inconsequential efficiency analysis
efficiency analysis situations
analysis situations choice
situations choice parameter
choice parameter indicating
parameter indicating input
input size computing
size computing product
product matrices natural
matrices natural measures
natural measures size
measures size problem
size problem frequently
problem frequently matrix
frequently matrix natural
matrix natural contender
natural contender total
contender total elements
total elements matrices
elements matrices multiplied
matrices multiplied general
multiplied general applicable
general applicable matrices
applicable matrices necessarily
matrices necessarily square
necessarily square simple
square simple formula
simple formula relating
formula relating measures
relating measures easily
measures easily algorithm
easily algorithm efficiency
algorithm efficiency qualitatively
efficiency qualitatively depending
qualitatively depending measures
depending measures problem
measures problem section
section exercises choice
exercises choice size
choice size metric
size metric influenced
metric influenced operations
influenced operations algorithm
operations algorithm input
input size checking
size checking algorithm
checking algorithm examines
algorithm examines individual
examines individual characters
individual characters input
characters input size
input size characters
size characters works
characters works processing
works processing words
processing words input
words input make
input make special
make special measuring
special measuring input
input size algorithms
size algorithms solving
solving problems checking
problems checking primality
checking primality positive
primality positive integer
positive integer input
integer input magnitude
input magnitude determines
magnitude determines input
determines input algorithms
input algorithms require
algorithms require parameter
require parameter size
parameter size inputs
size inputs vertices
inputs vertices edges
vertices edges algorithms
edges algorithms graphs
algorithms graphs represented
adjacency lists size
lists size situations
size situations preferable
situations preferable size
preferable size bits
binary representation log
representation log metric
log metric idea
metric idea efficiency
idea efficiency algorithms
efficiency algorithms ques
algorithms ques tion
ques tion units
tion units measuring
units measuring running
measuring running issue
running issue concerns
issue concerns units
concerns units measuring
units measuring algorithm
measuring algorithm running
algorithm running simply
running simply standard
simply standard unit
standard unit measurement
unit measurement millisecond
measurement millisecond running
millisecond running implement
running implement ing
implement ing algorithm
ing algorithm obvious
algorithm obvious drawbacks
obvious drawbacks approach
drawbacks approach dependence
approach dependence speed
dependence speed dependence
speed dependence quality
dependence quality implementing
implementing algorithm compiler
algorithm compiler generating
compiler generating machine
generating machine code
machine code difficulty
code difficulty clocking
difficulty clocking actual
clocking actual running
actual running pro
running pro gram
pro gram algorithm
gram algorithm efficiency
algorithm efficiency metric
efficiency metric extraneous
metric extraneous factors
extraneous factors approach
factors approach times
approach times algorithm
times algorithm operations
algorithm operations executed
operations executed approach
executed approach excessively
approach excessively difficult
excessively difficult unnecessary
difficult unnecessary thing
unnecessary thing important
thing important operation
important operation algorithm
operation algorithm called
algorithm called basic
called basic operation
basic operation contributing
operation contributing total
contributing total running
total running compute
running compute times
compute times basic
operation executed difficult
executed difficult basic
difficult basic operation
operation algorithm consuming
algorithm consuming operation
innermost loop sorting
loop sorting algorithms
sorting algorithms comparing
algorithms comparing elements
comparing elements keys
elements keys sorted
keys sorted algorithms
sorted algorithms basic
algorithms basic operation
key comparison algorithms
comparison algorithms mathematical
mathematical problems typically
problems typically involve
typically involve arithmetical
involve arithmetical operations
arithmetical operations addition
operations addition subtraction
subtraction multiplication division
multiplication division consuming
division consuming operation
consuming operation division
operation division multiplication
division multiplication addition
multiplication addition subtraction
addition subtraction considered
subtraction considered established
considered established framework
established framework analysis
framework analysis algorithm
algorithm ficiency suggests
ficiency suggests measuring
suggests measuring counting
measuring counting times
operation executed inputs
executed inputs size
size compute nonrecursive
compute nonrecursive recursive
recursive algorithms sections
algorithms sections important
sections important application
important application cop
application cop execution
cop execution algo
execution algo rithm
executed algorithm estimate
algorithm estimate computers
estimate computers multiplication
computers multiplication longer
multiplication longer addition
longer addition subtraction
addition subtraction timing
subtraction timing data
timing data provided
data provided kernighan
provided kernighan pike
kernighan pike ker
pike ker running
ker running implementing
implementing algorithm formula
algorithm formula copc
formula copc formula
copc formula caution
formula caution information
caution information operations
information operations basic
operations basic fact
basic fact computed
fact computed approximately
computed approximately constant
approximately constant cop
constant cop approximation
cop approximation reliability
approximation reliability easy
reliability easy assess
easy assess extremely
assess extremely large
extremely large small
large small formula
small formula reasonable
formula reasonable estimate
reasonable estimate algorithm
estimate algorithm running
algorithm running makes
running makes questions
makes questions faster
questions faster algorithm
algorithm run machine
run machine times
machine times faster
faster times assuming
times assuming longer
assuming longer algorithm
longer algorithm run
input size times
size times longer
times longer small
longer small values
small values copc
values copc knowing
copc knowing cop
knowing cop neatly
cop neatly cancelled
neatly cancelled ratio
cancelled ratio multiplicative
ratio multiplicative constant
multiplicative constant formula
constant formula cancelled
formula cancelled reasons
cancelled reasons efficiency
reasons efficiency analysis
analysis framework ignores
framework ignores multiplicative
ignores multiplicative constants
multiplicative constants concentrates
constants concentrates growth
concentrates growth constant
multiple large size
large size inputs
size inputs orders
inputs orders growth
orders growth emphasis
growth emphasis growth
emphasis growth large
growth large input
large input sizes
input sizes difference
sizes difference running
running times small
times small inputs
small inputs distinguishes
inputs distinguishes efficient
distinguishes efficient algorithms
efficient algorithms inefficient
algorithms inefficient compute
inefficient compute greatest
compute greatest common
common divisor small
divisor small numbers
small numbers immediately
numbers immediately efficient
immediately efficient euclid
efficient euclid algorithm
algorithm compared algorithms
compared algorithms discussed
algorithms discussed section
discussed section faster
section faster greatest
faster greatest common
divisor large numbers
large numbers difference
numbers difference algorithm
difference algorithm efficiencies
algorithm efficiencies important
efficiencies important large
important large values
large values function
values function growth
function growth counts
growth counts table
counts table values
values functions important
analysis algorithms magnitude
algorithms magnitude numbers
magnitude numbers table
numbers table profound
table profound significance
profound significance analysis
significance analysis algorithms
analysis algorithms function
algorithms function growing
function growing slowest
growing slowest logarithmic
slowest logarithmic function
grows slowly fact
slowly fact table
fact table values
table values approximate
values approximate functions
approximate functions important
algorithms log implementing
log implementing algorithm
implementing algorithm logarithmic
algorithm logarithmic basic
logarithmic basic operation
basic operation run
operation run practi
run practi cally
practi cally instantaneously
cally instantaneously inputs
instantaneously inputs realistic
realistic sizes specific
sizes specific values
specific values logarithm
values logarithm base
logarithm base formula
base formula loga
formula loga logb
loga logb makes
logb makes base
makes base leaving
base leaving logarithmic
leaving logarithmic multiplicative
logarithmic multiplicative constant
multiplicative constant omit
constant omit logarithm
omit logarithm base
logarithm base write
base write simply
write simply log
simply log situations
log situations interested
situations interested function
interested function growth
function growth multiplicative
growth multiplicative constant
multiplicative constant spectrum
constant spectrum exponential
spectrum exponential function
exponential function factorial
function factorial function
factorial function functions
function functions grow
functions grow fast
grow fast values
fast values astronomically
values astronomically large
astronomically large small
large small values
small values reason
values reason values
reason values table
values table years
table years making
years making operations
making operations execute
execute operations incomparably
operations incomparably faster
incomparably faster execute
faster execute operations
execute operations longer
operations longer years
longer years estimated
years estimated age
estimated age planet
age planet earth
planet earth tremendous
earth tremendous difference
tremendous difference orders
growth functions referred
functions referred exponential
referred exponential growth
exponential growth functions
growth functions simply
functions simply exponential
simply exponential fact
exponential fact strictly
fact strictly speaking
strictly speaking referred
speaking referred line
referred line important
line important algorithms
important algorithms require
algorithms require exponential
require exponential operations
exponential operations practical
operations practical solving
practical solving problems
solving problems small
problems small sizes
small sizes qualitative
sizes qualitative difference
qualitative difference orders
growth functions table
functions table react
table react twofold
react twofold argument
twofold argument function
argument function log
log increases log
increases log linear
log linear function
linear function increases
function increases twofold
increases twofold linearithmic
twofold linearithmic function
linearithmic function log
log increases slightly
increases slightly twofold
slightly twofold quadratic
twofold quadratic function
quadratic function cubic
function cubic function
cubic function fourfold
function fourfold eightfold
fourfold eightfold squared
eightfold squared increases
squared increases mathematics
increases mathematics refuses
mathematics refuses cooperate
refuses cooperate neat
cooperate neat worst
neat worst case
case efficiencies beginning
efficiencies beginning section
beginning section established
section established reasonable
established reasonable algorithm
reasonable algorithm efficiency
parameter indicating size
indicating size algorithm
size algorithm input
algorithm input algorithms
input algorithms running
algorithms running depends
running depends input
depends input size
input size specifics
size specifics input
specifics input sequential
input sequential straightforward
sequential straightforward algorithm
straightforward algorithm searches
algorithm searches item
searches item key
item key elements
key elements checking
elements checking successive
checking successive elements
elements key exhausted
key exhausted algorithm
exhausted algorithm pseudocode
algorithm pseudocode simplicity
pseudocode simplicity implemented
simplicity implemented array
implemented array assumes
array assumes condition
assumes condition checked
condition checked checks
checked checks array
checks array index
array index exceed
index exceed upper
exceed upper bound
upper bound fails
bound fails algorithm
fails algorithm sequentialsearch
algorithm sequentialsearch searches
sequentialsearch searches array
searches array sequential
array sequential input
sequential input array
input array key
array key output
index element matches
element matches matching
matches matching elements
matching elements running
elements running algorithm
running algorithm size
algorithm size worst
worst case matching
case matching elements
matching element algorithm
element algorithm makes
algorithm makes largest
makes largest key
key comparisons inputs
comparisons inputs size
inputs size cworst
size cworst worst
algorithm efficiency worst
algorithm runs longest
runs longest inputs
longest inputs size
inputs size determine
size determine worst
efficiency algorithm principle
algorithm principle straightforward
principle straightforward analyze
straightforward analyze algorithm
analyze algorithm kind
algorithm kind inputs
kind inputs yield
inputs yield largest
yield largest basic
largest basic operation
size compute worst
compute worst case
case cworst sequential
cworst sequential obvious
sequential obvious methods
obvious methods handling
methods handling trivial
handling trivial situations
trivial situations explained
situations explained subsequent
explained subsequent sections
subsequent sections chapter
sections chapter worst
chapter worst case
case analysis important
analysis important information
important information algorithm
information algorithm efficiency
algorithm efficiency bounding
efficiency bounding running
bounding running words
running words guarantees
words guarantees instance
guarantees instance size
instance size running
size running exceed
running exceed cworst
exceed cworst running
cworst running worst
inputs case efficiency
algorithm efficiency case
efficiency case input
runs fastest inputs
fastest inputs size
inputs size analyze
size analyze case
analyze case efficiency
case efficiency determine
efficiency determine kind
determine kind inputs
kind inputs smallest
inputs smallest inputs
smallest inputs size
inputs size case
size case smallest
case smallest input
smallest input means
input means input
means input size
runs fastest ascertain
fastest ascertain convenient
ascertain convenient inputs
convenient inputs case
case inputs sequential
inputs sequential lists
sequential lists size
lists size element
size element equal
element equal key
equal key cbest
key cbest algorithm
cbest algorithm analysis
algorithm analysis case
analysis case efficiency
case efficiency important
efficiency important worst
important worst case
case efficiency completely
efficiency completely useless
completely useless case
useless case inputs
case inputs advantage
inputs advantage fact
advantage fact algorithms
fact algorithms good
algorithms good case
good case performance
case performance extends
performance extends types
extends types inputs
types inputs case
inputs case sorting
case sorting algorithm
sorting algorithm insertion
insertion sort case
case inputs sorted
inputs sorted arrays
arrays algorithm works
algorithm works fast
works fast case
fast case efficiency
case efficiency deteriorates
efficiency deteriorates slightly
deteriorates slightly sorted
slightly sorted arrays
arrays algorithm method
algorithm method choice
method choice applications
choice applications dealing
applications dealing sorted
dealing sorted arrays
sorted arrays case
arrays case efficiency
efficiency algorithm unsatisfactory
algorithm unsatisfactory immediately
unsatisfactory immediately discard
immediately discard analysis
discard analysis discussion
analysis discussion worst
discussion worst case
case analysis case
analysis case counterpart
case counterpart yields
counterpart yields information
yields information algorithm
information algorithm behavior
algorithm behavior typical
behavior typical random
typical random input
random input information
input information average
information average case
case efficiency seeks
efficiency seeks analyze
seeks analyze algorithm
analyze algorithm average
case efficiency make
efficiency make assumptions
make assumptions inputs
assumptions inputs size
inputs size sequential
size sequential standard
sequential standard assumptions
standard assumptions probability
assumptions probability successful
probability successful equal
successful equal probability
equal probability occurring
ith position assumptions
position assumptions validity
assumptions validity difficult
validity difficult verify
difficult verify reasonableness
verify reasonableness average
reasonableness average key
key comparisons cavg
comparisons cavg case
cavg case successful
case successful probability
successful probability occurring
ith position comparisons
position comparisons algorithm
comparisons algorithm situation
algorithm situation case
situation case unsuccessful
case unsuccessful comparisons
unsuccessful comparisons probability
comparisons probability cavg
probability cavg general
cavg general formula
general formula yields
formula yields reasonable
yields reasonable answers
reasonable answers successful
answers successful average
successful average key
comparisons sequential algorithm
sequential algorithm inspect
algorithm inspect average
inspect average half
average half elements
half elements unsuccessful
elements unsuccessful average
unsuccessful average key
comparisons algorithm inspect
algorithm inspect elements
inspect elements inputs
elements inputs elementary
inputs elementary investigation
elementary investigation average
investigation average case
efficiency considerably difficult
considerably difficult investigation
difficult investigation worst
case efficiencies direct
efficiencies direct approach
direct approach involves
approach involves dividing
involves dividing instances
dividing instances size
instances size classes
size classes instance
classes instance class
instance class times
class times algorithm
operation executed classes
executed classes sequential
classes sequential probability
sequential probability distribution
probability distribution inputs
distribution inputs obtained
inputs obtained assumed
obtained assumed expected
assumed expected basic
expected basic operation
basic operation technical
operation technical implementation
technical implementation rarely
implementation rarely easy
rarely easy probabilistic
easy probabilistic assumptions
probabilistic assumptions underlying
assumptions underlying case
underlying case difficult
case difficult verify
difficult verify quest
verify quest simplicity
quest simplicity quote
simplicity quote results
quote results average
results average case
case efficiency algorithms
efficiency algorithms discussion
algorithms discussion interested
discussion interested derivations
interested derivations results
derivations results consult
results consult books
consult books baa
books baa sed
baa sed knui
sed knui knuii
knuii knuiii preceding
knuiii preceding discussion
preceding discussion average
discussion average case
case efficiency obtained
efficiency obtained taking
obtained taking average
taking average worst
case efficiencies average
efficiencies average occasionally
average occasionally coincide
occasionally coincide average
coincide average case
average case cost
case cost legitimate
cost legitimate performing
legitimate performing average
performing average case
case analysis average
analysis average case
case efficiency information
efficiency information unequivocally
information unequivocally important
unequivocally important algorithms
important algorithms averagecase
algorithms averagecase efficiency
averagecase efficiency overly
efficiency overly pessimistic
overly pessimistic worst
pessimistic worst case
case efficiency lead
efficiency lead average
lead average case
case analysis scientists
analysis scientists missed
scientists missed important
missed important algorithms
important algorithms efficiency
algorithms efficiency called
efficiency called amortized
called amortized efficiency
amortized efficiency applies
efficiency applies single
applies single run
single run algorithm
run algorithm sequence
algorithm sequence operations
sequence operations performed
data structure turns
structure turns situations
turns situations single
situations single operation
single operation expensive
operation expensive total
expensive total entire
total entire sequence
entire sequence operations
sequence operations significantly
operations significantly worst
single operation multiplied
operation multiplied amortize
multiplied amortize high
amortize high cost
high cost worst
cost worst case
worst case occurrence
case occurrence entire
occurrence entire sequence
entire sequence manner
sequence manner similar
manner similar business
similar business amortize
business amortize cost
amortize cost expensive
cost expensive item
expensive item years
item years item
years item productive
item productive life
productive life sophisticated
life sophisticated approach
sophisticated approach discovered
approach discovered american
discovered american scientist
american scientist robert
scientist robert tarjan
robert tarjan applications
tarjan applications developing
applications developing interesting
developing interesting variation
interesting variation classic
variation classic binary
binary tree tar
tree tar readable
tar readable nontechnical
readable nontechnical discussion
nontechnical discussion tar
discussion tar technical
tar technical account
technical account usefulness
account usefulness amortized
amortized efficiency section
efficiency section algorithms
section algorithms finding
algorithms finding unions
finding unions disjoint
unions disjoint sets
disjoint sets recapitulation
sets recapitulation analysis
recapitulation analysis framework
analysis framework leave
framework leave section
leave section summarize
section summarize main
summarize main points
main points framework
points framework outlined
framework outlined space
outlined space efficiencies
space efficiencies measured
efficiencies measured functions
measured functions algorithm
functions algorithm input
input size efficiency
size efficiency measured
measured counting times
operation executed space
executed space efficiency
space efficiency measured
measured counting extra
counting extra memory
units consumed algorithm
consumed algorithm efficiencies
algorithm efficiencies algorithms
efficiencies algorithms differ
algorithms differ significantly
differ significantly inputs
significantly inputs size
inputs size algorithms
size algorithms distinguish
algorithms distinguish worst
distinguish worst case
case efficiencies framework
efficiencies framework primary
framework primary lies
primary lies growth
lies growth algorithm
algorithm running extra
running extra memory
units consumed input
consumed input size
size infinity section
infinity section formal
section formal means
formal means investigate
means investigate orders
investigate orders growth
orders growth sections
growth sections discuss
sections discuss methods
discuss methods investigating
methods investigating nonrecursive
investigating nonrecursive recursive
recursive algorithms analysis
algorithms analysis framework
analysis framework outlined
framework outlined applied
outlined applied investigating
applied investigating efficiency
investigating efficiency specific
specific algorithms encounter
algorithms encounter examples
encounter examples rest
examples rest exercises
rest exercises algorithms
exercises algorithms natural
algorithms natural size
natural size metric
size metric inputs
metric inputs basic
inputs basic operation
basic operation iii
operation iii basic
iii basic operation
inputs size computing
size computing sum
sum numbers computing
numbers computing finding
computing finding largest
element numbers euclid
numbers euclid algorithm
euclid algorithm sieve
sieve eratosthenes pen
eratosthenes pen pencil
decimal integers definition
integers definition based
based algorithm adding
algorithm adding matrices
adding matrices basic
matrices basic operation
operation times performed
times performed function
performed function matrix
function matrix function
matrix function total
function total elements
total elements input
input matrices questions
matrices questions definition
questions definition based
matrix multiplication variation
multiplication variation sequential
variation sequential scans
sequential scans occurrences
scans occurrences key
occurrences key efficiency
key efficiency differ
efficiency differ efficiency
differ efficiency classic
efficiency classic sequential
classic sequential glove
sequential glove selection
glove selection gloves
selection gloves drawer
gloves drawer pairs
drawer pairs red
pairs red gloves
red gloves pairs
gloves pairs yellow
pairs yellow pairs
yellow pairs green
pairs green select
green select gloves
select gloves dark
gloves dark selection
dark selection smallest
selection smallest gloves
smallest gloves select
gloves select matching
select matching pair
matching pair case
pair case worst
worst case missing
case missing socks
missing socks washing
socks washing distinct
washing distinct pairs
distinct pairs socks
pairs socks missing
socks missing largest
missing largest pairs
largest pairs remaining
pairs remaining left
remaining left pairs
left pairs case
pairs case scenario
scenario pairs worst
pairs worst case
case assuming probability
assuming probability disappearance
probability disappearance socks
disappearance socks probability
socks probability case
probability case scenario
case scenario probability
scenario probability worst
probability worst case
worst case scenario
scenario pairs average
pairs average case
average case prove
case prove formula
prove formula bits
decimal integer prove
integer prove alternative
prove alternative formula
alternative formula bits
binary repre sentation
repre sentation positive
sentation positive integer
integer log analogous
log analogous formulas
analogous formulas decimal
formulas decimal digits
decimal digits accepted
digits accepted analysis
accepted analysis framework
analysis framework binary
framework binary decimal
binary decimal digits
decimal digits measuring
digits measuring size
measuring size sorting
size sorting algorithm
sorting algorithm augmented
algorithm augmented make
augmented make case
make case key
comparisons equal size
equal size worthwhile
size worthwhile addition
worthwhile addition sorting
addition sorting algorithm
sorting algorithm gaussian
gaussian elimination classic
elimination classic algorithm
equations unknowns requires
unknowns requires multiplications
requires multiplications algorithm
multiplications algorithm basic
basic operation longer
operation longer gaussian
longer gaussian elimination
gaussian elimination equations
elimination equations buying
equations buying times
buying times faster
times faster factor
faster factor faster
factor faster sizes
faster sizes systems
sizes systems solvable
systems solvable functions
solvable functions function
functions function argument
function argument increased
argument increased fourfold
increased fourfold log
fourfold log pairs
log pairs functions
pairs functions function
functions function pairs
function pairs lower
pairs lower higher
lower higher growth
constant multiple function
multiple function log
function log invention
log invention chess
invention chess legend
chess legend game
legend game chess
game chess invented
chess invented centuries
invented centuries ago
centuries ago northwestern
ago northwestern india
northwestern india sage
india sage invention
sage invention king
invention king game
king game offered
game offered inventor
offered inventor reward
inventor reward wanted
reward wanted inventor
wanted inventor asked
inventor asked grain
asked grain obtained
grain obtained single
obtained single grain
single grain wheat
grain wheat square
wheat square chessboard
square chessboard fourth
chessboard fourth squares
fourth squares filled
squares filled grain
filled grain doubling
grain doubling grains
doubling grains square
grains square chessboard
square chessboard inventor
chessboard inventor asked
inventor asked adding
asked adding grains
adding grains asymptotic
grains asymptotic notations
asymptotic notations basic
notations basic efficiency
efficiency classes pointed
classes pointed previous
pointed previous section
previous section efficiency
section efficiency analysis
analysis framework centrates
framework centrates growth
centrates growth algorithm
growth algorithm basic
basic operation principal
operation principal indicator
principal indicator algorithm
indicator algorithm efficiency
algorithm efficiency rank
efficiency rank orders
rank orders growth
orders growth scientists
growth scientists notations
scientists notations big
big theta notations
theta notations informally
notations informally sev
informally sev eral
sev eral examples
eral examples formal
examples formal definitions
formal definitions discussion
definitions discussion nonnegative
discussion nonnegative functions
defined set natural
set natural numbers
natural numbers context
numbers context interested
context interested algorithm
interested algorithm running
algorithm running basic
running basic operation
basic operation simple
operation simple function
simple function informal
function informal introduction
informal introduction informally
introduction informally set
informally set functions
set functions lower
functions lower growth
lower growth constant
multiple infinity examples
infinity examples assertions
examples assertions true
assertions true functions
true functions linear
functions linear lower
linear lower growth
lower growth quadratic
growth quadratic growth
quadratic growth functions
growth functions cubic
functions cubic higher
cubic higher growth
higher growth fourth
growth fourth degree
fourth degree polynomial
degree polynomial notation
polynomial notation stands
notation stands set
stands set functions
set functions higher
functions higher growth
multiple infinity finally
infinity finally set
finally set functions
set functions growth
functions growth constant
multiple infinity quadratic
infinity quadratic function
quadratic function infinitely
function infinitely log
infinitely log informal
log informal introduction
informal introduction comfortable
introduction comfortable idea
comfortable idea asymptotic
idea asymptotic notations
formal definitions notation
definitions notation definition
denoted bounded constant
bounded constant multiple
illustrated figure sake
figure sake visual
sake visual clarity
visual clarity extended
clarity extended real
extended real formally
real formally prove
formally prove assertions
prove assertions introduction
assertions introduction values
introduction values constants
values constants required
required definition lot
definition lot freedom
lot freedom choosing
freedom choosing specific
choosing specific values
specific values constants
values constants reason
constants reason proof
reason proof figure
proof figure big
figure big notation
big notation figure
notation figure big
figure big omega
omega notation definition
positive constant multiple
illustrated figure formal
figure formal proof
formal proof select
proof select figure
select figure big
figure big theta
big theta notation
theta notation definition
positive constant multiples
constant multiples large
multiples large positive
large positive constants
positive constants nonnegative
constants nonnegative integer
illustrated figure prove
figure prove inequality
prove inequality upper
inequality upper bound
upper bound prove
bound prove left
prove left inequality
left inequality lower
inequality lower bound
lower bound select
bound select property
select property involving
property involving asymptotic
involving asymptotic notations
formal definitions asymptotic
definitions asymptotic notations
asymptotic notations prove
notations prove general
prove general properties
general properties problem
properties problem section
section exercises simple
exercises simple examples
simple examples property
examples property analyzing
property analyzing algorithms
analyzing algorithms comprise
algorithms comprise consecutively
comprise consecutively executed
consecutively executed parts
executed parts theorem
parts theorem max
theorem max analogous
max analogous assertions
analogous assertions true
assertions true notations
true notations proof
notations proof extends
proof extends orders
extends orders growth
orders growth simple
growth simple fact
simple fact arbitrary
fact arbitrary real
arbitrary real numbers
real numbers max
numbers max positive
max positive constant
positive constant negative
constant negative integer
negative integer similarly
integer similarly denote
similarly denote max
denote max inequalities
max inequalities adding
inequalities adding yields
adding yields max
yields max constants
max constants required
required definition max
definition max property
max property imply
property imply algorithm
imply algorithm comprises
algorithm comprises consec
comprises consec utively
consec utively executed
utively executed parts
executed parts implies
parts implies algorithm
implies algorithm efficiency
algorithm efficiency deter
efficiency deter mined
deter mined higher
mined higher growth
higher growth efficient
growth efficient max
efficient max array
max array equal
equal elements algorithm
elements algorithm sort
algorithm sort array
sort array applying
array applying sorting
applying sorting algorithm
sorting algorithm scan
algorithm scan sorted
scan sorted array
sorted array consecutive
consecutive elements equality
elements equality sorting
equality sorting algorithm
sorting algorithm makes
algorithm makes comparisons
makes comparisons efficiency
comparisons efficiency entire
efficiency entire algorithm
entire algorithm max
algorithm max limits
max limits comparing
limits comparing orders
orders growth formal
growth formal definitions
formal definitions indispensable
definitions indispensable proving
indispensable proving abstract
proving abstract properties
abstract properties rarely
properties rarely comparing
rarely comparing orders
orders growth specific
growth specific functions
specific functions convenient
functions convenient method
convenient method based
method based computing
based computing limit
computing limit ratio
limit ratio functions
ratio functions principal
functions principal cases
principal cases arise
cases arise implies
arise implies smaller
implies smaller growth
smaller growth lim
growth lim implies
lim implies growth
implies growth implies
growth implies larger
implies larger growth
larger growth cases
growth cases case
cases case means
case means limit
means limit based
based approach convenient
approach convenient based
convenient based definitions
based definitions advantage
definitions advantage powerful
advantage powerful calculus
powerful calculus techniques
calculus techniques developed
techniques developed computing
developed computing limits
computing limits pital
limits pital lim
pital lim stirling
lim stirling formula
stirling formula large
formula large values
large values examples
values examples limit
examples limit based
growth functions orders
orders growth examples
growth examples beginning
examples beginning section
beginning section illustrate
section illustrate definitions
illustrate definitions lim
definitions lim limit
limit equal positive
equal positive constant
positive constant functions
constant functions growth
functions growth symbolically
growth symbolically orders
symbolically orders growth
orders growth log
growth log exam
log exam ple
exam ple immediately
ple immediately obvious
immediately obvious log
obvious log lim
log lim log
lim log lim
log lim limit
limit equal log
equal log smaller
log smaller growth
smaller growth limn
growth limn log
limn log called
log called notation
called notation log
notation log big
log big notation
big notation rarely
notation rarely analysis
rarely analysis algorithms
analysis algorithms fourth
algorithms fourth case
fourth case limit
case limit rarely
limit rarely actual
rarely actual practice
actual practice analyzing
practice analyzing algorithms
analyzing algorithms possibility
algorithms possibility makes
possibility makes limit
makes limit based
orders growth general
growth general based
general based definitions
based definitions orders
definitions orders growth
orders growth discussed
growth discussed informally
discussed informally section
informally section taking
section taking advantage
taking advantage stirling
advantage stirling formula
stirling formula lim
formula lim nen
lim nen grows
nen grows fast
fast grows faster
grows faster write
faster write symbolically
write symbolically big
symbolically big omega
omega notation preclude
notation preclude possibility
preclude possibility growth
possibility growth limit
growth limit computed
limit computed basic
computed basic efficiency
classes efficiency analysis
analysis framework puts
framework puts functions
puts functions orders
orders growth differ
growth differ constant
differ constant multiple
constant multiple infinitely
multiple infinitely classes
infinitely classes exponential
classes exponential functions
values base efficiencies
base efficiencies large
fall classes listed
classes listed table
listed table increasing
table increasing orders
increasing orders growth
orders growth names
growth names comments
names comments classifying
comments classifying algorithms
classifying algorithms asymptotic
algorithms asymptotic effi
asymptotic effi ciency
effi ciency practical
ciency practical values
practical values multiplicative
values multiplicative constants
multiplicative constants left
constants left unspecified
left unspecified leaves
unspecified leaves possibility
leaves possibility algorithm
possibility algorithm worse
algorithm worse efficiency
worse efficiency class
efficiency class running
class running faster
running faster algorithm
faster algorithm efficiency
efficiency class inputs
class inputs realistic
realistic sizes running
sizes running algorithm
algorithm running cubic
running cubic algorithm
cubic algorithm outperform
algorithm outperform quadratic
outperform quadratic algorithm
quadratic algorithm exceeds
algorithm exceeds anomalies
exceeds anomalies fortunately
anomalies fortunately multiplicative
fortunately multiplicative constants
multiplicative constants differ
constants differ drastically
differ drastically algorithm
drastically algorithm asymptotic
efficiency class outperform
class outperform algorithm
outperform algorithm worse
algorithm worse class
worse class moderately
class moderately sized
moderately sized inputs
sized inputs observation
inputs observation true
observation true algorithm
true algorithm exponential
algorithm exponential running
exponential running exponential
running exponential worse
exponential worse algorithm
worse algorithm exercises
algorithm exercises notation
exercises notation efficiency
notation efficiency class
efficiency class sequential
class sequential section
sequential section worst
section worst case
average case informal
case informal definitions
informal definitions determine
definitions determine ing
determine ing assertions
ing assertions true
assertions true false
true false table
false table basic
table basic asymptotic
basic asymptotic efficiency
asymptotic efficiency classes
efficiency classes class
classes class comments
class comments constant
comments constant short
constant short case
short case efficiencies
case efficiencies reasonable
efficiencies reasonable examples
reasonable examples algorithm
examples algorithm running
algorithm running typically
running typically infinity
typically infinity input
infinity input size
input size grows
size grows infinitely
grows infinitely large
infinitely large log
large log logarithmic
log logarithmic typically
logarithmic typically result
typically result cutting
result cutting problem
cutting problem size
problem size constant
size constant factor
iteration algorithm section
algorithm section logarithmic
section logarithmic algorithm
logarithmic algorithm account
algorithm account input
account input fixed
input fixed fraction
fixed fraction algorithm
fraction algorithm linear
algorithm linear running
linear running linear
running linear algorithms
linear algorithms scan
algorithms scan size
scan size sequential
size sequential class
sequential class log
class log linearithmic
log linearithmic conquer
linearithmic conquer algorithms
conquer algorithms chapter
algorithms chapter mergesort
chapter mergesort quicksort
mergesort quicksort average
average case fall
case fall category
fall category quadratic
category quadratic typically
quadratic typically characterizes
loops section elemen
section elemen tary
elemen tary sorting
sorting algorithms operations
algorithms operations matrices
operations matrices standard
matrices standard examples
standard examples cubic
examples cubic typically
cubic typically characterizes
loops section nontrivial
section nontrivial algorithms
nontrivial algorithms linear
algorithms linear algebra
linear algebra fall
algebra fall class
fall class exponential
class exponential typical
exponential typical algorithms
algorithms generate subsets
element set term
set term exponential
term exponential broader
exponential broader sense
broader sense larger
sense larger orders
larger orders growth
orders growth factorial
growth factorial typical
factorial typical algorithms
algorithms generate permutations
generate permutations element
permutations element set
element set functions
set functions class
class function belongs
function belongs simplest
belongs simplest answers
simplest answers prove
answers prove assertions
prove assertions log
assertions log table
log table values
values functions arise
functions arise analysis
arise analysis algorithms
analysis algorithms values
algorithms values functions
values functions log
functions log listed
log listed increasing
increasing growth values
growth values prove
values prove fact
prove fact mathematical
fact mathematical certainty
mathematical certainty prove
certainty prove functions
prove functions listed
functions listed increasing
increasing growth functions
growth functions growth
functions growth lowest
growth lowest highest
lowest highest prove
highest prove polynomial
prove polynomial degree
polynomial degree aknk
degree aknk belongs
aknk belongs prove
belongs prove exponential
prove exponential functions
values base prove
base prove assertions
prove assertions definitions
assertions definitions notations
definitions notations volved
notations volved disprove
volved disprove giving
disprove giving specific
giving specific counterexample
specific counterexample nonnegative
counterexample nonnegative functions
defined set nonnegative
set nonnegative integers
nonnegative integers prove
integers prove section
prove section theorem
section theorem notation
theorem notation mentioned
notation mentioned section
mentioned section elements
section elements array
array distinct algorithm
distinct algorithm based
algorithm based array
based array presorting
array presorting algorithm
presorting algorithm efficiency
entire algorithm sorting
algorithm presorting extra
presorting extra array
extra array size
array size space
size space efficiency
space efficiency class
entire algorithm range
algorithm range finite
range finite nonempty
nonempty set real
real numbers defined
numbers defined differ
defined differ ence
differ ence largest
smallest elements representation
elements representation english
representation english algorithm
english algorithm compute
algorithm compute range
compute range indi
range indi cate
cate efficiency classes
efficiency classes algorithms
classes algorithms notation
algorithms notation unsorted
notation unsorted array
array sorted singly
sorted singly linked
singly linked binary
linked binary tree
binary tree lighter
tree lighter heavier
lighter heavier identical
heavier identical coins
identical coins pan
coins pan scale
pan scale weights
scale weights coins
weights coins fake
coins fake lighter
fake lighter heavier
heavier genuine coins
genuine coins design
coins design algorithm
algorithm determine fake
determine fake coin
lighter heavier door
heavier door wall
door wall facing
wall facing wall
facing wall stretches
wall stretches infinitely
stretches infinitely direc
infinitely direc tions
direc tions door
tions door wall
door wall direction
wall direction door
direction door algorithm
door algorithm enables
algorithm enables door
enables door walking
door walking steps
walking steps unknown
steps unknown steps
unknown steps initial
steps initial position
initial position door
position door par
door par mathematical
par mathematical analysis
mathematical analysis nonrecursive
analysis nonrecursive algorithms
nonrecursive algorithms section
algorithms section systematically
section systematically apply
systematically apply general
outlined section analyzing
section analyzing efficiency
nonrecursive algorithms simple
algorithms simple demonstrates
simple demonstrates principal
demonstrates principal steps
principal steps typically
steps typically analyzing
typically analyzing algorithms
analyzing algorithms problem
algorithms problem finding
problem finding largest
element numbers simplicity
numbers simplicity assume
simplicity assume implemented
implemented array pseudocode
array pseudocode standard
pseudocode standard algorithm
standard algorithm solving
problem algorithm maxelement
algorithm maxelement determines
maxelement determines largest
determines largest element
element array input
real numbers output
numbers output largest
output largest element
largest element maxval
element maxval obvious
maxval obvious input
obvious input size
elements array operations
array operations executed
operations executed algorithm
executed algorithm loop
algorithm loop operations
loop operations loop
operations loop body
loop body comparison
body comparison maxval
comparison maxval assignment
maxval assignment maxval
assignment maxval operations
maxval operations basic
operations basic comparison
basic comparison executed
comparison executed repetition
executed repetition loop
repetition loop assignment
loop assignment comparison
basic operation comparisons
operation comparisons arrays
arrays size terms
size terms metric
terms metric distinguish
metric distinguish worst
distinguish worst average
average cases denote
cases denote times
denote times comparison
comparison executed formula
executed formula expressing
formula expressing function
expressing function size
function size algorithm
size algorithm makes
algorithm makes comparison
makes comparison execution
comparison execution loop
execution loop repeated
loop repeated loop
repeated loop variable
loop variable bounds
variable bounds inclusive
bounds inclusive sum
inclusive sum easy
sum easy sum
easy sum compute
sum compute repeated
compute repeated times
repeated times general
times general analyzing
general analyzing nonrecursive
analyzing nonrecursive algorithms
nonrecursive algorithms general
algorithms general analyzing
nonrecursive algorithms parameter
basic operation located
operation located loop
located loop times
loop times basic
operation executed depends
executed depends size
size input depends
input depends additional
depends additional property
additional property worst
property worst case
separately set sum
sum expressing times
expressing times algorithm
operation executed standard
executed standard formulas
standard formulas rules
formulas rules sum
sum manipulation closed
manipulation closed formula
closed formula establish
formula establish growth
establish growth proceeding
growth proceeding examples
proceeding examples review
examples review appen
review appen dix
appen dix summation
dix summation formulas
formulas rules analysis
rules analysis algorithms
analysis algorithms frequently
algorithms frequently basic
frequently basic rules
basic rules sum
sum manipulation cai
manipulation cai analysis
cai analysis nonrecursive
analysis nonrecursive algorithm
nonrecursive algorithm requires
algorithm requires setting
requires setting sum
setting sum recurrence
sum recurrence relation
relation times basic
operation executed recurrence
executed recurrence relations
recurrence relations typical
relations typical analyzing
typical analyzing recursive
algorithms section summation
section summation formulas
summation formulas lower
formulas lower upper
lower upper integer
upper integer limits
integer limits formula
limits formula special
formula special case
special case formula
case formula element
formula element uniqueness
uniqueness problem elements
problem elements array
array elements distinct
elements distinct problem
distinct problem solved
problem solved straightforward
solved straightforward algorithm
straightforward algorithm uniqueelements
algorithm uniqueelements determines
uniqueelements determines elements
determines elements array
array distinct input
distinct input array
input array output
array output returns
returns true elements
true elements distinct
elements distinct false
distinct false true
false true natural
true natural input
natural input size
elements array innermost
array innermost loop
innermost loop single
loop single operation
single operation comparison
operation comparison elements
comparison elements algorithm
elements algorithm basic
basic operation element
operation element comparisons
element comparisons depends
comparisons depends equal
depends equal elements
equal elements array
elements array positions
array positions occupy
positions occupy limit
occupy limit investigation
limit investigation worst
worst case definition
case definition worst
definition worst case
array element comparisons
element comparisons cworst
comparisons cworst largest
cworst largest arrays
largest arrays size
arrays size inspection
size inspection innermost
inspection innermost loop
innermost loop reveals
loop reveals kinds
reveals kinds worst
kinds worst case
case inputs algorithm
inputs algorithm exit
algorithm exit loop
exit loop prematurely
loop prematurely arrays
prematurely arrays equal
equal elements arrays
arrays elements pair
elements pair equal
pair equal elements
equal elements inputs
elements inputs comparison
inputs comparison repetition
comparison repetition innermost
innermost loop variable
variable limits repeated
limits repeated outer
repeated outer loop
outer loop variable
variable limits cworst
limits cworst computed
cworst computed sum
computed sum faster
sum faster equality
faster equality obtained
equality obtained applying
obtained applying summation
applying summation formula
summation formula result
formula result perfectly
result perfectly predictable
perfectly predictable worst
predictable worst case
case algorithm distinct
algorithm distinct pairs
distinct pairs elements
pairs elements matrices
elements matrices efficiency
matrices efficiency definition
efficiency definition based
computing product definition
product definition matrix
definition matrix elements
matrix elements computed
scalar dot products
dot products rows
products rows matrix
rows matrix columns
columns matrix row
row col pair
col pair indices
pair indices algorithm
indices algorithm matrixmultiplication
algorithm matrixmultiplication multiplies
matrixmultiplication multiplies square
multiplies square matrices
square matrices definition
matrices definition based
algorithm input matrices
input matrices output
matrices output matrix
output matrix input
matrix input size
input size matrix
size matrix arithmetical
matrix arithmetical operations
arithmetical operations innermost
operations innermost loop
innermost loop multiplication
loop multiplication addition
multiplication addition principle
addition principle designation
principle designation algorithm
designation algorithm basic
basic operation choose
operation choose repetition
choose repetition innermost
loop executed counting
executed counting automatically
counting automatically established
automatically established tradition
established tradition multiplication
tradition multiplication basic
multiplication basic operation
basic operation section
operation section set
section set sum
set sum total
sum total multiplications
total multiplications executed
multiplications executed algorithm
executed algorithm depends
algorithm depends size
size input matrices
input matrices investigate
matrices investigate worst
investigate worst case
case efficiencies separately
efficiencies separately multiplication
separately multiplication executed
multiplication executed repetition
executed repetition algorithm
repetition algorithm innermost
innermost loop governed
loop governed variable
governed variable ranging
variable ranging lower
ranging lower bound
upper bound multiplications
bound multiplications pair
multiplications pair specific
pair specific values
specific values variables
values variables total
variables total multiplications
total multiplications expressed
multiplications expressed triple
expressed triple sum
triple sum compute
compute sum formula
sum formula starting
formula starting innermost
starting innermost sum
innermost sum equal
sum equal simple
equal simple result
simple result summation
result summation machinations
summation machinations algorithm
machinations algorithm computes
algorithm computes elements
computes elements product
elements product matrix
product matrix product
matrix product elements
product elements computed
scalar dot product
dot product element
product element row
row matrix element
matrix element column
element column matrix
column matrix takes
matrix takes multiplications
takes multiplications total
total multiplications kind
multiplications kind reasoning
kind reasoning expected
reasoning expected answering
expected answering problem
answering problem exercises
exercises estimate running
estimate running algorithm
running algorithm machine
algorithm machine product
machine product cmm
product cmm cmn
cmm cmn multiplication
cmn multiplication machine
multiplication machine accurate
machine accurate estimate
accurate estimate account
estimate account spent
account spent additions
spent additions cmm
additions cmm caa
cmm caa cmn
caa cmn addition
cmn addition estimates
addition estimates differ
estimates differ multiplicative
differ multiplicative constants
multiplicative constants growth
constants growth erroneous
growth erroneous impression
erroneous impression outlined
impression outlined succeeds
outlined succeeds analyzing
succeeds analyzing nonrecursive
analyzing nonrecursive algorithm
nonrecursive algorithm irregular
algorithm irregular loop
irregular loop variable
loop variable sum
variable sum complicated
sum complicated analyze
complicated analyze difficulties
analyze difficulties intrinsic
difficulties intrinsic average
intrinsic average case
case analysis obstacles
analysis obstacles prove
obstacles prove insur
prove insur mountable
insur mountable caveats
mountable caveats simple
caveats simple nonrecursive
simple nonrecursive algorithms
nonrecursive algorithms subsequent
algorithms subsequent chapters
subsequent chapters algorithm
chapters algorithm loop
algorithm loop variable
loop variable manner
variable manner previous
manner previous examples
previous examples algorithm
examples algorithm finds
algorithm finds binary
finds binary digits
decimal integer algorithm
integer algorithm binary
algorithm binary input
binary input positive
binary representation frequently
representation frequently executed
executed operation loop
operation loop comparison
loop comparison determines
comparison determines loop
determines loop body
loop body executed
body executed times
executed times comparison
comparison executed larger
executed larger repetitions
larger repetitions loop
repetitions loop body
loop body choice
body choice important
choice important significant
important significant feature
significant feature fact
feature fact loop
fact loop variable
loop variable takes
variable takes values
takes values lower
values lower upper
upper limits alternative
limits alternative computing
alternative computing times
computing times loop
times loop executed
loop executed halved
executed halved repetition
halved repetition loop
repetition loop log
loop log exact
log exact formula
exact formula times
formula times comparison
comparison executed log
executed log bits
log bits binary
binary representation formula
representation formula applying
formula applying analysis
applying analysis technique
analysis technique based
technique based recurrence
based recurrence relations
recurrence relations discuss
relations discuss technique
discuss technique section
technique section pertinent
section pertinent analysis
pertinent analysis recursive
recursive algorithms exercises
algorithms exercises compute
exercises compute sums
compute sums growth
sums growth sums
growth sums notation
sums notation simplest
notation simplest function
simplest function sample
function sample variance
sample variance measurements
variance measurements computed
measurements computed divisions
computed divisions multiplications
divisions multiplications additions
additions subtractions bunched
subtractions bunched required
bunched required computing
required computing variance
computing variance formulas
variance formulas algorithm
formulas algorithm mystery
algorithm mystery input
mystery input nonnegative
nonnegative integer algorithm
integer algorithm compute
algorithm compute basic
compute basic operation
operation executed efficiency
executed efficiency class
class algorithm improvement
improvement algorithm altogether
algorithm altogether efficiency
altogether efficiency class
efficiency class prove
class prove fact
prove fact algorithm
fact algorithm secret
algorithm secret input
secret input array
real numbers minval
numbers minval maxval
maxval minval maxval
maxval minval questions
minval questions problem
problem algorithm enigma
algorithm enigma input
enigma input matrix
real numbers false
numbers false true
false true questions
true questions problem
problem algorithm implementation
algorithm implementation matrix
implementation matrix multiplication
multiplication algorithm ample
algorithm ample reducing
ample reducing additions
reducing additions algorithm
additions algorithm effect
algorithm effect algorithm
effect algorithm efficiency
algorithm efficiency determine
efficiency determine asymptotic
determine asymptotic growth
asymptotic growth total
growth total times
total times doors
times doors toggled
doors toggled locker
toggled locker doors
locker doors puzzle
doors puzzle problem
problem exercises prove
exercises prove formula
prove formula mathematical
formula mathematical induction
mathematical induction insight
induction insight year
insight year school
year school boy
school boy named
boy named carl
friedrich gauss grew
gauss grew greatest
grew greatest mathematicians
greatest mathematicians times
mathematicians times mental
times mental arithmetic
mental arithmetic table
arithmetic table filled
table filled repeating
filled repeating numbers
repeating numbers diagonals
numbers diagonals shown
diagonals shown total
shown total sum
total sum table
sum table numbers
table numbers cra
numbers cra version
cra version important
version important algorithm
important algorithm study
study algorithm input
algorithm input matrix
real numbers efficiency
numbers efficiency class
class algorithm glaring
algorithm glaring inefficiency
glaring inefficiency pseudocode
inefficiency pseudocode eliminated
pseudocode eliminated speed
eliminated speed algorithm
speed algorithm von
algorithm von neumann
neumann neighborhood algorithm
neighborhood algorithm starts
algorithm starts single
starts single square
single square iterations
square iterations adds
iterations adds squares
adds squares iterations
squares iterations gar
iterations gar parlance
gar parlance cellular
parlance cellular automata
cellular automata theory
automata theory cells
theory cells von
neighborhood range results
range results illustrated
results illustrated page
illustrated page numbering
page numbering total
numbering total decimal
total decimal digits
decimal digits needed
digits needed num
needed num bering
num bering pages
bering pages assume
pages assume pages
assume pages numbered
pages numbered consecutively
numbered consecutively starting
consecutively starting mathematical
starting mathematical analysis
mathematical analysis recursive
algorithms section apply
section apply general
general framework analysis
framework analysis algorithms
analysis algorithms recursive
recursive algorithms novices
algorithms novices idea
novices idea recursive
idea recursive algorithm
recursive algorithm compute
algorithm compute factorial
compute factorial function
factorial function arbitrary
function arbitrary nonneg
arbitrary nonneg ative
nonneg ative integer
integer definition compute
definition compute recursive
recursive algorithm computes
algorithm computes recursively
computes recursively input
recursively input nonnegative
integer output simplicity
output simplicity indicator
simplicity indicator algorithm
indicator algorithm input
input size bits
bits binary expansion
binary expansion basic
expansion basic operation
operation algorithm multiplication
algorithm multiplication executions
multiplication executions denote
executions denote function
denote function computed
function computed formula
computed formula alternatively
formula alternatively times
alternatively times comparison
comparison executed counting
executed counting total
counting total calls
total calls algorithm
calls algorithm problem
section exercises multiplications
exercises multiplications needed
needed compute equality
compute equality compute
equality compute multiplications
compute multiplications spent
multiplications spent compute
spent compute multiplication
compute multiplication needed
multiplication needed result
needed result equation
result equation defines
equation defines sequence
defines sequence equation
sequence equation defines
equation defines explicitly
defines explicitly function
explicitly function implicitly
function implicitly function
implicitly function equations
function equations called
equations called recurrence
called recurrence relations
recurrence relations brevity
relations brevity recurrences
brevity recurrences recurrence
recurrences recurrence relations
recurrence relations important
relations important role
important role analysis
role analysis algorithms
analysis algorithms areas
algorithms areas applied
areas applied mathematics
applied mathematics studied
mathematics studied courses
studied courses discrete
courses discrete mathematics
mathematics discrete structures
discrete structures tutorial
structures tutorial provided
tutorial provided appendix
provided appendix goal
appendix goal solve
goal solve recurrence
recurrence relation explicit
relation explicit formula
explicit formula terms
formula terms infinitely
terms infinitely sequences
infinitely sequences recurrence
sequences recurrence examples
recurrence examples determine
examples determine solution
determine solution uniquely
solution uniquely initial
uniquely initial condition
initial condition tells
condition tells sequence
tells sequence starts
sequence starts inspecting
starts inspecting condition
inspecting condition makes
condition makes algorithm
makes algorithm recursive
algorithm recursive calls
recursive calls tells
calls tells things
tells things calls
things calls smallest
calls smallest algorithm
smallest algorithm executed
algorithm executed defined
executed defined inspecting
defined inspecting pseudocode
inspecting pseudocode exiting
pseudocode exiting line
exiting line algorithm
algorithm performs multiplications
performs multiplications initial
multiplications initial condition
initial condition calls
condition calls multiplications
calls multiplications succeeded
multiplications succeeded setting
succeeded setting recurrence
setting recurrence relation
initial condition algorithm
condition algorithm multiplications
algorithm multiplications embark
multiplications embark discussion
embark discussion solve
discussion solve recurrence
solve recurrence reiterate
recurrence reiterate important
reiterate important dealing
important dealing recursively
dealing recursively defined
recursively defined functions
defined functions factorial
functions factorial function
factorial function defined
function defined recurrence
defined recurrence multiplications
recurrence multiplications needed
needed compute recursive
algorithm pseudocode beginning
pseudocode beginning section
beginning section showed
section showed defined
showed defined recurrence
defined recurrence solve
recurrence solve difficult
solve difficult solution
difficult solution sequence
solution sequence starts
sequence starts increases
starts increases systematic
increases systematic fashion
systematic fashion techniques
fashion techniques solving
techniques solving recurrence
recurrence relations called
relations called method
called method backward
backward substitutions method
substitutions method idea
method idea reason
idea reason immediately
reason immediately applies
immediately applies solving
applies solving recurrence
solving recurrence substitute
recurrence substitute inspecting
substitute inspecting lines
inspecting lines emerging
lines emerging pattern
emerging pattern makes
pattern makes predict
makes predict line
predict line general
line general formula
general formula pattern
formula pattern strictly
pattern strictly speaking
strictly speaking correctness
speaking correctness formula
correctness formula proved
formula proved mathematical
mathematical induction easier
induction easier solution
easier solution verify
solution verify correctness
verify correctness remains
correctness remains advantage
remains advantage initial
advantage initial condition
initial condition substitute
condition substitute pattern
substitute pattern formula
pattern formula ultimate
formula ultimate result
ultimate result backward
result backward substitutions
backward substitutions disappointed
substitutions disappointed exerting
disappointed exerting effort
exerting effort obvious
effort obvious benefits
obvious benefits method
benefits method illustrated
method illustrated simple
illustrated simple solve
simple solve difficult
solve difficult recurrences
difficult recurrences simple
recurrences simple iterative
simple iterative algorithm
iterative algorithm accumulates
algorithm accumulates product
accumulates product consecutive
product consecutive integers
consecutive integers requires
integers requires multiplications
requires multiplications overhead
multiplications overhead space
overhead space maintaining
space maintaining recursion
maintaining recursion stack
recursion stack issue
stack issue efficiency
issue efficiency important
efficiency important problem
important problem computing
problem computing section
computing section function
section function values
function values large
values large fast
large fast realistically
fast realistically compute
realistically compute exact
compute exact values
exact values small
values small simple
small simple convenient
simple convenient vehicle
convenient vehicle standard
vehicle standard approach
standard approach analyzing
approach analyzing recursive
recursive algorithms generalizing
algorithms generalizing experience
generalizing experience investigating
experience investigating recursive
investigating recursive algorithm
algorithm computing outline
computing outline general
outline general investigating
general investigating recursive
investigating recursive algo
recursive algo rithms
rithms general analyzing
recursive algorithms parameter
operation executed vary
executed vary inputs
vary inputs size
inputs size worst
separately set recurrence
initial condition times
condition times basic
operation executed solve
executed solve recurrence
solve recurrence ascertain
recurrence ascertain growth
ascertain growth solution
growth solution educational
solution educational workhorse
educational workhorse recursive
workhorse recursive algorithms
recursive algorithms tower
hanoi puzzle mythical
puzzle mythical monks
mythical monks disks
monks disks sizes
disks sizes slide
sizes slide pegs
slide pegs initially
pegs initially disks
initially disks peg
disks peg size
peg size largest
size largest smallest
largest smallest goal
smallest goal disks
goal disks peg
peg auxiliary disk
auxiliary disk forbidden
disk forbidden larger
forbidden larger disk
disk smaller problem
smaller problem elegant
problem elegant recursive
elegant recursive solution
recursive solution illustrated
solution illustrated figure
illustrated figure disks
figure disks peg
peg auxiliary recursively
auxiliary recursively disks
peg auxiliary largest
auxiliary largest disk
largest disk directly
disk directly peg
directly peg finally
peg finally recursively
finally recursively disks
peg auxiliary simply
auxiliary simply single
simply single disk
single disk directly
disk directly source
directly source peg
source peg destination
peg destination peg
destination peg figure
peg figure recursive
figure recursive solution
recursive solution tower
solution tower hanoi
hanoi puzzle apply
puzzle apply general
apply general outlined
general outlined tower
outlined tower hanoi
hanoi problem disks
problem disks obvious
disks obvious choice
obvious choice input
choice input size
input size indicator
size indicator moving
indicator moving disk
moving disk algorithm
disk algorithm basic
basic operation moves
operation moves depends
moves depends recurrence
depends recurrence equation
recurrence equation obvious
equation obvious initial
initial condition recurrence
condition recurrence relation
recurrence relation moves
relation moves solve
moves solve recurrence
solve recurrence method
recurrence method backward
backward substitutions pattern
substitutions pattern sums
pattern sums left
sums left suggests
left suggests generally
suggests generally substitutions
generally substitutions initial
substitutions initial condition
initial condition achieved
condition achieved formula
achieved formula solution
formula solution recurrence
solution recurrence exponential
recurrence exponential algorithm
exponential algorithm run
algorithm run unimaginably
run unimaginably moderate
unimaginably moderate values
moderate values problem
values problem section
exercises fact algorithm
fact algorithm poor
algorithm poor fact
poor fact difficult
fact difficult prove
difficult prove efficient
prove efficient algorithm
algorithm problem intrinsic
problem intrinsic difficulty
intrinsic difficulty makes
difficulty makes computationally
makes computationally hard
computationally hard makes
hard makes important
makes important general
important general careful
general careful recursive
careful recursive algorithms
recursive algorithms succinctness
algorithms succinctness mask
succinctness mask inefficiency
mask inefficiency recursive
inefficiency recursive algorithm
recursive algorithm makes
algorithm makes single
makes single analysis
single analysis purposes
analysis purposes construct
purposes construct tree
construct tree recursive
recursive calls tree
calls tree nodes
tree nodes correspond
nodes correspond recursive
correspond recursive calls
recursive calls parameter
calls parameter generally
parameter generally parameters
generally parameters calls
parameters calls tower
tower hanoi tree
hanoi tree figure
tree figure counting
figure counting nodes
counting nodes tree
nodes tree total
tree total calls
total calls tower
hanoi algorithm tree
algorithm tree figure
hanoi puzzle agrees
puzzle agrees obtained
agrees obtained earlier
obtained earlier investigate
earlier investigate recursive
investigate recursive version
recursive version algorithm
version algorithm discussed
section algorithm binrec
algorithm binrec input
binrec input positive
binary representation binrec
representation binrec set
binrec set recurrence
set recurrence initial
initial condition additions
condition additions algorithm
algorithm additions computing
additions computing binrec
computing binrec addition
binrec addition algorithm
addition algorithm returned
algorithm returned leads
returned leads recurrence
leads recurrence recursive
recursive calls equal
calls equal additions
equal additions initial
additions initial condition
initial condition presence
condition presence function
presence function argument
function argument makes
argument makes method
makes method backward
backward substitutions stumble
substitutions stumble values
stumble values powers
values powers standard
powers standard approach
standard approach solving
approach solving recurrence
solving recurrence solve
recurrence solve advantage
solve advantage theorem
advantage theorem called
theorem called smoothness
called smoothness appendix
smoothness appendix claims
appendix claims broad
claims broad assumptions
broad assumptions growth
assumptions growth observed
growth observed growth
observed growth values
growth values alternatively
values alternatively solution
alternatively solution powers
solution powers fine
powers fine tune
fine tune solution
tune solution formula
solution formula valid
formula valid arbitrary
valid arbitrary apply
arbitrary apply recipe
apply recipe recurrence
recipe recurrence takes
recurrence takes backward
takes backward substitutions
backward substitutions encounter
substitutions encounter problems
encounter problems substitute
problems substitute returning
substitute returning original
returning original variable
original variable log
variable log fact
log fact prove
fact prove problem
prove problem section
section exercises exact
exercises exact solution
exact solution arbitrary
solution arbitrary slightly
arbitrary slightly refined
slightly refined formula
refined formula log
formula log section
log section introduction
section introduction analysis
introduction analysis recursive
recursive algorithms techniques
algorithms techniques expanded
techniques expanded section
expanded section discuss
section discuss fibonacci
discuss fibonacci numbers
fibonacci numbers analysis
numbers analysis involves
analysis involves difficult
involves difficult recurrence
difficult recurrence relations
recurrence relations solved
relations solved method
solved method backward
backward substitutions exercises
substitutions exercises solve
exercises solve recurrence
solve recurrence relations
recurrence relations solve
relations solve set
recurrence relation calls
relation calls recursive
algorithm computing recursive
computing recursive algorithm
computing sum cubes
sum cubes algorithm
cubes algorithm input
integer output sum
output sum cubes
sum cubes set
cubes set solve
relation times algo
times algo rithm
executed algorithm straightforward
algorithm straightforward nonrecursive
straightforward nonrecursive algorithm
computing sum recursive
sum recursive algorithm
recursive algorithm input
integer set recurrence
recurrence relation function
relation function values
function values solve
values solve deter
solve deter algorithm
deter algorithm computes
algorithm computes set
computes set recurrence
multiplications algorithm solve
algorithm solve set
relation additions subtractions
additions subtractions algorithm
subtractions algorithm solve
algorithm solve tower
solve tower hanoi
tower hanoi original
hanoi original version
original version tower
hanoi puzzle published
puzzle published douard
published douard lucas
douard lucas french
lucas french mathematician
french mathematician world
mathematician world disks
world disks moved
disks moved mystical
moved mystical tower
mystical tower brahma
tower brahma estimate
brahma estimate years
estimate years monks
years monks disk
monks disk minute
disk minute assume
minute assume monks
assume monks eat
monks eat sleep
eat sleep die
sleep die moves
die moves ith
moves ith largest
ith largest disk
largest disk algorithm
disk algorithm nonrecursive
nonrecursive algorithm tower
hanoi puzzle imple
puzzle imple ment
imple ment language
language choice restricted
choice restricted tower
restricted tower hanoi
tower hanoi version
hanoi version tower
hanoi puzzle disks
puzzle disks moved
disks moved peg
moved peg disk
disk peg disk
disk peg prohibition
peg prohibition placing
prohibition placing larger
placing larger disk
disk smaller remains
smaller remains design
remains design recursive
recursive algorithm problem
algorithm problem moves
problem moves prove
moves prove exact
prove exact additions
exact additions recursive
additions recursive algorithm
recursive algorithm binrec
algorithm binrec arbitrary
binrec arbitrary positive
arbitrary positive decimal
decimal integer log
integer log set
log set recurrence
relation additions nonrecursive
additions nonrecursive version
nonrecursive version algorithm
version algorithm section
algorithm section solve
section solve design
solve design recursive
algorithm computing nonnegative
nonnegative integer based
integer based formula
based formula set
formula set recurrence
relation additions algorithm
additions algorithm solve
algorithm solve draw
solve draw tree
recursive calls algorithm
calls algorithm calls
algorithm calls algorithm
calls algorithm good
solving problem recursive
problem recursive algorithm
recursive algorithm riddle
algorithm riddle input
riddle input array
real numbers temp
numbers temp riddle
temp riddle temp
riddle temp algorithm
temp algorithm compute
algorithm compute set
compute set recurrence
recurrence relation algorithm
relation algorithm basic
basic operation solve
operation solve algorithm
solve algorithm graph
algorithm graph defined
matrix algorithm graphcomplete
algorithm graphcomplete input
graphcomplete input adjacency
output true false
true false vertex
vertex graph definition
graph definition graphcomplete
definition graphcomplete algorithm
graphcomplete algorithm efficiency
worst case determinant
case determinant matrix
defined recursive formula
column set recurrence
multiplications algorithm implementing
algorithm implementing recursive
implementing recursive definition
recursive definition solving
definition solving recurrence
solving recurrence solution
recurrence solution growth
solution growth compared
growth compared von
compared von neumann
neumann neighborhood revisited
neighborhood revisited cells
revisited cells von
neighborhood range problem
range problem exercises
problem exercises setting
exercises setting solving
setting solving recurrence
solving recurrence relation
recurrence relation frying
relation frying hamburgers
frying hamburgers fried
hamburgers fried small
fried small grill
small grill hold
grill hold hamburgers
hold hamburgers hamburger
hamburgers hamburger fried
hamburger fried sides
fried sides frying
sides frying hamburger
frying hamburger takes
hamburger takes minute
takes minute hamburgers
minute hamburgers fried
hamburgers fried recursive
fried recursive algorithm
recursive algorithm executing
algorithm executing task
executing task minimum
task minimum hamburger
minimum hamburger hamburgers
hamburger hamburgers apply
hamburgers apply procedure
apply procedure recursively
procedure recursively remaining
recursively remaining hamburgers
remaining hamburgers set
hamburgers set solve
recurrence algorithm hamburgers
algorithm hamburgers algorithm
hamburgers algorithm hamburgers
algorithm hamburgers minimum
hamburgers minimum recursive
minimum recursive algorithm
recursive algorithm executes
algorithm executes task
executes task minimum
task minimum celebrity
minimum celebrity problem
celebrity problem celebrity
problem celebrity group
celebrity group people
group people person
people person task
person task celebrity
task celebrity questions
celebrity questions people
questions people design
people design efficient
efficient algorithm celebrity
algorithm celebrity determine
celebrity determine group
determine group person
group person questions
person questions algorithm
questions algorithm worst
worst case computing
case computing nth
nth fibonacci section
fibonacci section fibonacci
section fibonacci numbers
fibonacci numbers famous
numbers famous sequence
famous sequence defined
initial conditions fibonacci
conditions fibonacci numbers
fibonacci numbers introduced
numbers introduced leonardo
introduced leonardo fibonacci
leonardo fibonacci solution
fibonacci solution problem
solution problem size
problem size rabbit
size rabbit population
rabbit population problem
population problem section
section exercises examples
exercises examples fibonacci
examples fibonacci numbers
fibonacci numbers discovered
numbers discovered natural
discovered natural world
natural world predicting
world predicting prices
predicting prices stocks
prices stocks commodities
stocks commodities interesting
commodities interesting applications
interesting applications fibonacci
fibonacci numbers science
numbers science worst
science worst case
case inputs euclid
euclid algorithm discussed
discussed section consecutive
section consecutive elements
consecutive elements fibonacci
fibonacci sequence section
sequence section briefly
section briefly algorithms
briefly algorithms computing
algorithms computing nth
computing nth element
nth element sequence
element sequence benefits
sequence benefits discussion
benefits discussion opportunity
discussion opportunity method
opportunity method solving
method solving recurrence
recurrence relations analysis
relations analysis recursive
recursive algorithms explicit
algorithms explicit formula
explicit formula apply
formula apply method
apply method backward
backward substitutions solve
substitutions solve recurrence
solve recurrence easily
recurrence easily discernible
easily discernible pattern
discernible pattern advantage
pattern advantage theorem
advantage theorem describes
theorem describes solutions
describes solutions homogeneous
solutions homogeneous linear
homogeneous linear recurrence
linear recurrence constant
recurrence constant efficients
constant efficients fixed
efficients fixed real
fixed real numbers
real numbers called
numbers called coefficients
called coefficients recurrence
coefficients recurrence generic
recurrence generic term
generic term unknown
term unknown sequence
unknown sequence applying
sequence applying theorem
applying theorem recurrence
theorem recurrence initial
initial conditions appendix
conditions appendix formula
appendix formula hard
formula hard formula
hard formula includes
formula includes arbitrary
includes arbitrary integer
arbitrary integer powers
integer powers irrational
powers irrational numbers
irrational numbers yields
numbers yields elements
yields elements fibonacci
fibonacci sequence benefits
sequence benefits formula
benefits formula immediately
formula immediately implies
immediately implies grows
implies grows exponentially
grows exponentially fibonacci
exponentially fibonacci rabbits
fibonacci rabbits constant
rabbits constant golden
constant golden ratio
golden ratio antiquity
ratio antiquity considered
antiquity considered pleasing
considered pleasing ratio
pleasing ratio rectangle
ratio rectangle sides
rectangle sides human
sides human eye
human eye consciously
eye consciously ancient
consciously ancient architects
ancient architects sculptors
architects sculptors observation
sculptors observation fraction
observation fraction infinitely
fraction infinitely small
infinitely small infinity
small infinity fact
infinity fact prove
fact prove impact
prove impact term
impact term obtained
term obtained rounding
obtained rounding term
rounding term nearest
term nearest integer
nearest integer words
integer words nonnegative
words nonnegative integer
nonnegative integer rounded
integer rounded nearest
rounded nearest integer
nearest integer algorithms
integer algorithms sake
algorithms sake simplicity
sake simplicity operations
simplicity operations additions
operations additions multiplications
additions multiplications unit
multiplications unit cost
unit cost fibonacci
cost fibonacci numbers
fibonacci numbers grow
numbers grow infinitely
grow infinitely large
infinitely large grow
large grow rapidly
grow rapidly detailed
rapidly detailed analysis
detailed analysis offered
analysis offered warranted
offered warranted fact
warranted fact size
fact size numbers
size numbers efficient
numbers efficient method
efficient method computing
method computing primary
computing primary caveats
primary caveats algorithms
caveats algorithms outline
algorithms outline analysis
outline analysis examples
analysis examples student
examples student design
student design analysis
analysis algorithms begin
algorithms begin recurrence
begin recurrence initial
initial conditions obvious
conditions obvious recursive
obvious recursive algorithm
computing algorithm computes
algorithm computes nth
nth fibonacci recursively
fibonacci recursively definition
recursively definition input
nth fibonacci embarking
fibonacci embarking formal
embarking formal analysis
formal analysis efficient
analysis efficient algorithm
efficient algorithm formal
formal analysis algorithm
analysis algorithm basic
basic operation addition
operation addition additions
addition additions performed
additions performed algorithm
performed algorithm computing
algorithm computing numbers
computing numbers additions
numbers additions needed
additions needed computing
needed computing algorithm
computing algorithm addition
algorithm addition compute
addition compute sum
compute sum recurrence
sum recurrence similar
recurrence similar recurrence
similar recurrence equal
recurrence equal recurrences
equal recurrences called
recurrences called inhomogeneous
called inhomogeneous general
inhomogeneous general techniques
general techniques solving
techniques solving inhomogeneous
solving inhomogeneous recurrences
inhomogeneous recurrences appendix
recurrences appendix textbook
appendix textbook discrete
textbook discrete mathematics
discrete mathematics recurrence
mathematics recurrence special
recurrence special leads
special leads faster
leads faster solution
faster solution inhomogeneous
solution inhomogeneous recurrence
inhomogeneous recurrence homogeneous
recurrence homogeneous rewriting
homogeneous rewriting substituting
rewriting substituting homogeneous
substituting homogeneous recurrence
homogeneous recurrence solved
recurrence solved manner
solved manner recur
manner recur rence
recur rence solved
rence solved explicit
solved explicit formula
explicit formula avoided
formula avoided noting
avoided noting fact
noting fact recurrence
fact recurrence starts
recurrence starts runs
starts runs ahead
runs ahead size
ahead size bits
size bits log
bits log binary
log binary representation
binary representation efficiency
representation efficiency class
efficiency class worse
class worse doubly
worse doubly exponential
doubly exponential poor
exponential poor efficiency
poor efficiency class
class algorithm anticipated
algorithm anticipated nature
anticipated nature recurrence
nature recurrence recursive
recursive calls sizes
calls sizes smaller
sizes smaller instances
smaller instances slightly
instances slightly smaller
slightly smaller size
smaller size encountered
size encountered situation
encountered situation reason
situation reason algorithm
reason algorithm inefficiency
algorithm inefficiency recursive
inefficiency recursive tree
recursive tree calls
tree calls tracing
calls tracing algorithm
tracing algorithm execution
algorithm execution tree
execution tree figure
tree figure values
figure values function
values function evaluated
function evaluated extremely
evaluated extremely inefficient
extremely inefficient faster
inefficient faster algorithm
faster algorithm simply
algorithm simply computing
simply computing successive
computing successive elements
successive elements fibonacci
fibonacci sequence iteratively
sequence iteratively algo
iteratively algo rithm
algo rithm algorithm
rithm algorithm fib
algorithm fib computes
fib computes nth
nth fibonacci iteratively
fibonacci iteratively definition
iteratively definition input
nth fibonacci figure
fibonacci figure tree
recursive calls computing
calls computing fibonacci
computing fibonacci definition
fibonacci definition based
based algorithm makes
algorithm makes additions
makes additions linear
additions linear function
linear function exponential
function exponential function
exponential function bits
binary representation extra
representation extra array
extra array storing
array storing preceding
storing preceding elements
preceding elements fibonacci
fibonacci sequence avoided
sequence avoided storing
avoided storing values
storing values accomplish
values accomplish task
accomplish task problem
task problem section
section exercises alternative
exercises alternative computing
alternative computing nth
nth fibonacci lies
fibonacci lies formula
lies formula efficiency
formula efficiency algorithm
efficiency algorithm determined
determined efficiency exponentiation
efficiency exponentiation algorithm
exponentiation algorithm computing
algorithm computing simply
computing simply multiplying
simply multiplying times
multiplying times algorithm
times algorithm faster
algorithm faster algorithms
faster algorithms exponentiation
exponentiation problem discuss
problem discuss log
discuss log algorithms
log algorithms problem
algorithms problem chapters
problem chapters special
chapters special exercised
special exercised implementing
exercised implementing approach
implementing approach computing
approach computing nth
nth fibonacci intermediate
fibonacci intermediate results
intermediate results irrational
results irrational numbers
irrational numbers make
numbers make approximations
make approximations accurate
approximations accurate final
accurate final yields
final yields result
yields result finally
result finally exists
finally exists log
exists log algorithm
nth fibonacci manipulates
fibonacci manipulates integers
manipulates integers based
integers based equality
based equality efficient
equality efficient computing
efficient computing matrix
computing matrix powers
matrix powers exercises
powers exercises web
exercises web site
web site dedicated
site dedicated applications
dedicated applications fibonacci
fibonacci numbers study
numbers study fibonacci
study fibonacci rabbits
fibonacci rabbits problem
rabbits problem pair
problem pair rabbits
pair rabbits sur
rabbits sur rounded
sur rounded wall
rounded wall pairs
wall pairs rabbits
pairs rabbits year
rabbits year initial
year initial pair
initial pair rabbits
pair rabbits male
rabbits male female
male female newborn
female newborn rabbit
newborn rabbit pairs
rabbit pairs fertile
pairs fertile month
fertile month life
month life birth
life birth male
birth male female
male female pair
female pair month
pair month climbing
month climbing stairs
climbing stairs ways
stairs ways climb
ways climb stair
climb stair case
stair case stairs
case stairs stair
stairs stair staircase
stair staircase climbed
staircase climbed ways
climbed ways numbers
ways numbers fibonacci
fibonacci numbers closed
numbers closed formula
closed formula valid
formula valid direct
valid direct substitutions
direct substitutions function
substitutions function satisfies
function satisfies recurrence
satisfies recurrence initial
initial conditions maximum
conditions maximum values
maximum values java
values java primitive
java primitive types
primitive types int
types int smallest
int smallest nth
smallest nth fibonacci
nth fibonacci memory
fibonacci memory allocated
memory allocated int
allocated int recursive
int recursive definition
computing nth bonacci
nth bonacci times
bonacci times computed
times computed prove
computed prove algorithm
prove algorithm text
algorithm text requires
text requires space
requires space prove
space prove equality
prove equality modulo
equality modulo divisions
modulo divisions euclid
algorithm consec utive
consec utive fibonacci
utive fibonacci numbers
fibonacci numbers algorithm
numbers algorithm input
algorithm input dissecting
input dissecting fibonacci
dissecting fibonacci rectangle
fibonacci rectangle sides
rectangle sides secutive
sides secutive fibonacci
secutive fibonacci numbers
fibonacci numbers design
design algorithm dissect
algorithm dissect squares
dissect squares size
squares size efficiency
size efficiency class
class algorithm language
language choice implement
choice implement algorithms
implement algorithms computing
algorithms computing digits
computing digits nth
digits nth fibonacci
nth fibonacci based
fibonacci based recursive
based recursive definition
based algorithm iterative
algorithm iterative definition
iterative definition based
based algorithm fib
algorithm fib experiment
fib experiment largest
experiment largest programs
largest programs run
programs run minute
run minute empirical
minute empirical analysis
empirical analysis algorithms
analysis algorithms sections
sections algorithms nonrecursive
algorithms nonrecursive recursive
nonrecursive recursive analyzed
recursive analyzed mathematically
analyzed mathematically techniques
mathematically techniques applied
techniques applied success
applied success fully
success fully simple
fully simple algorithms
simple algorithms power
algorithms power mathematics
power mathematics enhanced
mathematics enhanced advanced
enhanced advanced techniques
advanced techniques sed
techniques sed pur
sed pur gra
pur gra gre
gra gre limitless
gre limitless fact
limitless fact seemingly
fact seemingly simple
seemingly simple algorithms
simple algorithms proved
algorithms proved difficult
proved difficult analyze
difficult analyze mathematical
analyze mathematical precision
mathematical precision certainty
precision certainty pointed
certainty pointed section
pointed section true
section true average
true average case
case analysis principal
analysis principal alternative
principal alternative mathematical
alternative mathematical analysis
mathematical analysis algorithm
algorithm ficiency empirical
ficiency empirical analysis
empirical analysis approach
analysis approach implies
approach implies steps
implies steps spelled
steps spelled general
spelled general empirical
general empirical analysis
algorithm efficiency understand
efficiency understand experiment
understand experiment purpose
experiment purpose efficiency
purpose efficiency metric
efficiency metric measured
metric measured measurement
measured measurement unit
measurement unit operation
unit operation unit
operation unit characteristics
unit characteristics input
characteristics input sample
input sample range
sample range size
range size implementing
size implementing algorithm
implementing algorithm algorithms
algorithm algorithms exper
algorithms exper imentation
exper imentation generate
imentation generate sample
generate sample inputs
sample inputs run
inputs run algorithm
run algorithm algorithms
algorithm algorithms sample
algorithms sample inputs
sample inputs data
inputs data observed
data observed analyze
observed analyze data
data obtained discuss
obtained discuss steps
discuss steps goals
steps goals pursue
goals pursue analyzing
pursue analyzing algorithms
analyzing algorithms empirically
algorithms empirically checking
empirically checking accuracy
checking accuracy theoretical
accuracy theoretical assertion
theoretical assertion algorithm
assertion algorithm efficiency
algorithm efficiency comparing
efficiency comparing efficiency
comparing efficiency algorithms
efficiency algorithms solving
solving problem imple
problem imple mentations
imple mentations algorithm
mentations algorithm developing
algorithm developing hypothesis
developing hypothesis algorithm
hypothesis algorithm efficiency
efficiency class ascertaining
class ascertaining efficiency
ascertaining efficiency implementing
efficiency implementing algorithm
implementing algorithm machine
algorithm machine experiment
machine experiment design
experiment design pend
design pend experimenter
pend experimenter seeks
experimenter seeks goal
seeks goal experiment
goal experiment dictate
experiment dictate algorithm
dictate algorithm efficiency
algorithm efficiency measured
efficiency measured alternative
measured alternative insert
alternative insert counter
insert counter counters
counter counters implementing
counters implementing algorithm
implementing algorithm times
operation executed straightforward
executed straightforward operation
straightforward operation mindful
operation mindful possibility
mindful possibility basic
possibility basic operation
operation executed places
executed places executions
places executions accounted
executions accounted straightforward
accounted straightforward task
straightforward task modified
task modified ensure
modified ensure works
ensure works correctly
works correctly terms
correctly terms problem
terms problem solves
problem solves counts
solves counts yields
counts yields alternative
yields alternative implementing
alternative implementing algorithm
implementing algorithm easiest
algorithm easiest unix
easiest unix alternatively
unix alternatively running
alternatively running code
running code fragment
code fragment tstart
fragment tstart completion
tstart completion tfinish
completion tfinish computing
tfinish computing difference
computing difference tfinish
difference tfinish tstart
tfinish tstart function
tstart function clock
function clock purpose
clock purpose java
purpose java method
java method currenttimemillis
method currenttimemillis class
currenttimemillis class important
class important facts
important facts mind
facts mind typically
mind typically accurate
typically accurate results
accurate results repeated
results repeated runs
repeated runs inputs
runs inputs obvious
inputs obvious remedy
obvious remedy make
remedy make measurements
make measurements average
measurements average median
average median sample
median sample observation
sample observation high
observation high speed
high speed modern
speed modern puters
modern puters running
puters running register
running register reported
register reported standard
reported standard overcome
standard overcome obstacle
overcome obstacle run
obstacle run extra
run extra loop
extra loop times
loop times total
times total running
total running loop
running loop repetitions
loop repetitions running
repetitions running sharing
running sharing unix
sharing unix reported
unix reported spent
reported spent cpu
spent cpu programs
cpu programs defeats
programs defeats purpose
defeats purpose experiment
purpose experiment devoted
experiment devoted specifically
devoted specifically execution
specifically execution units
execution units called
units called ticks
called ticks difference
ticks difference divided
difference divided constant
divided constant indicating
constant indicating ticks
indicating ticks unit
ticks unit unix
unit unix called
unix called user
called user automatically
user automatically provided
automatically provided measuring
provided measuring physical
measuring physical running
physical running disadvantages
running disadvantages principal
disadvantages principal dependence
principal dependence machine
dependence machine important
machine important technical
important technical shared
technical shared counting
shared counting executions
counting executions basic
physical running specific
running specific information
specific information algorithm
information algorithm performance
algorithm performance computing
performance computing environment
computing environment importance
environment importance experimenter
importance experimenter algorithm
experimenter algorithm asymptotic
efficiency class addition
class addition measuring
addition measuring spent
measuring spent segments
spent segments pinpoint
segments pinpoint bottleneck
pinpoint bottleneck performance
bottleneck performance missed
performance missed abstract
missed abstract deliberation
abstract deliberation algorithm
deliberation algorithm basic
basic operation data
operation data called
data called profiling
called profiling important
profiling important resource
important resource empirical
resource empirical analysis
analysis algorithm running
algorithm running data
running data obtained
data obtained tools
obtained tools computing
tools computing environments
computing environments efficiency
environments efficiency basic
efficiency basic operation
basic operation counting
operation counting clocking
counting clocking sample
clocking sample inputs
sample inputs experiment
inputs experiment goal
experiment goal sample
goal sample representing
sample representing typical
representing typical input
typical input understand
input understand typical
understand typical input
typical input classes
input classes algorithms
classes algorithms traveling
salesman problem discuss
problem discuss researchers
discuss researchers developed
researchers developed set
developed set instances
set instances benchmark
instances benchmark ing
benchmark ing input
ing input sample
input sample developed
sample developed experimenter
developed experimenter typically
experimenter typically make
typically make decisions
make decisions sample
decisions sample size
sample size small
size small sample
small sample range
sample range instance
range instance sizes
instance sizes typically
sizes typically trivially
typically trivially small
trivially small excessively
small excessively large
excessively large procedure
large procedure generating
procedure generating instances
generating instances range
instances range chosen
range chosen instance
chosen instance sizes
instance sizes adhere
sizes adhere pattern
adhere pattern generated
pattern generated randomly
generated randomly range
randomly range chosen
range chosen principal
chosen principal advantage
principal advantage size
advantage size changing
size changing pattern
changing pattern impact
pattern impact easier
impact easier analyze
easier analyze sample
analyze sample sizes
sample sizes generated
sizes generated doubling
generated doubling compute
doubling compute ratios
compute ratios observed
ratios observed metric
observed metric ratios
metric ratios exhibit
ratios exhibit behavior
exhibit behavior typical
behavior typical algorithms
typical algorithms basic
algorithms basic efficiency
efficiency classes discussed
classes discussed section
discussed section major
section major disadvantage
major disadvantage nonrandom
disadvantage nonrandom sizes
nonrandom sizes possibility
sizes possibility algorithm
possibility algorithm investigation
algorithm investigation exhibits
investigation exhibits atypical
exhibits atypical behavior
atypical behavior sample
behavior sample chosen
sample chosen sizes
chosen sizes sample
sizes sample algorithm
sample algorithm runs
algorithm runs slowly
runs slowly odd
slowly odd size
odd size inputs
size inputs empirical
inputs empirical results
empirical results misleading
results misleading important
misleading important issue
important issue sizes
issue sizes experiment
sizes experiment sample
experiment sample instances
sample instances size
size included observed
included observed metric
observed metric vary
metric vary considerably
vary considerably instances
considerably instances size
instances size wise
size wise instances
wise instances size
instances size sample
size sample developed
sample developed methods
developed methods statistics
methods statistics experimenter
statistics experimenter make
experimenter make cisions
make cisions shortage
cisions shortage books
shortage books subject
books subject instances
subject instances size
size included sample
included sample averages
sample averages medians
averages medians observed
medians observed values
observed values size
values size computed
size computed investigated
computed investigated addition
investigated addition individual
addition individual sample
individual sample points
sample points empirical
points empirical analysis
empirical analysis requires
analysis requires generating
requires generating random
random numbers pattern
numbers pattern input
pattern input sizes
input sizes typically
sizes typically instances
typically instances generated
instances generated randomly
generated randomly generating
randomly generating random
random numbers digital
numbers digital difficult
digital difficult problem
difficult problem principle
principle problem solved
problem solved approximately
solved approximately reason
approximately reason scientists
reason scientists numbers
scientists numbers pseudorandom
numbers pseudorandom practical
pseudorandom practical easiest
practical easiest natural
easiest natural numbers
natural numbers advantage
numbers advantage random
advantage random generator
random generator language
generator language libraries
language libraries typically
libraries typically output
typically output pseudo
output pseudo random
distributed interval pseudo
interval pseudo random
random variable desired
variable desired transformation
desired transformation continuous
transformation continuous random
continuous random variable
distributed interval variable
interval variable uniformly
integer values integers
values integers alternatively
integers alternatively implement
alternatively implement algorithms
implement algorithms generating
algorithms generating pseudo
generating pseudo random
pseudo random numbers
random numbers widely
numbers widely studied
widely studied algorithms
studied algorithms linear
algorithms linear congruential
congruential method algorithm
method algorithm random
algorithm random seed
random seed generates
seed generates sequence
generates sequence pseudorandom
sequence pseudorandom numbers
pseudorandom numbers linear
numbers linear congruential
congruential method input
method input positive
positive integer parameters
integer parameters seed
parameters seed output
seed output sequence
output sequence pseudorandom
sequence pseudorandom integers
pseudorandom integers uniformly
integers uniformly distributed
integer values pseudorandom
values pseudorandom numbers
pseudorandom numbers obtained
numbers obtained treating
obtained treating integers
treating integers generated
integers generated digits
generated digits decimal
digits decimal seed
decimal seed mod
seed mod simplicity
mod simplicity pseudocode
simplicity pseudocode misleading
pseudocode misleading devil
misleading devil lies
devil lies details
lies details choosing
details choosing algorithm
choosing algorithm parameters
algorithm parameters partial
parameters partial recommendations
partial recommendations based
recommendations based results
based results sophisticated
results sophisticated mathematical
sophisticated mathematical analysis
mathematical analysis knuii
analysis knuii details
knuii details seed
details seed chosen
seed chosen arbitrarily
chosen arbitrarily set
arbitrarily set current
set current date
current date large
date large conveniently
large conveniently word
conveniently word size
word size selected
size selected integer
selected integer pattern
integer pattern digits
pattern digits mod
digits mod chosen
mod chosen empirical
chosen empirical data
empirical data obtained
data obtained result
obtained result experiment
result experiment recorded
experiment recorded presented
recorded presented analysis
presented analysis data
analysis data presented
data presented numerically
presented numerically table
numerically table graphically
table graphically scatterplot
graphically scatterplot points
scatterplot points cartesian
points cartesian coordinate
cartesian coordinate good
coordinate good idea
good idea options
idea options feasible
options feasible methods
feasible methods unique
methods unique strengths
unique strengths weaknesses
strengths weaknesses principal
weaknesses principal advantage
principal advantage tabulated
advantage tabulated data
tabulated data lies
data lies opportunity
lies opportunity manip
opportunity manip ulate
manip ulate easily
ulate easily compute
easily compute ratios
compute ratios candidate
ratios candidate represent
candidate represent efficiency
represent efficiency class
class algorithm ratios
algorithm ratios converge
ratios converge pos
converge pos itive
pos itive constant
itive constant large
constant large careless
large careless novices
careless novices assume
novices assume constant
assume constant incorrect
constant incorrect definition
incorrect definition compute
definition compute ratios
compute ratios running
ratios running reacts
running reacts doubling
reacts doubling input
doubling input size
input size discussed
size discussed section
discussed section ratios
section ratios slightly
ratios slightly logarithmic
slightly logarithmic algorithms
logarithmic algorithms converge
algorithms converge linear
converge linear quadratic
linear quadratic cubic
quadratic cubic algorithms
cubic algorithms obvious
algorithms obvious convenient
obvious convenient cases
convenient cases scatterplot
cases scatterplot ascertaining
scatterplot ascertaining algorithm
ascertaining algorithm probable
algorithm probable efficiency
probable efficiency class
efficiency class logarithmic
class logarithmic algorithm
logarithmic algorithm scat
algorithm scat terplot
scat terplot concave
terplot concave shape
concave shape figure
shape figure fact
figure fact distinguishes
fact distinguishes basic
distinguishes basic efficiency
efficiency classes linear
classes linear algorithm
linear algorithm points
algorithm points tend
points tend aggregate
tend aggregate straight
aggregate straight line
straight line generally
line generally contained
generally contained straight
contained straight lines
straight lines figure
lines figure scatterplots
figure scatterplots functions
scatterplots functions convex
functions convex shape
convex shape figure
shape figure making
figure making difficult
making difficult differentiate
difficult differentiate scatterplot
differentiate scatterplot cubic
scatterplot cubic algorithm
cubic algorithm convex
algorithm convex shape
convex shape rapid
shape rapid metric
rapid metric values
metric values exponential
values exponential algorithm
exponential algorithm require
algorithm require logarithmic
require logarithmic scale
logarithmic scale vertical
scale vertical axis
vertical axis val
axis val ues
val ues loga
ues loga plotted
loga plotted commonly
plotted commonly logarithm
commonly logarithm base
logarithm base coordinate
base coordinate scatterplot
coordinate scatterplot exponential
scatterplot exponential algorithm
exponential algorithm resemble
algorithm resemble linear
resemble linear function
linear function plies
function plies logb
plies logb vice
logb vice versa
vice versa applications
versa applications empirical
applications empirical analysis
empirical analysis predict
analysis predict gorithm
predict gorithm performance
gorithm performance instance
performance instance included
instance included experiment
included experiment sample
experiment sample ratios
sample ratios constant
ratios constant sample
constant sample instances
sample instances approximate
instances approximate prod
approximate prod uct
prod uct instances
uct instances approach
instances approach caution
approach caution values
caution values sample
sample range mathematicians
range mathematicians predictions
mathematicians predictions extrapolation
predictions extrapolation opposed
extrapolation opposed interpolation
opposed interpolation deals
interpolation deals values
deals values sample
sample range unleashing
range unleashing standard
unleashing standard tech
standard tech niques
tech niques statistical
niques statistical data
statistical data analysis
data analysis prediction
analysis prediction majority
prediction majority techniques
majority techniques based
techniques based specific
based specific probabilistic
specific probabilistic assumptions
probabilistic assumptions valid
assumptions valid experimental
valid experimental data
experimental data section
data section pointing
section pointing basic
pointing basic differ
basic differ ences
differ ences mathematical
ences mathematical empirical
analyses algorithms princi
algorithms princi pal
princi pal strength
pal strength mathematical
strength mathematical analysis
mathematical analysis independence
analysis independence specific
independence specific inputs
specific inputs principal
inputs principal weakness
principal weakness applicability
weakness applicability investigating
applicability investigating average
investigating average case
case efficiency principal
efficiency principal strength
principal strength empirical
strength empirical analysis
empirical analysis lies
analysis lies applicability
lies applicability algorithm
applicability algorithm results
algorithm results sample
results sample instances
sample instances experiment
instances experiment figure
experiment figure typical
figure typical plots
typical plots logarithmic
plots logarithmic linear
logarithmic linear convex
linear convex functions
convex functions exercises
functions exercises sorting
exercises sorting algorithm
sorting algorithm studied
algorithm studied counter
studied counter inserted
counter inserted key
inserted key comparisons
comparisons algorithm sortanalysis
algorithm sortanalysis input
sortanalysis input array
elements output total
output total key
comparisons comparison counter
comparison counter inserted
counter inserted prove
inserted prove make
make correction run
correction run problem
run problem properly
problem properly inserted
properly inserted counter
inserted counter coun
counter coun ters
coun ters key
ters key comparisons
key comparisons random
comparisons random arrays
arrays sizes analyze
sizes analyze data
data obtained hypothesis
obtained hypothesis algorithm
hypothesis algorithm average
case efficiency estimate
efficiency estimate key
estimate key comparisons
key comparisons randomly
comparisons randomly generated
randomly generated array
generated array size
array size sorted
size sorted algorithm
algorithm problem measuring
problem measuring running
measuring running milliseconds
running milliseconds hypothesize
milliseconds hypothesize efficiency
hypothesize efficiency class
class algorithm based
algorithm based empirical
based empirical observations
empirical observations basic
observations basic operation
basic operation size
operation size scale
size scale transformation
scale transformation make
transformation make logarithmic
make logarithmic scatterplot
logarithmic scatterplot linear
scatterplot linear distinguish
linear distinguish scatterplot
distinguish scatterplot algorithm
scatterplot algorithm scatterplot
algorithm scatterplot algorithm
scatterplot algorithm empirically
algorithm empirically largest
empirically largest divisions
largest divisions euclid
euclid algo rithm
algo rithm computing
computing gcd positive
gcd positive integer
positive integer empirically
integer empirically smallest
empirically smallest pair
smallest pair integers
pair integers euclid
euclid algorithm make
algorithm make divisions
make divisions gcd
divisions gcd average
gcd average case
case efficiency euclid
efficiency euclid algorithm
inputs size measured
size measured average
measured average divisions
average divisions davg
divisions davg algorithm
davg algorithm computing
computing gcd davg
gcd davg scatterplot
davg scatterplot davg
scatterplot davg algorithm
davg algorithm average
efficiency class run
class run experiment
experiment ascertain efficiency
efficiency class sieve
class sieve eratos
sieve eratos thenes
eratos thenes section
thenes section run
section run timing
run timing experiment
timing experiment algorithms
experiment algorithms computing
algorithms computing gcd
computing gcd presented
gcd presented section
presented section algorithm
section algorithm visualization
algorithm visualization addition
visualization addition mathematical
addition mathematical empirical
analyses algorithms study
called algorithm visualization
algorithm visualization defined
visualization defined images
defined images convey
algorithms information visual
information visual illustration
visual illustration algorithm
illustration algorithm operation
algorithm operation formance
operation formance kinds
formance kinds inputs
kinds inputs execution
inputs execution speed
execution speed algorithms
speed algorithms problem
algorithms problem accomplish
problem accomplish goal
accomplish goal algorithm
goal algorithm visualiza
algorithm visualiza tion
visualiza tion graphic
tion graphic elements
graphic elements points
elements points line
line segments dimensional
segments dimensional bars
dimensional bars represent
bars represent interesting
represent interesting events
interesting events algorithm
events algorithm operation
algorithm operation principal
operation principal variations
algorithm animation static
animation static algorithm
algorithm visualization shows
visualization shows algorithm
shows algorithm progress
algorithm progress series
progress series images
series images algorithm
images algorithm animation
algorithm animation shows
animation shows continuous
shows continuous movie
continuous movie presentation
movie presentation algorithm
presentation algorithm operations
algorithm operations animation
operations animation arguably
animation arguably sophisticated
arguably sophisticated option
sophisticated option difficult
option difficult implement
difficult implement early
implement early efforts
early efforts area
efforts area algorithm
area algorithm visualization
algorithm visualization watershed
visualization watershed event
watershed event happened
event happened appearance
happened appearance minute
appearance minute color
minute color titled
color titled sorting
titled sorting algorithm
sorting algorithm visualization
algorithm visualization classic
visualization classic produced
classic produced university
produced university toronto
university toronto ronald
toronto ronald baecker
ronald baecker assistance
baecker assistance sherman
assistance sherman bae
sherman bae contained
bae contained visualizations
contained visualizations sorting
visualizations sorting algorithms
sorting algorithms half
algorithms half discussed
half discussed provided
discussed provided convincing
provided convincing demonstration
convincing demonstration relative
demonstration relative speeds
relative speeds success
speeds success sorting
success sorting algorithms
sorting algorithms perennial
algorithms perennial vorite
perennial vorite algorithm
vorite algorithm animation
algorithm animation sorting
animation sorting problem
sorting problem lends
problem lends naturally
lends naturally visual
naturally visual presentation
visual presentation vertical
presentation vertical horizontal
vertical horizontal bars
horizontal bars sticks
bars sticks heights
sticks heights lengths
heights lengths rearranged
lengths rearranged sizes
rearranged sizes figure
sizes figure presentation
figure presentation convenient
presentation convenient illustrating
convenient illustrating actions
illustrating actions typical
actions typical sorting
typical sorting algorithm
sorting algorithm small
algorithm small inputs
small inputs larger
inputs larger files
larger files sorting
files sorting ingenious
sorting ingenious idea
ingenious idea presenting
idea presenting data
presenting data scatterplot
data scatterplot points
scatterplot points coordinate
plane coordinate representing
coordinate representing item
representing item position
item position representing
position representing item
representing item representation
item representation process
representation process sorting
process sorting transformation
sorting transformation random
transformation random scatterplot
random scatterplot points
scatterplot points diagonal
points diagonal figure
diagonal figure addition
figure addition sorting
addition sorting algorithms
sorting algorithms figure
algorithms figure initial
sorting algorithm representation
algorithm representation comparing
representation comparing exchanging
comparing exchanging items
exchanging items event
items event animated
event animated easily
animated easily appearance
easily appearance sorting
appearance sorting great
sorting great algorithm
great algorithm animations
algorithm animations created
animations created appearance
created appearance java
appearance java figure
java figure initial
sorting algorithm scatterplot
algorithm scatterplot representation
scatterplot representation world
representation world wide
world wide web
wide web range
web range scope
range scope algorithm
scope algorithm group
algorithm group algorithms
group algorithms problem
algorithms problem sorting
problem sorting application
sorting application area
application area geometric
area geometric algorithms
geometric algorithms general
algorithms general purpose
general purpose animation
purpose animation systems
animation systems catalog
systems catalog links
catalog links existing
links existing visualizations
existing visualizations maintained
visualizations maintained nsf
maintained nsf supported
nsf supported algovizproject
supported algovizproject contained
algovizproject contained links
contained links survey
links survey existing
survey existing visualizations
existing visualizations low
visualizations low quality
low quality content
quality content heavily
content heavily skewed
heavily skewed easier
skewed easier topics
easier topics sorting
topics sorting sha
sorting sha principal
sha principal applications
principal applications algorithm
applications algorithm visualization
algorithm visualization research
visualization research education
research education potential
education potential benefits
potential benefits researchers
benefits researchers based
researchers based expectations
based expectations algo
expectations algo rithm
algo rithm visualization
rithm visualization uncover
visualization uncover unknown
uncover unknown features
unknown features algorithms
features algorithms researcher
algorithms researcher visualization
researcher visualization recursive
visualization recursive tower
recursive tower hanoi
hanoi algo rithm
algo rithm odd
rithm odd numbered
odd numbered disks
numbered disks colored
disks colored colors
colored colors noticed
colors noticed disks
noticed disks color
disks color direct
color direct contact
direct contact algorithm
contact algorithm execution
algorithm execution observation
execution observation helped
observation helped developing
helped developing recursive
developing recursive version
recursive version classic
version classic algorithm
classic algorithm bentley
algorithm bentley mcilroy
bentley mcilroy ben
mcilroy ben mentioned
ben mentioned algorithm
mentioned algorithm animation
algorithm animation improving
animation improving library
improving library implementation
library implementation leading
implementation leading sorting
leading sorting algorithm
sorting algorithm application
application algorithm visualization
algorithm visualization education
visualization education seeks
education seeks students
seeks students learning
students learning algorithms
learning algorithms evidence
algorithms evidence effectiveness
evidence effectiveness decisively
effectiveness decisively mixed
decisively mixed experiments
mixed experiments register
experiments register positive
register positive learning
positive learning outcomes
learning outcomes failed
outcomes failed increasing
failed increasing body
increasing body evidence
body evidence creating
evidence creating sophisticated
creating sophisticated software
software systems fact
systems fact appears
fact appears student
appears student involvement
student involvement visualization
involvement visualization important
visualization important specific
important specific features
specific features visualization
features visualization software
visualization software experiments
software experiments low
experiments low tech
low tech visualizations
tech visualizations prepared
visualizations prepared students
prepared students effective
students effective passive
effective passive exposure
passive exposure sophisticated
exposure sophisticated software
software systems summarize
systems summarize successes
summarize successes research
successes research education
research education reported
education reported literature
reported literature impressive
literature impressive deeper
impressive deeper understanding
deeper understanding human
understanding human perception
human perception images
perception images required
images required true
required true potential
true potential algorithm
potential algorithm visualization
algorithm visualization fulfilled
visualization fulfilled summary
fulfilled summary kinds
summary kinds algorithm
algorithm efficiency space
space efficiency fast
efficiency fast algorithm
space efficiency deals
efficiency deals extra
deals extra space
extra space requires
space requires algorithm
requires algorithm efficiency
algorithm efficiency principally
efficiency principally measured
principally measured function
measured function input
input size counting
size counting times
counting times basic
operation executed basic
executed basic operation
basic operation contributes
operation contributes running
contributes running typically
running typically consuming
typically consuming operation
innermost loop algorithms
loop algorithms running
algorithms running differ
running differ considerably
differ considerably inputs
considerably inputs size
inputs size leading
size leading worst
leading worst case
case efficiency established
efficiency established framework
established framework analyzing
analyzing efficiency primarily
efficiency primarily grounded
primarily grounded growth
grounded growth algorithm
algorithm running input
running input size
size infinity notations
infinity notations asymptotic
notations asymptotic orders
asymptotic orders growth
growth functions expressing
functions expressing algorithm
expressing algorithm efficiencies
algorithm efficiencies large
fall classes constant
classes constant logarithmic
constant logarithmic linear
logarithmic linear linearithmic
linear linearithmic quadratic
linearithmic quadratic cubic
quadratic cubic exponential
cubic exponential main
exponential main tool
efficiency nonrecursive algorithm
nonrecursive algorithm set
algorithm set sum
sum expressing executions
operation ascertain sum
ascertain sum growth
sum growth main
growth main tool
efficiency recursive algorithm
recursive algorithm set
algorithm set recurrence
recurrence relation expressing
relation expressing executions
operation ascertain solution
ascertain solution growth
solution growth succinctness
growth succinctness recursive
succinctness recursive algorithm
recursive algorithm mask
algorithm mask inefficiency
mask inefficiency fibonacci
inefficiency fibonacci numbers
fibonacci numbers important
numbers important sequence
important sequence integers
sequence integers element
integers element equal
element equal sum
equal sum predecessors
sum predecessors algorithms
predecessors algorithms computing
fibonacci numbers drastically
numbers drastically efficiencies
drastically efficiencies empirical
efficiencies empirical analysis
analysis algorithm performed
algorithm performed running
performed running implementing
implementing algorithm sample
algorithm sample inputs
sample inputs analyzing
inputs analyzing data
analyzing data observed
data observed basic
observed basic operation
physical running involves
running involves generating
involves generating pseudorandom
generating pseudorandom numbers
pseudorandom numbers applicability
numbers applicability algorithm
applicability algorithm principal
algorithm principal strength
principal strength approach
strength approach dependence
approach dependence results
dependence results instance
results instance sample
instance sample main
sample main weakness
main weakness algorithm
weakness algorithm visualization
algorithm visualization images
visualization images convey
information algorithms principal
algorithms principal variations
important sorting algorithm
algorithm solve problem
prove algorithm yields
problem finding shortest
vertices graph edges
smallest largest element
sorting algorithm efficiency
general design technique
min binary tree
small instances problem
vertex tree vertex
puzzle problem exercises
size large size
tree root element
dijkstra algorithm dijkstra
set vertices adjacent
vertex algorithm vertex
solve problems solve
design simple algorithm
largest edges graph
defining path edges
algorithm solving problems
method solve problem
solve problem computing
gauss jordan elimination
shown figure algorithm
case efficiency write
problem asks maximum
problem optimizing linear
optimization problem maximize
maximize minimize cnxn
minimize cnxn subject
called simplex method
discovered mathematician george
mathematician george dantzig
simplex method empirical
method empirical tests
maximize subject apply
method solving linear
programming problem solve
office location problem
elimination algorithm solving
solution approximate solution
makes solve problem
sections chapter deal
algorithms traveling salesman
classic algorithm solving
constraints nonnegativity constraints
row difference row
entry column entry
efficiency worst case
karmarkar algorithm kar
feasible solutions feasible
vertex numbers vertex
maximum figure maximum
vertex labeled vertex
labeled vertex labeled
numbers rational numbers
row column set
graph arbitrary graph
graph vertices partitioned
edge path edge
path edge path
algorithm entirety algorithm
run experiment ascertain
undirected graph vertices
vertices adjacent vertex
create wrong impression
vertices partitioned disjoint
generating subsets set
key output index
points coordinate plane
problems sorting searching
brute approach brute
real line real
examples problems examples
edge called edge
graph figure graph
binary trees binary
vertices adjacent vertices
path directed path
algorithm finding largest
efficient space efficient
innermost loop algorithm
good algorithm problem
problem discussed section
optimal solution optimal
space efficient space
directed graph vertices
matrix graph matrix
fined adjacency matrix
study algorithms called
algo rithms general
solving problem algorithm
gcd computed gcd
algorithm finding greatest
euclid algorithm input
middle school middle
school middle school
compute product common
euclid algorithm discuss
design algorithm computing
assignment comparison algorithm
comparison algorithm basic
euclid algorithm compared
inputs euclid algorithm
solutions problems solutions
design algorithm solve
algorithms designing algorithm
data structures algorithm
design techniques design
techniques design technique
algorithm sieve eratosthenes
gorithm design techniques
algorithm designed algorithm
mathematical induction algorithm
kinds algorithm efficiency
easier understand easier
comparisons arrays size
goat cabbage river
cabbage river boat
river boat room
boat room peasant
room peasant item
peasant item wolf
item wolf goat
goat cabbage absence
cabbage absence wolf
absence wolf eat
wolf eat goat
eat goat eat
goat eat cabbage
finding distance closest
sorting algorithm called
equal elements input
equal elements positions
positions sorted positions
require extra memory
arrays sorting algorithms
data structures algorithms
graph algorithms graph
problem tsp problem
smallest colors vertices
colors vertices graph
geometric algorithms deal
sorted array algorithm
design algorithm determine
operations performed data
performed data structure
called operation called
graph problems important
item highest priority
finite nonempty set
vertices pair vertices
edge incident edge
incident edge incident
graph weighted digraph
real world applica
tions finding shortest
transportation communication network
matrix cost matrix
path edges path
graph weight matrix
real world appli
vertices graph figure
called state space
root left child
left subtrees binary
variety applications science
depends tree height
analysis algorithms log
plays central role
binary tree representation
set elements subset
sets lists set
item adding item
item deleting item
priority implemented unsorted
implemented unsorted array
array binary tree
middle school method
vertices graph adjacent
graph adjacent vertices
algorithms solving problems
starts ends vertex
element sorted array
graph defined adjacency
defined adjacency matrix
efficiency class worst
recursive algorithm tower
fake coin lighter
set orderable items
solving linear equations
problem special case
totic efficiency class
problem reducing problem
comparisons needed comparison
edge adding edge
problem transformed problem
circuit hamiltonian circuit
algorithm efficiency log
rithm average case
elements left element
sake simplicity assume
efficient algorithm comput
important data structure
algorithms exponentiation problem
sorting efficiency sorting
array elements equal
array consecutive elements
output returns true
algorithm entire algorithm
good sorting algorithm
worst case array
worst case assuming
rithm problem exercises
finding intersection set
indi cate efficiency
cate efficiency class
algorithm gaussian elimination
named carl friedrich
carl friedrich gauss
addition subtraction multiplication
summation formulas rules
method straightforward method
innermost loop executed
determinant matrix denoted
matrix denoted det
denoted det defined
recursive formula det
formula det odd
det odd element
odd element row
column matrix obtained
matrix obtained matrix
obtained matrix deleting
matrix deleting row
deleting row column
good algorithm solving
element node ele
ments left subtree
subtree smaller element
avl trees avl
subtrees binary tree
tree key node
nodes kinds nodes
root key root
leaf tree leaf
leaf parent leaf
design algorithm comput
algorithms prim algorithm
dijkstra algorithm sec
nodes key node
trees figure tree
key node key
array original array
construction algorithm construction
construct algorithm construct
brute algorithm require
multiplications additions subtractions
nonrecursive algorithm computing
task important problem
problem reduced problem
problems knapsack problem
peasant finds river
bank wolf goat
log algorithm computing
pair problem assign
graph edges endpoint
integers called integer
section examples algorithms
constant factor algorithm
left subtree smaller
elements preceding elements
sort makes comparisons
sort language choice
directed graphs directed
graphs directed graph
worst case cworst
recurrence initial condition
log smaller log
selection problem selection
problem selection problem
algorithm depends algorithm
subtree root subtree
tree size tree
array orderable elements
orderable elements output
points set points
problem knapsack problem
average worst case
elements smaller element
elements sorted element
array index array
path root leaf
shortest paths shortest
paths shortest paths
common divisor large
operations execute operations
matching elements matching
elements matching element
sort case inputs
bits binary repre
grows fast grows
functions class function
log efficiency class
sorting algorithm presorting
ence largest smallest
input array element
elements arrays elements
matrix columns matrix
algorithm improvement algorithm
algorithm study algorithm
algorithms recursive algorithms
ative integer definition
line algorithm performs
recursive algorithm pseudocode
obvious initial condition
recursive calls recursive
solve set solve
ment language choice
det defined recursive
euclid algorithm consec
problem principle problem
divisions euclid algo
algorithms study algorithms
information algorithms information
tower hanoi algo
case efficiency average
average key comparisons
linear equations linear
traveling salesman knap
maximize subject maximize
subject maximize subject
matching problem matching
case average case
represented adjacency matrix
graph adjacency matrix
worst case algorithm
sort alphabetical sort
closest pair prob
problem stated problem
vertex adjacent vertex
remainder division remainder
division remainder division
algorithm correctness algorithm
input words input
adjacent vertices color
geometric problems geometric
coloring problem color
dimensional array dimensional
finding shortest path
vertex listed vertex
listed vertex listed
tree ordered tree
array remaining array
unsorted array sorted
problem introduced section
class worst case
sorting algorithm merge
log cworst log
gorithms solving problem
graph connectivity graph
numbers array numbers
algorithms brute algo
array elements sort
points line segments
solution unique solution
ing linear equation
gaussian elimination gauss
root keys root
trees called trees
key total key
total multiplications total
addition multiplication addition
paths lengths paths
lengths paths length
function algorithm function
sum total sum
size instance size
directed path directed
bit string bit
string bit string
elements left elements
sum defined sum
sorted arrays sorted
arrays sorted array
elements positions elements
equal smaller equal
input array orderable
worst case efficiency
degree polynomial degree
case inputs case
inputs case inputs
tary sorting algorithms
matrix row col
multiplications total multiplications
additions subtractions additions
subtractions additions subtractions
discrete mathematics discrete
additions algorithm additions
algorithm nonrecursive algorithm
numbers fibonacci numbers
algorithms sections algorithms
coordinate plane coordinate
graph represented adjacency
connected graph connected
tree set tree
node tree node
trees binary trees
vertices edges vertices
rows columns rows
rooted tree root
points line segment
sorts array sort
algorithm compared algorithm
euclid algorithm euclid
prove correctness prove
algorithms approximation algorithm
elements smaller elements
strings bit strings
directed paths directed
paths directed path
ith element ith
element ith element
rithm problem section
problem difficult problem
trees binary tree
algorithms section algorithms
insertion sort insertion
sort insertion sort
problem instances problem
line points line
recurrence relation recurrence
sections chapter section
operation times operation
times faster times
makes comparisons makes
comparisons makes comparisons
efficiency classes efficiency
sum compute sum
algorithm times algorithm
rithm computing gcd
algorithms called algorithm
bound upper bound
element subsets element
binary tree node
algorithm log algorithm
figure shown figure
equations linear equations
design efficient algorithm
element equal element
points line points
problems optimization problems
algorithm requires algorithm
requires algorithm require
problems difficult problems
problem graph problem
ing largest element
weighted graph weighted
path simple path
weighted graph weight
ith row ith
worst average case
element set element
set element set
comparisons average comparisons
efficiency log efficiency
row column row
edges graph edges
prove equality prove
algorithm fact algorithm
edges graph edge
states united states
algorithm solving prob
elements equal elements
searching problem searching
algorithm brute algo
problem figure problem
algorithm application algorithm
array sorted array
numbers real numbers
solution instance solution
instance solution instance
adjacency matrix adjacency
algorithm case algorithm
adjacency lists adjacency
elements array elements
sorted array sort
tree nodes tree
figure tree figure
left subtree left
applications important applications
algorithm good algorithm
tree binary tree
instance problem instance
sorting algorithms sort
graph vertices graph
vertices graph vertices
integers positive integer
design technique design
algorithm figure algorithm
array input array
tree figure tree
binary tree binary
solve problem solve
sorted array sorted
figure illustrated figure
algorithm sorting algorithm
worst case effi
algorithm linear algorithm
problem solve problem
problem instance problem
algorithm design algorithm
case worst case
running algorithm running
algorithm computing algorithm
case efficiency case
efficiency case efficiency
algorithm pseudocode algorithm
solving problem solving
problem solving problem
problem solved problem
efficiency class efficiency
computing problem computing
algorithm section algorithm
root tree root
tree root tree
positive integer positive
integer positive integer
algorithm problem algorithm
problem section exercises
problem algorithm problem
lem section exercises
algorithm efficiency algorithm
efficiency algorithm efficiency
