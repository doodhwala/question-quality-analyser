Recommended Reading
244  CHAPTER 5 / CONCURRENCY: MUTUAL EXCLUSION AND SYNCHRONIZATION
     Mutual exclusion is a condition in which there is a set of concurrent processes,
     only one of which is able to access a given resource or perform a given function
     at any time. Mutual exclusion techniques can be used to resolve conflicts, such as
     competition for resources, and to synchronize processes so that they can coop-
     erate. An example of the latter is the producer/consumer model, in which one
     process is putting data into a buffer and one or more processes are extracting data
     from that buffer.
     One approach to supporting mutual exclusion involves the use of special-pur-
     pose machine instructions. This approach reduces overhead but is still inefficient
     because it uses busy waiting.
     Another approach to supporting mutual exclusion is to provide features within
     the OS. Two of the most common techniques are semaphores and message facili-
     ties. Semaphores are used for signaling among processes and can be readily used to
     enforce a mutual-exclusion discipline. Messages are useful for the enforcement of
     mutual exclusion and also provide an effective means of interprocess communication.
5.8  RECOMMENDED READING
     The misnamed Little Book of Semaphores (291 pages) [DOWN08] provides numer-
     ous examples of the uses of semaphores; available free online.
     [ANDR83] surveys many of the mechanisms described in this chapter.
     [BEN82] provides a very clear and even entertaining discussion of concurrency,
     mutual exclusion, semaphores, and other related topics. A more formal treatment,
     expanded to include distributed systems, is contained in [BEN06]. [AXFO88]
     is another readable and useful treatment; it also contains a number of problems
     with worked-out solutions. [RAYN86] is a comprehensive and lucid collection of
     algorithms for mutual exclusion, covering software (e.g., Dekker) and hardware
     approaches, as well as semaphores and messages. [HOAR85] is a very readable
     classic that presents a formal approach to defining sequential processes and concur-
     rency. [LAMP86] is a lengthy formal treatment of mutual exclusion. [RUDO90] is
     a useful aid in understanding concurrency. [BACO03] is a well-organized treatment
     of concurrency. [BIRR89] provides a good practical introduction to programming
     using concurrency. [BUHR95] is an exhaustive survey of monitors. [KANG98] is
     an instructive analysis of 12 different scheduling policies for the readers/writers
     problem.
     ANDR83    Andrews, G., and Schneider, F. "Concepts and Notations for Concurrent
     Programming." Computing Surveys, March 1983.
     AXFO88    Axford, T. Concurrent Programming: Fundamental Techniques for Real-
     Time and Parallel Software Design. New York: Wiley, 1988.
     BACO03    Bacon, J., and Harris, T. Operating Systems: Concurrent and Distributed
     Software Design. Reading, MA: Addison-Wesley, 2003.
     BEN82     Ben-Ari, M. Principles of Concurrent Programming. Englewood Cliffs, NJ:
     Prentice Hall, 1982.

                              5.9 / KEY TERMS, REVIEW QUESTIONS, AND PROBLEMS                       245
           BEN06   Ben-Ari, M. Principles of Concurrent and Distributed Programming. Harlow,
                England: Addison-Wesley, 2006.
           BIRR89     Birrell, A. An Introduction to Programming with Threads. SRC Research
                Report 35, Compaq Systems Research Center, Palo Alto, CA, January 1989.
                Available at http://www.research.compaq.com/SRC
           BUHR95      Buhr, P., and Fortier, M. "Monitor Classification." ACM Computing
                Surveys, March 1995.
           DOWN08      Downey, A. The Little Book of Semaphores. www.greenteapress.com
                /semaphores/
           HOAR85      Hoare, C. Communicating Sequential Processes. Englewood Cliffs, NJ:
                Prentice-Hall, 1985.
           KANG98      Kang, S., and Lee, J. "Analysis and Solution of Non-Preemptive Policies for
                Scheduling Readers and Writers." Operating Systems Review, July 1998.
           LAMP86      Lamport, L. "The Mutual Exclusion Problem." Journal of the ACM, April
                1986.
           RAYN86      Raynal, M. Algorithms for Mutual Exclusion. Cambridge, MA: MIT Press,
                1986.
           RUDO90      Rudolph,       B.  "Self-Assessment   Procedure  XXI:      Concurrency."
                Communications of the ACM, May 1990.
5.9     KEY TERMS,          REVIEW QUESTIONS,                AND PROBLEMS
Key Terms
atomic                           critical resource                nonblocking
binary semaphore                 critical section                 race condition
blocking                         deadlock                         semaphore
busy waiting                     general semaphore                spin waiting
concurrency                      message passing                  starvation
concurrent processes             monitor                          strong semaphore
coroutine                        mutual exclusion                 weak semaphore
counting semaphore               mutex
        Review Questions
           5.1  List four design issues for which the concept of concurrency is relevant.
           5.2  What are three contexts in which concurrency arises?
           5.3  What is the basic requirement for the execution of concurrent processes?
           5.4  List three degrees of awareness between processes and briefly define each.
           5.5  What is the distinction between competing processes and cooperating processes?
           5.6  List the three control problems associated with competing processes and briefly     de-
                fine each.
           5.7  List the requirements for mutual exclusion.
           5.8  What operations can be performed on a semaphore?
