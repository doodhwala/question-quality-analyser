Key Terms, Review Questions, and Problems
604   CHAPTER 13 / EMBEDDED OPERATING SYSTEMS
      GAY05   Gay, D., Levis, P., and Culler, D. "Software Design Patterns for TinyOS."
            Proceedings, Conference on Languages, Compilers, and Tools for Embedded
            Systems, 2005.
      HILL00  Hill, J., et al. "System Architecture Directions for Networked Sensors."
            Proceedings, Architectural Support for Programming Languages and Operating
            Systems, 2000.
      KOOP96  Koopman, P. "Embedded System Design Issues (the Rest of the Story)."
            Proceedings, 1996 International Conference on Computer Design, 1996.
      LARM05  Larmour, J. "How eCos Can Be Shrunk to Fit." Embedded Systems Europe,
            May 2005. www.embedded.com/europe/esemay05.htm
      LEVI05  Levis, P., et al. "T2: A Second Generation OS for Embedded Sensor
            Networks." Technical Report TKN-05-007, Telecommunication Networks Group,
            Technische Universitat Berlin, 2005. http://csl.stanford.edu/~pal/pubs.html
      MASS03  Massa, A. Embedded Software Development with eCos. Upper Saddle River,
            NJ: Prentice Hall, 2003.
      STAN96  Stankovic, J., et al. "Strategic Directions in Real-Time and Embedded
            Systems." ACM Computing Surveys, December 1996.
      THOM01  Thomas, G. "eCos: An Operating System for Embedded Systems." Dr.
            Dobb's Journal, January 2001.
      Recommended Web sites:
      ·     Embedded.com: Wide variety of information on embedded systems
      ·     eCos: Downloadable software, information, and links on eCos
      ·     TinyOS Community Forum: Downloadable software, information, and links on TinyOS
13.6 KEY TERMS, REVIEW QUESTIONS, AND PROBLEMS
Key Terms
eCos                        embedded system
embedded operating system   TinyOS
      Review Questions
      13.1  What is an embedded system?
      13.2  What are some typical requirements or constraints on embedded systems?
      13.3  What is an embedded OS?
      13.4  What are some of the key characteristics of an embedded OS?

                     13.6 / KEY TERMS, REVIEW QUESTIONS, AND PROBLEMS                605
13.5   Explain the relative advantages and disadvantages of an embedded OS based on an
       existing commercial OS compared to a purpose-built embedded OS.
13.6   What are the principal objectives that guided the design of the eCos kernel?
13.7   In eCos, what is the difference between an interrupt service routine and a deferred
       service routine?
13.8   What concurrency mechanisms are available in eCos?
13.9   What is the target application for TinyOS?
13.10  What are the design goals for TinyOS?
13.11  What is a TinyOS component?
13.12  What software comprises the TinyOS operating system?
13.13  What is the default scheduling discipline for TinyOS?
Problems
13.1   With reference to the device driver interface to the eCos kernel (Table 13.2), it is
       recommended that device drivers should use the _intsave() variants to claim and
       release spinlocks rather than the non-_intsave() variants. Explain why.
13.2   Also in Table 13.2, it is recommended that cyg_drv_spinlock_spin should be
       used sparingly, and in situations where deadlocks/livelocks cannot occur. Explain
       why.
13.3   In Table 13.2, what should be the limitations on the use of cyg_drv_spinlock_
       destroy? Explain.
13.4   In Table 13.2, what limitations should be placed in the use of cyg_drv_mutex_
       destroy?
13.5   Why does the eCos bitmap scheduler not support time slicing?
13.6   The implementation of mutexes within the eCos kernel does not support recursive
       locks. If a thread has locked a mutex and then attempts to lock the mutex again,
       typically as a result of some recursive call in a complicated call graph, then either an
       assertion failure will be reported or the thread will deadlock. Suggest a reason for
       this policy.
13.7   Figure 13.14 is a listing of code intended for use on the eCos kernel.
       a.  Explain the operation of the code. Assume thread B begins execution first and
           thread A begins to execute after some event occurs.
       b.  What would happen if the mutex unlock and wait code execution in the call to
           cyg_cond_wait, on line 30, were not atomic?
       c.  Why is the while loop on line 26 needed?
13.8   The discussion of eCos spinlocks included an example showing why spinlocks should
       not be used on a uniprocessor system if two threads of different priorities can com-
       pete for the same spinlock. Explain why the problem still exists even if only threads of
       the same priority can claim the same spinlock.
13.9   TinyOS's scheduler serves tasks in FIFO order. Many other schedulers for TinyOS
       have been proposed, but none have caught on. What characteristics of the sensornet
       domain might cause a lack of need for more complex scheduling?
13.10  a.  The TinyOS Resource interface does not allow a component that already has
           a request in the queue for a resource to make a second request. Suggest a
           reason.

606     CHAPTER 13 / EMBEDDED OPERATING SYSTEMS
                     b.     However, the TinyOS Resource interface allows a component holding the resource
                            lock to re-request the lock. This request is enqueued for a later grant. Suggest a
                            reason for this policy. Hint: What might cause there to be latency between one
                            component releasing a lock and the next requester being granted it?
1    unsigned     char      buffer_empty       =   true;
2    cyg_mutex_t     mut_cond_var;
3    cyg_cond-t      cond_var;
4
5    void     thread_a(     cyg_addrword_t          index     )
6    {
7          while  (  1   )  //    run   this   thread     forever
8          {
9             //  acquire         data  into    the  buffer...
10
11            //  there     is    data    in   the   buffer      now
12            buffer_empty        =     false;
13
14            cyg_mutex_lock(           &mut_cond_var            );
15
16            cyg_cond_signal(            &cond_var       );
17
18            cyg_mutex_unlock(           &mut_cond_var              );
19         }
20      }
21
22      void  thread_b(     cyg_addrword_t           index       )
23      {
24         while  (  1   )  //    run   this   thread     forever
25         {
26            cyg_mutex_lock(           &mut_cond_var            );
27
28            while      (  buffer_empty        ==   true     )
29            {
30            cyg_cond_wait(            &cond_var    );
31            }
32
33
34            //  get       the   buffer  data...
35
36            //  set       flag  to    indicate     the   data      in  the  buffer  has  been  processed
37            buffer_empty        =     true;
38
39            cyg_mutex_unlock(           &mut_cond_var              );
40
41            //  process         the   data   in   the   buffer
42         }
43      {
Figure 13.14      Condition Variable Example Code

PART 7 Computer Security
                                    CHAPTER
COMPUTER SECURITY                                THREATS
14.1  Computer Security Concepts
14.2  Threats, Attacks, and Assets
      Threats and Attacks
      Threats and Assets
14.3  Intruders
      Intruder Behavior Patterns
      Intrusion Techniques
14.4  Malicious Software Overview
      Backdoor
      Logic Bomb
      Trojan Horse
      Mobile Code
      Multiple-Threat Malware
14.5  Viruses, Worms, and Bots
      Viruses
      Worms
      Bots
14.6  Rootkits
      Rootkit Installation
      System-Level Call Attacks
14.6  Recommended Reading and Web Sites
14.7  Key Terms, Review Questions, and Problems
                                                          607
