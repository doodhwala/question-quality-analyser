Traditional UNIX Systems
90  CHAPTER 2 / OPERATING SYSTEM OVERVIEW
2.8  TRADITIONAL UNIX SYSTEMS
     History
     The history of UNIX is an oft-told tale and will not be repeated in great detail here.
     Instead, we provide a brief summary.
        UNIX was initially developed at Bell Labs and became operational on a
     PDP-7 in 1970. Some of the people involved at Bell Labs had also participated in
     the time-sharing work being done at MIT's Project MAC. That project led to the
     development of first CTSS and then Multics. Although it is common to say that
     the original UNIX was a scaled-down version of Multics, the developers of UNIX
     actually claimed to be more influenced by CTSS [RITC78]. Nevertheless, UNIX
     incorporated many ideas from Multics.
        Work on UNIX at Bell Labs, and later elsewhere, produced a series of versions
     of UNIX. The first notable milestone was porting the UNIX system from the PDP-7 to
     the PDP-11. This was the first hint that UNIX would be an OS for all computers. The
     next important milestone was the rewriting of UNIX in the programming language
     C. This was an unheard-of strategy at the time. It was generally felt that something as
     complex as an OS, which must deal with time-critical events, had to be written exclu-
     sively in assembly language. Reasons for this attitude include the following:
     ·  Memory (both RAM and secondary store) was small and expensive by today's
        standards, so effective use was important. This included various techniques for
        overlaying memory with different code and data segments, and self-modifying
        code.
     ·  Even though compilers had been available since the 1950s, the computer
        industry was generally skeptical of the quality of automatically generated
        code. With resource capacity small, efficient code, both in terms of time and
        space, was essential.
     ·  Processor and bus speeds were relatively slow, so saving clock cycles could
        make a substantial difference in execution time.
        The C implementation demonstrated the advantages of using a high-level
     language for most if not all of the system code. Today, virtually all UNIX imple-
     mentations are written in C.
        These early versions of UNIX were popular within Bell Labs. In 1974, the
     UNIX system was described in a technical journal for the first time [RITC74]. This
     spurred great interest in the system. Licenses for UNIX were provided to commer-
     cial institutions as well as universities. The first widely available version outside Bell
     Labs was Version 6, in 1976. The follow-on Version 7, released in 1978, is the ances-
     tor of most modern UNIX systems. The most important of the non-AT&T systems
     to be developed was done at the University of California at Berkeley, called UNIX
     BSD (Berkeley Software Distribution), running first on PDP and then VAX com-
     puters. AT&T continued to develop and refine the system. By 1982, Bell Labs had
     combined several AT&T variants of UNIX into a single system, marketed com-
     mercially as UNIX System III. A number of features was later added to the OS to
     produce UNIX System V.

                              2.8 / TRADITIONAL UNIX SYSTEMS                              91
Description
Figure 2.16 provides a general description of the classic UNIX architecture. The
underlying hardware is surrounded by the OS software. The OS is often called the
system kernel, or simply the kernel, to emphasize its isolation from the user and appli-
cations. It is the UNIX kernel that we will be concerned with in our use of UNIX as
an example in this book. UNIX also comes equipped with a number of user services
and interfaces that are considered part of the system. These can be grouped into
the shell, other interface software, and the components of the C compiler (compiler,
assembler, loader). The layer outside of this consists of user applications and the user
interface to the C compiler.
A closer look at the kernel is provided in Figure 2.17. User programs can
invoke OS services either directly or through library programs. The system call
interface is the boundary with the user and allows higher-level software to gain
access to specific kernel functions. At the other end, the OS contains primitive rou-
tines that interact directly with the hardware. Between these two interfaces, the
system is divided into two main parts, one concerned with process control and the
other concerned with file management and I/O. The process control subsystem is
responsible for memory management, the scheduling and dispatching of processes,
and the synchronization and interprocess communication of processes. The file sys-
tem exchanges data between memory and external devices either as a stream of
characters or in blocks. To achieve this, a variety of device drivers are used. For
block-oriented transfers, a disk cache approach is used: A system buffer in main
memory is interposed between the user address space and the external device.
The description in this subsection has dealt with what might be termed
traditional UNIX systems; [VAHA96] uses this term to refer to System V Release
3 (SVR3), 4.3BSD, and earlier versions. The following general statements may be
                              UNIX commands
                              and libraries
                              System call
                              interface
                              Kernel
                              Hardware
                              User-written
                              applications
             Figure 2.16      General UNIX Architecture

92  CHAPTER  2  /  OPERATING SYSTEM OVERVIEW
                                       User programs
                                 Trap
                                                                     Libraries
                   User level
                   Kernel level
                                              System call interface
                                                                                Interprocess
                                                                                communication
                   File subsystem                          Process
                                                           control              Scheduler
                                                           subsystem
                                   Buffer cache                                 Memory
                                                                                management
                   Character           Block
                   Device drivers
                                                 Hardware control
                   Kernel level
                   Hardware level
                                                 Hardware
                   Figure 2.17     Traditional UNIX Kernel
     made about a traditional UNIX system. It is designed to run on a single processor
     and lacks the ability to protect its data structures from concurrent access by multiple
     processors. Its kernel is not very versatile, supporting a single type of file system,
     process scheduling policy, and executable file format. The traditional UNIX kernel
     is not designed to be extensible and has few facilities for code reuse. The result is
     that, as new features were added to the various UNIX versions, much new code had
     to be added, yielding a bloated and unmodular kernel.
2.9  MODERN UNIX SYSTEMS
     As UNIX evolved, the number of different implementations proliferated, each pro-
     viding some useful features. There was a need to produce a new implementation that
     unified many of the important innovations, added other modern OS design features,
     and produced a more modular architecture. Typical of the modern UNIX kernel is
     the architecture depicted in Figure 2.18. There is a small core of facilities, written in
