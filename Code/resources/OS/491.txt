Summary
                                                                         10.8 / SUMMARY        469
                                  token input rate =
                               R/T tokens per second
                                                                         bucket size =
               current bucket                                            S tokens
               occupancy                                    minimum
                                                            threshold =
                                                            M tokens
                                  running process consumes
                                     1 token/timer tick
               Figure 10.16    Linux VServer Token Bucket Scheme
      This equation denotes the fraction of a single processor in a system. Thus, for exam-
      ple, if a system is multicore with four cores and we wish to provide one VM on
      an average of one dedicated processor, then we set R = 1 and T = 4. The overall
      system is limited as follows. If there are N VMs, then:
                                        N    Ri
                                        a    Ti       ...1
                                        i=1
      The parameters S and M are set so as to penalize a VM after a certain amount
      of burst time. The following parameters must be configured or allocated for a VM:
      following a burst time of B, the VM suffers a hold time of H. With these parameters,
      it is possible to calculate the desired values of S and M as follows:
                                  M=W*H*                       R
                                                               T
                               S  =  W  *    B  *     a1    -  Rb
                                                                  T
      where W is the rate at which the schedule runs (makes decisions). For example, consider
      a VM with a limit of 1/2 of processor time, and we wish to say that after using the proces-
      sor for 30 seconds, there will be a hold time of 5 seconds. The scheduler runs at 1,000 Hz.
      This requirement is met with the following values: M  1,000 * 5 * 0.5  2,500
      tokens; S = 1,000 * 30 * (1 - 0.5) = 15,000 tokens.
10.8  SUMMARY
      With a tightly coupled multiprocessor, multiple processors have access to the same
      main memory. In this configuration, the scheduling structure is somewhat more
      complex. For example, a given process may be assigned to the same processor for

470  CHAPTER 10 / MULTIPROCESSOR AND REAL-TIME SCHEDULING
      its entire life or dispatched to any processor each time it enters the Running state.
      Performance studies suggest that the differences among various scheduling algo-
      rithms are less significant in a multiprocessor system.
      A real-time process or task is one that is executed in connection with some
      process or function or set of events external to the computer system and that must
      meet one or more deadlines to interact effectively and correctly with the external
      environment. A real-time operating system is one that is capable of managing real-
      time processes. In this context, the traditional criteria for a scheduling algorithm
      do not apply. Rather, the key factor is the meeting of deadlines. Algorithms that
      rely heavily on preemption and on reacting to relative deadlines are appropriate
      in this context.
10.9  RECOMMENDED READING
      [WEND89] is an interesting discussion of approaches to multiprocessor scheduling.
      A good treatment of real-time scheduling is contained in [LIU00]. The following
      collections of papers all contain important articles on real-time operating systems
      and scheduling: [KRIS94], [STAN93], [LEE93], and [TILB91]. [SHA90] provides
      a good explanation of priority inversion, priority inheritance, and priority ceiling.
      [ZEAD97] analyzes the performance of the SVR4 real-time scheduler. [LIND04]
      provides an overview of the Linux 2.6 scheduler; [LOVE10] contains a more
      detailed discussion.
      KRIS94  Krishna, C., and Lee, Y., eds. "Special Issue on Real-Time Systems."
      Proceedings of the IEEE, January 1994.
      LEE93   Lee, Y., and Krishna, C., eds. Readings in Real-Time Systems. Los Alamitos,
      CA: IEEE Computer Society Press, 1993.
      LIND04  Lindsley, R. "What's New in the 2.6 Scheduler." Linux Journal, March 2004.
      LIU00   Liu, J. Real-Time Systems. Upper Saddle River, NJ: Prentice Hall, 2000.
      LOVE10  Love, R. Linux Kernel Development. Upper Saddle River, NJ: Addison-
      Wesley, 2010.
      SHA90   Sha, L., Rajkumar, R., and Lehoczky, J. "Priority Inheritance Protocols: An
      Approach to Real-Time Synchronization." IEEE Transactions on Computers,
      September 1990.
      STAN93  Stankovic, J., and Ramamritham, K., eds. Advances in Real-Time Systems.
      Los Alamitos, CA: IEEE Computer Society Press, 1993.
      TILB91  Tilborg, A., and Koob, G., eds. Foundations of Real-Time Computing:
      Scheduling and Resource Management. Boston: Kluwer Academic Publishers, 1991.
      WEND89  Wendorf, J., Wendorf, R., and Tokuda, H. "Scheduling Operating System
      Processing on Small-Scale Microprocessors." Proceedings, 22nd Annual Hawaii
      International Conference on System Science, January 1989.
      ZEAD97  Zeadally, S. "An Evaluation of the Real-Time Performance of SVR4.0 and
      SVR4.2." Operating Systems Review, January 1977.
