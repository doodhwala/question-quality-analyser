Recommended Reading
152  CHAPTER 3 / PROCESS DESCRIPTION AND CONTROL
     ·  Transfer control to the child process. The child process begins executing
        at the same point in the code as the parent, namely at the return from the
        fork call.
     ·  Transfer control to another process. Both parent and child are left in the
        Ready to Run state.
        It is perhaps difficult to visualize this method of process creation because both
     parent and child are executing the same passage of code. The difference is this:
     When the return from the fork occurs, the return parameter is tested. If the value is
     zero, then this is the child process, and a branch can be executed to the appropriate
     user program to continue execution. If the value is nonzero, then this is the parent
     process, and the main line of execution can continue.
3.8  SUMMARY
     The most fundamental concept in a modern OS is the process. The principal func-
     tion of the OS is to create, manage, and terminate processes. While processes are
     active, the OS must see that each is allocated time for execution by the proces-
     sor, coordinate their activities, manage conflicting demands, and allocate system
     resources to processes.
        To perform its process management functions, the OS maintains a description
     of each process, or process image, which includes the address space within which the
     process executes, and a process control block. The latter contains all of the informa-
     tion that is required by the OS to manage the process, including its current state,
     resources allocated to it, priority, and other relevant data.
        During its lifetime, a process moves among a number of states. The most
     important of these are Ready, Running, and Blocked. A ready process is one that
     is not currently executing but that is ready to be executed as soon as the OS dis-
     patches it. The running process is that process that is currently being executed by
     the processor. In a multiple-processor system, more than one process can be in this
     state. A blocked process is waiting for the completion of some event, such as an I/O
     operation.
        A running process is interrupted either by an interrupt, which is an event that
     occurs outside the process and that is recognized by the processor, or by executing
     a supervisor call to the OS. In either case, the processor performs a mode switch,
     transferring control to an operating system routine. The OS, after it has completed
     necessary work, may resume the interrupted process or switch to some other
     process.
3.9  RECOMMENDED READING
     Good descriptions of UNIX process management are found in [GOOD94] and
     [GRAY97]. [NEHM75] is an interesting discussion of process states and the operat-
     ing system primitives needed for process dispatching.

                            3.10 / KEY TERMS, REVIEW QUESTIONS, AND PROBLEMS                 153
            GOOD94  Goodheart, B., and Cox, J. The Magic Garden Explained: The Internals of
                 UNIX System V Release 4. Englewood Cliffs, NJ: Prentice Hall, 1994.
            GRAY97  Gray, J. Interprocess Communications in UNIX: The Nooks and Crannies.
                 Upper Saddle River, NJ: Prentice Hall, 1997.
            NEHM75  Nehmer, J. "Dispatcher Primitives for the Construction of Operating
                 System Kernels." Acta Informatica, vol. 5, 1975.
3.10 KEY         TERMS,     REVIEW QUESTIONS,                       AND PROBLEMS
Key Terms
blocked state                  privileged mode                      suspend state
child process                  process                              swapping
exit state                     process control block                system mode
interrupt                      process image                        task
kernel mode                    process switch                       trace
mode switch                    program status word                  trap
new state                      ready state                          user mode
parent process                 round robin
preempt                        running state
Review Questions
            3.1  What is an instruction trace?
            3.2  What common events lead to the creation of a process?
            3.3  For the processing model of Figure 3.6, briefly define each state.
            3.4  What does it mean to preempt a process?
            3.5  What is swapping and what is its purpose?
            3.6  Why does Figure 3.9b have two blocked states?
            3.7  List four characteristics of a suspended process.
            3.8  For what types of entities does the OS maintain tables of information for management
                 purposes?
            3.9  List three general categories of information in a process control block.
         3.10    Why are two modes (user and kernel) needed?
         3.11    What are the steps performed by an OS to create a new process?
         3.12    What is the difference between an interrupt and a trap?
         3.13    Give three examples of an interrupt.
         3.14    What is the difference between a mode switch and a process switch?
Problems
            3.1  The following state transition table is a simplified model of process management, with
                 the labels representing transitions between states of READY, RUN, BLOCKED, and
                 NONRESIDENT.

154  CHAPTER 3 / PROCESS DESCRIPTION AND CONTROL
                                READY         RUN         BLOCKED          NONRESIDENT
          READY                   ­                 1               ­                    5
          RUN                     2                 ­               3                    ­
          BLOCKED                 4                 ­               ­                    6
          Give an example of an event that can cause each of the above transitions. Draw a
          diagram if that helps.
     3.2  Assume that at time 5 no system resources are being used except for the processor
          and memory. Now consider the following events:
              At time 5: P1 executes a command to read from disk unit 3.
              At time 15: P5's time slice expires.
              At time 18: P7 executes a command to write to disk unit 3.
              At time 20: P3 executes a command to read from disk unit 2.
              At time 24: P5 executes a command to write to disk unit 3.
              At time 28: P5 is swapped out.
              At time 33: An interrupt occurs from disk unit 2: P3's read is complete.
              At time 36: An interrupt occurs from disk unit 3: P1's read is complete.
              At time 38: P8 terminates.
              At time 40: An interrupt occurs from disk unit 3: P5's write is complete.
              At time 44: P5 is swapped back in.
              At time 48: An interrupt occurs from disk unit 3: P7's write is complete.
          For each time 22, 37, and 47, identify which state each process is in. If a process is
          blocked, further identify the event on which is it blocked.
     3.3  Figure 3.9b contains seven states. In principle, one could draw a transition between
          any two states, for a total of 42 different transitions.
          a.  List all of the possible transitions and give an example of what could cause each
              transition.
          b.  List all of the impossible transitions and explain why.
     3.4  For the seven-state process model of Figure 3.9b, draw a queueing diagram similar to
          that of Figure 3.8b.
     3.5  Consider the state transition diagram of Figure 3.9b. Suppose that it is time for the
          OS to dispatch a process and that there are processes in both the Ready state and the
          Ready/Suspend state, and that at least one process in the Ready/Suspend state has
          higher scheduling priority than any of the processes in the Ready state. Two extreme
          policies are as follows: (1) Always dispatch from a process in the Ready state, to mini-
          mize swapping, and (2) always give preference to the highest-priority process, even
          though that may mean swapping when swapping is not necessary. Suggest an interme-
          diate policy that tries to balance the concerns of priority and performance.
     3.6  Table 3.13 shows the process states for the VAX/VMS operating system.
          a.  Can you provide a justification for the existence of so many distinct wait states?
          b.  Why do the following states not have resident and swapped-out versions: Page
              Fault Wait, Collided Page Wait, Common Event Wait, Free Page Wait, and Re-
              source Wait?
          c.  Draw the state transition diagram and indicate the action or occurrence that
              causes each transition.
     3.7  The VAX/VMS operating system makes use of four processor access modes to facili-
          tate the protection and sharing of system resources among processes.The access mode
          determines
          ·   Instruction execution privileges: What instructions the processor may execute
          ·   Memory access privileges: Which locations in virtual memory the current instruc-
              tion may access

                             3.10 / KEY TERMS, REVIEW QUESTIONS, AND PROBLEMS                             155
Table 3.13  VAX/VMS Process States
Process State                    Process Condition
Currently Executing              Running process.
Computable (resident)            Ready and resident in main memory.
Computable (outswapped)          Ready, but swapped out of main memory.
Page Fault Wait                  Process has referenced a page not in main memory and must wait for
                                 the page to be read in.
Collided Page Wait               Process has referenced a shared page that is the cause of an existing
                                 page fault wait in another process, or a private page that is in the
                                 process of being read in or written out.
Common Event Wait                Waiting for shared event flag (event flags are single-bit interprocess
                                 signaling mechanisms).
Free Page Wait                   Waiting for a free page in main memory to be added to the collection of
                                 pages in main memory devoted to this process (the working set of the
                                 process).
Hibernate Wait (resident)        Process puts itself in a wait state.
Hibernate Wait (outswapped)      Hibernating process is swapped out of main memory.
Local Event Wait (resident)      Process in main memory and waiting for local event flag (usually I/O
                                 completion).
Local Event Wait (outswapped)    Process in local event wait is swapped out of main memory.
Suspended Wait (resident)        Process is put into a wait state by another process.
Suspended Wait (outswapped)      Suspended process is swapped out of main memory.
Resource Wait                    Process waiting for miscellaneous system resource.
                 The four modes are as follows:
                 ·   Kernel: Executes the kernel of the VMS operating system, which includes memory
                     management, interrupt handling, and I/O operations
                 ·   Executive: Executes many of the OS service calls, including file and record (disk
                     and tape) management routines
                 ·   Supervisor: Executes other OS services, such as responses to user commands
                 ·   User: Executes user programs, plus utilities such as compilers, editors, linkers, and
                     debuggers
                 A process executing in a less-privileged mode often needs to call a procedure that
                 executes in a more-privileged mode; for example, a user program requires an operat-
                 ing system service. This call is achieved by using a change-mode (CHM) instruction,
                 which causes an interrupt that transfers control to a routine at the new access mode. A
                 return is made by executing the REI (return from exception or interrupt) instruction.
                 a.  A number of operating systems have two modes, kernel and user. What are the
                     advantages and disadvantages of providing four modes instead of two?
                 b.  Can you make a case for even more than four modes?
            3.8  The VMS scheme discussed in the preceding problem is often referred to as a ring pro-
                 tection structure, as illustrated in Figure 3.18. Indeed, the simple kernel/user scheme,
                 as described in Section 3.3, is a two-ring structure. [SILB04] points out a problem with
                 this approach:
                     The main disadvantage of the ring (hierarchical) structure is that it does not
                     allow us to enforce the need-to-know principle. In particular, if an object must

156  CHAPTER 3 / PROCESS DESCRIPTION AND CONTROL
                                  CHMx                      REI
                                              Kernel
                                              Executive
                                              Supervisor
                                              User
               Figure 3.18        VAX/VMS Access Modes
               be accessible in domain Dj but not accessible in domain Di, then we must have
               j 6 i. But this means that every segment accessible in Di is also accessible in Dj.
           Explain clearly what the problem is that is referred to in the preceding quote.
     3.9   Figure 3.8b suggests that a process can only be in one event queue at a time.
           a.  Is it possible that you would want to allow a process to wait on more than one
               event at the same time? Provide an example.
           b.  In that case, how would you modify the queueing structure of the figure to support
               this new feature?
     3.10  In a number of early computers, an interrupt caused the register values to be stored in
           fixed locations associated with the given interrupt signal. Under what circumstances
           is this a practical technique? Explain why it is inconvenient in general.
     3.11  In Section 3.4, it was stated that UNIX is unsuitable for real-time applications because
           a process executing in kernel mode may not be preempted. Elaborate.
     3.12  You have executed the following C program:
               main     ()
               {  int             pid;
               pid   =  fork            ();
               printf             ("%d  \n",  pid);
               }
           What are the possible outputs, assuming the fork succeeded?

                                    CHAPTER
THREADS
4.1   Processes and Threads
      Multithreading
      Thread Functionality
4.2   Types of Threads
      User-Level and Kernel-Level Threads
      Other Arrangements
4.3   Multicore and Multithreading
      Performance of Software on Multicore
      Application Example: Valve Game Software
4.4   Windows 7 Thread and SMP Management
      Process and Thread Objects
      Multithreading
      Thread States
      Support for OS Subsystems
      Symmetric Multiprocessing Support
4.5   Solaris Thread and SMP Management
      Multithreaded Architecture
      Motivation
      Process Structure
      Thread Execution
      Interrupts as Threads
4.6   Linux Process and Thread Management
      Linux Tasks
      Linux Threads
4.7   Mac OS X Grand Central Dispatch
4.8   Summary
4.9   Recommended Reading
4.10  Key Terms, Review Questions, and Problems
                                                 157
