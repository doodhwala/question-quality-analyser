Execution of the Operating System
140  CHAPTER 3 / PROCESS DESCRIPTION AND CONTROL
3.5  EXECUTION OF THE OPERATING SYSTEM
     In Chapter 2, we pointed out two intriguing facts about operating systems:
     ·  The OS functions in the same way as ordinary computer software in the sense
        that the OS is a set of programs executed by the processor.
     ·  The OS frequently relinquishes control and depends on the processor to
        restore control to the OS.
        If the OS is just a collection of programs and if it is executed by the processor
     just like any other program, is the OS a process? If so, how is it controlled? These
     interesting questions have inspired a number of design approaches. Figure 3.15
     illustrates a range of approaches that are found in various contemporary operating
     systems.
     Nonprocess Kernel
     One traditional approach, common on many older operating systems, is to execute
     the kernel of the OS outside of any process (Figure 3.15a). With this approach,
     when the currently running process is interrupted or issues a supervisor call, the
     mode context of this process is saved and control is passed to the kernel. The OS has
     its own region of memory to use and its own system stack for controlling procedure
     calls and returns. The OS can perform any desired functions and restore the con-
     text of the interrupted process, which causes execution to resume in the interrupted
               P1           P2              Pn
                                    Kernel
               (a) Separate kernel
               P1           P2              Pn
               OS           OS              OS
               func-        func-           func-
               tions        tions           tions
                        Process-switching functions
               (b) OS functions execute within user processes
               P1           P2              Pn       OS1             OSk
                                    Process-switching functions
               (c) OS functions execute as separate processes
               Figure 3.15  Relationship between Operating System
                            and User Processes

           3.5 / EXECUTION OF THE OPERATING SYSTEM                                    141
user process. Alternatively, the OS can complete the function of saving the environ-
ment of the process and proceed to schedule and dispatch another process. Whether
this happens depends on the reason for the interruption and the circumstances at
the time.
In any case, the key point here is that the concept of process is considered to
apply only to user programs. The operating system code is executed as a separate
entity that operates in privileged mode.
Execution within User Processes
An alternative that is common with operating systems on smaller computers (PCs,
workstations) is to execute virtually all OS software in the context of a user process.
The view is that the OS is primarily a collection of routines that the user calls to
perform various functions, executed within the environment of the user's process.
This is illustrated in Figure 3.15b. At any given point, the OS is managing n process
images. Each image includes not only the regions illustrated in Figure 3.13, but also
program, data, and stack areas for kernel programs.
Figure 3.16 suggests a typical process image structure for this strategy. A sepa-
rate kernel stack is used to manage calls/returns while the process is in kernel mode.
           Process
           identification
           Processor state                Process control
           information                               block
           Process control
           information
           User stack
           Private user
           address space
           (programs, data)
           Kernel stack
           Shared address
           space
           Figure 3.16  Process Image: Operating
                        System Executes within
                        User Space

142  CHAPTER 3 / PROCESS DESCRIPTION AND CONTROL
     Operating system code and data are in the shared address space and are shared by
     all user processes.
     When an interrupt, trap, or supervisor call occurs, the processor is placed in
     kernel mode and control is passed to the OS. To pass control from a user program
     to the OS, the mode context is saved and a mode switch takes place to an operating
     system routine. However, execution continues within the current user process. Thus,
     a process switch is not performed, just a mode switch within the same process.
     If the OS, upon completion of its work, determines that the current process
     should continue to run, then a mode switch resumes the interrupted program within
     the current process. This is one of the key advantages of this approach: A user
     program has been interrupted to employ some operating system routine, and then
     resumed, and all of this has occurred without incurring the penalty of two process
     switches. If, however, it is determined that a process switch is to occur rather than
     returning to the previously executing program, then control is passed to a proc-
     ess-switching routine. This routine may or may not execute in the current process,
     depending on system design. At some point, however, the current process has to be
     placed in a nonrunning state and another process designated as the running process.
     During this phase, it is logically most convenient to view execution as taking place
     outside of all processes.
     In a way, this view of the OS is remarkable. Simply put, at certain points in
     time, a process will save its state information, choose another process to run from
     among those that are ready, and relinquish control to that process. The reason this
     is not an arbitrary and indeed chaotic situation is that during the critical time, the
     code that is executed in the user process is shared operating system code and not
     user code. Because of the concept of user mode and kernel mode, the user cannot
     tamper with or interfere with the operating system routines, even though they are
     executing in the user's process environment. This further reminds us that there is
     a distinction between the concepts of process and program and that the relation-
     ship between the two is not one to one. Within a process, both a user program and
     operating system programs may execute, and the operating system programs that
     execute in the various user processes are identical.
     Process-Based Operating System
     Another alternative, illustrated in Figure 3.15c, is to implement the OS as a collec-
     tion of system processes. As in the other options, the software that is part of the
     kernel executes in a kernel mode. In this case, however, major kernel functions are
     organized as separate processes. Again, there may be a small amount of process-
     switching code that is executed outside of any process.
     This approach has several advantages. It imposes a program design discipline
     that encourages the use of a modular OS with minimal, clean interfaces between the
     modules. In addition, some noncritical operating system functions are conveniently
     implemented as separate processes. For example, we mentioned earlier a monitor
     program that records the level of utilization of various resources (processor, mem-
     ory, channels) and the rate of progress of the user processes in the system. Because
     this program does not provide a particular service to any active process, it can only
     be invoked by the OS. As a process, the function can run at an assigned priority

                                                          3.6 / SECURITY ISSUES                               143
     level and be interleaved with other processes under dispatcher control. Finally,
     implementing the OS as a set of processes is useful in a multiprocessor or multicom-
     puter environment, in which some of the operating system services can be shipped
     out to dedicated processors, improving performance.
3.6  SECURITY ISSUES
     An OS associates a set of privileges with each process. These privileges dictate what
     resources the process may access, including regions of memory, files, privileged sys-
     tem instructions, and so on. Typically, a process that executes on behalf of a user
     has the privileges that the OS recognizes for that user. A system or utility process
     may have privileges assigned at configuration time.
        On a typical system, the highest level of privilege is referred to as administra-
     tor, supervisor, or root access.11 Root access provides access to all the functions and
     services of the operating system. With root access, a process has complete control of
     the system and can add or change programs and files, monitor other processes, send
     and receive network traffic, and alter privileges.
        A key security issue in the design of any OS is to prevent, or at least detect,
     attempts by a user or a piece of malicious software (malware) from gaining unau-
     thorized privileges on the system and, in particular, from gaining root access. In
     this section, we briefly summarize the threats and countermeasures related to this
     security issue. Part Seven provides more detail.
     System Access Threats
     System access threats fall into two general categories: intruders and malicious
     software.
     INTRUDERS  One of the most common threats to security is the intruder (the other
     is viruses), often referred to as a hacker or cracker. In an important early study of
     intrusion, Anderson [ANDE80] identified three classes of intruders:
     ·  Masquerader: An individual who is not authorized to use the computer and
        who penetrates a system's access controls to exploit a legitimate user's account
     ·  Misfeasor: A legitimate user who accesses data, programs, or resources for
        which such access is not authorized, or who is authorized for such access but
        misuses his or her privileges
     ·  Clandestine user: An individual who seizes supervisory control of the system
        and uses this control to evade auditing and access controls or to suppress audit
        collection
     The masquerader is likely to be an outsider; the misfeasor generally is an insider;
     and the clandestine user can be either an outsider or an insider.
        Intruder attacks range from the benign to the serious. At the benign end of the
     scale, there are many people who simply wish to explore internets and see what is
     11On UNIX systems, the administrator, or superuser, account is called root; hence the term root access.
