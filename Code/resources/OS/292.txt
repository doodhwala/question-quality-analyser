Deadlock Avoidance
270    CHAPTER 6 / CONCURRENCY: DEADLOCK AND STARVATION
6.3       DEADLOCK AVOIDANCE
          An approach to solving the deadlock problem that differs subtly from deadlock
          prevention is deadlock avoidance.2 In deadlock prevention, we constrain resource
          requests to prevent at least one of the four conditions of deadlock. This is either
          done indirectly, by preventing one of the three necessary policy conditions (mutual
          exclusion, hold and wait, no preemption), or directly, by preventing circular wait.
          This leads to inefficient use of resources and inefficient execution of processes.
          Deadlock avoidance, on the other hand, allows the three necessary conditions but
          makes judicious choices to assure that the deadlock point is never reached. As such,
          avoidance allows more concurrency than prevention. With deadlock avoidance, a
          decision is made dynamically whether the current resource allocation request will,
          if granted, potentially lead to a deadlock. Deadlock avoidance thus requires knowl-
          edge of future process resource requests.
                In this section, we describe two approaches to deadlock avoidance:
             ·  Do not start a process if its demands might lead to deadlock.
             ·  Do not grant an incremental resource request to a process if                     this     allocation
                might lead to deadlock.
          Process Initiation Denial
          Consider a system of n processes and m different types of resources. Let us define
          the following vectors and matrices:
Resource = R = (R1,R2, c ,Rm)                     Total amount of each resource in the system
Available = V = (V1,V2, c ,Vm)                    Total amount of each resource not allocated to       any  process
                   C 11  C 12  c     C 1m
Claim  =  C  =  ·  C 21  C 22  c     C 2m         Cij = requirement of process i for resource j
                   f        f     f     f
                   C n1  C n2  c     C nm
                         A11   A12   c     A1m
Allocation   =  A  =  ·  A21   A22   c     A2m  
                         f     f     f       f    Aij = current allocation to process i of resource    j
                         An1   An2   c     Anm
                The matrix Claim gives the maximum requirement of each process for
          each resource, with one row dedicated to each process. This information must be
          2The term avoidance is a bit confusing. In fact, one could consider the strategies discussed in this
          section to be examples of deadlock prevention because they indeed prevent the occurrence of a
          deadlock.

                                                                 6.3 / DEADLOCK AVOIDANCE               271
declared in advance by a process for deadlock avoidance to work. Similarly, the
matrix Allocation gives the current allocation to each process. The following rela-
tionships hold:
                     n
1. Rj    =    Vj  +  a Aij,       for all j  All resources are either available or allocated.
                     i=1
2. Cij ... Rj,       for all i,j             No process can claim more than the total
                                             amount of resources in the system.
3.  Aij  ...  C ij,  for all i,j             No process is allocated more resources of any
                                             type than the process originally claimed to need.
       With these quantities defined, we can define a deadlock avoidance policy that
refuses to start a new process if its resource requirements might lead to deadlock.
Start a new process Pn+1 only if
                                                            n
                                  Rj  Ú      C (n + 1)j  +  a Cij  for all j
                                                            i=1
That is, a process is only started if the maximum claim of all current processes plus
those of the new process can be met. This strategy is hardly optimal, because it
assumes the worst: that all processes will make their maximum claims together.
Resource Allocation Denial
The strategy of resource allocation denial, referred to as the banker's algorithm,3
was first proposed in [DIJK65]. Let us begin by defining the concepts of state and
safe state. Consider a system with a fixed number of processes and a fixed number
of resources. At any time a process may have zero or more resources allocated to it.
The state of the system reflects the current allocation of resources to processes. Thus,
the state consists of the two vectors, Resource and Available, and the two matrices,
Claim and Allocation, defined earlier. A safe state is one in which there is at least
one sequence of resource allocations to processes that does not result in a deadlock
(i.e., all of the processes can be run to completion). An unsafe state is, of course, a
state that is not safe.
       The following example illustrates these concepts. Figure 6.7a shows the
state of a system consisting of four processes and three resources. The total
amount of resources R1, R2, and R3 are 9, 3, and 6 units, respectively. In the cur-
rent state allocations have been made to the four processes, leaving 1 unit of R2
3Dijkstra used this name because of the analogy of this problem to one in banking, with customers who
wish to borrow money corresponding to processes and the money to be borrowed corresponding to
resources. Stated as a banking problem, the bank has a limited reserve of money to lend and a list of
customers, each with a line of credit. A customer may choose to borrow against the line of credit a por-
tion at a time, and there is no guarantee that the customer will make any repayment until after having
taken out the maximum amount of loan. The banker can refuse a loan to a customer if there is a risk
that the bank will have insufficient funds to make further loans that will permit the customers to repay
eventually.

272  CHAPTER  6 / CONCURRENCY: DEADLOCK AND STARVATION
                  R1      R2  R3                 R1  R2             R3                  R1  R2   R3
              P1  3       2   2          P1      1   0              0         P1        2   2    2
              P2  6       1   3          P2      6   1              2         P2        0   0    1
              P3  3       1   4          P3      2   1              1         P3        1   0    3
              P4  4       2   2          P4      0   0              2         P4        4   2    0
                  Claim matrix C                 Allocation matrix A                        C­A
                              R1     R2  R3                         R1    R2  R3
                                  9  3   6                             0  1   1
                              Resource vector R                     Available vector V
                                                 (a) Initial state
                  R1      R2  R3                 R1  R2             R3                  R1  R2   R3
              P1  3       2   2          P1      1   0              0         P1        2   2    2
              P2  0       0   0          P2      0   0              0         P2        0   0    0
              P3  3       1   4          P3      2   1              1         P3        1   0    3
              P4  4       2   2          P4      0   0              2         P4        4   2    0
                  Claim matrix C                 Allocation matrix A                        C­A
                              R1     R2  R3                         R1    R2  R3
                                  9  3   6                             6  2   3
                              Resource vector R                     Available vector V
                                         (b) P2 runs to completion
                  R1      R2  R3                 R1  R2             R3                  R1  R2   R3
              P1  0       0   0          P1      0   0              0         P1        0   0    0
              P2  0       0   0          P2      0   0              0         P2        0   0    0
              P3  3       1   4          P3      2   1              1         P3        1   0    3
              P4  4       2   2          P4      0   0              2         P4        4   2    0
                  Claim matrix C                 Allocation matrix A                        C­A
                              R1     R2  R3                         R1    R2  R3
                                  9  3   6                             7  2   3
                              Resource vector R                     Available vector V
                                         (c) P1 runs to completion
                  R1      R2  R3                 R1  R2             R3                  R1  R2   R3
              P1  0       0   0          P1      0   0              0         P1        0   0    0
              P2  0       0   0          P2      0   0              0         P2        0   0    0
              P3  0       0   0          P3      0   0              0         P3        0   0    0
              P4  4       2   2          P4      0   0              2         P4        4   2    0
                  Claim matrix C                 Allocation matrix A                        C­A
                              R1     R2  R3                         R1    R2  R3
                                  9  3   6                             9  3   4
                              Resource vector R                     Available vector V
                                         (d) P3 runs to completion
              Figure 6.7     Determination of a Safe State

                                                   6.3 / DEADLOCK AVOIDANCE             273
and 1 unit of R3 available. Is this a safe state? To answer this question, we ask an
intermediate question: Can any of the four processes be run to completion with
the resources available? That is, can the difference between the maximum require-
ment and current allocation for any process be met with the available resources?
In terms of the matrices and vectors introduced earlier, the condition to be met
for process i is:
                           C ij  -  Aij  ...  Vj,  for all j
Clearly, this is not possible for P1, which has only 1 unit of R1 and requires 2
more units of R1, 2 units of R2, and 2 units of R3. However, by assigning one unit of
R3 to process P2, P2 has its maximum required resources allocated and can run to
completion. Let us assume that this is accomplished. When P2 completes, its resources
can be returned to the pool of available resources. The resulting state is shown in
Figure 6.7b. Now we can ask again if any of the remaining processes can be completed.
In this case, each of the remaining processes could be completed. Suppose we choose
P1, allocate the required resources, complete P1, and return all of P1's resources to the
available pool. We are left in the state shown in Figure 6.7c. Next, we can complete
P3, resulting in the state of Figure 6.7d. Finally, we can complete P4. At this point, all
of the processes have been run to completion. Thus, the state defined by Figure 6.7a
is a safe state.
These concepts suggest the following deadlock avoidance strategy, which
ensures that the system of processes and resources is always in a safe state. When a
process makes a request for a set of resources, assume that the request is granted,
update the system state accordingly, and then determine if the result is a safe state.
If so, grant the request and, if not, block the process until it is safe to grant the
request.
Consider the state defined in Figure 6.8a. Suppose P2 makes a request for
one additional unit of R1 and one additional unit of R3. If we assume the request
is granted, then the resulting state is that of Figure 6.7a. We have already seen that
this is a safe state; therefore, it is safe to grant the request. Now let us return to
the state of Figure 6.8a and suppose that P1 makes the request for one additional
unit each of R1 and R3; if we assume that the request is granted, we are left in the
state of Figure 6.8b. Is this a safe state? The answer is no, because each process
will need at least one additional unit of R1, and there are none available. Thus, on
the basis of deadlock avoidance, the request by P1 should be denied and P1 should
be blocked.
It is important to point out that Figure 6.8b is not a deadlocked state. It merely
has the potential for deadlock. It is possible, for example, that if P1 were run from
this state it would subsequently release one unit of R1 and one unit of R3 prior
to needing these resources again. If that happened, the system would return to a
safe state. Thus, the deadlock avoidance strategy does not predict deadlock with
certainty; it merely anticipates the possibility of deadlock and assures that there is
never such a possibility.

274  CHAPTER 6 / CONCURRENCY: DEADLOCK AND STARVATION
            R1      R2  R3                 R1  R2             R3                   R1  R2   R3
        P1  3       2   2              P1  1   0              0                P1  2   2    2
        P2  6       1   3              P2  5   1              1                P2  1   0    2
        P3  3       1   4              P3  2   1              1                P3  1   0    3
        P4  4       2   2              P4  0   0              2                P4  4   2    0
            Claim matrix C                 Allocation matrix A                         C­A
                        R1         R2  R3                     R1    R2         R3
                                9  3   6                         1  1          2
                        Resource vector R                     Available vector V
                                           (a) Initial state
            R1      R2  R3                 R1  R2             R3                   R1  R2   R3
        P1  3       2   2              P1  2   0              1                P1  1   2    1
        P2  6       1   3              P2  5   1              1                P2  1   0    2
        P3  3       1   4              P3  2   1              1                P3  1   0    3
        P4  4       2   2              P4  0   0              2                P4  4   2    0
            Claim matrix C                 Allocation matrix A                         C­A
                        R1         R2  R3                     R1    R2         R3
                                9  3   6                         0  1          1
                        Resource vector R                     Available vector V
                                   (b) P1 requests one unit each of R1 and R3
        Figure 6.8     Determination of an Unsafe State
        Figure 6.9 gives an abstract version of the deadlock avoidance logic. The
     main algorithm is shown in part (b). With the state of the system defined by the
     data structure state, request[*] is a vector defining the resources requested
     by process i. First, a check is made to assure that the request does not exceed the
     original claim of the process. If the request is valid, the next step is to determine if
     it is possible to fulfill the request (i.e., there are sufficient resources available). If
     it is not possible, then the process is suspended. If it is possible, the final step is to
     determine if it is safe to fulfill the request. To do this, the resources are tentatively
     assigned to process i to form newstate. Then a test for safety is made using the
     algorithm in Figure 6.9c.
        Deadlock avoidance has the advantage that it is not necessary to preempt and
     rollback processes, as in deadlock detection, and is less restrictive than deadlock
     prevention. However, it does have a number of restrictions on its use:
     ·  The maximum resource requirement for each process must be stated in
        advance.
     ·  The processes under consideration must be independent; that is, the order
        in which they execute must be unconstrained by any synchronization
        requirements.
     ·  There must be a fixed number of resources to allocate.
     ·  No process may exit while holding resources.

                                                                    6.3 / DEADLOCK AVOIDANCE        275
struct         state  {
            int      resource[m];
            int      available[m];
            int      claim[n][m];
            int      alloc[n][m];
}
                                         (a) Global data structures
if  (alloc           [i,*]  +     request      [*]    >  claim     [i,*])
            <error>;                                               /*  total  request    >  claim*/
else   if      (request        [*]    >  available          [*])
            <suspend     process>;
else        {                                                          /*     simulate      alloc   */
            <define   newstate           by:
            alloc    [i,*]     =   alloc       [i,*]     +  request    [*];
            available       [*]    =  available          [*]    -  request    [*]>;
}
if  (safe         (newstate))
            <carry    out   allocation>;
else   {
            <restore     original        state>;
            <suspend     process>;
}
                                      (b) Resource alloc algorithm
boolean        safe   (state         S)  {
    int        currentavail[m];
    process           rest[<number             of  processes>];
    currentavail               =   available;
    rest          =  {all   processes};
    possible          =    true;
    while            (possible)       {
               <find  a     process      Pk    in     rest    such     that
                     claim     [k,*]     ­     alloc  [k,*]<=       currentavail;
               if    (found)      {                         /*  simulate      execution     of  Pk  */
                     currentavail           =  currentavail         +  alloc  [k,*];
                     rest   =  rest      -     {Pk};
               }
               else   possible        =  false;
    }
    return           (rest     ==    null);
}
                            (c) Test for safety algorithm (banker's algorithm)
Figure 6.9  Deadlock Avoidance Logic

276  CHAPTER 6 / CONCURRENCY: DEADLOCK AND STARVATION
6.4  DEADLOCK DETECTION
     Deadlock prevention strategies are very conservative; they solve the problem
     of deadlock by limiting access to resources and by imposing restrictions on pro-
     cesses. At the opposite extreme, deadlock detection strategies do not limit resource
     access or restrict process actions. With deadlock detection, requested resources are
     granted to processes whenever possible. Periodically, the OS performs an algorithm
     that allows it to detect the circular wait condition described earlier in condition (4)
     and illustrated in Figure 6.6.
     Deadlock Detection Algorithm
     A check for deadlock can be made as frequently as each resource request or,
     less frequently, depending on how likely it is for a deadlock to occur. Checking
     at each resource request has two advantages: It leads to early detection, and the
     algorithm is relatively simple because it is based on incremental changes to the
     state of the system. On the other hand, such frequent checks consume consider-
     able processor time.
         A common algorithm for deadlock detection is one described in [COFF71].
     The Allocation matrix and Available vector described in the previous section are
     used. In addition, a request matrix Q is defined such that Qij represents the amount
     of resources of type j requested by process i. The algorithm proceeds by marking
     processes that are not deadlocked. Initially, all processes are unmarked. Then the
     following steps are performed:
     1.  Mark each process that has a row in the Allocation matrix of all zeros.
     2.  Initialize a temporary vector W to equal the Available vector.
     3.  Find an index i such that process i is currently unmarked and the ith row of Q
         is less than or equal to W. That is, Qik ... Wk, for 1 ... k ... m. If no such row is
         found, terminate the algorithm.
     4.  If such a row is found, mark process i and add the corresponding row of the
         allocation matrix to W. That is, set Wk = Wk + Aik, for 1 ... k ... m. Return
         to step 3.
         A deadlock exists if and only if there are unmarked processes at the end of
     the algorithm. Each unmarked process is deadlocked. The strategy in this algo-
     rithm is to find a process whose resource requests can be satisfied with the available
     resources, and then assume that those resources are granted and that the process
     runs to completion and releases all of its resources. The algorithm then looks for
     another process to satisfy. Note that this algorithm does not guarantee to prevent
     deadlock; that will depend on the order in which future requests are granted. All
     that it does is determine if deadlock currently exists.
         We can use Figure 6.10 to illustrate the deadlock detection algorithm. The
     algorithm proceeds as follows:
     1.  Mark P4, because P4 has no allocated resources.
     2.  Set W = (0 0 0 0 1).
