The Evolution of Operating Systems
52  CHAPTER 2 / OPERATING SYSTEM OVERVIEW
        the use of graphics terminals and page-mode terminals instead of line-at-a-
        time scroll mode terminals affects OS design. For example, a graphics terminal
        typically allows the user to view several applications at the same time through
        "windows" on the screen. This requires more sophisticated support in the OS.
     ·  New services: In response to user demand or in response to the needs of sys-
        tem managers, the OS expands to offer new services. For example, if it is found
        to be difficult to maintain good performance for users with existing tools, new
        measurement and control tools may be added to the OS.
     ·  Fixes: Any OS has faults. These are discovered over the course of time and
        fixes are made. Of course, the fix may introduce new faults.
        The need to change an OS regularly places certain requirements on its design.
     An obvious statement is that the system should be modular in construction, with
     clearly defined interfaces between the modules, and that it should be well docu-
     mented. For large programs, such as the typical contemporary OS, what might be
     referred to as straightforward modularization is inadequate [DENN80a]. That is,
     much more must be done than simply partitioning a program into modules. We
     return to this topic later in this chapter.
2.2  THE EVOLUTION OF OPERATING SYSTEMS
     In attempting to understand the key requirements for an OS and the significance
     of the major features of a contemporary OS, it is useful to consider how operating
     systems have evolved over the years.
     Serial Processing
     With the earliest computers, from the late 1940s to the mid-1950s, the programmer
     interacted directly with the computer hardware; there was no OS. These computers
     were run from a console consisting of display lights, toggle switches, some form of
     input device, and a printer. Programs in machine code were loaded via the input
     device (e.g., a card reader). If an error halted the program, the error condition was
     indicated by the lights. If the program proceeded to a normal completion, the out-
     put appeared on the printer.
        These early systems presented two main problems:
     ·  Scheduling: Most installations used a hardcopy sign-up sheet to reserve com-
        puter time. Typically, a user could sign up for a block of time in multiples of a
        half hour or so. A user might sign up for an hour and finish in 45 minutes; this
        would result in wasted computer processing time. On the other hand, the user
        might run into problems, not finish in the allotted time, and be forced to stop
        before resolving the problem.
     ·  Setup time: A single program, called a job, could involve loading the com-
        piler plus the high-level language program (source program) into memory,
        saving the compiled program (object program) and then loading and linking
        together the object program and common functions. Each of these steps could

                           2.2 / THE EVOLUTION OF OPERATING SYSTEMS                      53
   involve mounting or dismounting tapes or setting up card decks. If an error
   occurred, the hapless user typically had to go back to the beginning of the
   setup sequence. Thus, a considerable amount of time was spent just in setting
   up the program to run.
   This mode of operation could be termed serial processing, reflecting the fact
that users have access to the computer in series. Over time, various system software
tools were developed to attempt to make serial processing more efficient. These
include libraries of common functions, linkers, loaders, debuggers, and I/O driver
routines that were available as common software for all users.
Simple Batch Systems
Early computers were very expensive, and therefore it was important to maxi-
mize processor utilization. The wasted time due to scheduling and setup time was
unacceptable.
   To improve utilization, the concept of a batch OS was developed. It appears
that the first batch OS (and the first OS of any kind) was developed in the mid-1950s
by General Motors for use on an IBM 701 [WEIZ81]. The concept was subsequently
refined and implemented on the IBM 704 by a number of IBM customers. By the
early 1960s, a number of vendors had developed batch operating systems for their
computer systems. IBSYS, the IBM OS for the 7090/7094 computers, is particularly
notable because of its widespread influence on other systems.
   The central idea behind the simple batch-processing scheme is the use of a
piece of software known as the monitor. With this type of OS, the user no longer has
direct access to the processor. Instead, the user submits the job on cards or tape to a
computer operator, who batches the jobs together sequentially and places the entire
batch on an input device, for use by the monitor. Each program is constructed to
branch back to the monitor when it completes processing, at which point the moni-
tor automatically begins loading the next program.
   To understand how this scheme works, let us look at it from two points of
view: that of the monitor and that of the processor.
·  Monitor point of view: The monitor controls the sequence of events. For this
   to be so, much of the monitor must always be in main memory and available
   for execution (Figure 2.3). That portion is referred to as the resident monitor.
   The rest of the monitor consists of utilities and common functions that are
   loaded as subroutines to the user program at the beginning of any job that
   requires them. The monitor reads in jobs one at a time from the input device
   (typically a card reader or magnetic tape drive). As it is read in, the current job
   is placed in the user program area, and control is passed to this job. When the
   job is completed, it returns control to the monitor, which immediately reads
   in the next job. The results of each job are sent to an output device, such as a
   printer, for delivery to the user.
·  Processor point of view: At a certain point, the processor is executing instruc-
   tions from the portion of main memory containing the monitor. These
   instructions cause the next job to be read into another portion of main

54  CHAPTER  2  /  OPERATING  SYSTEM      OVERVIEW
                                                    Interrupt
                                                    processing
                                                    Device
                                                    drivers
                                          Monitor   Job
                                                    sequencing
                                                   Control language
                                                    interpreter
                              Boundary
                                                    User
                                                    program
                                                    area
                              Figure 2.3  Memory Layout for a
                                          Resident Monitor
    memory. Once a job has been read in, the processor will encounter a branch
    instruction in the monitor that instructs the processor to continue execution
    at the start of the user program. The processor will then execute the instruc-
    tions in the user program until it encounters an ending or error condition.
    Either event causes the processor to fetch its next instruction from the moni-
    tor program. Thus the phrase "control is passed to a job" simply means that
    the processor is now fetching and executing instructions in a user program,
    and "control is returned to the monitor" means that the processor is now
    fetching and executing instructions from the monitor program.
    The monitor performs a scheduling function: A batch of jobs is queued up,
    and jobs are executed as rapidly as possible, with no intervening idle time. The mon-
    itor improves job setup time as well. With each job, instructions are included in a
    primitive form of job control language (JCL). This is a special type of programming
    language used to provide instructions to the monitor. A simple example is that of a
    user submitting a program written in the programming language FORTRAN plus
    some data to be used by the program. All FORTRAN instructions and data are on a
    separate punched card or a separate record on tape. In addition to FORTRAN and
    data lines, the job includes job control instructions, which are denoted by the begin-
    ning $. The overall format of the job looks like this:
    $JOB
    $FTN
    ·
    ·              ¶  FORTRAN instructions
    ·

                      2.2 / THE EVOLUTION OF OPERATING SYSTEMS                         55
   $LOAD
   $RUN
   ·
   ·         ¶  Data
   ·
   $END
   To execute this job, the monitor reads the $FTN line and loads the appropri-
ate language compiler from its mass storage (usually tape). The compiler translates
the user's program into object code, which is stored in memory or mass storage.
If it is stored in memory, the operation is referred to as "compile, load, and go."
If it is stored on tape, then the $LOAD instruction is required. This instruction is
read by the monitor, which regains control after the compile operation. The moni-
tor invokes the loader, which loads the object program into memory (in place of
the compiler) and transfers control to it. In this manner, a large segment of main
memory can be shared among different subsystems, although only one such subsys-
tem could be executing at a time.
   During the execution of the user program, any input instruction causes one
line of data to be read. The input instruction in the user program causes an input
routine that is part of the OS to be invoked. The input routine checks to make
sure that the program does not accidentally read in a JCL line. If this happens, an
error occurs and control transfers to the monitor. At the completion of the user
job, the monitor will scan the input lines until it encounters the next JCL instruc-
tion. Thus, the system is protected against a program with too many or too few
data lines.
   The monitor, or batch OS, is simply a computer program. It relies on the abil-
ity of the processor to fetch instructions from various portions of main memory to
alternately seize and relinquish control. Certain other hardware features are also
desirable:
·  Memory protection: While the user program is executing, it must not alter the
   memory area containing the monitor. If such an attempt is made, the proces-
   sor hardware should detect an error and transfer control to the monitor. The
   monitor would then abort the job, print out an error message, and load in the
   next job.
·  Timer: A timer is used to prevent a single job from monopolizing the system.
   The timer is set at the beginning of each job. If the timer expires, the user pro-
   gram is stopped, and control returns to the monitor.
·  Privileged instructions: Certain machine level instructions are designated priv-
   ileged and can be executed only by the monitor. If the processor encounters
   such an instruction while executing a user program, an error occurs causing
   control to be transferred to the monitor. Among the privileged instructions
   are I/O instructions, so that the monitor retains control of all I/O devices. This
   prevents, for example, a user program from accidentally reading job control
   instructions from the next job. If a user program wishes to perform I/O, it must
   request that the monitor perform the operation for it.

56  CHAPTER 2 / OPERATING SYSTEM OVERVIEW
    ·  Interrupts: Early computer models did not have this capability. This feature
       gives the OS more flexibility in relinquishing control to and regaining control
       from user programs.
       Considerations of memory protection and privileged instructions lead to the
    concept of modes of operation. A user program executes in a user mode, in which
    certain areas of memory are protected from the user's use and in which certain
    instructions may not be executed. The monitor executes in a system mode, or what
    has come to be called kernel mode, in which privileged instructions may be executed
    and in which protected areas of memory may be accessed.
       Of course, an OS can be built without these features. But computer vendors
    quickly learned that the results were chaos, and so even relatively primitive batch
    operating systems were provided with these hardware features.
       With a batch OS, processor time alternates between execution of user pro-
    grams and execution of the monitor. There have been two sacrifices: Some main
    memory is now given over to the monitor and some processor time is consumed by
    the monitor. Both of these are forms of overhead. Despite this overhead, the simple
    batch system improves utilization of the computer.
    Multiprogrammed Batch Systems
    Even with the automatic job sequencing provided by a simple batch OS, the proces-
    sor is often idle. The problem is that I/O devices are slow compared to the processor.
    Figure 2.4 details a representative calculation. The calculation concerns a program
    that processes a file of records and performs, on average, 100 machine instructions
    per record. In this example, the computer spends over 96% of its time waiting for
    I/O devices to finish transferring data to and from the file. Figure 2.5a illustrates this
    situation, where we have a single program, referred to as uniprogramming. The pro-
    cessor spends a certain amount of time executing, until it reaches an I/O instruction.
    It must then wait until that I/O instruction concludes before proceeding.
       This inefficiency is not necessary. We know that there must be enough
    memory to hold the OS (resident monitor) and one user program. Suppose that
    there is room for the OS and two user programs. When one job needs to wait for
    I/O, the processor can switch to the other job, which is likely not waiting for I/O
    (Figure 2.5b). Furthermore, we might expand memory to hold three, four, or more
    programs and switch among all of them (Figure 2.5c). The approach is known as
    multiprogramming, or multitasking. It is the central theme of modern operating
    systems.
              Read one record from file                    15 ms
              Execute 100 instructions                     1 ms
              Write one record to file                     15 ms
              Total                                        31 ms
              Percent CPU Utilization =    1            =  0.032  =  3.2%
                                           31
              Figure 2.4    System Utilization Example

                                2.2 / THE EVOLUTION OF OPERATING SYSTEMS                          57
           Program A   Run                  Wait              Run             Wait
                             Time
                                            (a) Uniprogramming
           Program A   Run                  Wait              Run             Wait
           Program B   Wait  Run            Wait                   Run        Wait
           Combined    Run   Run            Wait              Run  Run        Wait
                       A        B                             A       B
                             Time
                             (b) Multiprogramming with two programs
           Program A   Run                  Wait              Run             Wait
           Program B   Wait  Run            Wait                   Run        Wait
           Program C      Wait         Run              Wait             Run        Wait
           Combined    Run   Run       Run        Wait        Run  Run   Run        Wait
                       A        B      C                      A       B  C
                             Time
                             (c) Multiprogramming with three programs
           Figure 2.5  Multiprogramming Example
To illustrate the benefit of multiprogramming, we give a simple example.
Consider a computer with 250 Mbytes of available memory (not used by the OS),
a disk, a terminal, and a printer. Three programs, JOB1, JOB2, and JOB3, are
submitted for execution at the same time, with the attributes listed in Table 2.1.
We assume minimal processor requirements for JOB2 and JOB3 and continuous
disk and printer use by JOB3. For a simple batch environment, these jobs will be
executed in sequence. Thus, JOB1 completes in 5 minutes. JOB2 must wait until
Table 2.1    Sample Program Execution Attributes
                                JOB1                          JOB2                        JOB3
Type of job            Heavy compute                    Heavy I/O                   Heavy I/O
Duration                        5 min                         15 min                      10 min
Memory required                 50 M                          100 M                       75 M
Need disk?                         No                         No                          Yes
Need terminal?                     No                         Yes                         No
Need printer?                      No                         No                          Yes

58  CHAPTER 2 / OPERATING SYSTEM OVERVIEW
    Table 2.2    Effects of  Multiprogramming on Resource Utilization
                                    Uniprogramming                     Multiprogramming
    Processor use                   20%                                40%
    Memory use                      33%                                67%
    Disk use                        33%                                67%
    Printer use                     33%                                67%
    Elapsed time                    30 min                             15 min
    Throughput                      6 jobs/hr                          12 jobs/hr
    Mean response time              18 min                             10 min
    the 5 minutes are over and then completes 15 minutes after that. JOB3 begins after
    20 minutes and completes at 30 minutes from the time it was initially submitted.
    The average resource utilization, throughput, and response times are shown in the
    uniprogramming column of Table 2.2. Device-by-device utilization is illustrated in
    Figure 2.6a. It is evident that there is gross underutilization for all resources when
    averaged over the required 30-minute time period.
    Now suppose that the jobs are run concurrently under a multiprogramming
    OS. Because there is little resource contention between the jobs, all three can run
    in nearly minimum time while coexisting with the others in the computer (assum-
    ing that JOB2 and JOB3 are allotted enough processor time to keep their input
    and output operations active). JOB1 will still require 5 minutes to complete, but at
    the end of that time, JOB2 will be one-third finished and JOB3 half finished. All
    three jobs will have finished within 15 minutes. The improvement is evident when
    examining the multiprogramming column of Table 2.2, obtained from the histogram
    shown in Figure 2.6b.
    As with a simple batch system, a multiprogramming batch system must rely
    on certain computer hardware features. The most notable additional feature that
    is useful for multiprogramming is the hardware that supports I/O interrupts and
    DMA (direct memory access). With interrupt-driven I/O or DMA, the processor
    can issue an I/O command for one job and proceed with the execution of another
    job while the I/O is carried out by the device controller. When the I/O operation is
    complete, the processor is interrupted and control is passed to an interrupt-handling
    program in the OS. The OS will then pass control to another job.
    Multiprogramming operating systems are fairly sophisticated compared to
    single-program, or uniprogramming, systems. To have several jobs ready to run,
    they must be kept in main memory, requiring some form of memory management.
    In addition, if several jobs are ready to run, the processor must decide which one
    to run, this decision requires an algorithm for scheduling. These concepts are dis-
    cussed later in this chapter.
    Time-Sharing Systems
    With the use of multiprogramming, batch processing can be quite efficient.
    However, for many jobs, it is desirable to provide a mode in which the user interacts
    directly with the computer. Indeed, for some jobs, such as transaction processing, an
    interactive mode is essential.

                                                              100%                                              100%
    CPU                                                             CPU
                                                              0%                                                0%
                                                              100%                                              100%
    Memory                                                          Memory
                                                              0%                                                0%
                                                              100%                                              100%
    Disk                                                            Disk
                                                              0%                                                0%
                                                              100%                                              100%
    Terminal                                                        Terminal
                                                              0%                                                0%
                                                              100%                                              100%
    Printer                                                         Printer
                                                              0%                                                0%
    Job history     JOB1         JOB2               JOB3            Job history     JOB1
                                                                                             JOB2
                 0        5  10             15  20  25    30                        JOB3
                                 minutes
                                                    time                         0        5           10  15
                                                                                             minutes      time
                             (a) Uniprogramming                                     (b) Multiprogramming
59  Figure 2.6      Utilization Histograms

60  CHAPTER 2 / OPERATING SYSTEM OVERVIEW
    Today, the requirement for an interactive computing facility can be, and often
    is, met by the use of a dedicated personal computer or workstation. That option was
    not available in the 1960s, when most computers were big and costly. Instead, time
    sharing was developed.
    Just as multiprogramming allows the processor to handle multiple batch jobs
    at a time, multiprogramming can also be used to handle multiple interactive jobs. In
    this latter case, the technique is referred to as time sharing, because processor time is
    shared among multiple users. In a time-sharing system, multiple users simultaneously
    access the system through terminals, with the OS interleaving the execution of each
    user program in a short burst or quantum of computation. Thus, if there are n users
    actively requesting service at one time, each user will only see on the average 1/n
    of the effective computer capacity, not counting OS overhead. However, given the
    relatively slow human reaction time, the response time on a properly designed system
    should be similar to that on a dedicated computer.
    Both batch processing and time sharing use multiprogramming. The key
    differences are listed in Table 2.3.
    One of the first time-sharing operating systems to be developed was the
    Compatible Time-Sharing System (CTSS) [CORB62], developed at MIT by a
    group known as Project MAC (Machine-Aided Cognition, or Multiple-Access
    Computers). The system was first developed for the IBM 709 in 1961 and later
    transferred to an IBM 7094.
    Compared to later systems, CTSS is primitive. The system ran on a computer
    with 32,000 36-bit words of main memory, with the resident monitor consuming 5000
    of that. When control was to be assigned to an interactive user, the user's program
    and data were loaded into the remaining 27,000 words of main memory. A pro-
    gram was always loaded to start at the location of the 5000th word; this simplified
    both the monitor and memory management. A system clock generated interrupts
    at a rate of approximately one every 0.2 seconds. At each clock interrupt, the OS
    regained control and could assign the processor to another user. This technique is
    known as time slicing. Thus, at regular time intervals, the current user would be
    preempted and another user loaded in. To preserve the old user program status for
    later resumption, the old user programs and data were written out to disk before the
    new user programs and data were read in. Subsequently, the old user program code
    and data were restored in main memory when that program was next given a turn.
    To minimize disk traffic, user memory was only written out when the incoming
    program would overwrite it. This principle is illustrated in Figure 2.7. Assume that
    there are four interactive users with the following memory requirements, in words:
    · JOB1: 15,000
    · JOB2: 20,000
    Table 2.3  Batch Multiprogramming versus Time Sharing
                                 Batch Multiprogramming         Time Sharing
    Principal objective          Maximize processor use         Minimize response time
    Source of directives to      Job control language commands  Commands entered at the
    operating system             provided with the job          terminal

                      2.2        / THE  EVOLUTION  OF  OPERATING  SYSTEMS              61
0            Monitor             0      Monitor        0          Monitor
5000                             5000                  5000       JOB 3
             JOB 1                                     10000
                                        JOB 2                     (JOB 2)
20000
             Free                25000                 25000
                                        Free                      Free
32000                            32000                 32000
             (a)                        (b)                       (c)
0            Monitor             0      Monitor        0          Monitor
5000                             5000                  5000
             JOB 1                      JOB 4
                                 15000  (JOB 1)                   JOB 2
20000        (JOB 2)             20000  (JOB 2)
25000                            25000                 25000
             Free                       Free                      Free
32000                            32000                 32000
             (d)                        (e)                       (f)
Figure  2.7  CTSS     Operation
· JOB3: 5000
· JOB4: 10,000
Initially, the monitor loads JOB1 and transfers control to it (a). Later, the
monitor decides to transfer control to JOB2. Because JOB2 requires more mem-
ory than JOB1, JOB1 must be written out first, and then JOB2 can be loaded (b).
Next, JOB3 is loaded in to be run. However, because JOB3 is smaller than JOB2,
a portion of JOB2 can remain in memory, reducing disk write time (c). Later, the
monitor decides to transfer control back to JOB1. An additional portion of JOB2
must be written out when JOB1 is loaded back into memory (d). When JOB4 is
loaded, part of JOB1 and the portion of JOB2 remaining in memory are retained
(e). At this point, if either JOB1 or JOB2 is activated, only a partial load will be
required. In this example, it is JOB2 that runs next. This requires that JOB4 and the
remaining resident portion of JOB1 be written out and that the missing portion of
JOB2 be read in (f).
The CTSS approach is primitive compared to present-day time sharing, but
it was effective. It was extremely simple, which minimized the size of the monitor.
Because a job was always loaded into the same locations in memory, there was no
need for relocation techniques at load time (discussed subsequently). The technique
of only writing out what was necessary minimized disk activity. Running on the
7094, CTSS supported a maximum of 32 users.
Time sharing and multiprogramming raise a host of new problems for the OS.
If multiple jobs are in memory, then they must be protected from interfering with
each other by, for example, modifying each other's data. With multiple interactive
users, the file system must be protected so that only authorized users have access

62  CHAPTER 2 / OPERATING SYSTEM OVERVIEW
     to a particular file. The contention for resources, such as printers and mass storage
     devices, must be handled. These and other problems, with possible solutions, will be
     encountered throughout this text.
2.3  MAJOR ACHIEVEMENTS
     Operating systems are among the most complex pieces of software ever devel-
     oped. This reflects the challenge of trying to meet the difficult and in some cases
     competing objectives of convenience, efficiency, and ability to evolve. [DENN80a]
     proposes that there have been four major theoretical advances in the development
     of operating systems:
     ·  Processes
     ·  Memory management
     ·  Information protection and security
     ·  Scheduling and resource management
        Each advance is characterized by principles, or abstractions, developed to
     meet difficult practical problems. Taken together, these five areas span many of
     the key design and implementation issues of modern operating systems. The brief
     review of these five areas in this section serves as an overview of much of the rest
     of the text.
     The Process
     Central to the design of operating systems is the concept of process. This term was
     first used by the designers of Multics in the 1960s [DALE68]. It is a somewhat
     more general term than job. Many definitions have been given for the term process,
     including
     ·  A program in execution
     ·  An instance of a program running on a computer
     ·  The entity that can be assigned to and executed on a processor
     ·  A unit of activity characterized by a single sequential thread of execution, a
        current state, and an associated set of system resources
     This concept should become clearer as we proceed.
        Three major lines of computer system development created problems in timing
     and synchronization that contributed to the development of the concept of the
     process: multiprogramming batch operation, time sharing, and real-time transaction
     systems. As we have seen, multiprogramming was designed to keep the processor
     and I/O devices, including storage devices, simultaneously busy to achieve maxi-
     mum efficiency. The key mechanism is this: In response to signals indicating the
     completion of I/O transactions, the processor is switched among the various pro-
     grams residing in main memory.
