Key Terms, Review Questions, and Problems
                           7.8 / KEY TERMS, REVIEW QUESTIONS, AND PROBLEMS                     331
       BECK97          Beck, L. System Software. Reading, MA: Addison-Wesley, 1997.
       CLAR98          Clarke, D., and Merusi, D. System Software Programming: The Way Things
                 Work. Upper Saddle River, NJ: Prentice Hall, 1998.
       KNUT97          Knuth, D. The Art of Computer Programming, Volume 1: Fundamental
                 Algorithms. Reading, MA: Addison-Wesley, 1997.
       LEVI00       Levine, J. Linkers and Loaders. San Francisco: Morgan Kaufmann, 2000.
       MILE92          Milenkovic, M. Operating Systems: Concepts and Design. New York:
                 McGraw-Hill, 1992.
7.8    KEY TERMS,          REVIEW QUESTIONS,                   AND PROBLEMS
Key Terms
absolute loading           linkage editor                            physical address
buddy system               linking                                   physical organization
compaction                 loading                                   protection
dynamic linking            logical address                           relative address
dynamic partitioning       logical organization                      relocatable loading
dynamic run-time loading   memory management                         relocation
external fragmentation     page                                      segment
fixed partitioning         page table                                segmentation
frame                      paging                                    sharing
internal fragmentation     partitioning
       Review Questions
       7.1    What requirements is memory management intended to satisfy?
       7.2    Why is the capability to relocate processes desirable?
       7.3    Why is it not possible to enforce memory protection at compile time?
       7.4    What are some reasons to allow two or more processes to all have access to a particu-
              lar region of memory?
       7.5    In    a  fixed-partitioning  scheme,  what  are  the   advantages  of    using  unequal-size
              partitions?
       7.6    What is the difference between internal and external fragmentation?
       7.7    What are the distinctions among logical, relative, and physical addresses?
       7.8    What is the difference between a page and a frame?
       7.9    What is the difference between a page and a segment?
       Problems
       7.1    In Section 2.3, we listed five objectives of memory management, and in Section 7.1,
              we listed five requirements. Argue that each list encompasses all of the concerns ad-
              dressed in the other.

332  CHAPTER 7 / MEMORY MANAGEMENT
     7.2   Consider a fixed partitioning scheme with equal-size partitions of 216 bytes and a total
           main memory size of 224 bytes. A process table is maintained that includes a pointer
           to a partition for each resident process. How many bits are required for the pointer?
     7.3   Consider a dynamic partitioning scheme. Show that, on average, the memory contains
           half as many holes as segments.
     7.4   To implement the various placement algorithms discussed for dynamic partitioning
           (Section 7.2), a list of the free blocks of memory must be kept. For each of the three
           methods discussed (best-fit, first-fit, next-fit), what is the average length of the search?
     7.5   Another placement algorithm for dynamic partitioning is referred to as worst-fit. In
           this case, the largest free block of memory is used for bringing in a process.
           a.  Discuss the pros and cons of this method compared to first-, next-, and best-fit.
           b.  What is the average length of the search for worst-fit?
     7.6   This diagram shows an example of memory configuration under dynamic partition-
           ing, after a number of placement and swapping-out operations have been carried out.
           Addresses go from left to right; gray areas indicate blocks occupied by processes;
           white areas indicate free memory blocks. The last process placed is 2-Mbyte and is
           marked with an X. Only one process was swapped out after that.
                   1
               4M  M  X                   5M          8M  2M            4M           3M
           a.  What was the maximum size of the swapped out process?
           b.  What was the size of the free block just before it was partitioned by X?
           c.  A new 3-Mbyte allocation request must be satisfied next. Indicate the intervals of
               memory where a partition will be created for the new process under the following
               four placement algorithms: best-fit, first-fit, next-fit, worst-fit. For each algorithm,
               draw a horizontal segment under the memory strip and label it clearly.
     7.7   A 1-Mbyte block of memory is allocated using the buddy system.
           a.  Show the results of the following sequence in a figure similar to Figure 7.6:Request 70;
               Request 35; Request 80; Return A; Request 60; Return B; Return D; Return C.
           b.  Show the binary tree representation following Return B.
     7.8   Consider a buddy system in which a particular block under the current allocation has
           an address of 011011110000.
           a.  If the block is of size 4, what is the binary address of its buddy?
           b.  If the block is of size 16, what is the binary address of its buddy?
     7.9   Let buddyk(x)  address of the buddy of the block of size 2k whose address is x. Write
           a general expression for buddyk(x).
     7.10  The Fibonacci sequence is defined as follows:
                      F0  0,                  F1  1,  Fn+2  Fn+1 + Fn,   n0
           a.  Could this sequence be used to establish a buddy system?
           b.  What would be the advantage of this system over the binary buddy system
               described in this chapter?
     7.11  During the course of execution of a program, the processor will increment the contents
           of the instruction register (program counter) by one word after each instruction fetch,
           but will alter the contents of that register if it encounters a branch or call instruction
           that causes execution to continue elsewhere in the program. Now consider Figure 7.8.
           There are two alternatives with respect to instruction addresses:
           ·   Maintain a relative address in the instruction register and do the dynamic address
               translation using the instruction register as input. When a successful branch or call
               is encountered, the relative address generated by that branch or call is loaded into
               the instruction register.
           ·   Maintain an absolute address in the instruction register. When a successful branch
               or call is encountered, dynamic address translation is employed, with the results
               stored in the instruction register.
           Which approach is preferable?

                  7.8 / KEY TERMS, REVIEW QUESTIONS, AND PROBLEMS                        333
7.12  Consider a simple paging system with the following parameters: 232 bytes of physical
      memory; page size of 210 bytes; 216 pages of logical address space.
      a.  How many bits are in a logical address?
      b.  How many bytes in a frame?
      c.  How many bits in the physical address specify the frame?
      d.  How many entries in the page table?
      e.  How many bits in each page table entry? Assume each page table entry contains a
          valid/invalid bit.
7.13  Write the binary translation of the logical address 0001010010111010 under the
      following hypothetical memory management schemes, and explain your answer:
      a.  a paging system with a 256-address page size, using a page table in which the frame
          number happens to be four times smaller than the page number
      b.  a segmentation system with a 1K-address maximum segment size, using a segment
          table in which bases happen to be regularly placed at real addresses: 22  4,096 
          segment #
7.14  Consider a simple segmentation system that has the following segment table:
                                  Starting Address   Length (bytes)
                                            660                 248
                                        1,752                   422
                                            222                 198
                                            996                 604
      For each of the following logical addresses, determine the physical address or indicate
      if a segment fault occurs:
      a.  0, 198
      b.  2, 156
      c.  1, 530
      d.  3, 444
      e.  0, 222
7.15  Consider a memory in which contiguous segments S1, S2,...,Sn are placed in their
      order of creation from one end of the store to the other, as suggested by the following
      figure:
          S1            S2                                      Sn           Hole
      When segment Sn+1 is being created, it is placed immediately after segment Sn even
      though some of the segments S1, S2,...,Sn may already have been deleted. When the
      boundary between segments (in use or deleted) and the hole reaches the other end of
      the memory, the segments in use are compacted.
      a.  Show    that  the   fraction  of  time  F  spent  on  compacting   obeys  the  following
          inequality:
                                  FÚ        1-f      where      k=   t   -1
                                        1 + kf                       2s
          where
               s  average length of a segment, in words
               t  average lifetime of a segment, in memory references
               f  fraction of the memory that is unused under equilibrium conditions
          Hint: Find the average speed at which the boundary crosses the memory and
          assume that the copying of a single word requires at least two memory references.
      b.  Find F for f  0.2, t  1,000, and s  50.

334  CHAPTER 7 / MEMORY MANAGEMENT
     APPENDIX 7A LOADING AND LINKING
     The first step in the creation of an active process is to load a program into main
     memory and create a process image (Figure 7.15). Figure 7.16 depicts a scenario typ-
     ical for most systems.The application consists of a number of compiled or assembled
     modules in object-code form. These are linked to resolve any references between
     modules. At the same time, references to library routines are resolved. The library
     routines themselves may be incorporated into the program or referenced as shared
     code that must be supplied by the operating system at run time. In this appendix, we
     summarize the key features of linkers and loaders. For clarity in the presentation,
     we begin with a description of the loading task when a single program module is
     involved; no linking is required.
     Loading
     In Figure 7.16, the loader places the load module in main memory starting at loca-
     tion x. In loading the program, the addressing requirement illustrated in Figure 7.1
     must be satisfied. In general, three approaches can be taken:
     ·  Absolute loading
     ·  Relocatable loading
     ·  Dynamic run-time loading
     ABSOLUTE  LOADING    An absolute loader requires that a given load module
     always be loaded into the same location in main memory. Thus, in the load module
     presented to the loader, all address references must be to specific, or absolute, main
                                                       Process control block
                        Program                        Program
                          Data                         Data
               Object code
                                                       Stack
                                                       Process image in
                                                       main memory
               Figure 7.15       The Loading Function

                      APPENDIX                     7A  / LOADING  AND  LINKING         335
Static
library               Dynamic
                      library                                                            x
Module 1
                                             Load      Loader
             Linker   module
Module 2
                      Dynamic                          Run-time
                      library                          linker/
                                                       loader
Module n
                                                                       Main memory
Figure 7.16  A Linking and Loading Scenario
memory addresses. For example, if x in Figure 7.16 is location 1024, then the first
word in a load module destined for that region of memory has address 1024.
             The assignment of specific address values to memory references within a
program can be done either by the programmer or at compile or assembly time
(Table 7.3a). There are several disadvantages to the former approach. First, every
programmer would have to know the intended assignment strategy for placing mod-
ules into main memory. Second, if any modifications are made to the program that
involve insertions or deletions in the body of the module, then all of the addresses
will have to be altered. Accordingly, it is preferable to allow memory references
within programs to be expressed symbolically and then resolve those symbolic refer-
ences at the time of compilation or assembly. This is illustrated in Figure 7.17. Every
reference to an instruction or item of data is initially represented by a symbol. In
preparing the module for input to an absolute loader, the assembler or compiler will
convert all of these references to specific addresses (in this example, for a module to
be loaded starting at location 1024), as shown in Figure 7.17b.
RELOCATABLE  LOADING  The disadvantage of binding memory references to
specific addresses prior to loading is that the resulting load module can only be
placed in one region of main memory. However, when many programs share main
memory, it may not be desirable to decide ahead of time into which region of memory
a particular module should be loaded. It is better to make that decision at load time.
Thus we need a load module that can be located anywhere in main memory.
             To satisfy this new requirement, the assembler or compiler produces not
actual main memory addresses (absolute addresses) but addresses that are relative
to some known point, such as the start of the program. This technique is illustrated
in Figure 7.17c. The start of the load module is assigned the relative address 0, and

336  CHAPTER 7 / MEMORY MANAGEMENT
Table 7.3  Address Binding
                                               (a) Loader
           Binding Time                                                Function
Programming time            All actual physical addresses are directly specified by the programmer in the
                            program itself.
Compile or assembly time    The program contains symbolic address references, and these are converted to
                            actual physical addresses by the compiler or assembler.
Load time                   The compiler or assembler produces relative addresses. The loader translates
                            these to absolute addresses at the time of program loading.
Run time                    The loaded program retains relative addresses. These are converted dynamically
                            to absolute addresses by processor hardware.
                                               (b) Linker
     Linkage Time                                                      Function
Programming time            No external program or data references are allowed. The programmer must
                            place into the program the source code for all subprograms that are referenced.
Compile or assembly time    The assembler must fetch the source code of every subroutine that is referenced
                            and assemble them as a unit.
Load module creation        All object modules have been assembled using relative addresses. These
                            modules are linked together and all references are restated relative to the origin
                            of the final load module.
Load time                   External references are not resolved until the load module is to be loaded into
                            main memory. At that time, referenced dynamic link modules are appended to
                            the load module, and the entire package is loaded into main or virtual memory.
Run time                    External references are not resolved until the external call is executed by the
                            processor. At that time, the process is interrupted and the desired module is
                            linked to the calling program.
Symbolic                  Absolute                          Relative                     Main memory
addresses                 addresses                         addresses                    addresses
           PROGRAM          1024     PROGRAM                0          PROGRAM           x          PROGRAM
     JUMP X                         JUMP 1424                         JUMP 400                      JUMP 400
X                           1424                            400                       400 + x
     LOAD Y                         LOAD 2224                         LOAD 1200                     LOAD 1200
           DATA                      DATA                              DATA                           DATA
Y                           2224                            1200                      1200 + x
     (a) Object module      (b) Absolute load module        (c) Relative load module     (d) Relative load module
                                                                                         loaded into main memory
                                                                                         starting at location x
Figure 7.17      Absolute and Relocatable Load Modules

                                    APPENDIX 7A / LOADING AND LINKING                  337
all other memory references within the module are expressed relative to the begin-
ning of the module.
With all memory references expressed in relative format, it becomes a simple
task for the loader to place the module in the desired location. If the module is to be
loaded beginning at location x, then the loader must simply add x to each memory
reference as it loads the module into memory. To assist in this task, the load module
must include information that tells the loader where the address references are and
how they are to be interpreted (usually relative to the program origin, but also pos-
sibly relative to some other point in the program, such as the current location). This
set of information is prepared by the compiler or assembler and is usually referred
to as the relocation dictionary.
DYNAMIC  RUN-TIME    LOADING        Relocatable loaders are common and provide
obvious benefits relative to absolute loaders. However, in a multiprogramming
environment, even one that does not depend on virtual memory, the relocatable
loading scheme is inadequate. We have referred to the need to swap process images
in and out of main memory to maximize the utilization of the processor. To maximize
main memory utilization, we would like to be able to swap the process image back into
different locations at different times. Thus, a program, once loaded, may be swapped
out to disk and then swapped back in at a different location. This would be impossible
if memory references had been bound to absolute addresses at the initial load time.
The alternative is to defer the calculation of an absolute address until it is
actually needed at run time. For this purpose, the load module is loaded into main
memory with all memory references in relative form (Figure 7.17c). It is not until
an instruction is actually executed that the absolute address is calculated. To assure
that this function does not degrade performance, it must be done by special proces-
sor hardware rather than software. This hardware is described in Section 7.2.
Dynamic address calculation provides complete flexibility. A program can be
loaded into any region of main memory. Subsequently, the execution of the pro-
gram can be interrupted and the program can be swapped out of main memory, to
be later swapped back in at a different location.
Linking
The function of a linker is to take as input a collection of object modules and pro-
duce a load module, consisting of an integrated set of program and data modules, to
be passed to the loader. In each object module, there may be address references to
locations in other modules. Each such reference can only be expressed symbolically
in an unlinked object module. The linker creates a single load module that is the
contiguous joining of all of the object modules. Each intramodule reference must be
changed from a symbolic address to a reference to a location within the overall load
module. For example, module A in Figure 7.18a contains a procedure invocation
of module B. When these modules are combined in the load module, this symbolic
reference to module B is changed to a specific reference to the location of the entry
point of B within the load module.
LINKAGE  EDITOR      The nature of this address linkage will depend on the type
of load module to be created and when the linkage occurs (Table 7.3b). If, as is

338  CHAPTER 7 / MEMORY MANAGEMENT
                                                    Relative
                                                    addresses
                     Module A                       0                  Module A
     External        CALL B;                                           JSR "L"
     reference to                        Length L
     module B
                     Return                         L1                 Return
                                                    L                  Module B
                     Module B
                                                                       JSR "L  M"
                     CALL C;
                                         Length M
                                                    LM1                Return
                     Return                         LM                 Module C
                     Module C
                                         Length  N  LMN1               Return
                     Return                                            (b) Load module
                     (a) Object modules
     Figure    7.18  The Linking Function
     usually the case, a relocatable load module is desired, then linkage is usually done
     in the following fashion. Each compiled or assembled object module is created with
     references relative to the beginning of the object module. All of these modules are
     put together into a single relocatable load module with all references relative to the
     origin of the load module. This module can be used as input for relocatable loading
     or dynamic run-time loading.
     A linker that produces a relocatable load module is often referred to as a link-
     age editor. Figure 7.18 illustrates the linkage editor function.
     DYNAMIC LINKER  As with loading, it is possible to defer some linkage functions.
     The term dynamic linking is used to refer to the practice of deferring the linkage of
     some external modules until after the load module has been created. Thus, the load
     module contains unresolved references to other programs. These references can be
     resolved either at load time or run time.
     For load-time dynamic linking (involving upper dynamic library in Figure 7.16),
     the following steps occur. The load module (application module) to be loaded is
     read into memory. Any reference to an external module (target module) causes the
     loader to find the target module, load it, and alter the reference to a relative address
     in memory from the beginning of the application module. There are several advan-
     tages to this approach over what might be called static linking:

                            APPENDIX 7A / LOADING AND LINKING                          339
·  It becomes easier to incorporate changed or upgraded versions of the target
   module, which may be an operating system utility or some other general-
   purpose routine. With static linking, a change to such a supporting module
   would require the relinking of the entire application module. Not only is this
   inefficient, but it may be impossible in some circumstances. For example, in
   the personal computer field, most commercial software is released in load
   module form; source and object versions are not released.
·  Having target code in a dynamic link file paves the way for automatic code
   sharing. The operating system can recognize that more than one application is
   using the same target code because it loaded and linked that code. It can use
   that information to load a single copy of the target code and link it to both
   applications, rather than having to load one copy for each application.
·  It becomes easier for independent software developers to extend the function-
   ality of a widely used operating system such as Linux. A developer can come
   up with a new function that may be useful to a variety of applications and
   package it as a dynamic link module.
   With  run-time  dynamic  linking      (involving     lower        dynamic  library      in
Figure 7.16), some of the linking is postponed until execution time. External refer-
ences to target modules remain in the loaded program. When a call is made to the
absent module, the operating system locates the module, loads it, and links it to the
calling module. Such modules are typically shareable. In the Windows environment,
these are call dynamic-link libraries (DLLs). Thus, if one process is already making
use of a dynamically-linked shared module, then that module is in main memory
and a new process can simply link to the already-loaded module.
   The use of DLLs can lead to a problem commonly referred to as DLL hell.
DLL hell occurs if two or more processes are sharing a DLL module but expect dif-
ferent versions of the module. For example, an application or system function might
be reinstalled and bring in with it an older version of a DLL file.
   We have seen that dynamic loading allows an entire load module to be moved
around; however, the structure of the module is static, being unchanged throughout
the execution of the process and from one execution to the next. However, in some
cases, it is not possible to determine prior to execution which object modules will
be required. This situation is typified by transaction-processing applications, such as
an airline reservation system or a banking application. The nature of the transaction
dictates which program modules are required, and they are loaded as appropriate
and linked with the main program. The advantage of the use of such a dynamic
linker is that it is not necessary to allocate memory for program units unless those
units are referenced. This capability is used in support of segmentation systems.
   One additional refinement is possible: An application need not know the
names of all the modules or entry points that may be called. For example, a charting
program may be written to work with a variety of plotters, each of which is driven
by a different driver package. The application can learn the name of the plotter that
is currently installed on the system from another process or by looking it up in a
configuration file. This allows the user of the application to install a new plotter that
did not exist at the time the application was written.

                                           CHAPTER
VIRTUAL MEMORY
     8.1  Hardware and Control Structures
          Locality and Virtual Memory
          Paging
          Segmentation
          Combined Paging and Segmentation
          Protection and Sharing
     8.2  Operating System Software
          Fetch Policy
          Placement Policy
          Replacement Policy
          Resident Set Management
          Cleaning Policy
          Load Control
     8.3  UNIX and Solaris Memory Management
          Paging System
          Kernel Memory Allocator
     8.4  Linux Memory Management
          Linux Virtual Memory
          Kernel Memory Allocation
     8.5  Windows Memory Management
          Windows Virtual Address Map
          Windows Paging
     8.6  Summary
     8.7  Recommended Reading and Web Sites
     8.8  Key Terms, Review Questions, and Problems
340                                                  340
