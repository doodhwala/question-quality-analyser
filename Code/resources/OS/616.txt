TinyOS
594  CHAPTER 13 / EMBEDDED OPERATING SYSTEMS
      system with preemptive scheduling, in which a higher-priority thread attempts to
      acquire a spinlock already held by a lower priority thread. The lower-priority thread
      cannot execute so as to finish its work and release the spinlock, because the higher-
      priority thread preempts it. The higher-priority thread can execute but is stuck
      checking the spinlock. As a result, the higher-priority thread will just loop forever
      and the lower-priority thread will never get another chance to run and release the
      spinlock. On an SMP system, the current owner of a spinlock can continue running
      on a different processor.
13.4  TINYOS
      The eCos system provides a more streamlined approach for an embedded OS than
      one based on a commercial general-purpose OS, such as an embedded version of
      Linux. Thus, eCos and similar systems are better suited for small embedded systems
      with tight requirements on memory, processing time, real-time response, power
      consumption, and so on. TinyOS takes the process of streamlining to a much further
      point, resulting in a very minimal OS for embedded systems. The core OS requires
      400 bytes of code and data memory, combined.
      TinyOS represents a significant departure from other embedded operating
      systems. One striking difference is that TinyOS is not a real-time OS. The reason for
      this is the expected workload, which is in the context of a wireless sensor network,
      as described in the next subsection. Because of power consumption, these devices
      are off most of the time. Applications tend to be simple, with processor contention
      not much of an issue.
      Additionally, in TinyOS there is no kernel, as there is no memory protection
      and it is a component-based OS; there are no processes; the OS itself does not have
      a memory allocation system (although some rarely used components do introduce
      one); interrupt and exception handling is dependent on the peripheral; and it is
      completely nonblocking, so there are few explicit synchronization primitives.
      TinyOS has become a popular approach to implementing wireless sensor
      network software. Currently, over 500 organizations are developing and contributing
      to an open source standard for Tiny OS.
      Wireless Sensor Networks
      TinyOS was developed primarily for use with networks of small wireless sensors. A
      number of trends have enabled the development of extremely compact, low-power
      sensors. The well-known Moore's law continues to drive down the size of memory
      and processing logic elements. Smaller size in turn reduces power consumption. Low
      power and small size trends are also evident in wireless communications hardware,
      micro-electromechanical sensors (MEMS), and transducers. As a result, it is possible
      to develop an entire sensor complete with logic in a cubic millimeter. The application
      and system software must be compact enough that sensing, communication, and com-
      putation capabilities can be incorporated into a complete, but tiny, architecture.
      Low­cost, small­size, low-power-consuming wireless sensors can be used in a
      host of applications [ROME04]. Figure 13.10 shows a typical configuration. A base

                                                                    13.4 / TINYOS          595
                                                                    Wired link
               Internet
                                                                    Wireless link
                          Sensor                            Sensor
                                                            and relay
                 Base
        Host PC  station             Sensor
                          and relay                                                Sensor
                                                            Sensor
                                                            and relay
                          Sensor
                          and relay
                                                  Sensor
Figure  13.10    Typical Wireless Sensor Network  Topology
station connects the sensor network to a host PC and passes on sensor data from the
network to the host PC, which can do data analysis and/or transmit the data over
a corporate network or Internet to an analysis server. Individual sensors collect
data and transmit these to the base station, either directly or through sensors that
act as data relays. Routing functionality is needed to determine how to relay the
data through the sensor network to the base station. [BUON01] points out that, in
many applications, the user will want to be able to quickly deploy a large number of
low-cost devices without having to configure or manage them. This means that they
must be capable of assembling themselves into an ad hoc network. The mobility of
individual sensors and the presence of RF interference means that the network will
have to be capable of reconfiguring itself in a matter of seconds.
TinyOS Goals
With the tiny, distributed sensor application in mind, a group of researchers from
UC Berkeley [HILL00] set the following goals for TinyOS:
·  Allow high concurrency: In a typical wireless sensor network application, the
   devices are concurrency intensive. Several different flows of data must be kept
   moving simultaneously. While sensor data are input in a steady stream, pro-
   cessed results must be transmitted in a steady stream. In addition, external
   controls from remote sensors or base stations must be managed.
·  Operate with limited resources: The target platform for TinyOS will have lim-
   ited memory and computational resources and run on batteries or solar power.

596  CHAPTER 13 / EMBEDDED OPERATING SYSTEMS
        A single platform may offer only kilobytes of program memory and hundreds
        of bytes of RAM. The software must make efficient use of the available proc-
        essor and memory resources while enabling low-power communication.
     ·  Adapt to hardware evolution: Most hardware is in constant evolution; applica-
        tions and most system services must be portable across hardware generations.
        Thus, it should be possible to upgrade the hardware with little or no software
        change, if the functionality is the same.
     ·  Support a wide range of applications: Applications exhibit a wide range of
        requirements in terms of lifetime, communication, sensing, and so on. A modu-
        lar, general-purpose embedded OS is desired so that a standardized approach
        leads to economies of scale in developing applications and support software.
     ·  Support a diverse set of platforms: As with the preceding point, a general-
        purpose embedded OS is desirable.
     ·  Be robust: Once deployed, a sensor network must run unattended for months
        or years. Ideally, there should be redundancy both within a single system and
        across the network of sensors. However, both types of redundancy require
        additional resources. One software characteristic that can improve robustness
        is to use highly modular, standardized software components.
        It is worth elaborating on the concurrency requirement. In a typical appli-
     cation, there will be dozens, hundreds, or even thousands of sensors networked
     together. Usually, little buffering is done, because of latency issues. For example,
     if you are sampling every 5 minutes and want to buffer four samples before send-
     ing, the average latency is 10 minutes. Thus, information is typically captured, proc-
     essed, and streamed onto the network in a continuous flow. Further, if the sensor
     sampling produces a significant amount of data, the limited memory space available
     limits the number of samples that could be buffered. Even so, in some applications,
     each of the flows may involve a large number of low-level events interleaved with
     higher-level processing. Some of the high-level processing will extend over multiple
     real-time events. Further, sensors in a network, because of the low power of trans-
     mission available, typically operate over a short physical range. Thus data from outly-
     ing sensors must be relayed to one or more base stations by intermediate nodes.
     TinyOS Components
     An embedded software system built using TinyOS consists of a set of small modules,
     called components, each of which performs a simple task or set of tasks and which
     interface with each other and with hardware in limited and well-defined ways. The
     only other software module is the scheduler, discussed subsequently. In fact, because
     there is no kernel, there is no actual OS. But we can take the following view. The appli-
     cation area of interest is the wireless sensor network (WSN). To meet the demand-
     ing software requirements of this application, a rigid, simplified software architec-
     ture is dictated, consisting of components. The TinyOS development community has
     implemented a number of open-source components that provide the basic functions
     needed for the WSN application. Examples of such standardized components include
     single-hop networking, ad-hoc routing, power management, timers, and nonvolatile
     storage control. For specific configurations and applications, users build additional

                                                                   13.4 / TINYOS     597
special-purpose components and link and load all of the components needed for the
user's application. TinyOS, then, consists of a suite of standardized components. Some
but not all of these components are used, together with application-specific user-written
components, for any given implementation. The OS for that implementation is simply
the set of standardized components from the TinyOS suite.
All components in a TinyOS configuration have the same structure, an exam-
ple of which is shown in Figure 13.11a. The shaded box in the diagram indicates
the component, which is treated as an object that can only be accessed by defined
interfaces, indicated by white boxes. A component may be hardware or software.
Software components are implemented in nesC, which is an extension of C with
two distinguishing features: a programming model where components interact via
interfaces, and an event-based concurrency model with run-to-completion task and
interrupt handlers, explained subsequently.
The architecture consists of a layered arrangement of components. Each com-
ponent can link to only two other components, one below it in the hierarchy and one
above it. A component issues commands to its lower-level component and receives
event signals from it. Similarly, the component accepts commands from its upper-level
                                    module         TimerM    {
StdControl            Timer                  provides  {
                                                  interface     StdControl;
              TimerM                              interface     Timer;
              Clock                          }
                                             uses   interface      Clock   as  Clk;
                                    }        ...
(a) TimerM component
StdControl                   Timer
                                    configuration            TimerC     {
                                             provides  {
                                                  interface     StdControl;
                                                  interface     Timer;
                                             }
StdControl            Timer         }
              TimerM                implementation              {
              Clock                          components    TimerM,      HWClock;
                                             StdControl    =    TimerM.StdControl;
                                             Timer  =  TimerM.Timer;
                                             TimerM.Clk    ->      HWClock.Clock;
                                    }
              Clock
              HWClock
(b) TimerC configuration
Figure 13.11  Example Component and Configuration

598  CHAPTER 13 / EMBEDDED OPERATING SYSTEMS
     component and issues event signals to it. At the bottom of the hierarchy are hardware
     components and at the top of the hierarchy are application components, which may
     not be part of the standardized TinyOS suite but which must conform to the TinyOS
     component structure.
     A software component implements one or more tasks. Each task in a compo-
     nent is similar to a thread in an ordinary OS, with certain limitations. Within a com-
     ponent, tasks are atomic: Once a task has started, it runs to completion. It cannot
     be preempted by another task in the same component, and there is no time slicing.
     However, a task can be preempted by an event. A task cannot block or spin wait.
     These limitations greatly simplify the scheduling and management of tasks within
     a component. There is only a single stack, assigned to the currently running task.
     Tasks can perform computations, call lower-level components (commands) and sig-
     nal higher-level events, and schedule other tasks.
     Commands are nonblocking requests. That is, a task that issues a command
     does not block or spin wait for a reply from the lower-level component. A com-
     mand is typically a request for the lower-level component to perform some service,
     such as initiating a sensor reading. The effect on the component that receives the
     command is specific to the command given and the task required to satisfy the com-
     mand. Generally, when a command is received, a task is scheduled for later execu-
     tion, because a command cannot preempt the currently running task. The command
     returns immediately to the calling component; at a later time, an event will signal
     completion to the calling component. Thus, a command does not cause a preemp-
     tion in the called component and does not cause blocking in the calling component.
     Events in TinyOS may be tied either directly or indirectly to hardware events.
     The lowest­level software components interface directly to hardware interrupts,
     which may be external interrupts, timer events, or counter events. An event handler in
     a lowest-level component may handle the interrupt itself or may propagate event mes-
     sages up through the component hierarchy. A command can post a task that will signal
     an event in the future. In this case, there is no tie of any kind to a hardware event.
     A task can be viewed as having three phases. A caller posts a command to a
     module. The module then runs the requested task. The module then notifies the
     caller, via an event, that the task is complete.
     The component depicted in Figure 13.11a, TimerM, is part of the TinyOS timer
     service. This component provides the StdControl and Timer interface and uses a
     Clock interface. Providers implement commands (i.e., the logic in this component).
     Users implement events (i.e., external to the component). Many TinyOS components
     use the StdControl interface to be initialized, started, or stopped. TimerM provides
     the logic that maps from a hardware clock into TinyOS's timer abstraction. The timer
     abstraction can be used for counting down a given time interval. Figure 13.11a also
     shows the formal specification of the TimerM interfaces.
     The interfaces associated with TimerM are specified as follows:
     interface  StdControl           {
        command            result_t     init();
        command            result_t     start();
        command            result_t     stop();
     }

                                                      13.4 / TINYOS                        599
interface  Timer         {
   command               result_t  start(char  type,  uint32_t  interval);
   command               result_t  stop();
   event   result_t         fired();
}
interface  Clock         {
   command               result_t  setRate(char  interval,  char                   scale);
   event   result_t         fire();
}
Components are organized into configurations by "wiring" them together at
their interfaces and equating the interfaces of the configuration with some of the inter-
faces of the components. A simple example is shown in Figure 13.11b. The uppercase
C stands for Component. It is used to distinguish between an interface (e.g., Timer)
and a component that provides the interface (e.g., TimerC).The uppercase M stands
for Module. This naming convention is used when a single logical component has both
a configuration and a module. The TimerC component, providing the Timer interface,
is a configuration that links its implementation (TimerM) to Clock and LED provid-
ers. Otherwise, any user of TimerC would have to explicitly wire its subcomponents.
TinyOS Scheduler
The TinyOS scheduler operates across all components. Virtually all embedded sys-
tems using TinyOS will be uniprocessor systems, so that only one task among all
the tasks in all the components may execute at a time. The scheduler is a separate
component. It is the one portion of TinyOS that must be present in any system.
The default scheduler in TinyOS is a simple FIFO (first-in-first-out) queue. A task
is posted to the scheduler (place in the queue) either as a result of an event, which trig-
gers the posting, or as a result of a specific request by a running task to schedule another
task. The scheduler is power aware. This means that the scheduler puts the processor to
sleep when there are no tasks in the queue. The peripherals remain operating, so that
one of them can wake up the system by means of a hardware event signaled to a lowest-
level component. Once the queue is empty, another task can be scheduled only as a
result of a direct hardware event. This behavior enables efficient battery usage.
The scheduler has gone through two generations. In TinyOS 1.x, there is a shared
task queue for all tasks, and a component can post a task to the scheduler multiple
times. If the task queue is full, the post operation fails. Experience with networking
stacks showed this to be problematic, as the task might signal completion of a split-
phase operation: If the post fails, the component above might block forever, waiting
for the completion event. In TinyOS 2.x, every task has its own reserved slot in the
task queue, and a task can only be posted once. A post fails if and only if the task has
already been posted. If a component needs to post a task multiple times, it can set
an internal state variable so that when the task executes, it reposts itself. This slight
change in semantics greatly simplifies a lot of component code. Rather than test to
see if a task is posted already before posting it, a component can just post the task.
Components do not have to try to recover from failed posts and retry. The cost is one
byte of state per task.

600  CHAPTER 13 / EMBEDDED OPERATING SYSTEMS
     A user can replace the default scheduler with one that uses a different
     dispatching scheme, such as a priority-based scheme or a deadline scheme. However,
     preemption and time slicing should not be used because of the overhead such systems
     generate. More importantly, they violate the TinyOS concurrency model, which
     assumes tasks do not preempt each other.
     Example Configuration
     Figure 13.12 shows a configuration assembled from software and hardware compo-
     nents. This simplified example, called Surge and described in [GAY03], performs
                                                SurgeM
                                Timer  SendMsg          LEDs           ADC
                   Photo               Timer            Multihop              LEDs
                                       Clock    SendMsg
                                       HWclock          Queuseendd                   ReceiveMsg
                                                                                     GenCeorimcm
                                       (a) Simplified view of the Surge Application
                                                StdControl
                        Main                                   SurgeM
                   StdControl                   ADC     Timer     SndMsg             LEDs
     StdControl    ADC          StdControl      Timer             StdControl         SndMsg       LEDs
     Photo                             TimerC                             Multihop                LEDsC
                                       (b) Top-level surge configuration
     LED  light-emitting diode
     ADC  analog-to-digital converter
     Figure 13.12  Examples TinyOS Application

                                                                13.4 / TINYOS        601
periodic sensor sampling and uses ad-hoc multihop routing over the wireless net-
work to deliver samples to the base station. The upper part of the figure shows the
components of Surge (represented by boxes) and the interfaces by which they are
wired (represented by arrowed lines). The SurgeM component is the application-
level component that orchestrates the operation of the configuration.
Figure 13.12b shows a portion of the configuration for the Surge application.
The following is a simplified excerpt from the SurgeM specification.
module       SurgeM  {
   provides          interface      StdControl;
   uses      interface        ADC;
   uses      interface        Timer;
   uses      interface        SendMsg;
   uses      interface        LEDs;
}
implementation          {
   uint16_t          sensorReading;
   command   result_t         StdControl.init()              {
   return    call          Timer.start(TIMER_REPEAT,            1000);
   }
   event     result_t         Timer.fired()           {
   call      ADC.getData();
   return    SUCCESS;
   }
   event     result_t         ADC.dataReady(uint16_t            data)   {
   sensorReading           =  data;
   ...send   message          with    data  in        it...
   return    SUCCESS;
   }
   ...
}
This example illustrates the strength of the TinyOS approach. The software is
organized as an interconnected set of simple modules, each of which defines one or
a few tasks. Components have simple, standardized interfaces to other components,
be they hardware or software. Thus, components can easily be replaced. Components
can be hardware or software, with a boundary change not visible to the application
programmer.
TinyOS Resource Interface
TinyOS provides a simple but powerful set of conventions for dealing with resources.
Three abstractions for resources are used in TinyOS:
· Dedicated: A resource that a subsystem needs exclusive access to at all times. In
this class of resources, no sharing policy is needed since only a single component

602  CHAPTER 13 / EMBEDDED OPERATING SYSTEMS
              ever requires use of the resource. Examples of dedicated abstractions include
              interrupts and counters.
     ·        Virtualized: Every client of a virtualized resource interacts with it as if it were a
              dedicated resource, with all virtualized instances being multiplexed on top of a
              single underlying resource. The virtualized abstraction may be used when the
              underlying resource need not be protected by mutual exclusion. An example
              is a clock or timer.
     ·        Shared: The shared resource abstraction provides access to a dedicated
              resource through an arbiter component. The arbiter enforces mutual exclusion,
              allowing only one user (called a client) at a time to have access to a resource
              and enabling the client to lock the resource.
              In the remainder of this subsection, we briefly define the shared resource
     facility of TinyOS. The arbiter determines which client has access to the resource
     at which time. While a client holds a resource, it has complete and unfettered con-
     trol. Arbiters assume that clients are cooperative, only acquiring the resource when
     needed and holding on to it no longer than necessary. Clients explicitly release
     resources: There is no way for an arbiter to forcibly reclaim it.
              Figure 13.13 shows a simplified view of the shared resource configuration used to
     provide access to an underlying resource. Associated with each resource to be shared
     is an arbiter component. The arbiter enforces a policy that enables a client to lock
              Resource  Resource        Resource   Resource-specific
                        requested       configure            interfaces
                                                   Resource-specific
                                                             interfaces
                                                   Shared resource
                                                   Arbiter   Resource-specific
                                                   Info                  interfaces
     Resource           Resource        Resource   Arbiter                           Resource-specific
                        requested       configure  info                              interfaces
                        Arbiter                                                      Dedicated resource
Figure 13.13  Shared Resource Configuration

                             13.5 / RECOMMENDED READING AND WEB SITES                       603
      the resource, use it, and then release the resource. The shared resource configuration
      provides the following interfaces to a client:
      ·  Resource: The client issues a request at this interface, requesting access to the
         resource. If the resource is currently locked, the arbiter places the request in a
         queue. When a client is finished with the resource, it issues a release command
         at this interface.
      ·  Resource requested: This is similar to the Resource interface. In this case, the
         client is able to hold on to a resource until the client is notified that someone
         else needs the resource.
      ·  Resource configure: This interface allows a resource to be automatically
         configured just before a client is granted access to it. Components providing
         the ResourceConfigure interface use the interfaces provided by an under-
         lying dedicated resource to configure it into one of its desired modes of
         operation.
      ·  Resource-specific interfaces: Once a client has access to a resource, it uses
         resource-specific interfaces to exchange data and control information with the
         resource.
         In addition to the dedicated resource, the shared resource configuration con-
      sists of two components. The Arbiter accepts requests for access and configuration
      from a client and enforces the lock on the underlying resource. The shared resource
      component mediates data exchange between the client and the underlying resource.
      Arbiter information passed from the arbiter to the shared resource component con-
      trols the access of the client to the underlying resource.
13.5  RECOMMENDED READING AND WEB SITES
      [KOOP96] provides a systematic discussion of the requirements for embedded
      systems. [STAN96] is a useful overview of real-time and embedded systems.
         [MASS03] and [ECOS07] both provide a detailed description of eCos internals.
      [THOM01] provides a brief overview with some code examples from the kernel.
      [LARM05] gives a more detailed description of the eCos configuration process.
         [HILL00] gives an overview and design rationale for TinyOS. [GAY05] is an
      interesting discussion of software design strategies using TinyOS. [BUON01] provides
      a good example of the use of TinyOS in building a network or wireless sensors. Two
      excellent references for the current version of TinyOS are [GAY03] and [LEVI05].
      BUON01  Buonadonna, P. Hill, J. and Culler, D. "Active Message Communication for
         Tiny Networked Sensors." Proceedings, IEEE INFOCOM 2001, April 2001
      ECOS07  eCosCentric Limited, and Red Hat, Inc. eCos Reference Manual, 2007. http://
         www.ecoscentric.com/ecospro/doc/html/ref/ecos-ref.html
      GAY03   Gay, D., et al. "The nesC Language: A Holistic Approach to Networked
         Embedded Systems." Proceedings of the ACM SIGPLAN 2003 Conference on
         Programming Language Design and Implementation, 2003.
